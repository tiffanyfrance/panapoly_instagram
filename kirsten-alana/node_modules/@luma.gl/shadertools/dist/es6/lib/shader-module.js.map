{"version":3,"sources":["../../../src/lib/shader-module.js"],"names":["transpileShader","assert","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","constructor","name","vs","fs","dependencies","getUniforms","deprecations","defines","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","getModuleSource","type","targetGLSLVersion","moduleSource","toUpperCase","opts","uniforms","getDefines","checkDeprecations","shaderSource","log","forEach","def","regex","test","deprecated","old","new","removed","RegExp"],"mappings":"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","sourcesContent":["import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    getUniforms = () => ({}),\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    if (typeof moduleSource !== 'string') {\n      return '';\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    return this.getModuleUniforms(opts, uniforms);\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated && log) {\n          log.deprecated(def.old, def.new)();\n        } else if (log) {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations = []) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n}\n"],"file":"shader-module.js"}