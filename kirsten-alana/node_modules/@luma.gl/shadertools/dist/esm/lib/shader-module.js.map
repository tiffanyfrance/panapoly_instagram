{"version":3,"sources":["../../../src/lib/shader-module.js"],"names":["transpileShader","assert","VERTEX_SHADER","FRAGMENT_SHADER","ShaderModule","name","vs","fs","dependencies","getUniforms","deprecations","defines","vertexShader","fragmentShader","getModuleUniforms","_parseDeprecationDefinitions","type","targetGLSLVersion","moduleSource","toUpperCase","opts","uniforms","shaderSource","log","forEach","def","regex","test","deprecated","old","removed","RegExp"],"mappings":"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","sourcesContent":["import transpileShader from './transpile-shader';\nimport {assert} from '../utils';\n\nconst VERTEX_SHADER = 'vs';\nconst FRAGMENT_SHADER = 'fs';\n\nexport default class ShaderModule {\n  constructor({\n    name,\n    vs,\n    fs,\n    dependencies = [],\n    getUniforms = () => ({}),\n    deprecations = [],\n    defines = {},\n    // DEPRECATED\n    vertexShader,\n    fragmentShader\n  }) {\n    assert(typeof name === 'string');\n    this.name = name;\n    this.vs = vs || vertexShader;\n    this.fs = fs || fragmentShader;\n    this.getModuleUniforms = getUniforms;\n    this.dependencies = dependencies;\n    this.deprecations = this._parseDeprecationDefinitions(deprecations);\n    this.defines = defines;\n  }\n\n  // Extracts the source code chunk for the specified shader type from the named shader module\n  getModuleSource(type, targetGLSLVersion) {\n    let moduleSource;\n    switch (type) {\n      case VERTEX_SHADER:\n        moduleSource = transpileShader(this.vs || '', targetGLSLVersion, true);\n        break;\n      case FRAGMENT_SHADER:\n        moduleSource = transpileShader(this.fs || '', targetGLSLVersion, false);\n        break;\n      default:\n        assert(false);\n    }\n\n    if (typeof moduleSource !== 'string') {\n      return '';\n    }\n\n    return `\\\n#define MODULE_${this.name.toUpperCase()}\n${moduleSource}\\\n// END MODULE_${this.name}\n\n`;\n  }\n\n  getUniforms(opts, uniforms) {\n    return this.getModuleUniforms(opts, uniforms);\n  }\n\n  getDefines() {\n    return this.defines;\n  }\n\n  // Warn about deprecated uniforms or functions\n  checkDeprecations(shaderSource, log) {\n    this.deprecations.forEach(def => {\n      if (def.regex.test(shaderSource)) {\n        if (def.deprecated && log) {\n          log.deprecated(def.old, def.new)();\n        } else if (log) {\n          log.removed(def.old, def.new)();\n        }\n      }\n    });\n  }\n\n  _parseDeprecationDefinitions(deprecations = []) {\n    deprecations.forEach(def => {\n      switch (def.type) {\n        case 'function':\n          def.regex = new RegExp(`\\\\b${def.old}\\\\(`);\n          break;\n        default:\n          def.regex = new RegExp(`${def.type} ${def.old};`);\n      }\n    });\n\n    return deprecations;\n  }\n}\n"],"file":"shader-module.js"}