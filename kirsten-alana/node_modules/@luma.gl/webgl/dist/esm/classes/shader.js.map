{"version":3,"sources":["../../../src/classes/shader.js"],"names":["parseGLSLCompilerError","getShaderName","assertWebGLContext","uid","log","assert","Resource","ERR_SOURCE","Shader","shaderType","gl","props","source","id","getTypeName","initialize","shaderName","_compile","pname","getShaderParameter","handle","getShaderSource","extension","getExtension","getTranslatedShaderSource","shaderSource","compileShader","compileStatus","getParameter","infoLog","getShaderInfoLog","errors","warnings","error","warn","Error","deleteShader","type","getSource","VertexShader","Object","assign","createShader","FragmentShader"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {parseGLSLCompilerError, getShaderName} from '../glsl-utils';\nimport {assertWebGLContext} from '../webgl-utils';\nimport {uid, log, assert} from '../utils';\nimport Resource from './resource';\n\nconst ERR_SOURCE = 'Shader: GLSL source code must be a JavaScript string';\n\n// For now this is an internal class\nexport class Shader extends Resource {\n  static getTypeName(shaderType) {\n    switch (shaderType) {\n      case GL.VERTEX_SHADER:\n        return 'vertex-shader';\n      case GL.FRAGMENT_SHADER:\n        return 'fragment-shader';\n      default:\n        assert(false);\n        return 'unknown';\n    }\n  }\n\n  /* eslint-disable max-statements */\n  constructor(gl, props) {\n    assertWebGLContext(gl);\n\n    // Validate arguments\n    assert(typeof props.source === 'string', ERR_SOURCE);\n\n    // Deduce an id, from shader source, or supplied id, or shader type\n    const id =\n      getShaderName(props.source, null) ||\n      props.id ||\n      uid(`unnamed ${Shader.getTypeName(props.shaderType)}`);\n\n    super(gl, {id});\n\n    this.shaderType = props.shaderType;\n    this.source = props.source;\n\n    this.initialize(props);\n  }\n\n  initialize({source}) {\n    const shaderName = getShaderName(source, null);\n    if (shaderName) {\n      this.id = uid(shaderName);\n    }\n    this._compile(source);\n  }\n\n  // Accessors\n\n  getParameter(pname) {\n    return this.gl.getShaderParameter(this.handle, pname);\n  }\n\n  toString() {\n    return `${Shader.getTypeName(this.shaderType)}:${this.id}`;\n  }\n\n  getName() {\n    return getShaderName(this.source) || 'unnamed-shader';\n  }\n\n  getSource() {\n    return this.gl.getShaderSource(this.handle);\n  }\n\n  // Debug method - Returns translated source if available\n  getTranslatedSource() {\n    const extension = this.gl.getExtension('WEBGL.debug_shaders');\n    return extension\n      ? extension.getTranslatedShaderSource(this.handle)\n      : 'No translated source available. WEBGL.debug_shaders not implemented';\n  }\n\n  // PRIVATE METHODS\n  _compile() {\n    this.gl.shaderSource(this.handle, this.source);\n    this.gl.compileShader(this.handle);\n\n    // TODO - For performance reasons, avoid checking shader compilation errors on production?\n    // TODO - Load log even when no error reported, to catch warnings?\n    // https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings\n    const compileStatus = this.getParameter(GL.COMPILE_STATUS);\n    if (!compileStatus) {\n      const infoLog = this.gl.getShaderInfoLog(this.handle);\n      const {shaderName, errors, warnings} = parseGLSLCompilerError(\n        infoLog,\n        this.source,\n        this.shaderType,\n        this.id\n      );\n      log.error(`GLSL compilation errors in ${shaderName}\\n${errors}`)();\n      log.warn(`GLSL compilation warnings in ${shaderName}\\n${warnings}`)();\n      throw new Error(`GLSL compilation errors in ${shaderName}`);\n    }\n  }\n\n  _deleteHandle() {\n    this.gl.deleteShader(this.handle);\n  }\n\n  _getOptsFromHandle() {\n    return {\n      type: this.getParameter(GL.SHADER_TYPE),\n      source: this.getSource()\n    };\n  }\n}\n\nexport class VertexShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new VertexShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n    super(gl, Object.assign({}, props, {shaderType: GL.VERTEX_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.VERTEX_SHADER);\n  }\n}\n\nexport class FragmentShader extends Shader {\n  constructor(gl, props) {\n    // Signature: new FragmentShader(gl, source)\n    if (typeof props === 'string') {\n      props = {source: props};\n    }\n\n    super(gl, Object.assign({}, props, {shaderType: GL.FRAGMENT_SHADER}));\n  }\n\n  // PRIVATE METHODS\n  _createHandle() {\n    return this.gl.createShader(GL.FRAGMENT_SHADER);\n  }\n}\n"],"file":"shader.js"}