{"version":3,"sources":["../../../src/classes/framebuffer.js"],"names":["Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","isWebGL2","assertWebGL2Context","getKey","log","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","gl","getParameter","MAX_COLOR_ATTACHMENTS","MAX_DRAW_BUFFERS","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","luma","defaultFramebuffer","id","handle","attachments","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","resizeAttachments","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","texture","layer","level","_attachTexture","filter","status","checkFramebufferStatus","Error","_getFrameBufferStatus","value","drawBuffer","error","x","y","invalidateAll","invalidateFramebuffer","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","parameters","constructor","ATTACHMENT_PARAMETERS","values","getAttachmentParameter","attachmentName","getAttachmentParameters","window","open","priority","message","image","maxHeight","defaultAttachments","pixels","format","type","mipmaps","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","drawBuffersWEBGL","length","caps","webgl2","EXT_sRGB","createFramebuffer","deleteFramebuffer","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n    supported =\n      colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported =\n      colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.webgl2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.webgl2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}