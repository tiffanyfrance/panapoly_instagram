{"version":3,"sources":["../../../src/classes/framebuffer.js"],"names":["Resource","Texture2D","Renderbuffer","clear","clearBuffer","copyToDataUrl","getFeatures","isWebGL2","assertWebGL2Context","getKey","log","assert","ERR_MULTIPLE_RENDERTARGETS","Framebuffer","isSupported","gl","colorBufferFloat","colorBufferHalfFloat","supported","getExtension","getDefaultFramebuffer","luma","defaultFramebuffer","id","handle","attachments","MAX_COLOR_ATTACHMENTS","getParameter","MAX_DRAW_BUFFERS","constructor","opts","width","height","readBuffer","drawBuffers","initialize","Object","seal","color","texture","depth","stencil","check","attachment","target","object","Array","isArray","resize","_createDefaultAttachments","update","clearAttachments","checkStatus","resizeAttachments","attach","prevHandle","bindFramebuffer","_setReadBuffer","_setDrawBuffers","undefined","drawingBufferWidth","drawingBufferHeight","attachmentPoint","newAttachments","keys","forEach","key","assign","Number","descriptor","_unattach","_attachRenderbuffer","renderbuffer","layer","level","_attachTexture","filter","status","checkFramebufferStatus","Error","_getFrameBufferStatus","value","drawBuffer","readPixels","error","readPixelsToBuffer","copyToImage","copyToTexture","blit","invalidate","x","y","invalidateAll","invalidateFramebuffer","getAttachmentParameter","pname","_getAttachmentParameterFallback","getFramebufferAttachmentParameter","getAttachmentParameters","parameters","ATTACHMENT_PARAMETERS","values","getParameters","attachmentName","show","window","open","priority","message","image","maxHeight","bind","unbind","defaultAttachments","pixels","format","type","mipmaps","oldAttachment","framebufferRenderbuffer","framebufferTexture2D","bindTexture","framebufferTextureLayer","face","mapIndexToCubeMapFace","ext","drawBuffersWEBGL","length","caps","webgl2","EXT_sRGB","_createHandle","createFramebuffer","_deleteHandle","deleteFramebuffer","_bindHandle","STATUS","FRAMEBUFFER_ATTACHMENT_PARAMETERS"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport {clear, clearBuffer} from './clear';\nimport {copyToDataUrl} from './copy-and-blit.js';\n\nimport {getFeatures} from '../features';\n\nimport {isWebGL2, assertWebGL2Context, getKey} from '../webgl-utils';\n\nimport {log, assert} from '../utils';\n\nconst ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nexport default class Framebuffer extends Resource {\n  static isSupported(\n    gl,\n    {\n      colorBufferFloat, // Whether floating point textures can be rendered and read\n      colorBufferHalfFloat // Whether half float textures can be rendered and read\n    } = {}\n  ) {\n    let supported = true;\n    supported =\n      colorBufferFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n    supported =\n      colorBufferHalfFloat &&\n      gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n    return supported;\n  }\n\n  // Create a Framebuffer wrapper for the default framebuffer (target === null)\n  static getDefaultFramebuffer(gl) {\n    gl.luma = gl.luma || {};\n    gl.luma.defaultFramebuffer =\n      gl.luma.defaultFramebuffer ||\n      new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n    // TODO - can we query for and get a handle to the GL.FRONT renderbuffer?\n    return gl.luma.defaultFramebuffer;\n  }\n\n  get MAX_COLOR_ATTACHMENTS() {\n    return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n  }\n\n  get MAX_DRAW_BUFFERS() {\n    return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n  }\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    // Public members\n    this.width = null;\n    this.height = null;\n    this.attachments = {};\n    this.readBuffer = GL.COLOR_ATTACHMENT0;\n    this.drawBuffers = [GL.COLOR_ATTACHMENT0];\n    this.initialize(opts);\n\n    Object.seal(this);\n  }\n\n  get color() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get texture() {\n    return this.attachments[GL.COLOR_ATTACHMENT0] || null;\n  }\n\n  get depth() {\n    return (\n      this.attachments[GL.DEPTH_ATTACHMENT] || this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] || null\n    );\n  }\n\n  get stencil() {\n    return (\n      this.attachments[GL.STENCIL_ATTACHMENT] ||\n      this.attachments[GL.DEPTH_STENCIL_ATTACHMENT] ||\n      null\n    );\n  }\n\n  initialize({\n    width = 1,\n    height = 1,\n    attachments = null,\n    color = true,\n    depth = true,\n    stencil = false,\n    check = true,\n    readBuffer,\n    drawBuffers\n  }) {\n    assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n\n    // Store actual width and height for diffing\n    this.width = width;\n    this.height = height;\n\n    // Resize any provided attachments - note that resize only resizes if needed\n    // Note: A framebuffer has no separate size, it is defined by its attachments (which must agree)\n    if (attachments) {\n      for (const attachment in attachments) {\n        const target = attachments[attachment];\n        const object = Array.isArray(target) ? target[0] : target;\n        object.resize({width, height});\n      }\n    } else {\n      // Create any requested default attachments\n      attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n    }\n\n    this.update({clearAttachments: true, attachments, readBuffer, drawBuffers});\n\n    // Checks that framebuffer was properly set up, if not, throws an explanatory error\n    if (attachments && check) {\n      this.checkStatus();\n    }\n  }\n\n  update({\n    attachments = {},\n    readBuffer,\n    drawBuffers,\n    clearAttachments = false,\n    resizeAttachments = true\n  }) {\n    this.attach(attachments, {clearAttachments, resizeAttachments});\n\n    const {gl} = this;\n    // Multiple render target support, set read buffer and draw buffers\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    if (readBuffer) {\n      this._setReadBuffer(readBuffer);\n    }\n    if (drawBuffers) {\n      this._setDrawBuffers(drawBuffers);\n    }\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // Attachment resize is expected to be a noop if size is same\n  resize({width, height} = {}) {\n    // for default framebuffer, just update the stored size\n    if (this.handle === null) {\n      assert(width === undefined && height === undefined);\n      this.width = this.gl.drawingBufferWidth;\n      this.height = this.gl.drawingBufferHeight;\n      return this;\n    }\n\n    if (width === undefined) {\n      width = this.gl.drawingBufferWidth;\n    }\n    if (height === undefined) {\n      height = this.gl.drawingBufferHeight;\n    }\n\n    if (width !== this.width && height !== this.height) {\n      log.log(2, `Resizing framebuffer ${this.id} to ${width}x${height}`)();\n    }\n    for (const attachmentPoint in this.attachments) {\n      this.attachments[attachmentPoint].resize({width, height});\n    }\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  // Attach from a map of attachments\n  attach(attachments, {clearAttachments = false, resizeAttachments = true} = {}) {\n    const newAttachments = {};\n\n    // Any current attachments need to be removed, add null values to map\n    if (clearAttachments) {\n      Object.keys(this.attachments).forEach(key => {\n        newAttachments[key] = null;\n      });\n    }\n\n    // Overlay the new attachments\n    Object.assign(newAttachments, attachments);\n\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    // Walk the attachments\n    for (const key in newAttachments) {\n      // Ensure key is not undefined\n      assert(key !== undefined, 'Misspelled framebuffer binding point?');\n\n      const attachment = Number(key);\n\n      const descriptor = newAttachments[attachment];\n      let object = descriptor;\n      if (!object) {\n        this._unattach(attachment);\n      } else if (object instanceof Renderbuffer) {\n        this._attachRenderbuffer({attachment, renderbuffer: object});\n      } else if (Array.isArray(descriptor)) {\n        const [texture, layer = 0, level = 0] = descriptor;\n        object = texture;\n        this._attachTexture({attachment, texture, layer, level});\n      } else {\n        this._attachTexture({attachment, texture: object, layer: 0, level: 0});\n      }\n\n      // Resize objects\n      if (resizeAttachments && object) {\n        object.resize({width: this.width, height: this.height});\n      }\n    }\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    // Assign to attachments and remove any nulls to get a clean attachment map\n    Object.assign(this.attachments, attachments);\n    Object.keys(this.attachments)\n      .filter(key => !this.attachments[key])\n      .forEach(key => {\n        delete this.attachments[key];\n      });\n  }\n\n  checkStatus() {\n    const {gl} = this;\n    const prevHandle = gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n    const status = gl.checkFramebufferStatus(GL.FRAMEBUFFER);\n    gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n    if (status !== gl.FRAMEBUFFER_COMPLETE) {\n      throw new Error(_getFrameBufferStatus(status));\n    }\n    return this;\n  }\n\n  clear({color, depth, stencil, drawBuffers = []} = {}) {\n    // Bind framebuffer and delegate to global clear functions\n    const prevHandle = this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n\n    if (color || depth || stencil) {\n      clear(this.gl, {color, depth, stencil});\n    }\n\n    drawBuffers.forEach((value, drawBuffer) => {\n      clearBuffer({drawBuffer, value});\n    });\n\n    this.gl.bindFramebuffer(GL.FRAMEBUFFER, prevHandle || null);\n\n    return this;\n  }\n\n  // NOTE: Slow requires roundtrip to GPU\n  // App can provide pixelArray or have it auto allocated by this method\n  // @returns {Uint8Array|Uint16Array|FloatArray} - pixel array,\n  //  newly allocated by this method unless provided by app.\n  readPixels(opts = {}) {\n    log.error(\n      'Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads data into provided buffer object asynchronously\n  // This function doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.\n  readPixelsToBuffer(opts = {}) {\n    log.error(\n      'Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels as a dataUrl\n  copyToDataUrl(opts = {}) {\n    log.error(\n      'Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)'\n    )();\n    return null;\n  }\n\n  // Reads pixels into an HTML Image\n  copyToImage(opts = {}) {\n    log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n    return null;\n  }\n\n  // copyToFramebuffer({width, height}) {\n  //   const scaleX = width / this.width;\n  //   const scaleY = height / this.height;\n  //   const scale = Math.min(scaleX, scaleY);\n  //   width = width * scale;\n  //   height = height * scale;\n  //   const scaledFramebuffer = new Framebuffer(this.gl, {width, height});\n  //   this.blit();\n  // }\n\n  // Copy a rectangle from a framebuffer attachment into a texture (at an offset)\n  // NOTE: assumes texture has enough storage allocated\n  // eslint-disable-next-line complexity\n  copyToTexture(opts = {}) {\n    log.error(\n      'Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  // WEBGL2 INTERFACE\n\n  // Copies a rectangle of pixels between framebuffers\n  // eslint-disable-next-line complexity\n  blit(opts = {}) {\n    log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n    return null;\n  }\n\n  // signals to the GL that it need not preserve all pixels of a specified region of the framebuffer\n  invalidate({attachments = [], x = 0, y = 0, width, height}) {\n    const {gl} = this;\n    assertWebGL2Context(gl);\n    const prevHandle = gl.bindFramebuffer(GL.READ_FRAMEBUFFER, this.handle);\n    const invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n    if (invalidateAll) {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments);\n    } else {\n      gl.invalidateFramebuffer(GL.READ_FRAMEBUFFER, attachments, x, y, width, height);\n    }\n    gl.bindFramebuffer(GL.READ_FRAMEBUFFER, prevHandle);\n    return this;\n  }\n\n  // Return the value for `pname` of the specified attachment.\n  // The type returned is the type of the requested pname\n  getAttachmentParameter(attachment, pname, keys) {\n    let value = this._getAttachmentParameterFallback(pname);\n    if (value === null) {\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, this.handle);\n      value = this.gl.getFramebufferAttachmentParameter(GL.FRAMEBUFFER, attachment, pname);\n      this.gl.bindFramebuffer(GL.FRAMEBUFFER, null);\n    }\n    if (keys && value > 1000) {\n      value = getKey(this.gl, value);\n    }\n    return value;\n  }\n\n  getAttachmentParameters(\n    attachment = GL.COLOR_ATTACHMENT0,\n    keys,\n    parameters = this.constructor.ATTACHMENT_PARAMETERS || []\n  ) {\n    const values = {};\n    for (const pname of parameters) {\n      const key = keys ? getKey(this.gl, pname) : pname;\n      values[key] = this.getAttachmentParameter(attachment, pname, keys);\n    }\n    return values;\n  }\n\n  getParameters(keys = true) {\n    const attachments = Object.keys(this.attachments);\n    // if (this === this.gl.luma.defaultFramebuffer) {\n    //   attachments = [GL.COLOR_ATTACHMENT0, GL.DEPTH_STENCIL_ATTACHMENT];\n    // }\n    const parameters = {};\n    for (const attachmentName of attachments) {\n      const attachment = Number(attachmentName);\n      const key = keys ? getKey(this.gl, attachment) : attachment;\n      parameters[key] = this.getAttachmentParameters(attachment, keys);\n    }\n    return parameters;\n  }\n\n  // DEBUG\n\n  // Note: Will only work when called in an event handler\n  show() {\n    /* global window */\n    if (typeof window !== 'undefined') {\n      window.open(copyToDataUrl(this), 'luma-debug-texture');\n    }\n    return this;\n  }\n\n  log(priority = 0, message = '') {\n    if (priority > log.priority || typeof window === 'undefined') {\n      return this;\n    }\n    message = message || `Framebuffer ${this.id}`;\n    const image = copyToDataUrl(this, {maxHeight: 100});\n    log.image({priority, message, image}, message)();\n    return this;\n  }\n\n  // WEBGL INTERFACE\n  bind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, this.handle);\n    return this;\n  }\n\n  unbind({target = GL.FRAMEBUFFER} = {}) {\n    this.gl.bindFramebuffer(target, null);\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  _createDefaultAttachments(color, depth, stencil, width, height) {\n    let defaultAttachments = null;\n\n    // Add a color buffer if requested and not supplied\n    if (color) {\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.COLOR_ATTACHMENT0] = new Texture2D(this.gl, {\n        id: `${this.id}-color0`,\n        pixels: null, // reserves texture memory, but texels are undefined\n        format: GL.RGBA,\n        type: GL.UNSIGNED_BYTE,\n        width,\n        height,\n        // Note: Mipmapping can be disabled by texture resource when we resize the texture\n        // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant\n        // behavior we always disable mipmaps.\n        mipmaps: false,\n        // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.\n        // Set WRAP modes that support NPOT textures too.\n        parameters: {\n          [GL.TEXTURE_MIN_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n          [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n          [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n        }\n      });\n    }\n\n    if (depth && stencil) {\n      // TODO - handle separate stencil\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_STENCIL_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth-stencil`,\n        format: GL.DEPTH24_STENCIL8,\n        width,\n        height: 111\n      });\n      // TODO - optional texture\n      // new Texture2D(this.gl, {\n      //   id: `${this.id}-depth-stencil`,\n      //   format: GL.DEPTH24_STENCIL8,\n      //   dataFormat: GL.DEPTH_STENCIL,\n      //   type: GL.UNSIGNED_INT_24_8,\n      //   width,\n      //   height,\n      //   mipmaps: false\n      // });\n    } else if (depth) {\n      // Add a depth buffer if requested and not supplied\n      defaultAttachments = defaultAttachments || {};\n      defaultAttachments[GL.DEPTH_ATTACHMENT] = new Renderbuffer(this.gl, {\n        id: `${this.id}-depth`,\n        format: GL.DEPTH_COMPONENT16,\n        width,\n        height\n      });\n    } else if (stencil) {\n      // TODO - handle separate stencil\n      assert(false);\n    }\n\n    return defaultAttachments;\n  }\n\n  _unattach(attachment) {\n    const oldAttachment = this.attachments[attachment];\n    if (!oldAttachment) {\n      return;\n    }\n    if (oldAttachment instanceof Renderbuffer) {\n      // render buffer\n      this.gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, null);\n    } else {\n      // Must be a texture attachment\n      this.gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, null, 0);\n    }\n    delete this.attachments[attachment];\n  }\n\n  _attachRenderbuffer({attachment = GL.COLOR_ATTACHMENT0, renderbuffer}) {\n    const {gl} = this;\n    // TODO - is the bind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, renderbuffer.handle);\n    gl.framebufferRenderbuffer(GL.FRAMEBUFFER, attachment, GL.RENDERBUFFER, renderbuffer.handle);\n    // TODO - is the unbind needed?\n    // gl.bindRenderbuffer(GL.RENDERBUFFER, null);\n\n    this.attachments[attachment] = renderbuffer;\n  }\n\n  // layer = 0 - index into Texture2DArray and Texture3D or face for `TextureCubeMap`\n  // level = 0 - mipmapLevel (must be 0 in WebGL1)\n  _attachTexture({attachment = GL.COLOR_ATTACHMENT0, texture, layer, level}) {\n    const {gl} = this;\n    gl.bindTexture(texture.target, texture.handle);\n\n    switch (texture.target) {\n      case GL.TEXTURE_2D_ARRAY:\n      case GL.TEXTURE_3D:\n        gl.framebufferTextureLayer(GL.FRAMEBUFFER, attachment, texture.target, level, layer);\n        break;\n\n      case GL.TEXTURE_CUBE_MAP:\n        // layer must be a cubemap face (or if index, converted to cube map face)\n        const face = mapIndexToCubeMapFace(layer);\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, face, texture.handle, level);\n        break;\n\n      case GL.TEXTURE_2D:\n        gl.framebufferTexture2D(GL.FRAMEBUFFER, attachment, GL.TEXTURE_2D, texture.handle, level);\n        break;\n\n      default:\n        assert(false, 'Illegal texture type');\n    }\n\n    gl.bindTexture(texture.target, null);\n    this.attachments[attachment] = texture;\n  }\n\n  // Expects framebuffer to be bound\n  _setReadBuffer(gl, readBuffer) {\n    if (isWebGL2(gl)) {\n      gl.readBuffer(readBuffer);\n    } else {\n      // Setting to color attachment 0 is a noop, so allow it in WebGL1\n      assert(\n        readBuffer === GL.COLOR_ATTACHMENT0 || readBuffer === GL.BACK,\n        ERR_MULTIPLE_RENDERTARGETS\n      );\n    }\n    this.readBuffer = readBuffer;\n  }\n\n  // Expects framebuffer to be bound\n  _setDrawBuffers(gl, drawBuffers) {\n    if (isWebGL2(gl)) {\n      gl.drawBuffers(drawBuffers);\n    } else {\n      const ext = gl.getExtension('WEBGL.draw_buffers');\n      if (ext) {\n        ext.drawBuffersWEBGL(drawBuffers);\n      } else {\n        // Setting a single draw buffer to color attachment 0 is a noop, allow in WebGL1\n        assert(\n          drawBuffers.length === 1 &&\n            (drawBuffers[0] === GL.COLOR_ATTACHMENT0 || drawBuffers[0] === GL.BACK),\n          ERR_MULTIPLE_RENDERTARGETS\n        );\n      }\n    }\n    this.drawBuffers = drawBuffers;\n  }\n\n  // Attempt to provide workable defaults for WebGL2 symbols under WebGL1\n  // null means OK to query\n  // TODO - move to webgl1 polyfills\n  /* eslint-disable complexity */\n  _getAttachmentParameterFallback(pname) {\n    const caps = getFeatures(this.gl);\n\n    switch (pname) {\n      case GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: // GLint\n        return !caps.webgl2 ? 0 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: // GLint\n      case GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: // GLint\n        return !caps.webgl2 ? 8 : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: // GLenum\n        return !caps.webgl2 ? GL.UNSIGNED_INT : null;\n      case GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:\n        return !caps.webgl2 && !caps.EXT_sRGB ? GL.LINEAR : null;\n      default:\n        return null;\n    }\n  }\n  /* eslint-enable complexity */\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createFramebuffer();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteFramebuffer(this.handle);\n  }\n\n  _bindHandle(handle) {\n    return this.gl.bindFramebuffer(GL.FRAMEBUFFER, handle);\n  }\n}\n\n// PUBLIC METHODS\n\n// Map an index to a cube map face constant\nfunction mapIndexToCubeMapFace(layer) {\n  // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)\n  // if smaller assume layer is index, otherwise assume it is already a cube map face constant\n  return layer < GL.TEXTURE_CUBE_MAP_POSITIVE_X ? layer + GL.TEXTURE_CUBE_MAP_POSITIVE_X : layer;\n}\n\n// Helper METHODS\n// Get a string describing the framebuffer error if installed\nfunction _getFrameBufferStatus(status) {\n  // Use error mapping if installed\n  const STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || `Framebuffer error ${status}`;\n}\n\nexport const FRAMEBUFFER_ATTACHMENT_PARAMETERS = [\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, // WebGLRenderbuffer or WebGLTexture\n  GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, // GL.RENDERBUFFER, GL.TEXTURE, GL.NONE\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE, // GL.TEXTURE_CUBE_MAP_POSITIVE_X, etc.\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, // GLint\n  // EXT_sRGB or WebGL2\n  GL.FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, // GL.LINEAR, GL.SRBG\n  // WebGL2\n  // GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_RED_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_GREEN_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE, // GLint\n  GL.FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE // GLint\n  // GL.FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE\n  // GL.FLOAT, GL.INT, GL.UNSIGNED_INT, GL.SIGNED_NORMALIZED, OR GL.UNSIGNED_NORMALIZED.\n];\n\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;\n"],"file":"framebuffer.js"}