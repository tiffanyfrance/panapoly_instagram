{"version":3,"sources":["../../../src/classes/texture.js"],"names":["Resource","Buffer","TEXTURE_FORMATS","DATA_FORMAT_CHANNELS","TYPE_SIZES","isFormatSupported","isLinearFilteringSupported","withParameters","isWebGL2","assertWebGL2Context","WebGLBuffer","log","uid","isPowerOfTwo","assert","NPOT_MIN_FILTERS","Texture","isSupported","gl","format","linearFiltering","supported","constructor","props","id","handle","target","hasFloatTexture","getExtension","textureUnit","undefined","loaded","width","height","depth","type","dataFormat","border","mipmaps","toString","initialize","data","Promise","then","resolvedImageData","Object","assign","pixels","recreate","parameters","pixelStore","unpackFlipY","_deduceParameters","compressed","Number","isFinite","activeTexture","bindTexture","DEFAULT_TEXTURE_SETTINGS","glSettings","_isNPOT","warn","_updateForNPOT","setImageData","generateMipmap","setParameters","resize","params","options","_trackDeallocatedMemory","level","offset","dataType","_getDataType","texImage2D","bindBuffer","compressedTexImage2D","byteLength","_trackAllocatedMemory","channels","channelSize","setSubImageData","x","y","ndarray","shape","compressedTexSubImage2D","texSubImage2D","ArrayBuffer","isView","copyFramebuffer","opts","error","getActiveUnit","getParameter","bind","unbind","textureFormat","types","_deduceImageSize","size","ImageData","HTMLImageElement","naturalWidth","naturalHeight","HTMLCanvasElement","HTMLVideoElement","videoWidth","videoHeight","_createHandle","createTexture","_deleteHandle","deleteTexture","_getParameter","pname","value","getTexParameter","_setParameter","param","_getNPOTParam","texParameterf","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","indexOf"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Buffer from './buffer';\nimport {\n  TEXTURE_FORMATS,\n  DATA_FORMAT_CHANNELS,\n  TYPE_SIZES,\n  isFormatSupported,\n  isLinearFilteringSupported\n} from './texture-formats';\n\nimport {withParameters} from '../context';\nimport {isWebGL2, assertWebGL2Context, WebGLBuffer} from '../webgl-utils';\nimport {log, uid, isPowerOfTwo, assert} from '../utils';\n\n// Supported min filters for NPOT texture.\nconst NPOT_MIN_FILTERS = [GL.LINEAR, GL.NEAREST];\n\nexport default class Texture extends Resource {\n  static isSupported(gl, {format, linearFiltering} = {}) {\n    let supported = true;\n    if (format) {\n      supported = supported && isFormatSupported(gl, format);\n      supported = supported && (!linearFiltering || isLinearFilteringSupported(gl, format));\n    }\n    return supported;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n  constructor(gl, props) {\n    const {\n      id = uid('texture'),\n      handle,\n      target\n      // , magFilter, minFilter, wrapS, wrapT\n    } = props;\n\n    super(gl, {id, handle});\n\n    this.target = target;\n    this.hasFloatTexture = gl.getExtension('OES_texture_float');\n    this.textureUnit = undefined;\n\n    // Program.draw() checks the loaded flag of all textures to avoid\n    // Textures that are still loading from promises\n    // Set to true as soon as texture has been initialized with valid data\n    this.loaded = false;\n\n    this.width = undefined;\n    this.height = undefined;\n    this.depth = undefined;\n    this.format = undefined;\n    this.type = undefined;\n    this.dataFormat = undefined;\n    this.border = undefined;\n    this.textureUnit = undefined;\n    this.mipmaps = undefined;\n  }\n\n  toString() {\n    return `Texture(${this.id},${this.width}x${this.height})`;\n  }\n\n  /* eslint-disable max-len, max-statements */\n  initialize(props = {}) {\n    let data = props.data;\n\n    if (data instanceof Promise) {\n      data.then(resolvedImageData =>\n        this.initialize(\n          Object.assign({}, props, {\n            pixels: resolvedImageData,\n            data: resolvedImageData\n          })\n        )\n      );\n      return this;\n    }\n\n    const {\n      pixels = null,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0,\n      recreate = false,\n      parameters = {},\n      pixelStore = {},\n      textureUnit = undefined,\n      // Deprecated parameters\n      unpackFlipY = true\n    } = props;\n\n    let {mipmaps = true} = props;\n\n    // pixels variable is for API compatibility purpose\n    if (!data) {\n      // TODO - This looks backwards? Commenting out for now until we decide\n      // which prop to use\n      // log.deprecated('data', 'pixels')();\n      data = pixels;\n    }\n\n    let {width, height, dataFormat} = props;\n    const {depth = 0} = props;\n\n    // Deduce width and height\n    ({width, height, dataFormat} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed: false,\n      data,\n      width,\n      height\n    }));\n\n    // Store opts for accessors\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.format = format;\n    this.type = type;\n    this.dataFormat = dataFormat;\n    this.border = border;\n    this.textureUnit = textureUnit;\n\n    if (Number.isFinite(this.textureUnit)) {\n      this.gl.activeTexture(GL.TEXTURE0 + this.textureUnit);\n      this.gl.bindTexture(this.target, this.handle);\n    }\n\n    // Note: luma.gl defaults to GL.UNPACK_FLIP_Y_WEBGL = true;\n    // TODO - compare v4 and v3\n    const DEFAULT_TEXTURE_SETTINGS = {\n      // Pixel store\n      [GL.UNPACK_FLIP_Y_WEBGL]: unpackFlipY\n    };\n    const glSettings = Object.assign({}, DEFAULT_TEXTURE_SETTINGS, pixelStore);\n\n    if (mipmaps && this._isNPOT()) {\n      log.warn(`texture: ${this} is Non-Power-Of-Two, disabling mipmaping`)();\n      mipmaps = false;\n\n      this._updateForNPOT(parameters);\n    }\n\n    this.mipmaps = mipmaps;\n\n    this.setImageData({\n      data,\n      width,\n      height,\n      depth,\n      format,\n      type,\n      dataFormat,\n      border,\n      mipmaps,\n      parameters: glSettings\n    });\n\n    if (mipmaps) {\n      this.generateMipmap();\n    }\n\n    // Set texture sampler parameters\n    this.setParameters(parameters);\n\n    // TODO - Store data to enable auto recreate on context loss\n    if (recreate) {\n      this.data = data;\n    }\n\n    return this;\n  }\n\n  // If size has changed, reinitializes with current format\n  // note clears image and mipmaps\n  resize({width, height}) {\n    if (width !== this.width || height !== this.height) {\n      return this.initialize({\n        width,\n        height,\n        format: this.format,\n        type: this.type,\n        dataFormat: this.dataFormat,\n        border: this.border,\n        mipmaps: false\n      });\n    }\n    return this;\n  }\n\n  // Call to regenerate mipmaps after modifying texture(s)\n  generateMipmap(params = {}) {\n    this.gl.bindTexture(this.target, this.handle);\n    withParameters(this.gl, params, () => {\n      this.gl.generateMipmap(this.target);\n    });\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  /*\n   * Allocates storage\n   * @param {*} pixels -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} width -\n   * @param {GLint} height -\n   * @param {GLint} mipMapLevel -\n   * @param {GLenum} format - format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  /* eslint-disable max-len, max-statements, complexity */\n  setImageData(options) {\n    this._trackDeallocatedMemory('Texture');\n\n    const {\n      target = this.target,\n      pixels = null,\n      level = 0,\n      format = this.format,\n      border = this.border,\n      offset = 0,\n      parameters = {}\n    } = options;\n\n    let {\n      data = null,\n      type = this.type,\n      width = this.width,\n      height = this.height,\n      dataFormat = this.dataFormat,\n      compressed = false\n    } = options;\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    const {gl} = this;\n    gl.bindTexture(this.target, this.handle);\n\n    let dataType = null;\n    ({data, dataType} = this._getDataType({data, compressed}));\n\n    withParameters(this.gl, parameters, () => {\n      switch (dataType) {\n        case 'null':\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          break;\n        case 'typed-array':\n          // Looks like this assert is not necessary, as offset is ignored under WebGL1\n          // assert((offset === 0 || isWebGL2(gl)), 'offset supported in WebGL2 only');\n          gl.texImage2D(\n            target,\n            level,\n            format,\n            width,\n            height,\n            border,\n            dataFormat,\n            type,\n            data,\n            offset\n          );\n          break;\n        case 'buffer':\n          // WebGL2 enables creating textures directly from a WebGL buffer\n          assertWebGL2Context(gl);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data.handle || data);\n          gl.texImage2D(target, level, format, width, height, border, dataFormat, type, offset);\n          gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n          break;\n        case 'browser-object':\n          if (isWebGL2(gl)) {\n            gl.texImage2D(target, level, format, width, height, border, dataFormat, type, data);\n          } else {\n            gl.texImage2D(target, level, format, dataFormat, type, data);\n          }\n          break;\n        case 'compressed':\n          gl.compressedTexImage2D(target, level, format, width, height, border, data);\n          break;\n        default:\n          assert(false, 'Unknown image data type');\n      }\n    });\n\n    if (data && data.byteLength) {\n      this._trackAllocatedMemory(data.byteLength, 'Texture');\n    } else {\n      // NOTE(Tarek): Default to RGBA bytes\n      const channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n      const channelSize = TYPE_SIZES[this.type] || 1;\n\n      this._trackAllocatedMemory(this.width * this.height * channels * channelSize, 'Texture');\n    }\n\n    this.loaded = true;\n\n    return this;\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Redefines an area of an existing texture\n   * Note: does not allocate storage\n   */\n  /*\n   * Redefines an area of an existing texture\n   * @param {*} pixels, data -\n   *  null - create empty texture of specified format\n   *  Typed array - init from image data in typed array\n   *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer\n   *  HTMLImageElement|Image - Inits with content of image. Auto width/height\n   *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height\n   *  HTMLVideoElement - Creates video texture. Auto width/height\n   *\n   * @param {GLint} x - xOffset from where texture to be updated\n   * @param {GLint} y - yOffset from where texture to be updated\n   * @param {GLint} width - width of the sub image to be updated\n   * @param {GLint} height - height of the sub image to be updated\n   * @param {GLint} level - mip level to be updated\n   * @param {GLenum} format - internal format of image data.\n   * @param {GLenum} type\n   *  - format of array (autodetect from type) or\n   *  - (WEBGL2) format of buffer or ArrayBufferView\n   * @param {GLenum} dataFormat - format of image data.\n   * @param {Number} offset - (WEBGL2) offset from start of buffer\n   * @param {GLint} border - must be 0.\n   * @parameters - temporary settings to be applied, can be used to supply pixel store settings.\n   */\n  setSubImageData({\n    target = this.target,\n    pixels = null,\n    data = null,\n    x = 0,\n    y = 0,\n    width = this.width,\n    height = this.height,\n    level = 0,\n    format = this.format,\n    type = this.type,\n    dataFormat = this.dataFormat,\n    compressed = false,\n    offset = 0,\n    border = this.border,\n    parameters = {}\n  }) {\n    ({type, dataFormat, compressed, width, height} = this._deduceParameters({\n      format,\n      type,\n      dataFormat,\n      compressed,\n      data,\n      width,\n      height\n    }));\n\n    assert(this.depth === 0, 'texSubImage not supported for 3D textures');\n\n    // pixels variable is  for API compatibility purpose\n    if (!data) {\n      data = pixels;\n    }\n\n    // Support ndarrays\n    if (data && data.data) {\n      const ndarray = data;\n      data = ndarray.data;\n      width = ndarray.shape[0];\n      height = ndarray.shape[1];\n    }\n\n    // Support buffers\n    if (data instanceof Buffer) {\n      data = data.handle;\n    }\n\n    this.gl.bindTexture(this.target, this.handle);\n\n    withParameters(this.gl, parameters, () => {\n      // TODO - x,y parameters\n      if (compressed) {\n        this.gl.compressedTexSubImage2D(target, level, x, y, width, height, format, data);\n      } else if (data === null) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);\n      } else if (ArrayBuffer.isView(data)) {\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);\n      } else if (data instanceof WebGLBuffer) {\n        // WebGL2 allows us to create texture directly from a WebGL buffer\n        assertWebGL2Context(this.gl);\n        // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, data);\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);\n        this.gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, null);\n      } else if (isWebGL2(this.gl)) {\n        // Assume data is a browser supported object (ImageData, Canvas, ...)\n        this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);\n      } else {\n        this.gl.texSubImage2D(target, level, x, y, dataFormat, type, data);\n      }\n    });\n\n    this.gl.bindTexture(this.target, null);\n  }\n  /* eslint-enable max-len, max-statements, complexity */\n\n  /**\n   * Defines a two-dimensional texture image or cube-map texture image with\n   * pixels from the current framebuffer (rather than from client memory).\n   * (gl.copyTexImage2D wrapper)\n   *\n   * Note that binding a texture into a Framebuffer's color buffer and\n   * rendering can be faster.\n   */\n  copyFramebuffer(opts = {}) {\n    log.error(\n      'Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})'\n    )();\n    return null;\n  }\n\n  getActiveUnit() {\n    return this.gl.getParameter(GL.ACTIVE_TEXTURE) - GL.TEXTURE0;\n  }\n\n  // target cannot be modified by bind:\n  // textures are special because when you first bind them to a target,\n  // they get special information. When you first bind a texture as a\n  // GL_TEXTURE_2D, you are actually setting special state in the texture.\n  // You are saying that this texture is a 2D texture.\n  // And it will always be a 2D texture; this state cannot be changed ever.\n  // If you have a texture that was first bound as a GL_TEXTURE_2D,\n  // you must always bind it as a GL_TEXTURE_2D;\n  // attempting to bind it as GL_TEXTURE_1D will give rise to an error\n  // (while run-time).\n\n  bind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, this.handle);\n    return textureUnit;\n  }\n\n  unbind(textureUnit = this.textureUnit) {\n    const {gl} = this;\n\n    if (textureUnit !== undefined) {\n      this.textureUnit = textureUnit;\n      gl.activeTexture(gl.TEXTURE0 + textureUnit);\n    }\n\n    gl.bindTexture(this.target, null);\n    return textureUnit;\n  }\n\n  // PRIVATE METHODS\n\n  _getDataType({data, compressed = false}) {\n    if (compressed) {\n      return {data, dataType: 'compressed'};\n    }\n    if (data === null) {\n      return {data, dataType: 'null'};\n    }\n    if (ArrayBuffer.isView(data)) {\n      return {data, dataType: 'typed-array'};\n    }\n    if (data instanceof Buffer) {\n      return {data: data.handle, dataType: 'buffer'};\n    }\n    if (data instanceof WebGLBuffer) {\n      return {data, dataType: 'buffer'};\n    }\n    // Assume data is a browser supported object (ImageData, Canvas, ...)\n    return {data, dataType: 'browser-object'};\n  }\n\n  /* Copied from texture-2d.js\n  // WebGL2\n  setPixels(opts = {}) {\n    const {\n      buffer,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      format = GL.RGBA,\n      type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n\n    // This signature of texImage2D uses currently bound GL.PIXEL_UNPACK_BUFFER\n    gl.bindBuffer(GL.PIXEL_UNPACK_BUFFER, buffer.target);\n    // And as always, we must also bind the texture itself\n    this.bind();\n\n    gl.texImage2D(gl.TEXTURE_2D,\n      mipmapLevel, format, width, height, border, format, type, buffer.target);\n\n    this.unbind();\n    gl.bindBuffer(GL.GL.PIXEL_UNPACK_BUFFER, null);\n    return this;\n  }\n\n  setImageDataFromCompressedBuffer(opts) {\n    const {\n      buffer,\n      // offset = 0,\n      width = null,\n      height = null,\n      mipmapLevel = 0,\n      internalFormat = GL.RGBA,\n      // format = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      border = 0\n    } = opts;\n\n    const {gl} = this;\n    gl.compressedTexImage2D(this.target,\n      mipmapLevel, internalFormat, width, height, border, buffer);\n    // gl.compressedTexSubImage2D(target,\n    //   level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n    return this;\n  }\n\n  copySubImage(opts) {\n    const {\n      // pixels,\n      // offset = 0,\n      // x,\n      // y,\n      // width,\n      // height,\n      // mipmapLevel = 0,\n      // internalFormat = GL.RGBA,\n      // type = GL.UNSIGNED_BYTE,\n      // border = 0\n    } = opts;\n\n    // if (pixels instanceof ArrayBufferView) {\n    //   gl.texSubImage2D(target, level, x, y, width, height, format, type, pixels);\n    // }\n    // gl.texSubImage2D(target, level, x, y, format, type, ? pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLImageElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLCanvasElement pixels);\n    // gl.texSubImage2D(target, level, x, y, format, type, HTMLVideoElement pixels);\n    // // Additional signature in a WebGL 2 context:\n    // gl.texSubImage2D(target, level, x, y, format, type, GLintptr offset);\n  }\n  */\n\n  // HELPER METHODS\n\n  _deduceParameters(opts) {\n    const {format, data} = opts;\n    let {width, height, dataFormat, type, compressed} = opts;\n\n    // Deduce format and type from format\n    const textureFormat = TEXTURE_FORMATS[format];\n    dataFormat = dataFormat || (textureFormat && textureFormat.dataFormat);\n    type = type || (textureFormat && textureFormat.types[0]);\n\n    // Deduce compression from format\n    compressed = compressed || (textureFormat && textureFormat.compressed);\n\n    ({width, height} = this._deduceImageSize(data, width, height));\n\n    return {dataFormat, type, compressed, width, height, format, data};\n  }\n\n  /* global ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement */\n  // eslint-disable-next-line complexity\n  _deduceImageSize(data, width, height) {\n    let size;\n\n    if (typeof ImageData !== 'undefined' && data instanceof ImageData) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {\n      size = {width: data.naturalWidth, height: data.naturalHeight};\n    } else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {\n      size = {width: data.width, height: data.height};\n    } else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {\n      size = {width: data.videoWidth, height: data.videoHeight};\n    } else if (!data) {\n      size = {width: width >= 0 ? width : 1, height: height >= 0 ? height : 1};\n    } else {\n      size = {width, height};\n    }\n\n    assert(size, 'Could not deduced texture size');\n    assert(\n      width === undefined || size.width === width,\n      'Deduced texture width does not match supplied width'\n    );\n    assert(\n      height === undefined || size.height === height,\n      'Deduced texture height does not match supplied height'\n    );\n\n    return size;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createTexture();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteTexture(this.handle);\n    this._trackDeallocatedMemory('Texture');\n  }\n\n  _getParameter(pname) {\n    switch (pname) {\n      case GL.TEXTURE_WIDTH:\n        return this.width;\n      case GL.TEXTURE_HEIGHT:\n        return this.height;\n      default:\n        this.gl.bindTexture(this.target, this.handle);\n        const value = this.gl.getTexParameter(this.target, pname);\n        this.gl.bindTexture(this.target, null);\n        return value;\n    }\n  }\n\n  _setParameter(pname, param) {\n    this.gl.bindTexture(this.target, this.handle);\n\n    // NOTE: Apply NPOT workaround\n    param = this._getNPOTParam(pname, param);\n\n    // Apparently there are some integer/float conversion rules that made\n    // the WebGL committe expose two parameter setting functions in JavaScript.\n    // For now, pick the float version for parameters specified as GLfloat.\n    switch (pname) {\n      case GL.TEXTURE_MIN_LOD:\n      case GL.TEXTURE_MAX_LOD:\n        this.gl.texParameterf(this.handle, pname, param);\n        break;\n\n      case GL.TEXTURE_WIDTH:\n      case GL.TEXTURE_HEIGHT:\n        assert(false);\n        break;\n\n      default:\n        this.gl.texParameteri(this.target, pname, param);\n        break;\n    }\n\n    this.gl.bindTexture(this.target, null);\n    return this;\n  }\n\n  _isNPOT() {\n    if (isWebGL2(this.gl)) {\n      // NPOT restriction is only for WebGL1\n      return false;\n    }\n    // Width and height not available, consider it is not NPOT texture\n    if (!this.width || !this.height) {\n      return false;\n    }\n    return !isPowerOfTwo(this.width) || !isPowerOfTwo(this.height);\n  }\n\n  // Update default settings which are not supported by NPOT textures.\n  _updateForNPOT(parameters) {\n    if (parameters[this.gl.TEXTURE_MIN_FILTER] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n      parameters[this.gl.TEXTURE_MIN_FILTER] = this.gl.LINEAR;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_S] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_S to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_S] = this.gl.CLAMP_TO_EDGE;\n    }\n    if (parameters[this.gl.TEXTURE_WRAP_T] === undefined) {\n      // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_WRAP_T to CLAMP_TO_EDGE`)();\n      parameters[this.gl.TEXTURE_WRAP_T] = this.gl.CLAMP_TO_EDGE;\n    }\n  }\n\n  _getNPOTParam(pname, param) {\n    if (this._isNPOT()) {\n      switch (pname) {\n        case GL.TEXTURE_MIN_FILTER:\n          if (NPOT_MIN_FILTERS.indexOf(param) === -1) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, forcing TEXTURE_MIN_FILTER to LINEAR`)();\n            param = GL.LINEAR;\n          }\n          break;\n        case GL.TEXTURE_WRAP_S:\n        case GL.TEXTURE_WRAP_T:\n          if (param !== GL.CLAMP_TO_EDGE) {\n            // log.warn(`texture: ${this} is Non-Power-Of-Two, ${getKey(this.gl, pname)} to CLAMP_TO_EDGE`)();\n            param = GL.CLAMP_TO_EDGE;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    return param;\n  }\n}\n"],"file":"texture.js"}