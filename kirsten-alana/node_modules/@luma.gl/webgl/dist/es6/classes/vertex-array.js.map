{"version":3,"sources":["../../../src/classes/vertex-array.js"],"names":["Accessor","Buffer","VertexArrayObject","log","assert","stubRemovedMethods","ERR_ATTRIBUTE_TYPE","MULTI_LOCATION_ATTRIBUTE_REGEXP","DEPRECATIONS_V6","VertexArray","constructor","gl","opts","id","program","configuration","elements","elementsAccessor","values","accessors","unused","drawParams","buffer","vertexArrayObject","isSupported","getDefaultArray","initialize","Object","seal","delete","props","reset","bindOnUse","setProps","MAX_ATTRIBUTES","Array","fill","setAttributes","attributes","setElementBuffer","clearDrawParams","getDrawParams","appParameters","_updateDrawParams","assign","bind","locationOrName","value","_setAttribute","bindBuffer","elementBuffer","accessor","isDefaultArray","setBuffer","appAccessor","target","_resolveLocationAndAccessor","location","setConstant","arrayValue","_normalizeConstantArrayValue","enable","unbindBuffers","size","disableVertexAttribArray","handle","vertexAttribPointer","bindBuffers","bindForDraw","vertexCount","instanceCount","func","_setConstantAttributes","hasVertexArrays","valueAccessor","_getAttributeIndex","name","Number","isFinite","once","accessInfo","_getAttributeInfo","resolve","type","attributeName","getAttributeInfo","multiLocation","exec","locationOffset","getAttributeLocation","isArray","length","ArrayBuffer","isView","constant","Error","elementCount","Math","max","_setConstantAttributeZero","_setConstantAttribute","constantAttributeZero","getConstantBuffer","isDefault","isIndexed","isInstanced","indexCount","Infinity","_updateDrawParamsForLocation","getElementCount","indexType","indexOffset","offset","divisor","getVertexCount","min","setElements","deprecated"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Accessor from './accessor';\nimport Buffer from './buffer';\nimport VertexArrayObject from './vertex-array-object';\nimport {log, assert, stubRemovedMethods} from '../utils';\n\nconst ERR_ATTRIBUTE_TYPE =\n  'VertexArray: attributes must be Buffers or constants (i.e. typed array)';\n\n// This is done to support mat type attributes.\n// See section \"Notes about setting mat type attributes\"\n// in vertex-array.md\nconst MULTI_LOCATION_ATTRIBUTE_REGEXP = /^(.+)__LOCATION_([0-9]+)$/;\n\nconst DEPRECATIONS_V6 = [\n  'setBuffers',\n  'setGeneric',\n  'clearBindings',\n  'setLocations',\n  'setGenericValues',\n  'setDivisor',\n  'enable',\n  'disable'\n];\n\nexport default class VertexArray {\n  constructor(gl, opts = {}) {\n    // Use program's id if program is supplied but no id is supplied\n    const id = opts.id || (opts.program && opts.program.id);\n    // super(gl, Object.assign({}, opts, {id}));\n\n    this.id = id;\n    this.gl = gl;\n    this.configuration = null;\n\n    // Extracted information\n    this.elements = null;\n    this.elementsAccessor = null;\n    this.values = null;\n    this.accessors = null;\n    this.unused = null;\n    this.drawParams = null;\n    this.buffer = null; // For attribute 0 on desktops, and created when unbinding buffers\n\n    this.vertexArrayObject = VertexArrayObject.isSupported(gl)\n      ? new VertexArrayObject(gl)\n      : VertexArrayObject.getDefaultArray(gl);\n\n    // Issue errors when using removed methods\n    stubRemovedMethods(this, 'VertexArray', 'v6.0', DEPRECATIONS_V6);\n\n    this.initialize(opts);\n    Object.seal(this);\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n    }\n  }\n\n  initialize(props = {}) {\n    this.reset();\n    this.configuration = null;\n    this.bindOnUse = false;\n    return this.setProps(props);\n  }\n\n  // Resets all attributes (to default valued constants)\n  reset() {\n    // this.vertexArrayObject.reset();\n\n    this.elements = null;\n    this.elementsAccessor = null;\n    const {MAX_ATTRIBUTES} = this.vertexArrayObject;\n    this.values = new Array(MAX_ATTRIBUTES).fill(null);\n    this.accessors = new Array(MAX_ATTRIBUTES).fill(null);\n    this.unused = {};\n\n    // Auto detects draw params\n    this.drawParams = null;\n\n    return this;\n  }\n\n  setProps(props) {\n    if ('program' in props) {\n      this.configuration = props.program && props.program.configuration;\n    }\n    if ('configuration' in props) {\n      this.configuration = props.configuration;\n    }\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('elements' in props) {\n      this.setElementBuffer(props.elements);\n    }\n    if ('bindOnUse' in props) {\n      props = props.bindOnUse;\n    }\n    return this;\n  }\n\n  // Automatically called if buffers changed through VertexArray API\n  clearDrawParams() {\n    this.drawParams = null;\n  }\n\n  getDrawParams(appParameters) {\n    // Auto deduced draw parameters\n    this.drawParams = this.drawParams || this._updateDrawParams();\n\n    // Override with any application supplied draw parameters\n    return Object.assign({}, this.drawParams, appParameters);\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or named locations.\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  //   Signatures:\n  //     {attributeName: buffer}\n  //     {attributeName: [buffer, accessor]}\n  //     {attributeName: (typed) array} => constant\n  setAttributes(attributes) {\n    this.vertexArrayObject.bind(() => {\n      for (const locationOrName in attributes) {\n        const value = attributes[locationOrName];\n        this._setAttribute(locationOrName, value);\n      }\n      // Make sure we don't leave any bindings\n      this.gl.bindBuffer(GL.ARRAY_BUFFER, null);\n    });\n\n    return this;\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering.\n  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER. Constants not supported\n  setElementBuffer(elementBuffer = null, accessor = {}) {\n    this.elements = elementBuffer; // Save value for debugging\n    this.elementsAccessor = accessor;\n    this.clearDrawParams();\n\n    // Update vertexArray immediately if we have our own array\n    if (!this.vertexArrayObject.isDefaultArray) {\n      this.vertexArrayObject.setElementBuffer(elementBuffer, accessor);\n    }\n    return this;\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer(locationOrName, buffer, appAccessor = {}) {\n    // Check target\n    if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n      return this.setElementBuffer(buffer, appAccessor);\n    }\n\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      buffer,\n      buffer.accessor,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      this.values[location] = buffer;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.setBuffer(location, buffer, accessor);\n      }\n    }\n\n    return this;\n  }\n\n  // Set attribute to constant value (small typed array corresponding to one vertex' worth of data)\n  setConstant(locationOrName, arrayValue, appAccessor = {}) {\n    const {location, accessor} = this._resolveLocationAndAccessor(\n      locationOrName,\n      arrayValue,\n      appAccessor\n    );\n\n    if (location >= 0) {\n      arrayValue = this.vertexArrayObject._normalizeConstantArrayValue(arrayValue, accessor);\n\n      this.values[location] = arrayValue;\n      this.accessors[location] = accessor;\n      this.clearDrawParams();\n\n      // Update vertexArray immediately if we have our own array\n      // NOTE: We set the actual constant value later on bind. We can't set the value now since\n      // constants are global and affect all other VertexArrays that have disabled attributes\n      // in the same location.\n      // We do disable the attribute which makes it use the global constant value at that location\n      if (!this.vertexArrayObject.isDefaultArray) {\n        this.vertexArrayObject.enable(location, false);\n      }\n    }\n\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, unbind temporarily to avoid conflicting with TransformFeedback\n  unbindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(null);\n      }\n\n      // Chrome does not like buffers that are bound to several binding points,\n      // so we need to offer and unbind facility\n      // WebGL offers disabling, but no clear way to set a VertexArray buffer to `null`\n      // So we just bind all the attributes to the dummy \"attribute zero\" buffer\n      this.buffer = this.buffer || new Buffer(this.gl, {size: 4});\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        if (this.values[location] instanceof Buffer) {\n          this.gl.disableVertexAttribArray(location);\n          this.gl.bindBuffer(GL.ARRAY_BUFFER, this.buffer.handle);\n          this.gl.vertexAttribPointer(location, 1, GL.FLOAT, false, 0, 0);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Workaround for Chrome TransformFeedback binding issue\n  // If required, rebind rebind after temporary unbind\n  bindBuffers() {\n    this.vertexArrayObject.bind(() => {\n      if (this.elements) {\n        this.setElementBuffer(this.elements);\n      }\n\n      for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n        const buffer = this.values[location];\n        if (buffer instanceof Buffer) {\n          this.setBuffer(location, buffer);\n        }\n      }\n    });\n    return this;\n  }\n\n  // Bind for use\n  // When a vertex array is about to be used, we must:\n  // - Set constant attributes (since these are stored on the context and reset on bind)\n  // - Check if we need to initialize the buffer\n  bindForDraw(vertexCount, instanceCount, func) {\n    let value;\n\n    this.vertexArrayObject.bind(() => {\n      // Make sure that any constant attributes are updated (stored on the context, not the VAO)\n      // Also handles attribute 0\n      this._setConstantAttributes(vertexCount, instanceCount);\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.bindBuffers();\n      }\n\n      value = func();\n\n      if (!this.vertexArrayObject.hasVertexArrays) {\n        this.unbindBuffers();\n      }\n    });\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Resolve locations and accessors\n  _resolveLocationAndAccessor(locationOrName, value, valueAccessor, appAccessor) {\n    const {location, name} = this._getAttributeIndex(locationOrName);\n    if (!Number.isFinite(location) || location < 0) {\n      this.unused[locationOrName] = value;\n      log.once(3, () => `unused value ${locationOrName} in ${this.id}`)();\n      return this;\n    }\n\n    const accessInfo = this._getAttributeInfo(name || location);\n\n    // Attribute location wasn't directly found.\n    // Likely due to multi-location attributes (e.g. matrix)\n    if (!accessInfo) {\n      return {\n        location: -1,\n        accessor: null\n      };\n    }\n\n    // Resolve the partial accessors into a final accessor\n    const accessor = Accessor.resolve(accessInfo.accessor, valueAccessor, appAccessor);\n\n    const {size, type} = accessor;\n    assert(Number.isFinite(size) && Number.isFinite(type));\n\n    return {location, accessor};\n  }\n\n  _getAttributeInfo(attributeName) {\n    return this.configuration && this.configuration.getAttributeInfo(attributeName);\n  }\n\n  _getAttributeIndex(locationOrName) {\n    const location = Number(locationOrName);\n    if (Number.isFinite(location)) {\n      return {location};\n    }\n\n    const multiLocation = MULTI_LOCATION_ATTRIBUTE_REGEXP.exec(locationOrName);\n    const name = multiLocation ? multiLocation[1] : locationOrName;\n    const locationOffset = multiLocation ? Number(multiLocation[2]) : 0;\n\n    if (this.configuration) {\n      return {\n        location: this.configuration.getAttributeLocation(name) + locationOffset,\n        name\n      };\n    }\n\n    return {location: -1};\n  }\n\n  _setAttribute(locationOrName, value) {\n    if (value instanceof Buffer) {\n      //  Signature: {attributeName: Buffer}\n      this.setBuffer(locationOrName, value);\n    } else if (Array.isArray(value) && value.length && value[0] instanceof Buffer) {\n      // Signature: {attributeName: [buffer, accessor]}\n      const buffer = value[0];\n      const accessor = value[1];\n      this.setBuffer(locationOrName, buffer, accessor);\n    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n      // Signature: {attributeName: constant}, constant == short (typed) array\n      const constant = value;\n      this.setConstant(locationOrName, constant);\n    } else if (value.buffer instanceof Buffer) {\n      // luma.gl v7: Support accessor objects with 'buffer' field\n      // for interleaved data\n      // Signature: {attributeName: {...accessor, buffer}}\n      const accessor = value;\n      this.setBuffer(locationOrName, accessor.buffer, accessor);\n    } else {\n      throw new Error(ERR_ATTRIBUTE_TYPE);\n    }\n  }\n\n  // Updates all constant attribute values (constants are used when vertex attributes are disabled).\n  // This needs to be done repeatedly since in contrast to buffer bindings,\n  // constants are stored on the WebGL context, not the VAO\n  _setConstantAttributes(vertexCount, instanceCount) {\n    // TODO - use accessor to determine what length to use\n    const elementCount = Math.max(vertexCount | 0, instanceCount | 0);\n    let constant = this.values[0];\n    if (ArrayBuffer.isView(constant)) {\n      this._setConstantAttributeZero(constant, elementCount);\n    }\n\n    for (let location = 1; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      constant = this.values[location];\n      if (ArrayBuffer.isView(constant)) {\n        this._setConstantAttribute(location, constant);\n      }\n    }\n  }\n\n  _setConstantAttributeZero(constant, elementCount) {\n    if (VertexArrayObject.isSupported(this.gl, {constantAttributeZero: true})) {\n      this._setConstantAttribute(0, constant);\n      return;\n    }\n\n    // Get a dummy buffer populated with repeated constants\n    const buffer = this.vertexArrayObject.getConstantBuffer(elementCount, constant);\n\n    // Set the buffer on location 0\n    this.vertexArrayObject.setBuffer(0, buffer, this.accessors[0]);\n  }\n\n  _setConstantAttribute(location, constant) {\n    VertexArrayObject.setConstant(this.gl, location, constant);\n\n    // If we are using the global VertexArrayObject, we need to disable the attribute now\n    if (this.vertexArrayObject.isDefault) {\n      this.vertexArrayObject.enable(location, false);\n    }\n  }\n\n  // Walks the buffers and updates draw parameters\n  _updateDrawParams() {\n    const drawParams = {\n      isIndexed: false,\n      isInstanced: false,\n      indexCount: Infinity,\n      vertexCount: Infinity,\n      instanceCount: Infinity\n    };\n\n    for (let location = 0; location < this.vertexArrayObject.MAX_ATTRIBUTES; location++) {\n      this._updateDrawParamsForLocation(drawParams, location);\n    }\n\n    if (this.elements) {\n      // indexing is autodetected - buffer with target GL.ELEMENT_ARRAY_BUFFER\n      // index type is saved for drawElement calls\n      drawParams.elementCount = this.elements.getElementCount(this.elements.accessor);\n      drawParams.isIndexed = true;\n      drawParams.indexType = this.elementsAccessor.type || this.elements.accessor.type;\n      drawParams.indexOffset = this.elementsAccessor.offset || 0;\n    }\n\n    // Post-calculation checks\n    if (drawParams.indexCount === Infinity) {\n      drawParams.indexCount = 0;\n    }\n    if (drawParams.vertexCount === Infinity) {\n      drawParams.vertexCount = 0;\n    }\n    if (drawParams.instanceCount === Infinity) {\n      drawParams.instanceCount = 0;\n    }\n\n    return drawParams;\n  }\n\n  _updateDrawParamsForLocation(drawParams, location) {\n    const value = this.values[location];\n    const accessor = this.accessors[location];\n\n    if (!value) {\n      return;\n    }\n\n    // Check if instanced (whether buffer or constant)\n    const {divisor} = accessor;\n    const isInstanced = divisor > 0;\n    drawParams.isInstanced = drawParams.isInstanced || isInstanced;\n\n    if (value instanceof Buffer) {\n      const buffer = value;\n\n      if (isInstanced) {\n        // instance attribute\n        const instanceCount = buffer.getVertexCount(accessor);\n        drawParams.instanceCount = Math.min(drawParams.instanceCount, instanceCount);\n      } else {\n        // normal attribute\n        const vertexCount = buffer.getVertexCount(accessor);\n        drawParams.vertexCount = Math.min(drawParams.vertexCount, vertexCount);\n      }\n    }\n  }\n\n  // DEPRECATED in v6.x - but not warnings not properly implemented\n\n  setElements(elementBuffer = null, accessor = {}) {\n    log.deprecated('setElements', 'setElementBuffer')();\n    return this.setElementBuffer(elementBuffer, accessor);\n  }\n}\n"],"file":"vertex-array.js"}