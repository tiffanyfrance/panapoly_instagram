{"version":3,"sources":["../../../src/classes/program.js"],"names":["Resource","Texture","Framebuffer","parseUniformName","getUniformSetter","VertexShader","FragmentShader","ProgramConfiguration","checkUniformValues","areUniformsEqual","getUniformCopy","withParameters","assertWebGL2Context","isWebGL2","getKey","getPrimitiveDrawMode","log","uid","assert","LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","constructor","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","vs","fs","varyings","bufferMode","source","uniforms","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","setProps","delete","options","setUniforms","draw","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","samplers","deprecated","undefined","fb","message","useProgram","_areTexturesRenderable","bindForDraw","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_onChangeCallback","somethingChanged","changedUniforms","key","_uniformSetters","_setUniforms","reset","texturesRenderable","uniformName","uniformSetter","textureIndex","uniform","texture","loaded","bind","_textureIndexCounter","_createHandle","createProgram","_deleteHandle","deleteProgram","_getOptionsFromHandle","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","_getParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","i","info","getActiveUniform","name","isArray","location","getUniformLocation","getActiveUniforms","uniformIndices","getUniformBlockIndex","blockName","getActiveUniformBlockParameter","blockIndex","uniformBlockBinding","blockBinding"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from './uniforms';\n\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, isWebGL2, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          const framebuffer = uniform;\n          uniform = framebuffer.texture;\n        }\n\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Check that texture is loaded\n          texturesRenderable = texturesRenderable && texture.loaded;\n        }\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Bind texture to index\n          texture.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // eslint-disable-next-line max-depth\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}