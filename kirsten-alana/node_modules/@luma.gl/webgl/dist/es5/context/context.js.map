{"version":3,"sources":["../../../src/context/context.js"],"names":["ERR_CONTEXT","ERR_WEBGL","ERR_WEBGL2","isWebGL","gl","Boolean","Number","isFinite","_version","isWebGL2","assertWebGLContext","assertWebGL2Context","contextDefaults","webgl2","webgl1","throwOnFailure","manageState","canvas","debug","width","height","setGLContextDefaults","options","Object","assign","createGLContext","onError","message","throwOnError","Error","isBrowser","targetCanvas","instrumentGLContext","logInfo","_instrumented","getVersion","copyState","log","args","global","makeDebugContext","warn","priority","Math","max","destroyGLContext","ext","getExtension","destroy","resizeGLContext","devicePixelRatio","useDevicePixels","window","clientWidth","clientHeight","resize","webGL","info","driver","vendor","renderer","once","WebGL2RenderingContext"],"mappings":"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","sourcesContent":["/* eslint-disable quotes */\n// WebGLRenderingContext related methods\nimport {trackContextState} from '@luma.gl/webgl-state-tracker';\n\nimport {createHeadlessContext} from './create-headless-context';\nimport {getCanvas} from './create-canvas';\nimport {createBrowserContext} from './create-browser-context';\nimport {getContextDebugInfo} from '../debug/get-context-debug-info';\n\nimport {WebGL2RenderingContext} from '../webgl-utils';\n\nimport {log, isBrowser, assert} from '../utils';\nimport {global} from '../utils/globals';\n\nexport const ERR_CONTEXT = 'Invalid WebGLRenderingContext';\nexport const ERR_WEBGL = ERR_CONTEXT;\nexport const ERR_WEBGL2 = 'Requires WebGL2';\n\nexport function isWebGL(gl) {\n  return Boolean(gl && Number.isFinite(gl._version));\n}\n\nexport function isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nexport function assertWebGLContext(gl) {\n  // Need to handle debug context\n  assert(isWebGL(gl), ERR_CONTEXT);\n}\n\nexport function assertWebGL2Context(gl) {\n  // Need to handle debug context\n  assert(isWebGL2(gl), ERR_WEBGL2);\n}\n\nconst contextDefaults = {\n  // COMMON CONTEXT PARAMETERS\n  // Attempt to allocate WebGL2 context\n  webgl2: true, // Attempt to create a WebGL2 context (false to force webgl1)\n  webgl1: true, // Attempt to create a WebGL1 context (false to fail if webgl2 not available)\n  throwOnFailure: true,\n  manageState: true,\n  // BROWSER CONTEXT PARAMETERS\n  canvas: null, // A canvas element or a canvas string id\n  debug: false, // Instrument context (at the expense of performance)\n  // HEADLESS CONTEXT PARAMETERS\n  width: 800, // width are height are only used by headless gl\n  height: 600\n  // WEBGL/HEADLESS CONTEXT PARAMETERS\n  // Remaining options are passed through to context creator\n};\n\n/*\n * Change default context creation parameters.\n * Main use case is regression test suite.\n */\nexport function setGLContextDefaults(options = {}) {\n  Object.assign(contextDefaults, {width: 1, height: 1}, options);\n}\n\n/*\n * Creates a context giving access to the WebGL API\n */\n/* eslint-disable complexity, max-statements */\nexport function createGLContext(options = {}) {\n  options = Object.assign({}, contextDefaults, options);\n  const {width, height} = options;\n\n  // Error reporting function, enables exceptions to be disabled\n  function onError(message) {\n    if (options.throwOnError) {\n      throw new Error(message);\n    }\n    return null;\n  }\n\n  let gl;\n  if (isBrowser) {\n    // Get or create a canvas\n    const {canvas} = options;\n    const targetCanvas = getCanvas({canvas, width, height, onError});\n    // Create a WebGL context in the canvas\n    gl = createBrowserContext(targetCanvas, options);\n  } else {\n    // Create a headless-gl context under Node.js\n    gl = createHeadlessContext({...options, width, height, onError});\n  }\n\n  if (!gl) {\n    return null;\n  }\n\n  gl = instrumentGLContext(gl, options);\n\n  // Log some debug info about the newly created context\n  logInfo(gl);\n\n  // Add to seer integration\n  return gl;\n}\n\nexport function instrumentGLContext(gl, options = {}) {\n  // Avoid multiple instrumentations\n  if (gl._instrumented) {\n    return gl;\n  }\n\n  gl._version = gl._version || getVersion(gl);\n\n  options = Object.assign({}, contextDefaults, options);\n  const {manageState, debug} = options;\n\n  // Install context state tracking\n  if (manageState) {\n    trackContextState(gl, {\n      copyState: false,\n      log: (...args) => log.log(1, ...args)()\n    });\n  }\n\n  // Add debug instrumentation to the context\n  if (isBrowser && debug) {\n    if (!global.makeDebugContext) {\n      log.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    } else {\n      gl = global.makeDebugContext(gl, {debug});\n      // Debug forces log level to at least 1\n      log.priority = Math.max(log.priority, 1);\n    }\n  }\n\n  gl._instrumented = true;\n\n  return gl;\n}\n\nexport function destroyGLContext(gl) {\n  // TODO - Remove from seer integration\n\n  // TODO - Unregister any tracking/polyfills\n\n  // There is no way to delete browser based context\n\n  // Destroy headless gl context\n  const ext = gl.getExtension('STACKGL_destroy_context');\n  if (ext) {\n    ext.destroy();\n  }\n}\n\n/**\n * Resize the canvas' drawing buffer.\n *\n * Can match the canvas CSS size, and optionally also consider devicePixelRatio\n * Can be called every frame\n *\n * Regardless of size, the drawing buffer will always be scaled to the viewport, but\n * for best visual results, usually set to either:\n *  canvas CSS width x canvas CSS height\n *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio\n * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html\n *\n * resizeGLContext(gl, {width, height, useDevicePixels})\n */\nexport function resizeGLContext(gl, options = {}) {\n  // Resize browser context\n  if (gl.canvas) {\n    /* global window */\n    const devicePixelRatio = options.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n\n    const width = `width` in options ? options.width : gl.canvas.clientWidth;\n    const height = `height` in options ? options.height : gl.canvas.clientHeight;\n\n    gl.canvas.width = width * devicePixelRatio;\n    gl.canvas.height = height * devicePixelRatio;\n\n    return;\n  }\n\n  // Resize headless gl context\n  const ext = gl.getExtension('STACKGL_resize_drawingbuffer');\n  if (ext && `width` in options && `height` in options) {\n    ext.resize(options.width, options.height);\n  }\n}\n\n// HELPER METHODS\n\nfunction logInfo(gl) {\n  const webGL = isWebGL2(gl) ? 'WebGL2' : 'WebGL1';\n  const info = getContextDebugInfo(gl);\n  const driver = info ? `(${info.vendor},${info.renderer})` : '';\n  const debug = gl.debug ? ' debug' : '';\n  log.once(1, `${webGL}${debug} context ${driver}`)();\n}\n\nfunction getVersion(gl) {\n  if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {\n    // WebGL2 context.\n    return 2;\n  }\n  // Must be a WebGL1 context.\n  return 1;\n}\n"],"file":"context.js"}