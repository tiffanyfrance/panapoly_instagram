{"version":3,"sources":["../../../src/context/debug-context.js"],"names":["getContextData","gl","luma","enableDebug","debug","makeDebugContext","getDebugContext","getRealContext","data","realContext","global","WebGLDebug","console","warn","debugContext","WebGLDebugContext","onGLError","onValidateGLFunc","Object","assign","prototype","getFunctionString","functionName","functionArgs","args","glFunctionArgsToString","slice","length","err","errorMessage","glEnumToString","message","log","error","functionString","priority","isBreakpoint","every","breakOn","indexOf","arg","undefined","Error"],"mappings":"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","sourcesContent":["// Depends on Khronos Debug support module being imported via \"luma.gl/debug\"\n\nimport {global} from '../utils/globals';\nimport {log} from '../utils';\n\n// Helper to get shared context data\nfunction getContextData(gl) {\n  gl.luma = gl.luma || {};\n  return gl.luma;\n}\n\n// Enable or disable debug checks in debug contexts\n// Non-debug contexts do not have checks (to ensure performance)\n// Turning off debug for debug contexts removes most of the performance penalty\nexport function enableDebug(debug) {\n  // log.debug = debug;\n}\n\n// Returns (a potentially new) context with debug instrumentation turned off or on.\n// Note that this actually returns a new context\nexport function makeDebugContext(gl, {debug = true} = {}) {\n  if (gl === null) {\n    // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  return debug ? getDebugContext(gl) : getRealContext(gl);\n}\n\n// Returns the real context from either of the real/debug contexts\nexport function getRealContext(gl) {\n  if (gl === null) {\n    // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  const data = getContextData(gl);\n  // If the context has a realContext member, it is a debug context so return the realContext\n  return data.realContext ? data.realContext : gl;\n}\n\n// Returns the debug context from either of the real/debug contexts\nexport function getDebugContext(gl) {\n  if (gl === null) {\n    // Return to ensure we don't create a context in this case.\n    return null;\n  }\n\n  if (!global.WebGLDebug) {\n    // eslint-disable-next-line\n    console.warn('WebGL debug mode not activated. import \"@luma.gl/debug\" to enable.')();\n    return gl;\n  }\n\n  const data = getContextData(gl);\n  // If this *is* a debug context, return itself\n  if (data.realContext) {\n    return gl;\n  }\n\n  // If this already has a debug context, return it.\n  if (data.debugContext) {\n    return data.debugContext;\n  }\n\n  // Create a new debug context\n  class WebGLDebugContext {}\n  const debugContext = global.WebGLDebug\n    ? global.WebGLDebug.makeDebugContext(gl, onGLError, onValidateGLFunc)\n    : gl;\n  Object.assign(WebGLDebugContext.prototype, debugContext);\n\n  // Store the debug context\n  data.debugContext = debugContext;\n  debugContext.debug = true;\n  debugContext.gl = gl;\n\n  // log.info('debug context actived.')();\n\n  // Return it\n  return debugContext;\n}\n\n// DEBUG TRACING\n\nfunction getFunctionString(functionName, functionArgs) {\n  let args = global.WebGLDebug.glFunctionArgsToString(functionName, functionArgs);\n  args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;\n  return `gl.${functionName}(${args})`;\n}\n\nfunction onGLError(err, functionName, args) {\n  const errorMessage = global.WebGLDebug.glEnumToString(err);\n  const functionArgs = global.WebGLDebug.glFunctionArgsToString(functionName, args);\n  const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;\n  // if (false) { // log.throw) {\n  //   throw new Error(message);\n  // } else {\n  log.error(message)();\n  debugger; // eslint-disable-line\n  // }\n}\n\n// Don't generate function string until it is needed\nfunction onValidateGLFunc(functionName, functionArgs) {\n  let functionString;\n  if (log.priority >= 4) {\n    functionString = getFunctionString(functionName, functionArgs);\n    log.log(4, functionString)();\n  }\n\n  if (log.break) {\n    functionString = functionString || getFunctionString(functionName, functionArgs);\n    const isBreakpoint =\n      log.break && log.break.every(breakOn => functionString.indexOf(breakOn) !== -1);\n    if (isBreakpoint) {\n      debugger; // eslint-disable-line\n    }\n  }\n\n  for (const arg of functionArgs) {\n    if (arg === undefined) {\n      functionString = functionString || getFunctionString(functionName, functionArgs);\n      if (log.throw) {\n        throw new Error(`Undefined argument: ${functionString}`);\n      } else {\n        log.error(`Undefined argument: ${functionString}`)();\n        log.error(`Undefined argument: ${functionString}`)();\n        debugger; // eslint-disable-line\n      }\n    }\n  }\n}\n"],"file":"debug-context.js"}