{"version":3,"sources":["../../../src/classes/program.js"],"names":["LOG_PROGRAM_PERF_PRIORITY","GL_SEPARATE_ATTRIBS","V6_DEPRECATED_METHODS","Program","gl","props","stubRemovedMethods","_isCached","initialize","Object","seal","_setId","id","vs","fs","varyings","bufferMode","VertexShader","source","FragmentShader","uniforms","transformFeedbackVaryings","handle","_compileAndLink","_readUniformLocationsFromLinkedProgram","configuration","ProgramConfiguration","setProps","options","setUniforms","logPriority","drawMode","vertexCount","offset","start","end","isIndexed","indexType","isInstanced","instanceCount","vertexArray","transformFeedback","framebuffer","parameters","samplers","log","deprecated","undefined","fb","message","useProgram","_areTexturesRenderable","bindForDraw","assign","primitiveMode","begin","_bindTextures","drawElementsInstanced","isNaN","drawRangeElements","drawElements","drawArraysInstanced","drawArrays","_onChangeCallback","somethingChanged","changedUniforms","key","_uniformSetters","_setUniforms","texturesRenderable","uniformName","uniformSetter","textureIndex","uniform","Framebuffer","texture","Texture","loaded","bind","_textureIndexCounter","createProgram","deleteProgram","shaderHandles","getAttachedShaders","opts","shaderHandle","type","getShaderParameter","pname","getProgramParameter","programName","_getName","getName","replace","attachShader","time","linkProgram","timeEnd","debug","priority","validateProgram","linked","Error","getProgramInfoLog","_uniformCount","_getParameter","i","info","getActiveUniform","name","isArray","location","getUniformLocation","uniformIndices","getActiveUniforms","blockName","getUniformBlockIndex","blockIndex","getActiveUniformBlockParameter","blockBinding","uniformBlockBinding","Resource"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\n\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport {checkUniformValues, areUniformsEqual, getUniformCopy} from './uniforms';\n\nimport {withParameters} from '../context';\nimport {assertWebGL2Context, isWebGL2, getKey} from '../webgl-utils';\nimport {getPrimitiveDrawMode} from '../webgl-utils/attribute-utils';\nimport {log, uid, assert} from '../utils';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 4;\n\nconst GL_SEPARATE_ATTRIBS = 0x8c8d;\n\nconst V6_DEPRECATED_METHODS = [\n  'setVertexArray',\n  'setAttributes',\n  'setBuffers',\n  'unsetBuffers',\n\n  'use',\n  'getUniformCount',\n  'getUniformInfo',\n  'getUniformLocation',\n  'getUniformValue',\n\n  'getVarying',\n  'getFragDataLocation',\n  'getAttachedShaders',\n  'getAttributeCount',\n  'getAttributeLocation',\n  'getAttributeInfo'\n];\n\nexport default class Program extends Resource {\n  constructor(gl, props = {}) {\n    super(gl, props);\n\n    this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    // Experimental flag to avoid deleting Program object while it is cached\n    this._isCached = false;\n\n    this.initialize(props);\n\n    Object.seal(this);\n\n    this._setId(props.id);\n  }\n\n  initialize(props = {}) {\n    const {vs, fs, varyings, bufferMode = GL_SEPARATE_ATTRIBS} = props;\n    // Create shaders if needed\n    this.vs =\n      typeof vs === 'string' ? new VertexShader(this.gl, {id: `${props.id}-vs`, source: vs}) : vs;\n    this.fs =\n      typeof fs === 'string' ? new FragmentShader(this.gl, {id: `${props.id}-fs`, source: fs}) : fs;\n    assert(this.vs instanceof VertexShader);\n    assert(this.fs instanceof FragmentShader);\n\n    // uniforms\n    this.uniforms = {};\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n    }\n\n    this._compileAndLink();\n    this._readUniformLocationsFromLinkedProgram();\n    this.configuration = new ProgramConfiguration(this);\n\n    return this.setProps(props);\n  }\n\n  delete(options = {}) {\n    if (this._isCached) {\n      // This object is cached, do not delete\n      return this;\n    }\n    return super.delete(options);\n  }\n\n  setProps(props) {\n    if ('uniforms' in props) {\n      this.setUniforms(props.uniforms);\n    }\n    return this;\n  }\n\n  // A good thing about the WebGL API is that there are so many ways to draw things ;)\n  // This function unifies those ways into a single call using common parameters with sane defaults\n  draw({\n    logPriority, // Probe log priority, enables Model to do more integrated logging\n\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n\n    vertexArray = null,\n    transformFeedback,\n    framebuffer,\n    parameters = {},\n\n    // Deprecated\n    uniforms,\n    samplers\n  }) {\n    if (uniforms || samplers) {\n      // DEPRECATED: v7.0 (deprecated earlier but warning not properly implemented)\n      log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n      this.setUniforms(uniforms || {});\n    }\n\n    if (logPriority !== undefined) {\n      const fb = framebuffer ? framebuffer.id : 'default';\n      const message =\n        `mode=${getKey(this.gl, drawMode)} verts=${vertexCount} ` +\n        `instances=${instanceCount} indexType=${getKey(this.gl, indexType)} ` +\n        `isInstanced=${isInstanced} isIndexed=${isIndexed} ` +\n        `Framebuffer=${fb}`;\n      log.log(logPriority, message)();\n    }\n\n    // TODO - move vertex array binding and transform feedback binding to withParameters?\n    assert(vertexArray);\n\n    this.gl.useProgram(this.handle);\n\n    // Note: async textures set as uniforms might still be loading.\n    // Now that all uniforms have been updated, check if any texture\n    // in the uniforms is not yet initialized, then we don't draw\n    if (!this._areTexturesRenderable()) {\n      return false;\n    }\n\n    vertexArray.bindForDraw(vertexCount, instanceCount, () => {\n      if (framebuffer !== undefined) {\n        parameters = Object.assign({}, parameters, {framebuffer});\n      }\n\n      if (transformFeedback) {\n        const primitiveMode = getPrimitiveDrawMode(drawMode);\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this._bindTextures();\n\n      withParameters(this.gl, parameters, () => {\n        // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n        if (isIndexed && isInstanced) {\n          this.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n        } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n          this.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n        } else if (isIndexed) {\n          this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n        } else if (isInstanced) {\n          this.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n        } else {\n          this.gl.drawArrays(drawMode, offset, vertexCount);\n        }\n      });\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n    });\n\n    return true;\n  }\n\n  setUniforms(uniforms = {}, _onChangeCallback = () => {}) {\n    // Simple change detection - if all uniforms are unchanged, do nothing\n    let somethingChanged = false;\n    const changedUniforms = {};\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        changedUniforms[key] = uniforms[key];\n        this.uniforms[key] = getUniformCopy(uniforms[key]);\n      }\n    }\n\n    if (somethingChanged) {\n      _onChangeCallback();\n      checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n      this._setUniforms(changedUniforms);\n    }\n\n    return this;\n  }\n\n  // PRIVATE METHODS\n\n  // stub for shader chache, should reset uniforms to default valiues\n  reset() {}\n\n  // Checks if all texture-values uniforms are renderable (i.e. loaded)\n  // Note: This is currently done before every draw call\n  _areTexturesRenderable() {\n    let texturesRenderable = true;\n\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          const framebuffer = uniform;\n          uniform = framebuffer.texture;\n        }\n\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Check that texture is loaded\n          texturesRenderable = texturesRenderable && texture.loaded;\n        }\n      }\n    }\n\n    return texturesRenderable;\n  }\n\n  // Binds textures\n  // Note: This is currently done before every draw call\n  _bindTextures() {\n    for (const uniformName in this.uniforms) {\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n        let uniform = this.uniforms[uniformName];\n\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          const texture = uniform;\n          // Bind texture to index\n          texture.bind(uniformSetter.textureIndex);\n        }\n      }\n    }\n  }\n\n  // Apply a set of uniform values to a program\n  // Only uniforms actually present in the linked program will be updated.\n  _setUniforms(uniforms) {\n    this.gl.useProgram(this.handle);\n\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          // eslint-disable-next-line max-depth\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  // RESOURCE METHODS\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  // Extract opts needed to initialize a `Program` from an independently created WebGLProgram handle\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n        case GL.VERTEX_SHADER:\n          opts.vs = new VertexShader({handle: shaderHandle});\n          break;\n        case GL.FRAGMENT_SHADER:\n          opts.fs = new FragmentShader({handle: shaderHandle});\n          break;\n        default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // If program is not named, name it after shader names\n  // TODO - this.id will already have been initialized\n  _setId(id) {\n    if (!id) {\n      const programName = this._getName();\n      this.id = uid(programName);\n    }\n  }\n\n  // Generate a default name for the program based on names of the shaders\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`)();\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking: ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n  }\n\n  // query uniform locations and build name to setter map.\n  // TODO - This overlaps with ProgramConfiguration?\n  _readUniformLocationsFromLinkedProgram() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this._getParameter(GL.ACTIVE_UNIFORMS);\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.gl.getActiveUniform(this.handle, i);\n      const {name, isArray} = parseUniformName(info.name);\n      const location = gl.getUniformLocation(this.handle, name);\n      this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  // TO BE REMOVED in v7?\n\n  // Rretrieves information about active uniforms identifed by their indices (`uniformIndices`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms\n  getActiveUniforms(uniformIndices, pname) {\n    return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n  }\n\n  // Retrieves the index of a uniform block\n  getUniformBlockIndex(blockName) {\n    return this.gl.getUniformBlockIndex(this.handle, blockName);\n  }\n\n  // Retrieves information about an active uniform block (`blockIndex`)\n  // https://\n  // developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter\n  getActiveUniformBlockParameter(blockIndex, pname) {\n    return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n  }\n\n  // Binds a uniform block (`blockIndex`) to a specific binding point (`blockBinding`)\n  uniformBlockBinding(blockIndex, blockBinding) {\n    this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n  }\n}\n"],"file":"program.js"}