{"version":3,"sources":["../../../src/gltf/gltf-scenegraph-loader.js"],"names":["assert","GLTFLoader","createGLTFObjects","parse","data","options","uri","loader","gl","gltf","decompress","gltfObjects","waitForFullLoad","waitForGLTFAssets","Object","assign","remaining","scenes","forEach","scene","traverse","model","values","program","uniforms","uniform","loaded","push","waitWhileCondition","some","condition","Promise","resolve","window","requestAnimationFrame","name","extensions"],"mappings":";;AACA,SAAQA,MAAR,QAAqB,eAArB;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,OAAOC,iBAAP,MAA8B,uBAA9B;;SAEeC,K;;;;;6BAAf,WAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,GAApC,EAAyCC,MAAzC,EAAiD;AAC/CP,IAAAA,MAAM,CAACK,OAAO,CAACG,EAAT,CAAN;AAEA,UAAMC,IAAI,SAASR,UAAU,CAACE,KAAX,CAAiBC,IAAjB,oBACdC,OADc;AAEjBC,MAAAA,GAFiB;AAGjBI,MAAAA,UAAU,EAAE;AAHK,OAAnB;AAMA,UAAMC,WAAW,GAAGT,iBAAiB,CAACG,OAAO,CAACG,EAAT,EAAaC,IAAb,EAAmBJ,OAAnB,CAArC;;AAEA,QAAIA,OAAO,CAACO,eAAZ,EAA6B;AAC3B,YAAMC,iBAAiB,CAACF,WAAD,CAAvB;AACD;;AAED,WAAOG,MAAM,CAACC,MAAP,CAAc;AAACN,MAAAA;AAAD,KAAd,EAAsBE,WAAtB,CAAP;AACD,G;;;;SAEcE,iB;;;;;yCAAf,WAAiCF,WAAjC,EAA8C;AAC5C,UAAMK,SAAS,GAAG,EAAlB;AAEAL,IAAAA,WAAW,CAACM,MAAZ,CAAmBC,OAAnB,CAA2BC,KAAK,IAAI;AAClCA,MAAAA,KAAK,CAACC,QAAN,CAAeC,KAAK,IAAI;AACtBP,QAAAA,MAAM,CAACQ,MAAP,CAAcD,KAAK,CAACA,KAAN,CAAYE,OAAZ,CAAoBC,QAAlC,EAA4CN,OAA5C,CAAoDO,OAAO,IAAI;AAC7D,cAAIA,OAAO,CAACC,MAAR,KAAmB,KAAvB,EAA8B;AAC5BV,YAAAA,SAAS,CAACW,IAAV,CAAeF,OAAf;AACD;AACF,SAJD;AAKD,OAND;AAOD,KARD;AAUA,iBAAaG,kBAAkB,CAAC,MAAMZ,SAAS,CAACa,IAAV,CAAeJ,OAAO,IAAI,CAACA,OAAO,CAACC,MAAnC,CAAP,CAA/B;AACD,G;;;;SAEcE,kB;;;;;0CAAf,WAAkCE,SAAlC,EAA6C;AAC3C,WAAOA,SAAS,EAAhB,EAAoB;AAClB,YAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,MAAM,CAACC,qBAAP,CAA6BF,OAA7B,CAAvB,CAAN;AACD;AACF,G;;;;AAED,eAAe;AACbG,EAAAA,IAAI,EAAE,wBADO;AAEbC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,CAFC;AAGbjC,EAAAA;AAHa,CAAf","sourcesContent":["/* global window */\nimport {assert} from '@luma.gl/core';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport createGLTFObjects from './create-gltf-objects';\n\nasync function parse(data, options, uri, loader) {\n  assert(options.gl);\n\n  const gltf = await GLTFLoader.parse(data, {\n    ...options,\n    uri,\n    decompress: true\n  });\n\n  const gltfObjects = createGLTFObjects(options.gl, gltf, options);\n\n  if (options.waitForFullLoad) {\n    await waitForGLTFAssets(gltfObjects);\n  }\n\n  return Object.assign({gltf}, gltfObjects);\n}\n\nasync function waitForGLTFAssets(gltfObjects) {\n  const remaining = [];\n\n  gltfObjects.scenes.forEach(scene => {\n    scene.traverse(model => {\n      Object.values(model.model.program.uniforms).forEach(uniform => {\n        if (uniform.loaded === false) {\n          remaining.push(uniform);\n        }\n      });\n    });\n  });\n\n  return await waitWhileCondition(() => remaining.some(uniform => !uniform.loaded));\n}\n\nasync function waitWhileCondition(condition) {\n  while (condition()) {\n    await new Promise(resolve => window.requestAnimationFrame(resolve));\n  }\n}\n\nexport default {\n  name: 'GLTF Scenegraph Loader',\n  extensions: ['gltf', 'glb'],\n  parse\n};\n"],"file":"gltf-scenegraph-loader.js"}