{"version":3,"sources":["../../../src/lib/model.js"],"names":["Query","TransformFeedback","Buffer","getBuffersFromGeometry","BaseModel","log","isObjectEmpty","uid","assert","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","Model","constructor","gl","props","id","initialize","drawMode","undefined","vertexCount","geometryBuffers","isInstanced","instanced","_setModelProps","geometry","Number","isFinite","setProps","delete","_deleteGeometryBuffers","destroy","getDrawMode","getVertexCount","getInstanceCount","instanceCount","getAttributes","attributes","setDrawMode","setVertexCount","setInstanceCount","setGeometry","vertexArray","setAttributes","normalizedAttributes","name","attribute","getValue","draw","options","drawGeometry","transform","discard","feedbackBuffers","unbindModels","parameters","_setFeedbackBuffers","Object","assign","forEach","model","unbindBuffers","bindBuffers","render","uniforms","warn","setUniforms","_feedbackBuffers","buffer","_setAnimationProps","animationProps","animated","animatedUniforms","_evaluateAnimateUniforms","program","_checkForDeprecatedUniforms","transformFeedback","setBuffers","_timerQueryStart","timerQueryEnabled","timeElapsedQuery","lastQueryReturned","beginTimeElapsedQuery","_timerQueryEnd","end","isResultAvailable","elapsedTime","getTimerMilliseconds","stats","lastFrameTime","accumulatedFrameTime","profileFrameCount","averageFrameTime"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Query, TransformFeedback, Buffer} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\nimport BaseModel from './base-model';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\nconst LOG_DRAW_PRIORITY = 2;\n\nexport default class Model extends BaseModel {\n  constructor(gl, props) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    super(gl, {...props, id});\n  }\n\n  initialize(props = {}) {\n    super.initialize(props);\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelProps(props);\n  }\n\n  delete() {\n    super.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // DRAW CALLS\n\n  draw(options = {}) {\n    return this.drawGeometry(options);\n  }\n\n  // Draw call for transform feedback\n  transform(options = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = options;\n\n    let {parameters} = options;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, options, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms, () => {\n        // if something changed\n        this._checkForDeprecatedUniforms(animatedUniforms);\n      });\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n}\n"],"file":"model.js"}