{"version":3,"sources":["../../../src/geometry/geometry.js"],"names":["uid","assert","DRAW_MODE","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","Geometry","constructor","props","id","drawMode","mode","attributes","indices","vertexCount","userData","_setAttributes","_calculateVertexCount","getVertexCount","getAttributes","_print","attributeName","ArrayBuffer","isView","value","size","attribute","isIndexed","undefined","Object","assign","length","Infinity","constant","Math","min","Number","isFinite","POSITION","positions"],"mappings":"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","sourcesContent":["import {uid, assert} from '../utils';\n\n// Rendering primitives - specify how to extract primitives from vertices.\n// NOTE: These are numerically identical to the corresponding WebGL/OpenGL constants\nexport const DRAW_MODE = {\n  POINTS: 0x0000, // draw single points.\n  LINES: 0x0001, // draw lines. Each vertex connects to the one after it.\n  LINE_LOOP: 0x0002, // draw lines. Each set of two vertices is treated as a separate line segment.\n  LINE_STRIP: 0x0003, // draw a connected group of line segments from the first vertex to the last\n  TRIANGLES: 0x0004, // draw triangles. Each set of three vertices creates a separate triangle.\n  TRIANGLE_STRIP: 0x0005, // draw a connected group of triangles.\n  TRIANGLE_FAN: 0x0006 // draw a connected group of triangles.\n  // Each vertex connects to the previous and the first vertex in the fan.\n};\n\nexport default class Geometry {\n  static get DRAW_MODE() {\n    return DRAW_MODE;\n  }\n\n  constructor(props = {}) {\n    const {\n      id = uid('geometry'),\n      drawMode = DRAW_MODE.TRIANGLES,\n      mode,\n      attributes = {},\n      indices = null,\n      vertexCount = null\n    } = props;\n\n    this.id = id;\n    this.drawMode = drawMode | 0 || mode | 0;\n    this.attributes = {};\n    this.userData = {};\n\n    this._setAttributes(attributes, indices);\n\n    this.vertexCount = vertexCount || this._calculateVertexCount(this.attributes, this.indices);\n\n    // stubRemovedMethods(this, [\n    //   'setNeedsRedraw', 'needsRedraw', 'setAttributes'\n    // ], 'Immutable');\n\n    // stubRemovedMethods(this, [\n    //   'hasAttribute', 'getAttribute', 'getArray'\n    // ], 'Use geometry.attributes and geometry.indices');\n\n    // deprecateMethods(this, ['getAttributes'])\n  }\n\n  get mode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  // Return an object with all attributes plus indices added as a field.\n  getAttributes() {\n    return this.indices ? {indices: this.indices, ...this.attributes} : this.attributes;\n  }\n\n  // PRIVATE\n\n  _print(attributeName) {\n    return `Geometry ${this.id} attribute ${attributeName}`;\n  }\n\n  // Attribute\n  // value: typed array\n  // type: indices, vertices, uvs\n  // size: elements per vertex\n  // target: WebGL buffer type (string or constant)\n  _setAttributes(attributes, indices) {\n    if (indices) {\n      this.indices = ArrayBuffer.isView(indices) ? {value: indices, size: 1} : indices;\n    }\n\n    for (const attributeName in attributes) {\n      let attribute = attributes[attributeName];\n\n      // Wrap \"unwrapped\" arrays and try to autodetect their type\n      attribute = ArrayBuffer.isView(attribute) ? {value: attribute} : attribute;\n\n      assert(\n        ArrayBuffer.isView(attribute.value),\n        `${this._print(attributeName)}: must be typed array or object with value as typed array`\n      );\n\n      // Move indices to separate field\n      if (attributeName === 'indices') {\n        assert(!this.indices);\n        this.indices = attribute;\n        if (this.indices.isIndexed !== undefined) {\n          this.indices = Object.assign({}, this.indices);\n          delete this.indices.isIndexed;\n        }\n      } else {\n        this.attributes[attributeName] = attribute;\n      }\n    }\n    return this;\n  }\n\n  _calculateVertexCount(attributes, indices) {\n    if (indices) {\n      return indices.value.length;\n    }\n    let vertexCount = Infinity;\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const {value, size, constant} = attribute;\n      if (!constant && value && size >= 1) {\n        vertexCount = Math.min(vertexCount, value.length / size);\n      }\n    }\n\n    // TODO - Magic, should this be removed?\n    if (!Number.isFinite(vertexCount)) {\n      const attribute = attributes.POSITION || attributes.positions;\n      if (attribute) {\n        vertexCount = attribute.value && attribute.value.length / (attribute.size || 3);\n      }\n    }\n\n    assert(Number.isFinite(vertexCount));\n    return vertexCount;\n  }\n}\n"],"file":"geometry.js"}