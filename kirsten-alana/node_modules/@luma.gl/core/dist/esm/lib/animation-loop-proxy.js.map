{"version":3,"sources":["../../../src/lib/animation-loop-proxy.js"],"names":["getPageLoadPromise","getCanvas","requestAnimationFrame","cancelAnimationFrame","log","assert","AnimationLoopProxy","animationLoop","self","setProps","useDevicePixels","autoResizeDrawingBuffer","canvas","initializeCanvas","eventHandlers","Map","addEventListener","type","handler","postMessage","command","has","set","get","push","removeEventListener","handlers","splice","indexOf","dispatchEvent","event","forEach","evt","data","opts","start","stop","width","height","worker","onInitialize","onFinalize","props","Worker","_running","_animationFrameId","_resolveNextFrame","_nextFramePromise","_onMessage","bind","_onEvent","_updateFrame","onmessage","then","_createAndTransferCanvas","Promise","resolve","devicePixelRatio","window","safeEvent","key","value","valueType","_resizeCanvasDrawingBuffer","screenCanvas","transferControlToOffscreen","error","offscreenCanvas","Object","assign","clientWidth","clientHeight"],"mappings":"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","sourcesContent":["/* global window, Worker */\nimport {getPageLoadPromise, getCanvas} from '@luma.gl/webgl';\nimport {requestAnimationFrame, cancelAnimationFrame} from '@luma.gl/webgl';\nimport {log, assert} from '../utils';\n\nexport default class AnimationLoopProxy {\n  // Create the script for the rendering worker.\n  // @param opts {object} - options to construct an AnimationLoop instance\n  static createWorker(animationLoop) {\n    return self => {\n      animationLoop.setProps({\n        // Prevent the animation loop from trying to access DOM properties\n        useDevicePixels: false,\n        autoResizeDrawingBuffer: false\n      });\n\n      self.canvas = null;\n\n      function initializeCanvas(canvas) {\n        const eventHandlers = new Map();\n\n        canvas.addEventListener = (type, handler) => {\n          self.postMessage({command: 'addEventListener', type});\n          if (!eventHandlers.has(type)) {\n            eventHandlers.set(type, []);\n          }\n          eventHandlers.get(type).push(handler);\n        };\n        canvas.removeEventListener = (type, handler) => {\n          self.postMessage({command: 'removeEventListener', type});\n          const handlers = eventHandlers.get(type);\n          if (handlers) {\n            handlers.splice(handlers.indexOf(handler), 1);\n          }\n        };\n        canvas.dispatchEvent = (type, event) => {\n          const handlers = eventHandlers.get(type);\n          if (handlers) {\n            handlers.forEach(handler => handler(event));\n          }\n        };\n\n        self.canvas = canvas;\n      }\n\n      self.addEventListener('message', evt => {\n        switch (evt.data.command) {\n          case 'start':\n            initializeCanvas(evt.data.opts.canvas);\n            animationLoop.start(evt.data.opts);\n            break;\n\n          case 'stop':\n            animationLoop.stop();\n            break;\n\n          case 'resize':\n            self.canvas.width = evt.data.width;\n            self.canvas.height = evt.data.height;\n            break;\n\n          case 'event':\n            self.canvas.dispatchEvent(evt.data.type, evt.data.event);\n            break;\n\n          default:\n        }\n      });\n    };\n  }\n\n  /*\n   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context\n   */\n  constructor(worker, opts = {}) {\n    const {\n      onInitialize = () => {},\n      onFinalize = () => {},\n      useDevicePixels = true,\n      autoResizeDrawingBuffer = true\n    } = opts;\n\n    this.props = {\n      onInitialize,\n      onFinalize\n    };\n\n    this.setProps({\n      autoResizeDrawingBuffer,\n      useDevicePixels\n    });\n\n    // state\n    assert(worker instanceof Worker);\n    this.worker = worker;\n    this.canvas = null;\n    this.width = null;\n    this.height = null;\n\n    this._running = false;\n    this._animationFrameId = null;\n    this._resolveNextFrame = null;\n    this._nextFramePromise = null;\n\n    // bind methods\n    this._onMessage = this._onMessage.bind(this);\n    this._onEvent = this._onEvent.bind(this);\n    this._updateFrame = this._updateFrame.bind(this);\n  }\n\n  setProps(props) {\n    if ('autoResizeDrawingBuffer' in props) {\n      this.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n    }\n    if ('useDevicePixels' in props) {\n      this.useDevicePixels = props.useDevicePixels;\n    }\n    return this;\n  }\n\n  /* Public methods */\n\n  // Starts a render loop if not already running\n  start(opts = {}) {\n    if (this._running) {\n      return this;\n    }\n    this._running = true;\n    // console.debug(`Starting ${this.constructor.name}`);\n    this.worker.onmessage = this._onMessage;\n\n    // Wait for start promise before rendering frame\n    getPageLoadPromise()\n      .then(() => {\n        if (!this._running) {\n          return null;\n        }\n        this._createAndTransferCanvas(opts);\n        return this.props.onInitialize(this);\n      })\n      .then(() => {\n        if (this._running) {\n          this._animationFrameId = requestAnimationFrame(this._updateFrame);\n        }\n      });\n    return this;\n  }\n\n  // Stops a render loop if already running, finalizing\n  stop() {\n    if (this._running) {\n      cancelAnimationFrame(this._animationFrameId);\n      this._animationFrameId = null;\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n      this._running = false;\n      this.props.onFinalize(this);\n    }\n    this.worker.postMessage({command: 'stop'});\n    return this;\n  }\n\n  waitForRender() {\n    if (!this._nextFramePromise) {\n      this._nextFramePromise = new Promise(resolve => {\n        this._resolveNextFrame = resolve;\n      });\n    }\n    return this._nextFramePromise;\n  }\n\n  // PRIVATE METHODS\n\n  _onMessage(evt) {\n    switch (evt.data.command) {\n      case 'addEventListener':\n        this.canvas.addEventListener(evt.data.type, this._onEvent);\n        break;\n\n      case 'removeEventListener':\n        this.canvas.removeEventListener(evt.data.type, this._onEvent);\n        break;\n\n      default:\n    }\n  }\n\n  _onEvent(evt) {\n    const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n    const type = evt.type;\n\n    const safeEvent = {};\n    for (const key in evt) {\n      let value = evt[key];\n      const valueType = typeof value;\n      if (key === 'offsetX' || key === 'offsetY') {\n        value *= devicePixelRatio;\n      }\n      if (valueType === 'number' || valueType === 'boolean' || valueType === 'string') {\n        safeEvent[key] = value;\n      }\n    }\n\n    this.worker.postMessage({\n      command: 'event',\n      type,\n      event: safeEvent\n    });\n  }\n\n  _updateFrame() {\n    this._resizeCanvasDrawingBuffer();\n    if (this._resolveNextFrame) {\n      this._resolveNextFrame(this);\n      this._nextFramePromise = null;\n      this._resolveNextFrame = null;\n    }\n    this._animationFrameId = requestAnimationFrame(this._updateFrame);\n  }\n\n  _createAndTransferCanvas(opts) {\n    // Create a canvas on the main thread\n    const screenCanvas = getCanvas(opts);\n\n    // Create an offscreen canvas controlling the main canvas\n    if (!screenCanvas.transferControlToOffscreen) {\n      log.error('OffscreenCanvas is not available in your browser.')(); // eslint-disable-line\n    }\n    const offscreenCanvas = screenCanvas.transferControlToOffscreen();\n\n    // Transfer the offscreen canvas to the worker\n    this.worker.postMessage(\n      {\n        command: 'start',\n        opts: Object.assign({}, opts, {canvas: offscreenCanvas})\n      },\n      [offscreenCanvas]\n    );\n\n    // store the main canvas on the local thread\n    this.canvas = screenCanvas;\n  }\n\n  _resizeCanvasDrawingBuffer() {\n    if (this.autoResizeDrawingBuffer) {\n      const devicePixelRatio = this.useDevicePixels ? window.devicePixelRatio || 1 : 1;\n      const width = this.canvas.clientWidth * devicePixelRatio;\n      const height = this.canvas.clientHeight * devicePixelRatio;\n\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.worker.postMessage({\n          command: 'resize',\n          width,\n          height\n        });\n      }\n    }\n  }\n}\n"],"file":"animation-loop-proxy.js"}