{"version":3,"sources":["../../../src/lib/model-utils.js"],"names":["GLTF_TO_LUMA_ATTRIBUTE_MAP","POSITION","NORMAL","COLOR_0","TEXCOORD_0","TEXCOORD_1","TEXCOORD_2","getBuffersFromGeometry","gl","geometry","options","buffers","name","attributes","attribute","remappedName","mapAttributeName","constant","value","typedArray","accessor","Buffer","inferAttributeAccessor","indices","data","target","attributeMap","attributeName","category","size","isIndexed","undefined","Uint16Array","Uint32Array","Number","isFinite"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/webgl';\nimport {assert} from '../utils';\n\n// Support for mapping new geometries with glTF attribute names to \"classic\" luma.gl shader names\nconst GLTF_TO_LUMA_ATTRIBUTE_MAP = {\n  POSITION: 'positions',\n  NORMAL: 'normals',\n  COLOR_0: 'colors',\n  TEXCOORD_0: 'texCoords',\n  TEXCOORD_1: 'texCoords1',\n  TEXCOORD_2: 'texCoords2'\n};\n\nexport function getBuffersFromGeometry(gl, geometry, options) {\n  const buffers = {};\n\n  for (const name in geometry.attributes) {\n    const attribute = geometry.attributes[name];\n    const remappedName = mapAttributeName(name, options);\n\n    if (attribute.constant) {\n      buffers[remappedName] = attribute.value;\n    } else {\n      const typedArray = attribute.value;\n      // Create accessor by copying the attribute and removing `value``\n      const accessor = {...attribute};\n      delete accessor.value;\n      buffers[remappedName] = [new Buffer(gl, typedArray), accessor];\n\n      inferAttributeAccessor(name, accessor);\n    }\n  }\n\n  if (geometry.indices) {\n    buffers.indices = new Buffer(gl, {\n      data: geometry.indices.value || geometry.indices,\n      target: GL.ELEMENT_ARRAY_BUFFER\n    });\n  }\n\n  return buffers;\n}\n\nfunction mapAttributeName(name, options) {\n  const {attributeMap = GLTF_TO_LUMA_ATTRIBUTE_MAP} = options || {};\n  return (attributeMap && attributeMap[name]) || name;\n}\n\n// Check for well known attribute names\n// eslint-disable-next-line complexity\nexport function inferAttributeAccessor(attributeName, attribute) {\n  let category;\n  switch (attributeName) {\n    case 'indices':\n      category = category || 'indices';\n      break;\n    case 'texCoords':\n    case 'texCoord1':\n    case 'texCoord2':\n    case 'texCoord3':\n      category = 'uvs';\n      break;\n    case 'vertices':\n    case 'positions':\n    case 'normals':\n    case 'pickingColors':\n      category = 'vectors';\n      break;\n    default:\n  }\n\n  // Check for categorys\n  switch (category) {\n    case 'vectors':\n      attribute.size = attribute.size || 3;\n      break;\n    case 'uvs':\n      attribute.size = attribute.size || 2;\n      break;\n    case 'indices':\n      attribute.size = attribute.size || 1;\n      attribute.isIndexed = attribute.isIndexed === undefined ? true : attribute.isIndexed;\n      assert(\n        attribute.value instanceof Uint16Array || attribute.value instanceof Uint32Array,\n        'attribute array for \"indices\" must be of integer type'\n      );\n      break;\n    default:\n  }\n\n  assert(Number.isFinite(attribute.size), `attribute ${attributeName} needs size`);\n}\n"],"file":"model-utils.js"}