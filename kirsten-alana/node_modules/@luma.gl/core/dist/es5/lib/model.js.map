{"version":3,"sources":["../../../src/lib/model.js"],"names":["ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","Model","gl","props","id","drawMode","undefined","vertexCount","geometryBuffers","isInstanced","instanced","_setModelProps","geometry","Number","isFinite","_deleteGeometryBuffers","instanceCount","attributes","getVertexCount","vertexArray","setAttributes","normalizedAttributes","name","attribute","getValue","options","drawGeometry","discard","feedbackBuffers","unbindModels","parameters","_setFeedbackBuffers","Object","assign","forEach","model","unbindBuffers","draw","bindBuffers","uniforms","log","warn","setUniforms","setGeometry","_feedbackBuffers","buffer","Buffer","animationProps","animated","animatedUniforms","_evaluateAnimateUniforms","program","_checkForDeprecatedUniforms","transformFeedback","TransformFeedback","setBuffers","timerQueryEnabled","timeElapsedQuery","Query","lastQueryReturned","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getTimerMilliseconds","stats","lastFrameTime","accumulatedFrameTime","profileFrameCount","averageFrameTime","BaseModel"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {Query, TransformFeedback, Buffer} from '@luma.gl/webgl';\nimport {getBuffersFromGeometry} from './model-utils';\nimport BaseModel from './base-model';\nimport {log, isObjectEmpty, uid, assert} from '../utils';\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\nconst LOG_DRAW_PRIORITY = 2;\n\nexport default class Model extends BaseModel {\n  constructor(gl, props) {\n    // Deduce a helpful id\n    const {id = uid('model')} = props;\n    super(gl, {...props, id});\n  }\n\n  initialize(props = {}) {\n    super.initialize(props);\n\n    this.drawMode = props.drawMode !== undefined ? props.drawMode : GL.TRIANGLES;\n    this.vertexCount = props.vertexCount || 0;\n\n    // Track buffers created by setGeometry\n    this.geometryBuffers = {};\n\n    // geometry might have set drawMode and vertexCount\n    this.isInstanced = props.isInstanced || props.instanced;\n\n    this._setModelProps(props);\n\n    // TODO - just to unbreak deck.gl 7.0-beta, remove as soon as updated\n    this.geometry = {};\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this._setModelProps(props);\n  }\n\n  delete() {\n    super.delete();\n\n    this._deleteGeometryBuffers();\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  // GETTERS\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  // SETTERS\n\n  setDrawMode(drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  setGeometry(geometry) {\n    this.drawMode = geometry.drawMode;\n    this.vertexCount = geometry.getVertexCount();\n\n    this._deleteGeometryBuffers();\n\n    this.geometryBuffers = getBuffersFromGeometry(this.gl, geometry);\n    this.vertexArray.setAttributes(this.geometryBuffers);\n    return this;\n  }\n\n  setAttributes(attributes = {}) {\n    // Avoid setting needsRedraw if no attributes\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    const normalizedAttributes = {};\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      // The `getValue` call provides support for deck.gl `Attribute` class\n      // TODO - remove once deck refactoring completes\n      normalizedAttributes[name] = attribute.getValue ? attribute.getValue() : attribute;\n    }\n\n    this.vertexArray.setAttributes(normalizedAttributes);\n    return this;\n  }\n\n  // DRAW CALLS\n\n  draw(options = {}) {\n    return this.drawGeometry(options);\n  }\n\n  // Draw call for transform feedback\n  transform(options = {}) {\n    const {discard = true, feedbackBuffers, unbindModels = []} = options;\n\n    let {parameters} = options;\n\n    if (feedbackBuffers) {\n      this._setFeedbackBuffers(feedbackBuffers);\n    }\n\n    if (discard) {\n      parameters = Object.assign({}, parameters, {[GL.RASTERIZER_DISCARD]: discard});\n    }\n\n    unbindModels.forEach(model => model.vertexArray.unbindBuffers());\n    try {\n      this.draw(Object.assign({}, options, {parameters}));\n    } finally {\n      unbindModels.forEach(model => model.vertexArray.bindBuffers());\n    }\n\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  render(uniforms = {}) {\n    log.warn('Model.render() is deprecated. Use Model.setUniforms() and Model.draw()')();\n    return this.setUniforms(uniforms).draw();\n  }\n\n  // PRIVATE METHODS\n\n  _setModelProps(props) {\n    // params\n    // if ('drawMode' in props) {\n    //   this.drawMode = getDrawMode(props.drawMode);\n    // }\n    // if ('vertexCount' in props) {\n    //   this.vertexCount = props.vertexCount;\n    // }\n    if ('instanceCount' in props) {\n      this.instanceCount = props.instanceCount;\n    }\n    if ('geometry' in props) {\n      this.setGeometry(props.geometry);\n    }\n\n    // webgl settings\n    if ('attributes' in props) {\n      this.setAttributes(props.attributes);\n    }\n    if ('_feedbackBuffers' in props) {\n      this._setFeedbackBuffers(props._feedbackBuffers);\n    }\n  }\n\n  _deleteGeometryBuffers() {\n    for (const name in this.geometryBuffers) {\n      // Buffer is raw value (for indices) or first element of [buffer, accessor] pair\n      const buffer = this.geometryBuffers[name][0] || this.geometryBuffers[name];\n      if (buffer instanceof Buffer) {\n        buffer.delete();\n      }\n    }\n  }\n\n  // Updates (evaluates) all function valued uniforms based on a new set of animationProps\n  // experimental\n  _setAnimationProps(animationProps) {\n    if (this.animated) {\n      assert(animationProps, 'Model.draw(): animated uniforms but no animationProps');\n      const animatedUniforms = this._evaluateAnimateUniforms(animationProps);\n      this.program.setUniforms(animatedUniforms, () => {\n        // if something changed\n        this._checkForDeprecatedUniforms(animatedUniforms);\n      });\n    }\n  }\n\n  // Transform Feedback\n\n  _setFeedbackBuffers(feedbackBuffers = {}) {\n    // Avoid setting needsRedraw if no feedbackBuffers\n    if (isObjectEmpty(feedbackBuffers)) {\n      return this;\n    }\n\n    const {gl} = this.program;\n    this.transformFeedback =\n      this.transformFeedback ||\n      new TransformFeedback(gl, {\n        program: this.program\n      });\n\n    this.transformFeedback.setBuffers(feedbackBuffers);\n    return this;\n  }\n\n  // Timer Queries\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getTimerMilliseconds();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(\n          LOG_DRAW_PRIORITY,\n          `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        )();\n      }\n    }\n  }\n}\n"],"file":"model.js"}