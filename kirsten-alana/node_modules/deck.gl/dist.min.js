!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("h3"),require("S2"));else if("function"==typeof define&&define.amd)define(["h3","S2"],t);else{var e="object"==typeof exports?t(require("h3"),require("S2")):t(n.h3,n.S2);for(var l in e)("object"==typeof exports?exports:n)[l]=e[l]}}(window,function(n,t){return function(n){var t={};function e(l){if(t[l])return t[l].exports;var i=t[l]={i:l,l:!1,exports:{}};return n[l].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=n,e.c=t,e.d=function(n,t,l){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:l})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var l=Object.create(null);if(e.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var i in n)e.d(l,i,function(t){return n[t]}.bind(null,i));return l},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=97)}([function(n,t,e){"use strict";function l(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";e.r(t);var l=e(2),i=e(3),r=e(43),u=e(20),o=new(e(123).a)({id:"luma"}).enable(),a=e(125),s=(e(67),new(function(){function n(){Object(l.a)(this,n),this.stats=new Map}return Object(i.a)(n,[{key:"get",value:function(n){return this.stats.has(n)||this.stats.set(n,new a.a({id:n})),this.stats.get(n)}}]),n}()));if(u.b.luma&&"7.0.0"!==u.b.luma.VERSION)throw new Error("luma.gl - multiple VERSIONs detected: ".concat(u.b.luma.VERSION," vs ").concat("7.0.0"));u.b.luma||(r.a&&o.log(1,"luma.gl ".concat("7.0.0"," - ").concat("set luma.log.priority=1 (or higher) to trace rendering"))(),u.b.luma=u.b.luma||{VERSION:"7.0.0",version:"7.0.0",log:o,stats:s,globals:{modules:{},nodeIO:{}}});u.b.luma;var c=e(31),h=e(12),f=e(14);function d(n){return Array.isArray(n)||ArrayBuffer.isView(n)}var p={framebuffer:function(n,t){var e=t&&"handle"in t?t.handle:t;return n.bindFramebuffer(36160,e)},blend:function(n,t){return t?n.enable(3042):n.disable(3042)},blendColor:function(n,t){return n.blendColor.apply(n,Object(f.a)(t))},blendEquation:function(n,t){t=d(t)?t:[t,t],n.blendEquationSeparate.apply(n,Object(f.a)(t))},blendFunc:function(n,t){t=d(t)&&2===t.length?[].concat(Object(f.a)(t),Object(f.a)(t)):t,n.blendFuncSeparate.apply(n,Object(f.a)(t))},clearColor:function(n,t){return n.clearColor.apply(n,Object(f.a)(t))},clearDepth:function(n,t){return n.clearDepth(t)},clearStencil:function(n,t){return n.clearStencil(t)},colorMask:function(n,t){return n.colorMask.apply(n,Object(f.a)(t))},cull:function(n,t){return t?n.enable(2884):n.disable(2884)},cullFace:function(n,t){return n.cullFace(t)},depthTest:function(n,t){return t?n.enable(2929):n.disable(2929)},depthFunc:function(n,t){return n.depthFunc(t)},depthMask:function(n,t){return n.depthMask(t)},depthRange:function(n,t){return n.depthRange.apply(n,Object(f.a)(t))},dither:function(n,t){return t?n.enable(3024):n.disable(3024)},derivativeHint:function(n,t){n.hint(35723,t)},frontFace:function(n,t){return n.frontFace(t)},mipmapHint:function(n,t){return n.hint(33170,t)},lineWidth:function(n,t){return n.lineWidth(t)},polygonOffsetFill:function(n,t){return t?n.enable(32823):n.disable(32823)},polygonOffset:function(n,t){return n.polygonOffset.apply(n,Object(f.a)(t))},sampleCoverage:function(n,t){return n.sampleCoverage.apply(n,Object(f.a)(t))},scissorTest:function(n,t){return t?n.enable(3089):n.disable(3089)},scissor:function(n,t){return n.scissor.apply(n,Object(f.a)(t))},stencilTest:function(n,t){return t?n.enable(2960):n.disable(2960)},stencilMask:function(n,t){var e=t=d(t)?t:[t,t],l=Object(h.a)(e,2),i=l[0],r=l[1];n.stencilMaskSeparate(1028,i),n.stencilMaskSeparate(1029,r)},stencilFunc:function(n,t){var e=t=d(t)&&3===t.length?[].concat(Object(f.a)(t),Object(f.a)(t)):t,l=Object(h.a)(e,6),i=l[0],r=l[1],u=l[2],o=l[3],a=l[4],s=l[5];n.stencilFuncSeparate(1028,i,r,u),n.stencilFuncSeparate(1029,o,a,s)},stencilOp:function(n,t){var e=t=d(t)&&3===t.length?[].concat(Object(f.a)(t),Object(f.a)(t)):t,l=Object(h.a)(e,6),i=l[0],r=l[1],u=l[2],o=l[3],a=l[4],s=l[5];n.stencilOpSeparate(1028,i,r,u),n.stencilOpSeparate(1029,o,a,s)},viewport:function(n,t){return n.viewport.apply(n,Object(f.a)(t))}};function g(n,t){for(var e in Object(c.f)(n,t),t){var l=p[e];l&&l(n,t[e],e)}}var v=e(38),m=e(30);function _(n,t,e){if(Object(m.b)(t))return e(n);var l,i=t.nocatch,r=void 0===i||i;if(Object(m.a)(!t.frameBuffer),Object(v.c)(n),g(n,t),r)l=e(n),Object(v.b)(n);else try{l=e(n)}finally{Object(v.b)(n)}return l}var b="luma.gl: loaded under Node.js without headless gl installed, meaning that WebGL contexts can not be created. This may not be an error. For example, this is a typical configuration for isorender applications running on the server.",y=null;function x(){var n=e(101);if(!n)throw new Error(b);return n.apply(void 0,arguments)}if(!r.a)try{y=e(102)}catch(n){}var w=function n(){Object(l.a)(this,n)},E=y||u.b,P=(E.WebGLRenderingContext,E.WebGLProgram,E.WebGLShader,E.WebGLBuffer),O=void 0===P?w:P;E.WebGLFramebuffer,E.WebGLRenderbuffer,E.WebGLTexture,E.WebGLUniformLocation,E.WebGLActiveInfo,E.WebGLShaderPrecisionFormat;var S=u.b.WebGL2RenderingContext||function n(){Object(l.a)(this,n)},A=(u.b.Image,e(0));function T(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{},l=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(l=l.concat(Object.getOwnPropertySymbols(e).filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.forEach(function(t){Object(A.a)(n,t,e[t])})}return n}var C="Failed to create WebGL context in Node.js, headless gl not available",L="Failed to create WebGL context in Node.js, headless gl returned null";function M(n,t){if(!n)throw new Error(t||"luma.gl: assertion failed.")}var j={};function R(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"id";j[n]=j[n]||1;var t=j[n]++;return"".concat(n,"-").concat(t)}function I(n){return M("number"==typeof n,"Input must be a number"),n&&0==(n&n-1)}function k(n){var t=!0;for(var e in n){t=!1;break}return t}function F(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.isInteger,l=void 0!==e&&e;if(Array.isArray(n)||ArrayBuffer.isView(n))return function(n,t){for(var e=t.maxElts,l=void 0===e?16:e,i=t.size,r=void 0===i?1:i,u="[",o=0;o<n.length&&o<l;++o)o>0&&(u+=",".concat(o%r==0?" ":"")),u+=F(n[o],t);var a=n.length>l?"...":"]";return"".concat(u).concat(a)}(n,t);if(!Number.isFinite(n))return String(n);if(Math.abs(n)<1e-16)return l?"0":"0.";if(l)return n.toFixed(0);if(Math.abs(n)>100&&Math.abs(n)<1e4)return n.toFixed(0);var i=n.toPrecision(2);return i.indexOf(".0")===i.length-2?i.slice(0,-1):i}function N(n,t,e,l){var i="See luma.gl ".concat(e," Upgrade Guide at http://uber.github.io/luma.gl/#/documentation/overview/upgrade-guide"),r=Object.getPrototypeOf(n);l.forEach(function(n){r.methodName||(r[n]=function(){throw o.removed("Calling removed method ".concat(t,".").concat(n,": "),i)(),new Error(n)})})}function D(n,t,e){var l=e.removedProps,i=void 0===l?{}:l,r=e.deprecatedProps,u=void 0===r?{}:r,a=e.replacedProps,s=void 0===a?{}:a;for(var c in i)if(c in t){var h=i[c]?"".concat(n,".").concat(i[c]):"N/A";o.removed("".concat(n,".").concat(c),h)()}for(var f in u)if(f in t){var d=u[f];o.deprecated("".concat(n,".").concat(f),"".concat(n,".").concat(d))()}var p=null;for(var g in s)if(g in t){var v=s[g];o.deprecated("".concat(n,".").concat(g),"".concat(n,".").concat(v))(),(p=p||Object.assign({},t))[v]=t[g],delete p[g]}return p||t}var B,U=r.a&&"undefined"!=typeof document,z=U&&"complete"===document.readyState;function V(){return B||(B=U?new Promise(function(n,t){if(U&&"complete"===document.readyState)return z=!0,void n(document);window.onload=function(){z=!0,n(document)}}):Promise.resolve({})),B}function G(n){var t,e=n.canvas,l=n.width,i=n.height,r=n.onError,u=void 0===r?function(){}:r;return"string"==typeof e?(z||u("createGLContext called on canvas '".concat(e,"' before page was loaded")),t=document.getElementById(e)):t=e||function(n){var t=n.width,e=void 0===t?800:t,l=n.height,i=void 0===l?600:l,r=n.id,u=void 0===r?"gl-canvas":r,o=n.insert,a=void 0===o||o,s=document.createElement("canvas");if(s.id=u,s.style.width=Number.isFinite(e)?"".concat(e,"px"):"100%",s.style.height=Number.isFinite(i)?"".concat(i,"px"):"100%",a){var c=document.body;c.insertBefore(s,c.firstChild)}return s}({id:"lumagl-canvas",width:l,height:i,onError:u}),t}function W(n){var t=n.getParameter(7936),e=n.getParameter(7937),l=n.getExtension("WEBGL_debug_renderer_info");return{vendor:l&&n.getParameter(l.UNMASKED_VENDOR_WEBGL||7936)||t,renderer:l&&n.getParameter(l.UNMASKED_RENDERER_WEBGL||7937)||e,vendorMasked:t,rendererMasked:e,version:n.getParameter(7938),shadingLanguageVersion:n.getParameter(35724)}}var H="Invalid WebGLRenderingContext",X="Requires WebGL2";function Y(n){return Boolean(n&&Number.isFinite(n._version))}function Z(n){return Boolean(n&&2===n._version)}function q(n){M(Y(n),H)}function $(n){M(Z(n),X)}function K(n){return"undefined"!=typeof window&&window.requestAnimationFrame?window.requestAnimationFrame(n):setTimeout(n,1e3/60)}function Q(n){return"undefined"!=typeof window&&window.cancelAnimationFrame?window.cancelAnimationFrame(n):clearTimeout(n)}var J="Failed to deduce GL constant from typed array";function nn(n){switch(ArrayBuffer.isView(n)?n.constructor:n){case Float32Array:return 5126;case Uint16Array:return 5123;case Uint32Array:return 5125;case Uint8Array:case Uint8ClampedArray:return 5121;case Int8Array:return 5120;case Int16Array:return 5122;case Int32Array:return 5124;default:throw new Error(J)}}function tn(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).clamped,e=void 0===t||t;switch(n){case 5126:return Float32Array;case 5123:case 33635:case 32819:case 32820:return Uint16Array;case 5125:return Uint32Array;case 5121:return e?Uint8ClampedArray:Uint8Array;case 5120:return Int8Array;case 5122:return Int16Array;case 5124:return Int32Array;default:throw new Error("Failed to deduce typed array type from GL constant")}}function en(n){for(var t=n.data,e=n.width,l=n.height,i=Math.round(e/2),r=Math.round(l/2),u=new Uint8Array(i*r*4),o=0;o<r;o++)for(var a=0;a<i;a++)for(var s=0;s<4;s++)u[4*(o*i+a)+s]=t[4*(2*o*e+2*a)+s];return{data:u,width:i,height:r}}function ln(n,t){if("string"!=typeof t)return t;var e=Number(t);if(!isNaN(e))return e;var l=n[t=t.replace(/^.*\./,"")];return M(void 0!==l,"Accessing undefined constant GL.".concat(t)),l}function rn(n,t){for(var e in t=Number(t),n)if(n[e]===t)return"GL.".concat(e);return String(t)}var un=e(7),on=e(6),an=e(16),sn=e(8),cn="Resource subclass must define virtual methods",hn=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,n),q(t);var i=e.id,r=e.userData,u=void 0===r?{}:r;this.gl=t,this.id=i||R(this.constructor.name),this.userData=u,this._bound=!1,this._handle=e.handle,void 0===this._handle&&(this._handle=this._createHandle()),this.byteLength=0,this._addStats()}return Object(i.a)(n,[{key:"toString",value:function(){return"".concat(this.constructor.name,"(").concat(this.id,")")}},{key:"delete",value:function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).deleteChildren,t=void 0!==n&&n,e=this._handle&&this._deleteHandle(this._handle);return this._handle=null,this._removeStats(),e&&t&&e.filter(Boolean).forEach(function(n){n.delete()}),this}},{key:"bind",value:function(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.handle;return"function"!=typeof t?(this._bindHandle(t),this):(this._bound?n=t():(this._bindHandle(this.handle),this._bound=!0,n=t(),this._bound=!1,this._bindHandle(null)),n)}},{key:"unbind",value:function(){this.bind(null)}},{key:"getParameter",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};M(n=ln(this.gl,n));var e=(this.constructor.PARAMETERS||{})[n];if(e){var l=Z(this.gl);if(!((!("webgl2"in e)||l)&&(!("extension"in e)||this.gl.getExtension(e.extension)))){var i=e.webgl1,r="webgl2"in e?e.webgl2:e.webgl1;return l?r:i}}return this._getParameter(n,t)}},{key:"getParameters",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={},e=t.parameters,l=t.keys,i=this.constructor.PARAMETERS||{},r=Z(this.gl),u={},o=e||Object.keys(i),a=!0,s=!1,c=void 0;try{for(var h,f=o[Symbol.iterator]();!(a=(h=f.next()).done);a=!0){var d=h.value,p=i[d];if(p&&(!("webgl2"in p)||r)&&(!("extension"in p)||this.gl.getExtension(p.extension))){var g=l?rn(this.gl,d):d;u[g]=this.getParameter(d,n),l&&"GLenum"===p.type&&(u[g]=rn(this.gl,u[g]))}}}catch(n){s=!0,c=n}finally{try{a||null==f.return||f.return()}finally{if(s)throw c}}return u}},{key:"setParameter",value:function(n,t){M(n=ln(this.gl,n));var e=(this.constructor.PARAMETERS||{})[n];if(e){var l=Z(this.gl);if(!((!("webgl2"in e)||l)&&(!("extension"in e)||this.gl.getExtension(e.extension))))throw new Error("Parameter not available on this platform");"GLenum"===e.type&&(t=ln(t))}return this._setParameter(n,t),this}},{key:"setParameters",value:function(n){for(var t in n)this.setParameter(t,n[t]);return this}},{key:"stubRemovedMethods",value:function(n,t,e){return N(this,n,t,e)}},{key:"initialize",value:function(n){}},{key:"_createHandle",value:function(){throw new Error(cn)}},{key:"_deleteHandle",value:function(){throw new Error(cn)}},{key:"_bindHandle",value:function(){throw new Error(cn)}},{key:"_getOptsFromHandle",value:function(){throw new Error(cn)}},{key:"_getParameter",value:function(n,t){throw new Error(cn)}},{key:"_setParameter",value:function(n,t){throw new Error(cn)}},{key:"_context",value:function(){return this.gl.luma=this.gl.luma||{},this.gl.luma}},{key:"_addStats",value:function(){var n=this.constructor.name,t=s.get("Resource Counts");t.get("Resources Created").incrementCount(),t.get("".concat(n,"s Created")).incrementCount(),t.get("".concat(n,"s Active")).incrementCount()}},{key:"_removeStats",value:function(){var n=this.constructor.name;s.get("Resource Counts").get("".concat(n,"s Active")).decrementCount()}},{key:"_trackAllocatedMemory",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.constructor.name,e=s.get("Memory Usage");e.get("GPU Memory").addCount(n),e.get("".concat(t," Memory")).addCount(n),this.byteLength=n}},{key:"_trackDeallocatedMemory",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.constructor.name,t=s.get("Memory Usage");t.get("GPU Memory").subtractCount(this.byteLength),t.get("".concat(n," Memory")).subtractCount(this.byteLength),this.byteLength=0}},{key:"handle",get:function(){return this._handle}}]),n}(),fn=e(73);function dn(n,t,e){return(dn=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(n){return!1}}()?Reflect.construct:function(n,t,e){var l=[null];l.push.apply(l,t);var i=new(Function.bind.apply(n,l));return e&&Object(fn.a)(i,e.prototype),i}).apply(null,arguments)}var pn,gn,vn,mn={offset:0,stride:0,type:5126,size:1,divisor:0,normalized:!1,integer:!1},_n={deprecatedProps:{instanced:"divisor",isInstanced:"divisor"}},bn=function(){function n(){var t=this;Object(l.a)(this,n);for(var e=arguments.length,i=new Array(e),r=0;r<e;r++)i[r]=arguments[r];i.forEach(function(n){return t._assign(n)}),Object.freeze(this)}return Object(i.a)(n,null,[{key:"getBytesPerElement",value:function(n){return tn(n.type||5126).BYTES_PER_ELEMENT}},{key:"getBytesPerVertex",value:function(n){return M(n.size),tn(n.type||5126).BYTES_PER_ELEMENT*n.size}},{key:"resolve",value:function(){for(var t=arguments.length,e=new Array(t),l=0;l<t;l++)e[l]=arguments[l];return dn(n,[mn].concat(e))}}]),Object(i.a)(n,[{key:"toString",value:function(){return JSON.stringify(this)}},{key:"_assign",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return void 0!==(n=D("Accessor",n,_n)).type&&(this.type=n.type,5124!==n.type&&5125!==n.type||(this.integer=!0)),void 0!==n.size&&(this.size=n.size),void 0!==n.offset&&(this.offset=n.offset),void 0!==n.stride&&(this.stride=n.stride),void 0!==n.normalized&&(this.normalized=n.normalized),void 0!==n.integer&&(this.integer=n.integer),void 0!==n.divisor&&(this.divisor=n.divisor),void 0!==n.buffer&&(this.buffer=n.buffer),void 0!==n.index&&("boolean"==typeof index?this.index=n.index?1:0:this.index=n.index),void 0!==n.instanced&&(this.divisor=n.instanced?1:0),void 0!==n.isInstanced&&(this.divisor=n.isInstanced?1:0),this}},{key:"BYTES_PER_ELEMENT",get:function(){return n.getBytesPerElement(this)}},{key:"BYTES_PER_VERTEX",get:function(){return n.getBytesPerVertex(this)}}]),n}(),yn={offset:"accessor.offset",stride:"accessor.stride",type:"accessor.type",size:"accessor.size",divisor:"accessor.divisor",normalized:"accessor.normalized",integer:"accessor.integer",instanced:"accessor.divisor",isInstanced:"accessor.divisor"},xn={removedProps:{},replacedProps:{bytes:"byteLength"},deprecatedProps:yn},wn={removedProps:yn},En=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).stubRemovedMethods("Buffer","v6.0",["layout","setLayout","getIndexedParameter"]),e.target=i.target||(e.gl.webgl2?36662:34962),e.initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"getElementCount",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.accessor;return Math.round(this.byteLength/bn.getBytesPerElement(n))}},{key:"getVertexCount",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.accessor;return Math.round(this.byteLength/bn.getBytesPerVertex(n))}},{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return ArrayBuffer.isView(n)&&(n={data:n}),Number.isFinite(n)&&(n={byteLength:n}),n=D("Buffer",n,xn),this.usage=n.usage||35044,this.debugData=null,this.setAccessor(Object.assign({},n,n.accessor)),n.data?this._setData(n.data):this._setByteLength(n.byteLength||0),this}},{key:"setProps",value:function(n){return"accessor"in(n=D("Buffer",n,wn))&&this.setAccessor(n.accessor),this}},{key:"setAccessor",value:function(n){return delete(n=Object.assign({},n)).buffer,this.accessor=new bn(n),this}},{key:"reallocate",value:function(n){return n>this.byteLength?(this._setByteLength(n),!0):(this.bytesUsed=n,!1)}},{key:"setData",value:function(n){return this.initialize(n)}},{key:"subData",value:function(n){ArrayBuffer.isView(n)&&(n={data:n});var t=n,e=t.data,l=t.offset,i=void 0===l?0:l,r=t.srcOffset,u=void 0===r?0:r,o=n.byteLength||n.length;M(e);var a=this.gl.webgl2?36663:this.target;return this.gl.bindBuffer(a,this.handle),0!==u||void 0!==o?($(this.gl),this.gl.bufferSubData(this.target,i,e,u,o)):this.gl.bufferSubData(a,i,e),this.gl.bindBuffer(a,null),this.debugData=null,this._inferType(e),this}},{key:"copyData",value:function(n){var t=n.sourceBuffer,e=n.readOffset,l=void 0===e?0:e,i=n.writeOffset,r=void 0===i?0:i,u=n.size,o=this.gl;return $(o),o.bindBuffer(36662,t.handle),o.bindBuffer(36663,this.handle),o.copyBufferSubData(36662,36663,l,r,u),o.bindBuffer(36662,null),o.bindBuffer(36663,null),this.debugData=null,this}},{key:"getData",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.dstData,e=void 0===t?null:t,l=n.srcByteOffset,i=void 0===l?0:l,r=n.dstOffset,u=void 0===r?0:r,o=n.length,a=void 0===o?0:o;$(this.gl);var s,c,h=tn(this.accessor.type||5126,{clamped:!1}),f=this._getAvailableElementCount(i),d=u;e?s=(c=e.length)-d:c=d+(s=Math.min(f,a||f));var p=Math.min(f,s);return M((a=a||p)<=p),e=e||new h(c),this.gl.bindBuffer(36662,this.handle),this.gl.getBufferSubData(36662,i,e,u,a),this.gl.bindBuffer(36662,null),e}},{key:"bind",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.target,e=void 0===t?this.target:t,l=n.index,i=void 0===l?this.accessor&&this.accessor.index:l,r=n.offset,u=void 0===r?0:r,o=n.size;return 35345===e||35982===e?void 0!==o?this.gl.bindBufferRange(e,i,this.handle,u,o):(M(0===u),this.gl.bindBufferBase(e,i,this.handle)):this.gl.bindBuffer(e,this.handle),this}},{key:"unbind",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.target,e=void 0===t?this.target:t,l=n.index,i=void 0===l?this.accessor&&this.accessor.index:l;return 35345===e||35982===e?this.gl.bindBufferBase(e,i,null):this.gl.bindBuffer(e,null),this}},{key:"getDebugData",value:function(){return this.debugData?{data:this.debugData,changed:!1}:(this.debugData=this.getData({length:10}),{data:this.debugData,changed:!0})}},{key:"invalidateDebugData",value:function(){this.debugData=null}},{key:"_setData",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.usage;M(ArrayBuffer.isView(n)),this._trackDeallocatedMemory();var e=this._getTarget();this.gl.bindBuffer(e,this.handle),this.gl.bufferData(e,n,t),this.gl.bindBuffer(e,null),this.usage=t,this.debugData=n.slice(0,10),this.bytesUsed=n.byteLength,this._trackAllocatedMemory(n.byteLength);var l=nn(n);return M(l),this.setAccessor(new bn(this.accessor,{type:l})),this}},{key:"_setByteLength",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.usage;M(n>=0),this._trackDeallocatedMemory();var e=n;0===n&&(e=new Float32Array(0));var l=this._getTarget();return this.gl.bindBuffer(l,this.handle),this.gl.bufferData(l,e,t),this.gl.bindBuffer(l,null),this.usage=t,this.debugData=null,this.bytesUsed=n,this._trackAllocatedMemory(n),this}},{key:"_getTarget",value:function(){return this.gl.webgl2?36663:this.target}},{key:"_getAvailableElementCount",value:function(n){var t=n/tn(this.accessor.type||5126,{clamped:!1}).BYTES_PER_ELEMENT;return this.getElementCount()-t}},{key:"_inferType",value:function(n){this.accessor.type||this.setAccessor(new bn(this.accessor,{type:nn(n)}))}},{key:"_createHandle",value:function(){return this.gl.createBuffer()}},{key:"_deleteHandle",value:function(){this.gl.deleteBuffer(this.handle),this._trackDeallocatedMemory()}},{key:"_getParameter",value:function(n){this.gl.bindBuffer(this.target,this.handle);var t=this.gl.getBufferParameter(this.target,n);return this.gl.bindBuffer(this.target,null),t}},{key:"setByteLength",value:function(n){return o.deprecated("setByteLength","reallocate")(),this.reallocate(n)}},{key:"updateAccessor",value:function(n){return o.deprecated("updateAccessor(...)","setAccessor(new Accessor(buffer.accessor, ...)")(),this.accessor=new bn(this.accessor,n),this}},{key:"type",get:function(){return o.deprecated("Buffer.type","Buffer.accessor.type")(),this.accessor.type}},{key:"bytes",get:function(){return o.deprecated("Buffer.bytes","Buffer.byteLength")(),this.byteLength}}]),t}(hn),Pn=(pn={},Object(A.a)(pn,6407,{dataFormat:6407,types:[5121,33635]}),Object(A.a)(pn,6408,{dataFormat:6408,types:[5121,32819,32820]}),Object(A.a)(pn,6406,{dataFormat:6406,types:[5121]}),Object(A.a)(pn,6409,{dataFormat:6409,types:[5121]}),Object(A.a)(pn,6410,{dataFormat:6410,types:[5121]}),Object(A.a)(pn,33326,{dataFormat:6403,types:[5126],gl2:!0}),Object(A.a)(pn,33328,{dataFormat:33319,types:[5126],gl2:!0}),Object(A.a)(pn,34837,{dataFormat:6407,types:[5126],gl2:!0}),Object(A.a)(pn,34836,{dataFormat:6408,types:[5126],gl2:!0}),pn),On=(gn={},Object(A.a)(gn,6403,1),Object(A.a)(gn,36244,1),Object(A.a)(gn,33319,2),Object(A.a)(gn,33320,2),Object(A.a)(gn,6407,3),Object(A.a)(gn,36248,3),Object(A.a)(gn,6408,4),Object(A.a)(gn,36249,4),Object(A.a)(gn,6402,1),Object(A.a)(gn,34041,1),Object(A.a)(gn,6406,1),Object(A.a)(gn,6409,1),Object(A.a)(gn,6410,2),gn),Sn=(vn={},Object(A.a)(vn,5126,4),Object(A.a)(vn,5125,4),Object(A.a)(vn,5124,4),Object(A.a)(vn,5123,2),Object(A.a)(vn,5122,2),Object(A.a)(vn,5131,2),Object(A.a)(vn,5120,1),Object(A.a)(vn,5121,1),vn);var An=[9729,9728],Tn=function(n){function t(n,e){var i;Object(l.a)(this,t);var r=e.id,u=void 0===r?R("texture"):r,o=e.handle,a=e.target;return(i=Object(un.a)(this,Object(on.a)(t).call(this,n,{id:u,handle:o}))).target=a,i.hasFloatTexture=n.getExtension("OES_texture_float"),i.textureUnit=void 0,i.loaded=!1,i.width=void 0,i.height=void 0,i.depth=void 0,i.format=void 0,i.type=void 0,i.dataFormat=void 0,i.border=void 0,i.textureUnit=void 0,i.mipmaps=void 0,i}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.format,l=t.linearFiltering,i=!0;return e&&(i=(i=i&&function(n,t){var e=Pn[t];if(!e)return!1;if(void 0===e.gl1&&void 0===e.gl2)return!0;var l=Z(n)&&e.gl2||e.gl1;return"string"==typeof l?n.getExtension(l):l}(n,e))&&(!l||function(n,t){var e=Pn[t];switch(e&&e.types[0]){case 5126:return n.getExtension("OES_texture_float_linear");case 5131:return n.getExtension("OES_texture_half_float_linear");default:return!0}}(n,e))),i}}]),Object(i.a)(t,[{key:"toString",value:function(){return"Texture(".concat(this.id,",").concat(this.width,"x").concat(this.height,")")}},{key:"initialize",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.data;if(e instanceof Promise)return e.then(function(e){return n.initialize(Object.assign({},t,{pixels:e,data:e}))}),this;var l=t.pixels,i=void 0===l?null:l,r=t.format,u=void 0===r?6408:r,a=t.type,s=void 0===a?5121:a,c=t.border,h=void 0===c?0:c,f=t.recreate,d=void 0!==f&&f,p=t.parameters,g=void 0===p?{}:p,v=t.pixelStore,m=void 0===v?{}:v,_=t.textureUnit,b=void 0===_?void 0:_,y=t.unpackFlipY,x=void 0===y||y,w=t.mipmaps,E=void 0===w||w;e||(e=i);var P=t.width,O=t.height,S=t.dataFormat,T=t.depth,C=void 0===T?0:T,L=this._deduceParameters({format:u,type:s,dataFormat:S,compressed:!1,data:e,width:P,height:O});P=L.width,O=L.height,S=L.dataFormat,this.width=P,this.height=O,this.depth=C,this.format=u,this.type=s,this.dataFormat=S,this.border=h,this.textureUnit=b,Number.isFinite(this.textureUnit)&&(this.gl.activeTexture(33984+this.textureUnit),this.gl.bindTexture(this.target,this.handle));var M=Object(A.a)({},37440,x),j=Object.assign({},M,m);return E&&this._isNPOT()&&(o.warn("texture: ".concat(this," is Non-Power-Of-Two, disabling mipmaping"))(),E=!1,this._updateForNPOT(g)),this.mipmaps=E,this.setImageData({data:e,width:P,height:O,depth:C,format:u,type:s,dataFormat:S,border:h,mipmaps:E,parameters:j}),E&&this.generateMipmap(),this.setParameters(g),d&&(this.data=e),this}},{key:"resize",value:function(n){var t=n.width,e=n.height;return t!==this.width||e!==this.height?this.initialize({width:t,height:e,format:this.format,type:this.type,dataFormat:this.dataFormat,border:this.border,mipmaps:!1}):this}},{key:"generateMipmap",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.gl.bindTexture(this.target,this.handle),_(this.gl,t,function(){n.gl.generateMipmap(n.target)}),this.gl.bindTexture(this.target,null),this}},{key:"setImageData",value:function(n){this._trackDeallocatedMemory("Texture");var t=n.target,e=void 0===t?this.target:t,l=n.pixels,i=void 0===l?null:l,r=n.level,u=void 0===r?0:r,o=n.format,a=void 0===o?this.format:o,s=n.border,c=void 0===s?this.border:s,h=n.offset,f=void 0===h?0:h,d=n.parameters,p=void 0===d?{}:d,g=n.data,v=void 0===g?null:g,m=n.type,b=void 0===m?this.type:m,y=n.width,x=void 0===y?this.width:y,w=n.height,E=void 0===w?this.height:w,P=n.dataFormat,O=void 0===P?this.dataFormat:P,S=n.compressed,A=void 0!==S&&S;v||(v=i);var T=this._deduceParameters({format:a,type:b,dataFormat:O,compressed:A,data:v,width:x,height:E});b=T.type,O=T.dataFormat,A=T.compressed,x=T.width,E=T.height;var C=this.gl;C.bindTexture(this.target,this.handle);var L,j=this._getDataType({data:v,compressed:A});if(v=j.data,L=j.dataType,_(this.gl,p,function(){switch(L){case"null":C.texImage2D(e,u,a,x,E,c,O,b,v);break;case"typed-array":C.texImage2D(e,u,a,x,E,c,O,b,v,f);break;case"buffer":$(C),C.bindBuffer(35052,v.handle||v),C.texImage2D(e,u,a,x,E,c,O,b,f),C.bindBuffer(35052,null);break;case"browser-object":Z(C)?C.texImage2D(e,u,a,x,E,c,O,b,v):C.texImage2D(e,u,a,O,b,v);break;case"compressed":C.compressedTexImage2D(e,u,a,x,E,c,v);break;default:M(!1,"Unknown image data type")}}),v&&v.byteLength)this._trackAllocatedMemory(v.byteLength,"Texture");else{var R=On[this.dataFormat]||4,I=Sn[this.type]||1;this._trackAllocatedMemory(this.width*this.height*R*I,"Texture")}return this.loaded=!0,this}},{key:"setSubImageData",value:function(n){var t=this,e=n.target,l=void 0===e?this.target:e,i=n.pixels,r=void 0===i?null:i,u=n.data,o=void 0===u?null:u,a=n.x,s=void 0===a?0:a,c=n.y,h=void 0===c?0:c,f=n.width,d=void 0===f?this.width:f,p=n.height,g=void 0===p?this.height:p,v=n.level,m=void 0===v?0:v,b=n.format,y=void 0===b?this.format:b,x=n.type,w=void 0===x?this.type:x,E=n.dataFormat,P=void 0===E?this.dataFormat:E,S=n.compressed,A=void 0!==S&&S,T=n.offset,C=void 0===T?0:T,L=n.border,j=(void 0===L&&this.border,n.parameters),R=void 0===j?{}:j,I=this._deduceParameters({format:y,type:w,dataFormat:P,compressed:A,data:o,width:d,height:g});if(w=I.type,P=I.dataFormat,A=I.compressed,d=I.width,g=I.height,M(0===this.depth,"texSubImage not supported for 3D textures"),o||(o=r),o&&o.data){var k=o;o=k.data,d=k.shape[0],g=k.shape[1]}o instanceof En&&(o=o.handle),this.gl.bindTexture(this.target,this.handle),_(this.gl,R,function(){A?t.gl.compressedTexSubImage2D(l,m,s,h,d,g,y,o):null===o?t.gl.texSubImage2D(l,m,s,h,d,g,P,w,null):ArrayBuffer.isView(o)?t.gl.texSubImage2D(l,m,s,h,d,g,P,w,o,C):o instanceof O?($(t.gl),t.gl.bindBuffer(35052,o),t.gl.texSubImage2D(l,m,s,h,d,g,P,w,C),t.gl.bindBuffer(35052,null)):Z(t.gl)?t.gl.texSubImage2D(l,m,s,h,d,g,P,w,o):t.gl.texSubImage2D(l,m,s,h,P,w,o)}),this.gl.bindTexture(this.target,null)}},{key:"copyFramebuffer",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})")(),null}},{key:"getActiveUnit",value:function(){return this.gl.getParameter(34016)-33984}},{key:"bind",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.textureUnit,t=this.gl;return void 0!==n&&(this.textureUnit=n,t.activeTexture(33984+n)),t.bindTexture(this.target,this.handle),n}},{key:"unbind",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.textureUnit,t=this.gl;return void 0!==n&&(this.textureUnit=n,t.activeTexture(33984+n)),t.bindTexture(this.target,null),n}},{key:"_getDataType",value:function(n){var t=n.data,e=n.compressed;return void 0!==e&&e?{data:t,dataType:"compressed"}:null===t?{data:t,dataType:"null"}:ArrayBuffer.isView(t)?{data:t,dataType:"typed-array"}:t instanceof En?{data:t.handle,dataType:"buffer"}:t instanceof O?{data:t,dataType:"buffer"}:{data:t,dataType:"browser-object"}}},{key:"_deduceParameters",value:function(n){var t=n.format,e=n.data,l=n.width,i=n.height,r=n.dataFormat,u=n.type,o=n.compressed,a=Pn[t];r=r||a&&a.dataFormat,u=u||a&&a.types[0],o=o||a&&a.compressed;var s=this._deduceImageSize(e,l,i);return{dataFormat:r,type:u,compressed:o,width:l=s.width,height:i=s.height,format:t,data:e}}},{key:"_deduceImageSize",value:function(n,t,e){var l;return M(l="undefined"!=typeof ImageData&&n instanceof ImageData?{width:n.width,height:n.height}:"undefined"!=typeof HTMLImageElement&&n instanceof HTMLImageElement?{width:n.naturalWidth,height:n.naturalHeight}:"undefined"!=typeof HTMLCanvasElement&&n instanceof HTMLCanvasElement?{width:n.width,height:n.height}:"undefined"!=typeof HTMLVideoElement&&n instanceof HTMLVideoElement?{width:n.videoWidth,height:n.videoHeight}:n?{width:t,height:e}:{width:t>=0?t:1,height:e>=0?e:1},"Could not deduced texture size"),M(void 0===t||l.width===t,"Deduced texture width does not match supplied width"),M(void 0===e||l.height===e,"Deduced texture height does not match supplied height"),l}},{key:"_createHandle",value:function(){return this.gl.createTexture()}},{key:"_deleteHandle",value:function(){this.gl.deleteTexture(this.handle),this._trackDeallocatedMemory("Texture")}},{key:"_getParameter",value:function(n){switch(n){case 4096:return this.width;case 4097:return this.height;default:this.gl.bindTexture(this.target,this.handle);var t=this.gl.getTexParameter(this.target,n);return this.gl.bindTexture(this.target,null),t}}},{key:"_setParameter",value:function(n,t){switch(this.gl.bindTexture(this.target,this.handle),t=this._getNPOTParam(n,t),n){case 33082:case 33083:this.gl.texParameterf(this.handle,n,t);break;case 4096:case 4097:M(!1);break;default:this.gl.texParameteri(this.target,n,t)}return this.gl.bindTexture(this.target,null),this}},{key:"_isNPOT",value:function(){return!Z(this.gl)&&(!(!this.width||!this.height)&&(!I(this.width)||!I(this.height)))}},{key:"_updateForNPOT",value:function(n){void 0===n[this.gl.TEXTURE_MIN_FILTER]&&(n[this.gl.TEXTURE_MIN_FILTER]=this.gl.LINEAR),void 0===n[this.gl.TEXTURE_WRAP_S]&&(n[this.gl.TEXTURE_WRAP_S]=this.gl.CLAMP_TO_EDGE),void 0===n[this.gl.TEXTURE_WRAP_T]&&(n[this.gl.TEXTURE_WRAP_T]=this.gl.CLAMP_TO_EDGE)}},{key:"_getNPOTParam",value:function(n,t){if(this._isNPOT())switch(n){case 10241:-1===An.indexOf(t)&&(t=9729);break;case 10242:case 10243:33071!==t&&(t=33071)}return t}}]),t}(hn),Cn="";function Ln(n){Cn=n}function Mn(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};M("string"==typeof n),n=Cn+n;var e=t.dataType||"text";return fetch(n,t).then(function(n){return n[e]()})}function jn(n,t){return M("string"==typeof n),n=Cn+n,new Promise(function(e,l){try{var i=new Image;i.onload=function(){return e(i)},i.onerror=function(){return l(new Error("Could not load image ".concat(n,".")))},i.crossOrigin=t&&t.crossOrigin||"anonymous",i.src=n}catch(n){l(n)}})}var Rn=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),q(n),(i instanceof Promise||"string"==typeof i)&&(i={data:i}),"string"==typeof i.data&&(i=Object.assign({},i,{data:jn(i.data)})),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},i,{target:3553})))).initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n,t){return Tn.isSupported(n,t)}}]),t}(Tn),In=e(28),kn=e.n(In),Fn=e(39),Nn=[34069,34070,34071,34072,34073,34074],Dn=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),q(n),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},i,{target:34067})))).initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"initialize",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.mipmaps,l=void 0===e||e,i=t.parameters,r=void 0===i?{}:i;this.opts=t,this.setCubeMapImageData(t).then(function(){n.loaded=!0,l&&n.generateMipmap(t),n.setParameters(r)})}},{key:"subImage",value:function(n){var t=n.face,e=n.data,l=n.x,i=void 0===l?0:l,r=n.y,u=void 0===r?0:r,o=n.mipmapLevel,a=void 0===o?0:o;return this._subImage({target:t,data:e,x:i,y:u,mipmapLevel:a})}},{key:"setCubeMapImageData",value:function(){var n=Object(Fn.a)(kn.a.mark(function n(t){var e,l,i,r,u,a,s,c,h,f,d,p,g,v=this;return kn.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return e=t.width,l=t.height,i=t.pixels,r=t.data,u=t.border,a=void 0===u?0:u,s=t.format,c=void 0===s?6408:s,h=t.type,f=void 0===h?5121:h,d=this.gl,p=i||r,n.next=5,Promise.all(Nn.map(function(n){var t=p[n];return Promise.all(Array.isArray(t)?t:[t])}));case 5:g=n.sent,this.bind(),Nn.forEach(function(n,t){g[t].length>1&&!1!==v.opts.mipmaps&&o.warn("".concat(v.id," has mipmap and multiple LODs."))(),g[t].forEach(function(t,i){e&&l?d.texImage2D(n,i,c,e,l,a,c,f,t):d.texImage2D(n,i,c,c,f,t)})}),this.unbind();case 9:case"end":return n.stop()}},n,this)}));return function(t){return n.apply(this,arguments)}}()},{key:"setImageDataForFace",value:function(n){var t=this,e=n.face,l=n.width,i=n.height,r=n.pixels,u=n.data,o=n.border,a=void 0===o?0:o,s=n.format,c=void 0===s?6408:s,h=n.type,f=void 0===h?5121:h,d=this.gl,p=r||u;return this.bind(),p instanceof Promise?p.then(function(l){return t.setImageDataForFace(Object.assign({},n,{face:e,data:l,pixels:l}))}):this.width||this.height?d.texImage2D(e,0,c,l,i,a,c,f,p):d.texImage2D(e,0,c,c,f,p),this}}]),t}(Tn);Dn.FACES=Nn;var Bn,Un=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),$(n),i=Object.assign({depth:1},i,{target:32879,unpackFlipY:!1}),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){return Z(n)}}]),Object(i.a)(t,[{key:"setImageData",value:function(n){var t=this,e=n.level,l=void 0===e?0:e,i=n.dataFormat,r=void 0===i?6408:i,u=n.width,o=n.height,a=n.depth,s=void 0===a?1:a,c=n.border,h=void 0===c?0:c,f=n.format,d=n.type,p=void 0===d?5121:d,g=n.offset,v=void 0===g?0:g,m=n.data,b=n.parameters,y=void 0===b?{}:b;if(this._trackDeallocatedMemory("Texture"),this.gl.bindTexture(this.target,this.handle),_(this.gl,y,function(){ArrayBuffer.isView(m)&&t.gl.texImage3D(t.target,l,r,u,o,s,h,f,p,m),m instanceof En&&(t.gl.bindBuffer(35052,m.handle),t.gl.texImage3D(t.target,l,r,u,o,s,h,f,p,v))}),m&&m.byteLength)this._trackAllocatedMemory(m.byteLength,"Texture");else{var x=On[this.dataFormat]||4,w=Sn[this.type]||1;this._trackAllocatedMemory(this.width*this.height*this.depth*x*w,"Texture")}return this.loaded=!0,this}}]),t}(Tn),zn="EXT_color_buffer_float",Vn=(Bn={},Object(A.a)(Bn,33189,{bpp:2}),Object(A.a)(Bn,33190,{gl2:!0,bpp:3}),Object(A.a)(Bn,36012,{gl2:!0,bpp:4}),Object(A.a)(Bn,36168,{bpp:1}),Object(A.a)(Bn,34041,{bpp:4}),Object(A.a)(Bn,35056,{gl2:!0,bpp:4}),Object(A.a)(Bn,36013,{gl2:!0,bpp:5}),Object(A.a)(Bn,32854,{bpp:2}),Object(A.a)(Bn,36194,{bpp:2}),Object(A.a)(Bn,32855,{bpp:2}),Object(A.a)(Bn,33321,{gl2:!0,bpp:1}),Object(A.a)(Bn,33330,{gl2:!0,bpp:1}),Object(A.a)(Bn,33329,{gl2:!0,bpp:1}),Object(A.a)(Bn,33332,{gl2:!0,bpp:2}),Object(A.a)(Bn,33331,{gl2:!0,bpp:2}),Object(A.a)(Bn,33334,{gl2:!0,bpp:4}),Object(A.a)(Bn,33333,{gl2:!0,bpp:4}),Object(A.a)(Bn,33323,{gl2:!0,bpp:2}),Object(A.a)(Bn,33336,{gl2:!0,bpp:2}),Object(A.a)(Bn,33335,{gl2:!0,bpp:2}),Object(A.a)(Bn,33338,{gl2:!0,bpp:4}),Object(A.a)(Bn,33337,{gl2:!0,bpp:4}),Object(A.a)(Bn,33340,{gl2:!0,bpp:8}),Object(A.a)(Bn,33339,{gl2:!0,bpp:8}),Object(A.a)(Bn,32849,{gl2:!0,bpp:3}),Object(A.a)(Bn,32856,{gl2:!0,bpp:4}),Object(A.a)(Bn,32857,{gl2:!0,bpp:4}),Object(A.a)(Bn,36220,{gl2:!0,bpp:4}),Object(A.a)(Bn,36238,{gl2:!0,bpp:4}),Object(A.a)(Bn,36975,{gl2:!0,bpp:4}),Object(A.a)(Bn,36214,{gl2:!0,bpp:8}),Object(A.a)(Bn,36232,{gl2:!0,bpp:8}),Object(A.a)(Bn,36226,{gl2:!0,bpp:16}),Object(A.a)(Bn,36208,{gl2:!0,bpp:16}),Object(A.a)(Bn,33325,{gl2:zn,bpp:2}),Object(A.a)(Bn,33327,{gl2:zn,bpp:4}),Object(A.a)(Bn,34842,{gl2:zn,bpp:8}),Object(A.a)(Bn,33326,{gl2:zn,bpp:4}),Object(A.a)(Bn,33328,{gl2:zn,bpp:8}),Object(A.a)(Bn,34836,{gl2:zn,bpp:16}),Object(A.a)(Bn,35898,{gl2:zn,bpp:4}),Bn);var Gn,Wn=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).format;return!t||function(n,t,e){var l=e[t];if(!l)return!1;var i=Z(n)&&l.gl2||l.gl1;return"string"==typeof i?n.getExtension(i):i}(n,t,Vn)}},{key:"getSamplesForFormat",value:function(n,t){var e=t.format;return n.getInternalformatParameter(36161,e,32937)}}]),Object(i.a)(t,[{key:"initialize",value:function(n){var t=n.format,e=n.width,l=void 0===e?1:e,i=n.height,r=void 0===i?1:i,u=n.samples,o=void 0===u?0:u;return M(t,"Needs format"),this._trackDeallocatedMemory(),this.gl.bindRenderbuffer(36161,this.handle),0!==o&&Z(this.gl)?this.gl.renderbufferStorageMultisample(36161,o,t,l,r):this.gl.renderbufferStorage(36161,t,l,r),this.format=t,this.width=l,this.height=r,this.samples=o,this._trackAllocatedMemory(this.width*this.height*(this.samples||1)*Vn[this.format].bpp),this}},{key:"resize",value:function(n){var t=n.width,e=n.height;return t!==this.width||e!==this.height?this.initialize({width:t,height:e,format:this.format,samples:this.samples}):this}},{key:"_createHandle",value:function(){return this.gl.createRenderbuffer()}},{key:"_deleteHandle",value:function(){this.gl.deleteRenderbuffer(this.handle),this._trackDeallocatedMemory()}},{key:"_bindHandle",value:function(n){this.gl.bindRenderbuffer(36161,n)}},{key:"_syncHandle",value:function(n){this.format=this.getParameter(36164),this.width=this.getParameter(36162),this.height=this.getParameter(36163),this.samples=this.getParameter(36011)}},{key:"_getParameter",value:function(n){return this.gl.bindRenderbuffer(36161,this.handle),this.gl.getRenderbufferParameter(36161,n)}}]),t}(hn),Hn=256,Xn=1024,Yn=16384,Zn=6144,qn=6145,$n=6146,Kn=34041,Qn="clear: bad arguments";function Jn(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.framebuffer,l=void 0===e?null:e,i=t.color,r=void 0===i?null:i,u=t.depth,o=void 0===u?null:u,a=t.stencil,s=void 0===a?null:a,c={};l&&(c.framebuffer=l);var h=0;r&&(h|=Yn,!0!==r&&(c.clearColor=r)),o&&(h|=Hn,!0!==o&&(c.clearDepth=o)),s&&(h|=Xn,!0!==o&&(c.clearStencil=o)),M(0!==h,Qn),_(n,c,function(){n.clear(h)})}function nt(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.framebuffer,l=void 0===e?null:e,i=t.buffer,r=void 0===i?Zn:i,u=t.drawBuffer,o=void 0===u?0:u,a=t.value,s=void 0===a?[0,0,0,0]:a;$(n),_(n,{framebuffer:l},function(){switch(r){case Zn:switch(s.constructor){case Int32Array:n.clearBufferiv(r,o,s);break;case Uint32Array:n.clearBufferuiv(r,o,s);break;case Float32Array:default:n.clearBufferfv(r,o,s)}break;case qn:n.clearBufferfv(qn,0,[s]);break;case $n:n.clearBufferiv($n,0,[s]);break;case Kn:var t=Object(h.a)(s,2),e=t[0],l=t[1];n.clearBufferfi(Kn,0,e,l);break;default:M(!1,Qn)}})}function tt(n){switch(n){case 6406:case 33326:case 6403:return 1;case 33328:case 33319:return 2;case 6407:case 34837:return 3;case 6408:case 34836:return 4;default:return M(!1),0}}function et(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.sourceX,l=void 0===e?0:e,i=t.sourceY,r=void 0===i?0:i,u=t.sourceFormat,o=void 0===u?6408:u,a=t.sourceAttachment,s=void 0===a?36064:a,c=t.target,h=void 0===c?null:c,f=t.sourceWidth,d=t.sourceHeight,p=t.sourceType,g=at(n),v=g.framebuffer,m=g.deleteFramebuffer;M(v);var _=v.gl,b=v.handle,y=v.attachments;f=f||v.width,d=d||v.height,36064===s&&null===b&&(s=1028),M(y[s]),h=function(n,t,e,l,i){if(n)return n;var r=tn(t=t||5121,{clamped:!1}),u=tt(e);return new r(l*i*u)}(h,p=p||y[s].type,o,f,d),p=p||nn(h);var x=_.bindFramebuffer(36160,b);return _.readPixels(l,r,f,d,o,p,h),_.bindFramebuffer(36160,x||null),m&&v.delete(),h}function lt(n,t){var e=t.sourceX,l=void 0===e?0:e,i=t.sourceY,r=void 0===i?0:i,u=t.sourceFormat,o=void 0===u?6408:u,a=t.target,s=void 0===a?null:a,c=t.targetByteOffset,h=void 0===c?0:c,f=t.sourceWidth,d=t.sourceHeight,p=t.sourceType,g=at(n),v=g.framebuffer,m=g.deleteFramebuffer;M(v);var b=v.gl;if(f=f||v.width,d=d||v.height,$(b),p=p||(s?s.type:5121),!s){var y=tt(o),x=function(n){switch(n){case 5121:return 1;case 33635:case 32819:case 32820:return 2;case 5126:return 4;default:return M(!1),0}}(p);s=new En(b,{byteLength:h+f*d*y*x,accessor:{type:p,size:y}})}return s.bind({target:35051}),_(b,{framebuffer:v},function(){b.readPixels(l,r,f,d,o,p,h)}),s.unbind({target:35051}),m&&v.delete(),s}function it(n){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.sourceAttachment,l=void 0===e?36064:e,i=t.targetMaxHeight,r=void 0===i?Number.MAX_SAFE_INTEGER:i,u=et(n,{sourceAttachment:l}),o=n.width,a=n.height;a>r;){var s=en({data:u,width:o,height:a});u=s.data,o=s.width,a=s.height}!function(n){var t=n.data,e=n.width,l=n.height,i=n.bytesPerPixel,r=void 0===i?4:i,u=n.temp,o=e*r;u=u||new Uint8Array(o);for(var a=0;a<l/2;++a){var s=a*o,c=(l-a-1)*o;u.set(t.subarray(s,s+o)),t.copyWithin(s,c,c+o),t.set(u,c)}}({data:u,width:o,height:a});var c=document.createElement("canvas");c.width=o,c.height=a;var h=c.getContext("2d"),f=h.createImageData(o,a);return f.data.set(u),h.putImageData(f,0,0),c.toDataURL()}function rt(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.sourceAttachment,l=void 0===e?36064:e,i=t.targetImage,r=void 0===i?null:i,u=it(n,{sourceAttachment:l});return(r=r||new Image).src=u,r}function ut(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=e.sourceX,i=void 0===l?0:l,r=e.sourceY,u=void 0===r?0:r,o=e.targetX,a=e.targetY,s=e.targetZ,c=e.targetMipmaplevel,h=void 0===c?0:c,f=e.targetInternalFormat,d=void 0===f?6408:f,p=e.width,g=e.height,v=at(n),m=v.framebuffer,_=v.deleteFramebuffer;M(m);var b=m.gl,y=m.handle,x=void 0!==o||void 0!==a||void 0!==s;o=o||0,a=a||0,s=s||0;var w=b.bindFramebuffer(36160,y);M(t);var E=null;if(t instanceof Tn&&(E=t,p=Number.isFinite(p)?p:E.width,g=Number.isFinite(g)?g:E.height,E.bind(0),t=E.target),x)switch(t){case 3553:case 34067:b.copyTexSubImage2D(t,h,o,a,i,u,p,g);break;case 35866:case 32879:b.copyTexSubImage3D(t,h,o,a,s,i,u,p,g)}else b.copyTexImage2D(t,h,d,i,u,p,g,0);return E&&E.unbind(),b.bindFramebuffer(36160,w||null),_&&m.delete(),E}function ot(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=e.sourceAttachment,i=void 0===l?36064:l,r=e.sourceX0,u=void 0===r?0:r,a=e.sourceY0,s=void 0===a?0:a,c=e.sourceX1,h=e.sourceY1,f=e.targetX0,d=void 0===f?0:f,p=e.targetY0,g=void 0===p?0:p,v=e.targetX1,m=e.targetY1,_=e.color,b=void 0===_||_,y=e.depth,x=void 0!==y&&y,w=e.stencil,E=void 0!==w&&w,P=e.mask,O=void 0===P?0:P,S=e.filter,A=void 0===S?9728:S,T=at(n),C=T.framebuffer,L=T.deleteFramebuffer,j=at(t),R=j.framebuffer,I=j.deleteFramebuffer;M(C),M(R);var k=R.gl,F=R.handle,N=R.width,D=R.height,B=R.readBuffer;$(k),C.handle||36064!==i||(i=1028),b&&(O|=16384),x&&(O|=256),E&&(O|=1024),(L||I)&&1280&O&&(O=16384,o.warn("Blitting from or into a Texture object, forcing mask to GL.COLOR_BUFFER_BIT")()),M(O),c=void 0===c?C.width:c,h=void 0===h?C.height:h,v=void 0===v?N:v,m=void 0===m?D:m;var U=k.bindFramebuffer(36009,F),z=k.bindFramebuffer(36008,C.handle);return k.readBuffer(i),k.blitFramebuffer(u,s,c,h,d,g,v,m,O,A),k.readBuffer(B),k.bindFramebuffer(36008,z||null),k.bindFramebuffer(36009,U||null),L&&C.delete(),I&&R.delete(),R}function at(n){return n instanceof wt?{framebuffer:n,deleteFramebuffer:!1}:{framebuffer:(t=n,l=t.gl,i=t.width,r=t.height,u=t.id,o=new wt(l,Object.assign({},e,{id:"framebuffer-for-".concat(u),width:i,height:r,attachments:Object(A.a)({},36064,t)})),o),deleteFramebuffer:!0};var t,e,l,i,r,u,o}var st,ct=(Gn={},Object(A.a)(Gn,33902,{gl1:new Float32Array([1,1])}),Object(A.a)(Gn,33901,{gl1:new Float32Array([1,1])}),Object(A.a)(Gn,3379,{gl1:64,gl2:2048}),Object(A.a)(Gn,34076,{gl1:16}),Object(A.a)(Gn,34930,{gl1:8}),Object(A.a)(Gn,35661,{gl1:8}),Object(A.a)(Gn,35660,{gl1:0}),Object(A.a)(Gn,34024,{gl1:1}),Object(A.a)(Gn,36348,{gl1:8}),Object(A.a)(Gn,34921,{gl1:8}),Object(A.a)(Gn,36347,{gl1:128}),Object(A.a)(Gn,36349,{gl1:16}),Object(A.a)(Gn,3386,{gl1:new Int32Array([0,0])}),Object(A.a)(Gn,32883,{gl1:0,gl2:256}),Object(A.a)(Gn,35071,{gl1:0,gl2:256}),Object(A.a)(Gn,37447,{gl1:0,gl2:0}),Object(A.a)(Gn,36063,{gl1:0,gl2:4}),Object(A.a)(Gn,35379,{gl1:0,gl2:0}),Object(A.a)(Gn,35374,{gl1:0,gl2:0}),Object(A.a)(Gn,35377,{gl1:0,gl2:0}),Object(A.a)(Gn,34852,{gl1:0,gl2:4}),Object(A.a)(Gn,36203,{gl1:0,gl2:0}),Object(A.a)(Gn,33001,{gl1:0,gl2:0}),Object(A.a)(Gn,33e3,{gl1:0,gl2:0}),Object(A.a)(Gn,37157,{gl1:0,gl2:0}),Object(A.a)(Gn,35373,{gl1:0,gl2:0}),Object(A.a)(Gn,35657,{gl1:0,gl2:0}),Object(A.a)(Gn,36183,{gl1:0,gl2:0}),Object(A.a)(Gn,37137,{gl1:0,gl2:0}),Object(A.a)(Gn,34045,{gl1:0,gl2:0}),Object(A.a)(Gn,35978,{gl1:0,gl2:0}),Object(A.a)(Gn,35979,{gl1:0,gl2:0}),Object(A.a)(Gn,35968,{gl1:0,gl2:0}),Object(A.a)(Gn,35376,{gl1:0,gl2:0}),Object(A.a)(Gn,35375,{gl1:0,gl2:0}),Object(A.a)(Gn,35659,{gl1:0,gl2:0}),Object(A.a)(Gn,37154,{gl1:0,gl2:0}),Object(A.a)(Gn,35371,{gl1:0,gl2:0}),Object(A.a)(Gn,35658,{gl1:0,gl2:0}),Object(A.a)(Gn,35076,{gl1:0,gl2:-8,negative:!0}),Object(A.a)(Gn,35077,{gl1:0,gl2:7}),Object(A.a)(Gn,35380,{gl1:0,gl2:0}),Gn);function ht(n){if(n.luma=n.luma||{},!n.luma.limits){n.luma.limits={},n.luma.webgl1MinLimits={},n.luma.webgl2MinLimits={};var t=Z(n);for(var e in ct){var l=ct[e],i=l.gl1,r="gl2"in l?l.gl2:l.gl1,u=t?r:i,o="gl2"in l&&!t||"extension"in l&&!n.getExtension(l.extension)?u:n.getParameter(e);n.luma.limits[e]=o,n.luma.webgl1MinLimits[e]=i,n.luma.webgl2MinLimits[e]=r}}return n.luma.limits}function ft(n){n.luma=n.luma||{};var t,e=W(n);n.luma.info||(n.luma.info=(t={},Object(A.a)(t,37445,e.vendor),Object(A.a)(t,37446,e.renderer),Object(A.a)(t,7936,e.vendorMasked),Object(A.a)(t,7937,e.rendererMasked),Object(A.a)(t,7938,e.version),Object(A.a)(t,35724,e.shadingLanguageVersion),t));return n.luma.info}function dt(n){return Object.assign(W(n),{limits:ht(n),info:ft(n),webgl1MinLimits:n.luma.webgl1MinLimits,webgl2MinLimits:n.luma.webgl2MinLimits})}var pt={WEBGL2:"WEBGL2",VERTEX_ARRAY_OBJECT:"VERTEX_ARRAY_OBJECT",TIMER_QUERY:"TIMER_QUERY",INSTANCED_RENDERING:"INSTANCED_RENDERING",MULTIPLE_RENDER_TARGETS:"MULTIPLE_RENDER_TARGETS",ELEMENT_INDEX_UINT32:"ELEMENT_INDEX_UINT32",BLEND_EQUATION_MINMAX:"BLEND_EQUATION_MINMAX",COLOR_ENCODING_SRGB:"COLOR_ENCODING_SRGB",TEXTURE_DEPTH:"TEXTURE_DEPTH",TEXTURE_FLOAT:"TEXTURE_FLOAT",TEXTURE_HALF_FLOAT:"TEXTURE_HALF_FLOAT",TEXTURE_FILTER_LINEAR_FLOAT:"TEXTURE_FILTER_LINEAR_FLOAT",TEXTURE_FILTER_LINEAR_HALF_FLOAT:"TEXTURE_FILTER_LINEAR_HALF_FLOAT",TEXTURE_FILTER_ANISOTROPIC:"TEXTURE_FILTER_ANISOTROPIC",COLOR_ATTACHMENT_RGBA32F:"COLOR_ATTACHMENT_RGBA32F",COLOR_ATTACHMENT_FLOAT:"COLOR_ATTACHMENT_FLOAT",COLOR_ATTACHMENT_HALF_FLOAT:"COLOR_ATTACHMENT_HALF_FLOAT",GLSL_FRAG_DATA:"GLSL_FRAG_DATA",GLSL_FRAG_DEPTH:"GLSL_FRAG_DEPTH",GLSL_DERIVATIVES:"GLSL_DERIVATIVES",GLSL_TEXTURE_LOD:"GLSL_TEXTURE_LOD"},gt=(st={},Object(A.a)(st,pt.WEBGL2,[function(n){return Z(n)}]),Object(A.a)(st,pt.VERTEX_ARRAY_OBJECT,["OES_vertex_array_object",!0]),Object(A.a)(st,pt.TIMER_QUERY,["EXT_disjoint_timer_query","EXT_disjoint_timer_query_webgl2"]),Object(A.a)(st,pt.INSTANCED_RENDERING,["ANGLE_instanced_arrays",!0]),Object(A.a)(st,pt.MULTIPLE_RENDER_TARGETS,["WEBGL_draw_buffers",!0]),Object(A.a)(st,pt.ELEMENT_INDEX_UINT32,["OES_element_index_uint",!0]),Object(A.a)(st,pt.BLEND_EQUATION_MINMAX,["EXT_blend_minmax",!0]),Object(A.a)(st,pt.COLOR_ENCODING_SRGB,["EXT_sRGB",!0]),Object(A.a)(st,pt.TEXTURE_DEPTH,["WEBGL_depth_texture",!0]),Object(A.a)(st,pt.TEXTURE_FLOAT,["OES_texture_float",!0]),Object(A.a)(st,pt.TEXTURE_HALF_FLOAT,["OES_texture_half_float",!0]),Object(A.a)(st,pt.TEXTURE_FILTER_LINEAR_FLOAT,["OES_texture_float_linear"]),Object(A.a)(st,pt.TEXTURE_FILTER_LINEAR_HALF_FLOAT,["OES_texture_half_float_linear"]),Object(A.a)(st,pt.TEXTURE_FILTER_ANISOTROPIC,["EXT_texture_filter_anisotropic"]),Object(A.a)(st,pt.COLOR_ATTACHMENT_RGBA32F,["WEBGL_color_buffer_float","EXT_color_buffer_float"]),Object(A.a)(st,pt.COLOR_ATTACHMENT_FLOAT,[!1,"EXT_color_buffer_float"]),Object(A.a)(st,pt.COLOR_ATTACHMENT_HALF_FLOAT,[!1,"EXT_color_buffer_half_float"]),Object(A.a)(st,pt.GLSL_FRAG_DATA,["WEBGL_draw_buffers",!0]),Object(A.a)(st,pt.GLSL_FRAG_DEPTH,["EXT_frag_depth",!0]),Object(A.a)(st,pt.GLSL_DERIVATIVES,["OES_standard_derivatives",!0]),Object(A.a)(st,pt.GLSL_TEXTURE_LOD,["EXT_shader_texture_lod",!0]),st);function vt(n,t){return mt(n,t)}function mt(n,t){return(t=Array.isArray(t)?t:[t]).every(function(t){return bt(n,t)})}function _t(n){if(n.luma=n.luma||{},!n.luma.caps)for(var t in n.luma.caps={},n.luma.caps.webgl2=Z(n),gt)n.luma.caps[t]=bt(n,t);return n.luma.caps}function bt(n,t){var e=gt[t];M(e,t);var l,i=Z(n)&&e[1]||e[0];if("function"==typeof i)l=i(n);else if(Array.isArray(i)){l=!0;var r=!0,u=!1,o=void 0;try{for(var a,s=i[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value;l=l&&Boolean(n.getExtension(c))}}catch(n){u=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(u)throw o}}}else"string"==typeof i?l=Boolean(n.getExtension(i)):"boolean"==typeof i?l=i:M(!1);return l}var yt={};function xt(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=gt[t];if(M(l,t),!function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t="undefined"!=typeof window&&window.navigator||{},e=n.userAgent||t.userAgent||"",l=-1!==e.indexOf("MSIE "),i=-1!==e.indexOf("Trident/");return l||i}(e))return!0;if(t in yt)return yt[t];var i=l[0],r="#extension GL_".concat(i," : enable\nvoid main(void) {}"),u=n.createShader(35633);n.shaderSource(u,r),n.compileShader(u);var o=n.getShaderParameter(u,35713);return n.deleteShader(u),yt[t]=o,o}var wt=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).width=null,e.height=null,e.attachments={},e.readBuffer=36064,e.drawBuffers=[36064],e.initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"MAX_COLOR_ATTACHMENTS",get:function(){return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS)}},{key:"MAX_DRAW_BUFFERS",get:function(){return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS)}}],[{key:"isSupported",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.colorBufferFloat,l=t.colorBufferHalfFloat;return e&&n.getExtension(Z(n)?"EXT_color_buffer_float":"WEBGL.color_buffer_float"),l&&n.getExtension(Z(n)?"EXT_color_buffer_float":"EXT_color_buffer_half_float")}},{key:"getDefaultFramebuffer",value:function(n){return n.luma=n.luma||{},n.luma.defaultFramebuffer=n.luma.defaultFramebuffer||new t(n,{id:"default-framebuffer",handle:null,attachments:{}}),n.luma.defaultFramebuffer}}]),Object(i.a)(t,[{key:"initialize",value:function(n){var t=n.width,e=void 0===t?1:t,l=n.height,i=void 0===l?1:l,r=n.attachments,u=void 0===r?null:r,o=n.color,a=void 0===o||o,s=n.depth,c=void 0===s||s,h=n.stencil,f=void 0!==h&&h,d=n.check,p=void 0===d||d,g=n.readBuffer,v=n.drawBuffers;if(M(e>=0&&i>=0,"Width and height need to be integers"),this.width=e,this.height=i,u)for(var m in u){var _=u[m];(Array.isArray(_)?_[0]:_).resize({width:e,height:i})}else u=this._createDefaultAttachments(a,c,f,e,i);this.update({clearAttachments:!0,attachments:u,readBuffer:g,drawBuffers:v}),u&&p&&this.checkStatus()}},{key:"update",value:function(n){var t=n.attachments,e=void 0===t?{}:t,l=n.readBuffer,i=n.drawBuffers,r=n.clearAttachments,u=void 0!==r&&r,o=n.resizeAttachments,a=void 0===o||o;this.attach(e,{clearAttachments:u,resizeAttachments:a});var s=this.gl,c=s.bindFramebuffer(36160,this.handle);return l&&this._setReadBuffer(l),i&&this._setDrawBuffers(i),s.bindFramebuffer(36160,c||null),this}},{key:"resize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width,e=n.height;if(null===this.handle)return M(void 0===t&&void 0===e),this.width=this.gl.drawingBufferWidth,this.height=this.gl.drawingBufferHeight,this;for(var l in void 0===t&&(t=this.gl.drawingBufferWidth),void 0===e&&(e=this.gl.drawingBufferHeight),t!==this.width&&e!==this.height&&o.log(2,"Resizing framebuffer ".concat(this.id," to ").concat(t,"x").concat(e))(),this.attachments)this.attachments[l].resize({width:t,height:e});return this.width=t,this.height=e,this}},{key:"attach",value:function(n){var t=this,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=e.clearAttachments,i=void 0!==l&&l,r=e.resizeAttachments,u=void 0===r||r,o={};i&&Object.keys(this.attachments).forEach(function(n){o[n]=null}),Object.assign(o,n);var a=this.gl.bindFramebuffer(36160,this.handle);for(var s in o){M(void 0!==s,"Misspelled framebuffer binding point?");var c=Number(s),f=o[c],d=f;if(d)if(d instanceof Wn)this._attachRenderbuffer({attachment:c,renderbuffer:d});else if(Array.isArray(f)){var p=Object(h.a)(f,3),g=p[0],v=p[1],m=void 0===v?0:v,_=p[2],b=void 0===_?0:_;d=g,this._attachTexture({attachment:c,texture:g,layer:m,level:b})}else this._attachTexture({attachment:c,texture:d,layer:0,level:0});else this._unattach(c);u&&d&&d.resize({width:this.width,height:this.height})}this.gl.bindFramebuffer(36160,a||null),Object.assign(this.attachments,n),Object.keys(this.attachments).filter(function(n){return!t.attachments[n]}).forEach(function(n){delete t.attachments[n]})}},{key:"checkStatus",value:function(){var n=this.gl,t=n.bindFramebuffer(36160,this.handle),e=n.checkFramebufferStatus(36160);if(n.bindFramebuffer(36160,t||null),36053!==e)throw new Error(function(n){return(wt.STATUS||{})[n]||"Framebuffer error ".concat(n)}(e));return this}},{key:"clear",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.color,e=n.depth,l=n.stencil,i=n.drawBuffers,r=void 0===i?[]:i,u=this.gl.bindFramebuffer(36160,this.handle);return(t||e||l)&&Jn(this.gl,{color:t,depth:e,stencil:l}),r.forEach(function(n,t){nt({drawBuffer:t,value:n})}),this.gl.bindFramebuffer(36160,u||null),this}},{key:"readPixels",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)")(),null}},{key:"readPixelsToBuffer",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)")(),null}},{key:"copyToDataUrl",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)")(),null}},{key:"copyToImage",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)")(),null}},{key:"copyToTexture",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})")(),null}},{key:"blit",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return o.error("Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)")(),null}},{key:"invalidate",value:function(n){var t=n.attachments,e=void 0===t?[]:t,l=n.x,i=void 0===l?0:l,r=n.y,u=void 0===r?0:r,o=n.width,a=n.height,s=this.gl;$(s);var c=s.bindFramebuffer(36008,this.handle);return 0===i&&0===u&&void 0===o&&void 0===a?s.invalidateFramebuffer(36008,e):s.invalidateFramebuffer(36008,e,i,u,o,a),s.bindFramebuffer(36008,c),this}},{key:"getAttachmentParameter",value:function(n,t,e){var l=this._getAttachmentParameterFallback(t);return null===l&&(this.gl.bindFramebuffer(36160,this.handle),l=this.gl.getFramebufferAttachmentParameter(36160,n,t),this.gl.bindFramebuffer(36160,null)),e&&l>1e3&&(l=rn(this.gl,l)),l}},{key:"getAttachmentParameters",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:36064,t=arguments.length>1?arguments[1]:void 0,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.constructor.ATTACHMENT_PARAMETERS||[],l={},i=!0,r=!1,u=void 0;try{for(var o,a=e[Symbol.iterator]();!(i=(o=a.next()).done);i=!0){var s=o.value;l[t?rn(this.gl,s):s]=this.getAttachmentParameter(n,s,t)}}catch(n){r=!0,u=n}finally{try{i||null==a.return||a.return()}finally{if(r)throw u}}return l}},{key:"getParameters",value:function(){for(var n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t={},e=0,l=Object.keys(this.attachments);e<l.length;e++){var i=l[e],r=Number(i);t[n?rn(this.gl,r):r]=this.getAttachmentParameters(r,n)}return t}},{key:"show",value:function(){return"undefined"!=typeof window&&window.open(it(this),"luma-debug-texture"),this}},{key:"log",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(n>o.priority||"undefined"==typeof window)return this;t=t||"Framebuffer ".concat(this.id);var e=it(this,{maxHeight:100});return o.image({priority:n,message:t,image:e},t)(),this}},{key:"bind",value:function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,t=void 0===n?36160:n;return this.gl.bindFramebuffer(t,this.handle),this}},{key:"unbind",value:function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).target,t=void 0===n?36160:n;return this.gl.bindFramebuffer(t,null),this}},{key:"_createDefaultAttachments",value:function(n,t,e,l,i){var r,u=null;n&&((u=u||{})[36064]=new Rn(this.gl,{id:"".concat(this.id,"-color0"),pixels:null,format:6408,type:5121,width:l,height:i,mipmaps:!1,parameters:(r={},Object(A.a)(r,10241,9728),Object(A.a)(r,10240,9728),Object(A.a)(r,10242,33071),Object(A.a)(r,10243,33071),r)}));return t&&e?(u=u||{})[33306]=new Wn(this.gl,{id:"".concat(this.id,"-depth-stencil"),format:35056,width:l,height:111}):t?(u=u||{})[36096]=new Wn(this.gl,{id:"".concat(this.id,"-depth"),format:33189,width:l,height:i}):e&&M(!1),u}},{key:"_unattach",value:function(n){var t=this.attachments[n];t&&(t instanceof Wn?this.gl.framebufferRenderbuffer(36160,n,36161,null):this.gl.framebufferTexture2D(36160,n,3553,null,0),delete this.attachments[n])}},{key:"_attachRenderbuffer",value:function(n){var t=n.attachment,e=void 0===t?36064:t,l=n.renderbuffer;this.gl.framebufferRenderbuffer(36160,e,36161,l.handle),this.attachments[e]=l}},{key:"_attachTexture",value:function(n){var t=n.attachment,e=void 0===t?36064:t,l=n.texture,i=n.layer,r=n.level,u=this.gl;switch(u.bindTexture(l.target,l.handle),l.target){case 35866:case 32879:u.framebufferTextureLayer(36160,e,l.target,r,i);break;case 34067:var o=function(n){return n<34069?n+34069:n}(i);u.framebufferTexture2D(36160,e,o,l.handle,r);break;case 3553:u.framebufferTexture2D(36160,e,3553,l.handle,r);break;default:M(!1,"Illegal texture type")}u.bindTexture(l.target,null),this.attachments[e]=l}},{key:"_setReadBuffer",value:function(n,t){Z(n)?n.readBuffer(t):M(36064===t||1029===t,"Multiple render targets not supported"),this.readBuffer=t}},{key:"_setDrawBuffers",value:function(n,t){if(Z(n))n.drawBuffers(t);else{var e=n.getExtension("WEBGL.draw_buffers");e?e.drawBuffersWEBGL(t):M(1===t.length&&(36064===t[0]||1029===t[0]),"Multiple render targets not supported")}this.drawBuffers=t}},{key:"_getAttachmentParameterFallback",value:function(n){var t=_t(this.gl);switch(n){case 36052:return t.webgl2?null:0;case 33298:case 33299:case 33300:case 33301:case 33302:case 33303:return t.webgl2?null:8;case 33297:return t.webgl2?null:5125;case 33296:return t.webgl2||t.EXT_sRGB?null:9729;default:return null}}},{key:"_createHandle",value:function(){return this.gl.createFramebuffer()}},{key:"_deleteHandle",value:function(){this.gl.deleteFramebuffer(this.handle)}},{key:"_bindHandle",value:function(n){return this.gl.bindFramebuffer(36160,n)}},{key:"color",get:function(){return this.attachments[36064]||null}},{key:"texture",get:function(){return this.attachments[36064]||null}},{key:"depth",get:function(){return this.attachments[36096]||this.attachments[33306]||null}},{key:"stencil",get:function(){return this.attachments[36128]||this.attachments[33306]||null}}]),t}(hn);function Et(n,t){M(n instanceof Rn||n instanceof Dn||n instanceof Un);var e=n.constructor,l=n.gl,i=n.width,r=n.height,u=n.format,o=n.type,a=n.dataFormat,s=n.border,c=n.mipmaps;return new e(l,Object.assign({width:i,height:r,format:u,type:o,dataFormat:a,border:s,mipmaps:c},t))}wt.ATTACHMENT_PARAMETERS=[36049,36048,33296,33298,33299,33300,33301,33302,33303];function Pt(n){return Boolean(n&&2===n._version)}var Ot={webgl2:!0,webgl1:!0,throwOnFailure:!0,manageState:!0,canvas:null,debug:!1,width:800,height:600};function St(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.assign(Ot,{width:1,height:1},n)}function At(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t=Object.assign({},Ot,t),l=e.width,i=e.height;function u(n){if(t.throwOnError)throw new Error(n);return null}r.a?n=function(n,t){var e=t.onError,l=void 0===e?function(n){return null}:e,i=function(n){return l("WebGL context: ".concat(n.statusMessage||"error"))};n.addEventListener("webglcontextcreationerror",i,!1);var r=t.webgl1,u=void 0===r||r,o=t.webgl2,a=void 0===o||o,s=null;return a&&(s=(s=s||n.getContext("webgl2",t))||n.getContext("experimental-webgl2",t)),u&&(s=(s=s||n.getContext("webgl",t))||n.getContext("experimental-webgl",t)),n.removeEventListener("webglcontextcreationerror",i,!1),s||l("Failed to create ".concat(a&&!u?"WebGL2":"WebGL"," context"))}(G({canvas:t.canvas,width:l,height:i,onError:u}),t):n=function(n){var t=n.width,e=n.height,l=n.webgl1,i=n.webgl2,r=n.onError;if(i&&!l)return r("headless-gl does not support WebGL2");if(!x)return r(C);var u=x(t,e,n);return u||r(L)}(T({},t,{width:l,height:i,onError:u}));return n?(function(n){var t=Pt(n)?"WebGL2":"WebGL1",e=W(n),l=e?"(".concat(e.vendor,",").concat(e.renderer,")"):"",i=n.debug?" debug":"";o.once(1,"".concat(t).concat(i," context ").concat(l))()}(n=Tt(n,t)),n):null}function Tt(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n._instrumented)return n;n._version=n._version||function(n){if(void 0!==S&&n instanceof S)return 2;return 1}(n);var e=t=Object.assign({},Ot,t),l=e.manageState,i=e.debug;return l&&Object(v.a)(n,{copyState:!1,log:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];return o.log.apply(o,[1].concat(t))()}}),r.a&&i&&(u.b.makeDebugContext?(n=u.b.makeDebugContext(n,{debug:i}),o.priority=Math.max(o.priority,1)):o.warn('WebGL debug mode not activated. import "@luma.gl/debug" to enable.')()),n._instrumented=!0,n}function Ct(n){var t=n.getExtension("STACKGL_destroy_context");t&&t.destroy()}function Lt(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(n.canvas){var e=t.useDevicePixels&&window.devicePixelRatio||1,l="width"in t?t.width:n.canvas.clientWidth,i="height"in t?t.height:n.canvas.clientHeight;return n.canvas.width=l*e,void(n.canvas.height=i*e)}var r=n.getExtension("STACKGL_resize_drawingbuffer");r&&"width"in t&&"height"in t&&r.resize(t.width,t.height)}function Mt(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"unnamed",e=n.match(/#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/);return e?e[1]:t}var jt=35632,Rt=35633;function It(n,t,e,l){for(var i=n.split(/\r?\n/),r={},u={},o=l||Mt(t)||"(unnamed)",a="".concat(function(n){switch(n){case jt:return"fragment";case Rt:return"vertex";default:return"unknown type"}}(e)," shader ").concat(o),s=0;s<i.length;s++){var c=i[s];if(!(c.length<=1)){var h=c.split(":"),f=h[0],d=parseInt(h[2],10);if(isNaN(d))throw new Error("GLSL compilation error in ".concat(a,": ").concat(n));"WARNING"!==f?r[d]=c:u[d]=c}}var p=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:": ",l=n.split(/\r?\n/),i=String(l.length+t-1).length;return l.map(function(n,l){var r=l+t,u=String(r).length,o=Ft(r,i-u);return o+e+n})}(t);return{shaderName:a,errors:kt(r,p),warnings:kt(u,p)}}function kt(n,t){for(var e="",l=0;l<t.length;l++){var i=t[l];if((n[l+3]||n[l+2]||n[l+1])&&(e+="".concat(i,"\n"),n[l+1])){var r=n[l+1],u=r.split(":",3),o=u[0],a=parseInt(u[1],10)||0,s=r.substring(u.join(":").length+1).trim();e+=Ft("^^^ ".concat(o,": ").concat(s,"\n\n"),a)}}return e}function Ft(n,t){for(var e="",l=0;l<t;++l)e+=" ";return"".concat(e).concat(n)}function Nt(n){var t=100,e=n.match(/[^\s]+/g);if(e.length>=2&&"#version"===e[0]){var l=parseInt(e[1],10);Number.isFinite(l)&&(t=l)}return t}var Dt,Bt="Shader: GLSL source code must be a JavaScript string",Ut=function(n){function t(n,e){var i;Object(l.a)(this,t),q(n),M("string"==typeof e.source,Bt);var r=Mt(e.source,null)||e.id||R("unnamed ".concat(t.getTypeName(e.shaderType)));return(i=Object(un.a)(this,Object(on.a)(t).call(this,n,{id:r}))).shaderType=e.shaderType,i.source=e.source,i.initialize(e),i}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"getTypeName",value:function(n){switch(n){case 35633:return"vertex-shader";case 35632:return"fragment-shader";default:return M(!1),"unknown"}}}]),Object(i.a)(t,[{key:"initialize",value:function(n){var t=n.source,e=Mt(t,null);e&&(this.id=R(e)),this._compile(t)}},{key:"getParameter",value:function(n){return this.gl.getShaderParameter(this.handle,n)}},{key:"toString",value:function(){return"".concat(t.getTypeName(this.shaderType),":").concat(this.id)}},{key:"getName",value:function(){return Mt(this.source)||"unnamed-shader"}},{key:"getSource",value:function(){return this.gl.getShaderSource(this.handle)}},{key:"getTranslatedSource",value:function(){var n=this.gl.getExtension("WEBGL.debug_shaders");return n?n.getTranslatedShaderSource(this.handle):"No translated source available. WEBGL.debug_shaders not implemented"}},{key:"_compile",value:function(){if(this.gl.shaderSource(this.handle,this.source),this.gl.compileShader(this.handle),!this.getParameter(35713)){var n=It(this.gl.getShaderInfoLog(this.handle),this.source,this.shaderType,this.id),t=n.shaderName,e=n.errors,l=n.warnings;throw o.error("GLSL compilation errors in ".concat(t,"\n").concat(e))(),o.warn("GLSL compilation warnings in ".concat(t,"\n").concat(l))(),new Error("GLSL compilation errors in ".concat(t))}}},{key:"_deleteHandle",value:function(){this.gl.deleteShader(this.handle)}},{key:"_getOptsFromHandle",value:function(){return{type:this.getParameter(35663),source:this.getSource()}}}]),t}(hn),zt=function(n){function t(n,e){return Object(l.a)(this,t),"string"==typeof e&&(e={source:e}),Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},e,{shaderType:35633})))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_createHandle",value:function(){return this.gl.createShader(35633)}}]),t}(Ut),Vt=function(n){function t(n,e){return Object(l.a)(this,t),"string"==typeof e&&(e={source:e}),Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},e,{shaderType:35632})))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_createHandle",value:function(){return this.gl.createShader(35632)}}]),t}(Ut);function Gt(n,t,e){return(Gt="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(n,t,e){var l=function(n,t){for(;!Object.prototype.hasOwnProperty.call(n,t)&&null!==(n=Object(on.a)(n)););return n}(n,t);if(l){var i=Object.getOwnPropertyDescriptor(l,t);return i.get?i.get.call(e):i.value}})(n,t,e||n)}var Wt,Ht=(Dt={},Object(A.a)(Dt,5126,function(n,t,e){return n.uniform1fv(t,Kt(e,1))}),Object(A.a)(Dt,35664,function(n,t,e){return n.uniform2fv(t,Kt(e,2))}),Object(A.a)(Dt,35665,function(n,t,e){return n.uniform3fv(t,Kt(e,3))}),Object(A.a)(Dt,35666,function(n,t,e){return n.uniform4fv(t,Kt(e,4))}),Object(A.a)(Dt,5124,function(n,t,e){return n.uniform1iv(t,Qt(e,1))}),Object(A.a)(Dt,35667,function(n,t,e){return n.uniform2iv(t,Qt(e,2))}),Object(A.a)(Dt,35668,function(n,t,e){return n.uniform3iv(t,Qt(e,3))}),Object(A.a)(Dt,35669,function(n,t,e){return n.uniform4iv(t,Qt(e,4))}),Object(A.a)(Dt,35670,function(n,t,e){return n.uniform1iv(t,Qt(e,1))}),Object(A.a)(Dt,35671,function(n,t,e){return n.uniform2iv(t,Qt(e,2))}),Object(A.a)(Dt,35672,function(n,t,e){return n.uniform3iv(t,Qt(e,3))}),Object(A.a)(Dt,35673,function(n,t,e){return n.uniform4iv(t,Qt(e,4))}),Object(A.a)(Dt,35674,function(n,t,e){return n.uniformMatrix2fv(t,!1,Kt(e,4))}),Object(A.a)(Dt,35675,function(n,t,e){return n.uniformMatrix3fv(t,!1,Kt(e,9))}),Object(A.a)(Dt,35676,function(n,t,e){return n.uniformMatrix4fv(t,!1,Kt(e,16))}),Object(A.a)(Dt,35678,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,35680,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,5125,function(n,t,e){return n.uniform1uiv(t,Jt(e,1))}),Object(A.a)(Dt,36294,function(n,t,e){return n.uniform2uiv(t,Jt(e,2))}),Object(A.a)(Dt,36295,function(n,t,e){return n.uniform3uiv(t,Jt(e,3))}),Object(A.a)(Dt,36296,function(n,t,e){return n.uniform4uiv(t,Jt(e,4))}),Object(A.a)(Dt,35685,function(n,t,e){return n.uniformMatrix2x3fv(t,!1,Kt(e,6))}),Object(A.a)(Dt,35686,function(n,t,e){return n.uniformMatrix2x4fv(t,!1,Kt(e,8))}),Object(A.a)(Dt,35687,function(n,t,e){return n.uniformMatrix3x2fv(t,!1,Kt(e,6))}),Object(A.a)(Dt,35688,function(n,t,e){return n.uniformMatrix3x4fv(t,!1,Kt(e,12))}),Object(A.a)(Dt,35689,function(n,t,e){return n.uniformMatrix4x2fv(t,!1,Kt(e,8))}),Object(A.a)(Dt,35690,function(n,t,e){return n.uniformMatrix4x3fv(t,!1,Kt(e,12))}),Object(A.a)(Dt,35679,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,35682,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36289,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36292,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36293,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36298,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36299,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36300,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36303,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36306,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36307,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36308,function(n,t,e){return n.uniform1i(t,e)}),Object(A.a)(Dt,36311,function(n,t,e){return n.uniform1i(t,e)}),Dt),Xt={},Yt={},Zt={},qt=[0];function $t(n,t,e,l){1===t&&"boolean"==typeof n&&(n=n?1:0),Number.isFinite(n)&&(qt[0]=n,n=qt);var i=n.length;if(i%t&&o.warn("Uniform size should be multiples of ".concat(t),n)(),n instanceof e)return n;var r=l[i];r||(r=new e(i),l[i]=r);for(var u=0;u<i;u++)r[u]=n[u];return r}function Kt(n,t){return $t(n,t,Float32Array,Xt)}function Qt(n,t){return $t(n,t,Int32Array,Yt)}function Jt(n,t){return $t(n,t,Uint32Array,Zt)}function ne(n){if("]"!==n[n.length-1])return{name:n,length:1,isArray:!1};var t=n.match(/([^[]*)(\[[0-9]+\])?/);if(!t||t.length<2)throw new Error("Failed to parse GLSL uniform name ".concat(n));return{name:t[1],length:t[2]||1,isArray:Boolean(t[2])}}function te(n,t,e){var l=Ht[e.type];if(!l)throw new Error("Unknown GLSL uniform type ".concat(e.type));return l.bind(null,n,t)}function ee(n){return Array.isArray(n)||ArrayBuffer.isView(n)?function(n){if(0===n.length)return!1;for(var t=Math.min(n.length,16),e=0;e<t;++e)if(!Number.isFinite(n[e]))return!1;return!0}(n):!!isFinite(n)||(!0===n||!1===n||(n instanceof Tn||(n instanceof Wn||n instanceof wt&&Boolean(n.texture))))}function le(n,t){if(Array.isArray(n)||ArrayBuffer.isView(n)){if(!t)return!1;var e=n.length;if(t.length!==e)return!1;for(var l=0;l<e;l++)if(n[l]!==t[l])return!1;return!0}return n===t}var ie=5120,re=5121,ue=5122,oe=5123,ae=0,se=1,ce=2,he=3,fe=4,de=5,pe=6,ge=5126,ve=(Wt={},Object(A.a)(Wt,ge,[ge,1,"float"]),Object(A.a)(Wt,35664,[ge,2,"vec2"]),Object(A.a)(Wt,35665,[ge,3,"vec3"]),Object(A.a)(Wt,35666,[ge,4,"vec4"]),Object(A.a)(Wt,5124,[5124,1,"int"]),Object(A.a)(Wt,35667,[5124,2,"ivec2"]),Object(A.a)(Wt,35668,[5124,3,"ivec3"]),Object(A.a)(Wt,35669,[5124,4,"ivec4"]),Object(A.a)(Wt,5125,[5125,1,"uint"]),Object(A.a)(Wt,36294,[5125,2,"uvec2"]),Object(A.a)(Wt,36295,[5125,3,"uvec3"]),Object(A.a)(Wt,36296,[5125,4,"uvec4"]),Object(A.a)(Wt,35670,[ge,1,"bool"]),Object(A.a)(Wt,35671,[ge,2,"bvec2"]),Object(A.a)(Wt,35672,[ge,3,"bvec3"]),Object(A.a)(Wt,35673,[ge,4,"bvec4"]),Object(A.a)(Wt,35674,[ge,8,"mat2"]),Object(A.a)(Wt,35685,[ge,8,"mat2x3"]),Object(A.a)(Wt,35686,[ge,8,"mat2x4"]),Object(A.a)(Wt,35675,[ge,12,"mat3"]),Object(A.a)(Wt,35687,[ge,12,"mat3x2"]),Object(A.a)(Wt,35688,[ge,12,"mat3x4"]),Object(A.a)(Wt,35676,[ge,16,"mat4"]),Object(A.a)(Wt,35689,[ge,16,"mat4x2"]),Object(A.a)(Wt,35690,[ge,16,"mat4x3"]),Wt);function me(n){switch(n){case ae:return ae;case se:case he:case ce:return se;case fe:case de:case pe:return fe;default:return M(!1),0}}function _e(n){var t=ve[n];if(!t)return null;var e=Object(h.a)(t,2);return{type:e[0],components:e[1]}}function be(n,t){switch(n){case ie:case re:case ue:case oe:n=ge}for(var e in ve){var l=Object(h.a)(ve[e],3),i=l[0],r=l[1],u=l[2];if(i===n&&r===t)return{glType:e,name:u}}return null}var ye=function(){function n(t){Object(l.a)(this,n),this.id=t.id,this.attributeInfos=[],this.attributeInfosByName={},this.attributeInfosByLocation=[],this.varyingInfos=[],this.varyingInfosByName={},Object.seal(this),this._readAttributesFromProgram(t),this._readVaryingsFromProgram(t)}return Object(i.a)(n,[{key:"getAttributeInfo",value:function(n){var t=Number(n);return Number.isFinite(t)?this.attributeInfosByLocation[t]:this.attributeInfosByName[n]||null}},{key:"getAttributeLocation",value:function(n){var t=this.getAttributeInfo(n);return t?t.location:-1}},{key:"getAttributeAccessor",value:function(n){var t=this.getAttributeInfo(n);return t?t.accessor:null}},{key:"getVaryingInfo",value:function(n){var t=Number(n);return Number.isFinite(t)?this.varyingInfos[t]:this.varyingInfosByName[n]||null}},{key:"getVaryingIndex",value:function(n){var t=this.getVaryingInfo();return t?t.location:-1}},{key:"getVaryingAccessor",value:function(n){var t=this.getVaryingInfo();return t?t.accessor:null}},{key:"_readAttributesFromProgram",value:function(n){for(var t=n.gl,e=t.getProgramParameter(n.handle,35721),l=0;l<e;l++){var i=t.getActiveAttrib(n.handle,l),r=i.name,u=i.type,o=i.size,a=t.getAttribLocation(n.handle,r);a>=0&&this._addAttribute(a,r,u,o)}this.attributeInfos.sort(function(n,t){return n.location-t.location})}},{key:"_readVaryingsFromProgram",value:function(n){var t=n.gl;if(Z(t)){for(var e=t.getProgramParameter(n.handle,35971),l=0;l<e;l++){var i=t.getTransformFeedbackVarying(n.handle,l),r=i.name,u=i.type,o=i.size;this._addVarying(l,r,u,o)}this.varyingInfos.sort(function(n,t){return n.location-t.location})}}},{key:"_addAttribute",value:function(n,t,e,l){var i=_e(e),r={type:i.type,size:l*i.components};this._inferProperties(n,t,r);var u={location:n,name:t,accessor:new bn(r)};this.attributeInfos.push(u),this.attributeInfosByLocation[n]=u,this.attributeInfosByName[u.name]=u}},{key:"_inferProperties",value:function(n,t,e){/instance/i.test(t)&&(e.divisor=1)}},{key:"_addVarying",value:function(n,t,e,l){var i=_e(e),r=i.type,u=i.components,o={location:n,name:t,accessor:new bn({type:r,size:l*u})};this.varyingInfos.push(o),this.varyingInfosByName[o.name]=o}}]),n}(),xe=["setVertexArray","setAttributes","setBuffers","unsetBuffers","use","getUniformCount","getUniformInfo","getUniformLocation","getUniformValue","getVarying","getFragDataLocation","getAttachedShaders","getAttributeCount","getAttributeLocation","getAttributeInfo"],we=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).stubRemovedMethods("Program","v6.0",xe),e._isCached=!1,e.initialize(i),Object.seal(Object(an.a)(e)),e._setId(i.id),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.vs,e=n.fs,l=n.varyings,i=n.bufferMode,r=void 0===i?35981:i;return this.vs="string"==typeof t?new zt(this.gl,{id:"".concat(n.id,"-vs"),source:t}):t,this.fs="string"==typeof e?new Vt(this.gl,{id:"".concat(n.id,"-fs"),source:e}):e,M(this.vs instanceof zt),M(this.fs instanceof Vt),this.uniforms={},l&&($(this.gl),this.varyings=l,this.gl.transformFeedbackVaryings(this.handle,l,r)),this._compileAndLink(),this._readUniformLocationsFromLinkedProgram(),this.configuration=new ye(this),this.setProps(n)}},{key:"delete",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._isCached?this:Gt(Object(on.a)(t.prototype),"delete",this).call(this,n)}},{key:"setProps",value:function(n){return"uniforms"in n&&this.setUniforms(n.uniforms),this}},{key:"draw",value:function(n){var t=this,e=n.logPriority,l=n.drawMode,i=void 0===l?4:l,r=n.vertexCount,u=n.offset,a=void 0===u?0:u,s=n.start,c=n.end,h=n.isIndexed,f=void 0!==h&&h,d=n.indexType,p=void 0===d?5123:d,g=n.isInstanced,v=void 0!==g&&g,m=n.instanceCount,b=void 0===m?0:m,y=n.vertexArray,x=void 0===y?null:y,w=n.transformFeedback,E=n.framebuffer,P=n.parameters,O=void 0===P?{}:P,S=n.uniforms,A=n.samplers;if((S||A)&&(o.deprecated("Program.draw({uniforms})","Program.setUniforms(uniforms)")(),this.setUniforms(S||{})),void 0!==e){var T=E?E.id:"default",C="mode=".concat(rn(this.gl,i)," verts=").concat(r," ")+"instances=".concat(b," indexType=").concat(rn(this.gl,p)," ")+"isInstanced=".concat(v," isIndexed=").concat(f," ")+"Framebuffer=".concat(T);o.log(e,C)()}return M(x),this.gl.useProgram(this.handle),!!this._areTexturesRenderable()&&(x.bindForDraw(r,b,function(){if(void 0!==E&&(O=Object.assign({},O,{framebuffer:E})),w){var n=me(i);w.begin(n)}t._bindTextures(),_(t.gl,O,function(){f&&v?t.gl.drawElementsInstanced(i,r,p,a,b):f&&Z(t.gl)&&!isNaN(s)&&!isNaN(c)?t.gl.drawRangeElements(i,s,c,r,p,a):f?t.gl.drawElements(i,r,p,a):v?t.gl.drawArraysInstanced(i,a,r,b):t.gl.drawArrays(i,a,r)}),w&&w.end()}),!0)}},{key:"setUniforms",value:function(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},l=!1,i={};for(var r in t)le(this.uniforms[r],t[r])||(l=!0,i[r]=t[r],this.uniforms[r]=(n=t[r],Array.isArray(n)||ArrayBuffer.isView(n)?n.slice():n));return l&&(e(),function(n,t,e){for(var l in n){var i=n[l];if((!e||Boolean(e[l]))&&!ee(i))throw t=t?"".concat(t," "):"",console.error("".concat(t," Bad uniform ").concat(l),i),new Error("".concat(t," Bad uniform ").concat(l))}}(i,this.id,this._uniformSetters),this._setUniforms(i)),this}},{key:"reset",value:function(){}},{key:"_areTexturesRenderable",value:function(){var n=!0;for(var t in this.uniforms){var e=this._uniformSetters[t];if(e&&void 0!==e.textureIndex){var l=this.uniforms[t];if(l instanceof wt)l=l.texture;if(l instanceof Tn)n=n&&l.loaded}}return n}},{key:"_bindTextures",value:function(){for(var n in this.uniforms){var t=this._uniformSetters[n];if(t&&void 0!==t.textureIndex){var e=this.uniforms[n];if(e instanceof wt&&(e=e.texture),e instanceof Tn)e.bind(t.textureIndex)}}}},{key:"_setUniforms",value:function(n){for(var t in this.gl.useProgram(this.handle),n){var e=n[t],l=this._uniformSetters[t];if(l)if(e instanceof wt&&(e=e.texture),e instanceof Tn){void 0===l.textureIndex&&(l.textureIndex=this._textureIndexCounter++);var i=e,r=l.textureIndex;i.bind(r),l(r)}else l(e)}return this}},{key:"_createHandle",value:function(){return this.gl.createProgram()}},{key:"_deleteHandle",value:function(){this.gl.deleteProgram(this.handle)}},{key:"_getOptionsFromHandle",value:function(n){var t=this.gl.getAttachedShaders(n),e={},l=!0,i=!1,r=void 0;try{for(var u,o=t[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){var a=u.value;switch(this.gl.getShaderParameter(this.handle,35663)){case 35633:e.vs=new zt({handle:a});break;case 35632:e.fs=new Vt({handle:a})}}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}return e}},{key:"_getParameter",value:function(n){return this.gl.getProgramParameter(this.handle,n)}},{key:"_setId",value:function(n){if(!n){var t=this._getName();this.id=R(t)}}},{key:"_getName",value:function(){var n=this.vs.getName()||this.fs.getName();return n=(n=n.replace(/shader/i,""))?"".concat(n,"-program"):"program"}},{key:"_compileAndLink",value:function(){var n=this.gl;if((n.attachShader(this.handle,this.vs.handle),n.attachShader(this.handle,this.fs.handle),o.time(4,"linkProgram for ".concat(this._getName()))(),n.linkProgram(this.handle),o.timeEnd(4,"linkProgram for ".concat(this._getName()))(),n.debug||o.priority>0)&&(n.validateProgram(this.handle),!n.getProgramParameter(this.handle,35714)))throw new Error("Error linking: ".concat(n.getProgramInfoLog(this.handle)))}},{key:"_readUniformLocationsFromLinkedProgram",value:function(){var n=this.gl;this._uniformSetters={},this._uniformCount=this._getParameter(35718);for(var t=0;t<this._uniformCount;t++){var e=this.gl.getActiveUniform(this.handle,t),l=ne(e.name),i=l.name,r=(l.isArray,n.getUniformLocation(this.handle,i));this._uniformSetters[i]=te(n,r,e)}this._textureIndexCounter=0}},{key:"getActiveUniforms",value:function(n,t){return this.gl.getActiveUniforms(this.handle,n,t)}},{key:"getUniformBlockIndex",value:function(n){return this.gl.getUniformBlockIndex(this.handle,n)}},{key:"getActiveUniformBlockParameter",value:function(n,t){return this.gl.getActiveUniformBlockParameter(this.handle,n,t)}},{key:"uniformBlockBinding",value:function(n,t){this.gl.uniformBlockBinding(this.handle,n,t)}}]),t}(hn),Ee=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).target=null,e._queryPending=!1,e._pollingPromise=null,Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],e=Z(n),l=mt(n,pt.TIMER_QUERY),i=e||l,r=!0,u=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){switch(a.value){case"queries":i=i&&e;break;case"timers":i=i&&l;break;default:M(!1)}}}catch(n){u=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(u)throw o}}return i}}]),Object(i.a)(t,[{key:"beginTimeElapsedQuery",value:function(){return this.begin(35007)}},{key:"beginOcclusionQuery",value:function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).conservative,t=void 0!==n&&n;return this.begin(t?36202:35887)}},{key:"beginTransformFeedbackQuery",value:function(){return this.begin(35976)}},{key:"begin",value:function(n){return this._queryPending?this:(this.target=n,this.gl.beginQuery(this.target,this.handle),this)}},{key:"end",value:function(){return this._queryPending?this:(this.target&&(this.gl.endQuery(this.target),this.target=null,this._queryPending=!0),this)}},{key:"isResultAvailable",value:function(){if(!this._queryPending)return!1;var n=this.gl.getQueryParameter(this.handle,34919);return n&&(this._queryPending=!1),n}},{key:"isTimerDisjoint",value:function(){return this.gl.getParameter(36795)}},{key:"getResult",value:function(){return this.gl.getQueryParameter(this.handle,34918)}},{key:"getTimerMilliseconds",value:function(){return this.getResult()/1e6}},{key:"createPoll",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.POSITIVE_INFINITY;if(this._pollingPromise)return this._pollingPromise;var e=0;return this._pollingPromise=new Promise(function(l,i){requestAnimationFrame(function r(){n.isResultAvailable()?(l(n.getResult()),n._pollingPromise=null):e++>t?(i("Timed out"),n._pollingPromise=null):requestAnimationFrame(r)})}),this._pollingPromise}},{key:"_createHandle",value:function(){return t.isSupported(this.gl)?this.gl.createQuery():null}},{key:"_deleteHandle",value:function(){this.gl.deleteQuery(this.handle)}}]),t}(hn),Pe=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),$(n),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,i))).initialize(i),e.stubRemovedMethods("TransformFeedback","v6.0",["pause","resume"]),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){return Z(n)}}]),Object(i.a)(t,[{key:"initialize",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.buffers={},this.unused={},this.configuration=null,this.bindOnUse=!0,k(this.buffers)||this.bind(function(){return n._unbindBuffers()}),this.setProps(t),this}},{key:"setProps",value:function(n){"program"in n&&(this.configuration=n.program&&n.program.configuration),"configuration"in n&&(this.configuration=n.configuration),"bindOnUse"in n&&(n=n.bindOnUse),"buffers"in n&&this.setBuffers(n.buffers)}},{key:"setBuffers",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.bind(function(){for(var e in t)n.setBuffer(e,t[e])}),this}},{key:"setBuffer",value:function(n,t){var e=this,l=this._getVaryingIndex(n),i=this._getBufferParams(t),r=i.buffer,u=i.byteSize,a=i.byteOffset;return l<0?(this.unused[n]=r,o.warn(function(){return"".concat(e.id," unused varying buffer ").concat(n)})(),this):(this.buffers[l]=t,this.bindOnUse||this._bindBuffer(l,r,a,u),this)}},{key:"begin",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.gl.bindTransformFeedback(36386,this.handle),this._bindBuffers(),this.gl.beginTransformFeedback(n),this}},{key:"end",value:function(){return this.gl.endTransformFeedback(),this._unbindBuffers(),this.gl.bindTransformFeedback(36386,null),this}},{key:"_getBufferParams",value:function(n){var t,e,l;return n instanceof En==!1?(l=n.buffer,e=n.byteSize,t=n.byteOffset):l=n,void 0===t&&void 0===e||(t=t||0,e=e||l.byteLength-t),{buffer:l,byteOffset:t,byteSize:e}}},{key:"_getVaryingInfo",value:function(n){return this.configuration&&this.configuration.getVaryingInfo(n)}},{key:"_getVaryingIndex",value:function(n){if(this.configuration)return this.configuration.getVaryingInfo(n).location;var t=Number(n);return Number.isFinite(t)?t:-1}},{key:"_bindBuffers",value:function(){if(this.bindOnUse)for(var n in this.buffers){var t=this._getBufferParams(this.buffers[n]),e=t.buffer,l=t.byteSize,i=t.byteOffset;this._bindBuffer(n,e,i,l)}}},{key:"_unbindBuffers",value:function(){if(this.bindOnUse)for(var n in this.buffers)this._bindBuffer(n,null)}},{key:"_bindBuffer",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,l=arguments.length>3?arguments[3]:void 0,i=t&&t.handle;return i&&void 0!==l?this.gl.bindBufferRange(35982,n,i,e,l):this.gl.bindBufferBase(35982,n,i),this}},{key:"_createHandle",value:function(){return this.gl.createTransformFeedback()}},{key:"_deleteHandle",value:function(){this.gl.deleteTransformFeedback(this.handle)}},{key:"_bindHandle",value:function(n){this.gl.bindTransformFeedback(36386,this.handle)}}]),t}(hn),Oe=null;function Se(n,t){var e;return new n((e=n.BYTES_PER_ELEMENT*t,(!Oe||Oe.byteLength<e)&&(Oe=new ArrayBuffer(e)),Oe),0,t)}var Ae=e(24),Te=e(71),Ce=e(72);var Le=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,t);var r=i.id||i.program&&i.program.id;return(e=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},i,{id:r})))).hasVertexArrays=t.isSupported(n),e.buffer=null,e.bufferValue=null,e.initialize(i),Object.seal(Object(an.a)(e)),e}return Object(sn.a)(t,n),Object(i.a)(t,null,[{key:"isSupported",value:function(n){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).constantAttributeZero?Z(n)||"Chrome"===function(n){if(!n&&!Object(Te.a)())return"Node";if(Object(Ce.a)(n))return"Electron";var t="undefined"!=typeof navigator?navigator:{},e=n||t.userAgent||"";if(e.indexOf("Edge")>-1)return"Edge";var l=-1!==e.indexOf("MSIE "),i=-1!==e.indexOf("Trident/");return l||i?"IE":Ae.b.chrome?"Chrome":Ae.b.safari?"Safari":Ae.b.mozInnerScreenX?"Firefox":"Unknown"}():Z(n)||n.getExtension("OES_vertex_array_object")}},{key:"getDefaultArray",value:function(n){return n.luma=n.luma||{},n.luma.defaultVertexArray||(n.luma.defaultVertexArray=new t(n,{handle:null})),n.luma.defaultVertexArray}},{key:"getMaxAttributes",value:function(n){return t.MAX_ATTRIBUTES=t.MAX_ATTRIBUTES||n.getParameter(34921),t.MAX_ATTRIBUTES}},{key:"setConstant",value:function(n,e,l){switch(l.constructor){case Float32Array:t._setConstantFloatArray(n,e,l);break;case Int32Array:t._setConstantIntArray(n,e,l);break;case Uint32Array:t._setConstantUintArray(n,e,l);break;default:M(!1)}}}]),Object(i.a)(t,[{key:"delete",value:function(){Gt(Object(on.a)(t.prototype),"delete",this).call(this),this.buffer&&this.buffer.delete()}},{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.setProps(n)}},{key:"setProps",value:function(n){return this}},{key:"setElementBuffer",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;arguments.length>1&&void 0!==arguments[1]&&arguments[1];return M(!t||34963===t.target,"elements must be GL.ELEMENT_ARRAY_BUFFER"),this.bind(function(){n.gl.bindBuffer(34963,t?t.handle:null)}),this}},{key:"setBuffer",value:function(n,t,e){if(34963===t.target)return this.setElementBuffer(t,e);var l=e.size,i=e.type,r=e.stride,u=e.offset,o=e.normalized,a=e.integer,s=e.divisor,c=this.gl;return n=Number(n),this.bind(function(){c.bindBuffer(34962,t.handle),a?(M(Z(c)),c.vertexAttribIPointer(n,l,i,r,u)):c.vertexAttribPointer(n,l,i,o,r,u),c.enableVertexAttribArray(n),c.vertexAttribDivisor(n,s||0)}),this}},{key:"enable",value:function(n){var e=this,l=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return!l&&0===n&&!t.isSupported(this.gl,{constantAttributeZero:!0})||(n=Number(n),this.bind(function(){return l?e.gl.enableVertexAttribArray(n):e.gl.disableVertexAttribArray(n)})),this}},{key:"getConstantBuffer",value:function(n,t,e){var l=this._normalizeConstantArrayValue(t,e),i=l.byteLength*n,r=l.length*n,u=!this.buffer;if(this.buffer=this.buffer||new En(this.gl,i),u=(u=u||this.buffer.reallocate(i))||!this._compareConstantArrayValues(l,this.bufferValue)){var o=Se(t.constructor,r);!function(n){for(var t=n.target,e=n.source,l=n.start,i=void 0===l?0:l,r=n.count,u=void 0===r?1:r,o=e.length,a=u*o,s=0,c=i;s<o;s++)t[c++]=e[s];for(;s<a;)s<a-s?(t.copyWithin(i+s,i,i+s),s*=2):(t.copyWithin(i+s,i,i+a-s),s=a)}({target:o,source:l,start:0,count:r}),this.buffer.subData(o),this.bufferValue=t}return this.buffer}},{key:"_normalizeConstantArrayValue",value:function(n,t){return Array.isArray(n)?new Float32Array(n):n}},{key:"_compareConstantArrayValues",value:function(n,t){if(!n||!t||n.length!==t.length||n.constructor!==t.constructor)return!1;for(var e=0;e<n.length;++e)if(n[e]!==t[e])return!1;return!0}},{key:"_createHandle",value:function(){return this.hasVertexArrays=t.isSupported(this.gl),this.hasVertexArrays?this.gl.createVertexArray():null}},{key:"_deleteHandle",value:function(n){return this.hasVertexArrays&&this.gl.deleteVertexArray(n),[this.elements]}},{key:"_bindHandle",value:function(n){this.hasVertexArrays&&this.gl.bindVertexArray(n)}},{key:"_getParameter",value:function(n,t){var e=this,l=t.location;return M(Number.isFinite(l)),this.bind(function(){switch(n){case 34373:return e.gl.getVertexAttribOffset(l,n);default:return e.gl.getVertexAttrib(l,n)}})}},{key:"MAX_ATTRIBUTES",get:function(){return t.getMaxAttributes(this.gl)}}],[{key:"_setConstantFloatArray",value:function(n,t,e){switch(e.length){case 1:n.vertexAttrib1fv(t,e);break;case 2:n.vertexAttrib2fv(t,e);break;case 3:n.vertexAttrib3fv(t,e);break;case 4:n.vertexAttrib4fv(t,e);break;default:M(!1)}}},{key:"_setConstantIntArray",value:function(n,t,e){switch(M(Z(n)),e.length){case 1:n.vertexAttribI1iv(t,e);break;case 2:n.vertexAttribI2iv(t,e);break;case 3:n.vertexAttribI3iv(t,e);break;case 4:n.vertexAttribI4iv(t,e);break;default:M(!1)}}},{key:"_setConstantUintArray",value:function(n,t,e){switch(M(Z(n)),e.length){case 1:n.vertexAttribI1uiv(t,e);break;case 2:n.vertexAttribI2uiv(t,e);break;case 3:n.vertexAttribI3uiv(t,e);break;case 4:n.vertexAttribI4uiv(t,e);break;default:M(!1)}}}]),t}(hn),Me=/^(.+)__LOCATION_([0-9]+)$/,je=["setBuffers","setGeneric","clearBindings","setLocations","setGenericValues","setDivisor","enable","disable"],Re=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,n);var i=e.id||e.program&&e.program.id;this.id=i,this.gl=t,this.configuration=null,this.elements=null,this.elementsAccessor=null,this.values=null,this.accessors=null,this.unused=null,this.drawParams=null,this.buffer=null,this.vertexArrayObject=Le.isSupported(t)?new Le(t):Le.getDefaultArray(t),N(this,"VertexArray","v6.0",je),this.initialize(e),Object.seal(this)}return Object(i.a)(n,[{key:"delete",value:function(){this.buffer&&this.buffer.delete()}},{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.reset(),this.configuration=null,this.bindOnUse=!1,this.setProps(n)}},{key:"reset",value:function(){this.elements=null,this.elementsAccessor=null;var n=this.vertexArrayObject.MAX_ATTRIBUTES;return this.values=new Array(n).fill(null),this.accessors=new Array(n).fill(null),this.unused={},this.drawParams=null,this}},{key:"setProps",value:function(n){return"program"in n&&(this.configuration=n.program&&n.program.configuration),"configuration"in n&&(this.configuration=n.configuration),"attributes"in n&&this.setAttributes(n.attributes),"elements"in n&&this.setElementBuffer(n.elements),"bindOnUse"in n&&(n=n.bindOnUse),this}},{key:"clearDrawParams",value:function(){this.drawParams=null}},{key:"getDrawParams",value:function(n){return this.drawParams=this.drawParams||this._updateDrawParams(),Object.assign({},this.drawParams,n)}},{key:"setAttributes",value:function(n){var t=this;return this.vertexArrayObject.bind(function(){for(var e in n){var l=n[e];t._setAttribute(e,l)}t.gl.bindBuffer(34962,null)}),this}},{key:"setElementBuffer",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.elements=n,this.elementsAccessor=t,this.clearDrawParams(),this.vertexArrayObject.isDefaultArray||this.vertexArrayObject.setElementBuffer(n,t),this}},{key:"setBuffer",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(34963===t.target)return this.setElementBuffer(t,e);var l=this._resolveLocationAndAccessor(n,t,t.accessor,e),i=l.location,r=l.accessor;return i>=0&&(this.values[i]=t,this.accessors[i]=r,this.clearDrawParams(),this.vertexArrayObject.isDefaultArray||this.vertexArrayObject.setBuffer(i,t,r)),this}},{key:"setConstant",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=this._resolveLocationAndAccessor(n,t,e),i=l.location,r=l.accessor;return i>=0&&(t=this.vertexArrayObject._normalizeConstantArrayValue(t,r),this.values[i]=t,this.accessors[i]=r,this.clearDrawParams(),this.vertexArrayObject.isDefaultArray||this.vertexArrayObject.enable(i,!1)),this}},{key:"unbindBuffers",value:function(){var n=this;return this.vertexArrayObject.bind(function(){n.elements&&n.setElementBuffer(null),n.buffer=n.buffer||new En(n.gl,{size:4});for(var t=0;t<n.vertexArrayObject.MAX_ATTRIBUTES;t++)n.values[t]instanceof En&&(n.gl.disableVertexAttribArray(t),n.gl.bindBuffer(34962,n.buffer.handle),n.gl.vertexAttribPointer(t,1,5126,!1,0,0))}),this}},{key:"bindBuffers",value:function(){var n=this;return this.vertexArrayObject.bind(function(){n.elements&&n.setElementBuffer(n.elements);for(var t=0;t<n.vertexArrayObject.MAX_ATTRIBUTES;t++){var e=n.values[t];e instanceof En&&n.setBuffer(t,e)}}),this}},{key:"bindForDraw",value:function(n,t,e){var l,i=this;return this.vertexArrayObject.bind(function(){i._setConstantAttributes(n,t),i.vertexArrayObject.hasVertexArrays||i.bindBuffers(),l=e(),i.vertexArrayObject.hasVertexArrays||i.unbindBuffers()}),l}},{key:"_resolveLocationAndAccessor",value:function(n,t,e,l){var i=this,r=this._getAttributeIndex(n),u=r.location,a=r.name;if(!Number.isFinite(u)||u<0)return this.unused[n]=t,o.once(3,function(){return"unused value ".concat(n," in ").concat(i.id)})(),this;var s=this._getAttributeInfo(a||u);if(!s)return{location:-1,accessor:null};var c=bn.resolve(s.accessor,e,l),h=c.size,f=c.type;return M(Number.isFinite(h)&&Number.isFinite(f)),{location:u,accessor:c}}},{key:"_getAttributeInfo",value:function(n){return this.configuration&&this.configuration.getAttributeInfo(n)}},{key:"_getAttributeIndex",value:function(n){var t=Number(n);if(Number.isFinite(t))return{location:t};var e=Me.exec(n),l=e?e[1]:n,i=e?Number(e[2]):0;return this.configuration?{location:this.configuration.getAttributeLocation(l)+i,name:l}:{location:-1}}},{key:"_setAttribute",value:function(n,t){if(t instanceof En)this.setBuffer(n,t);else if(Array.isArray(t)&&t.length&&t[0]instanceof En){var e=t[0],l=t[1];this.setBuffer(n,e,l)}else if(ArrayBuffer.isView(t)||Array.isArray(t)){var i=t;this.setConstant(n,i)}else{if(!(t.buffer instanceof En))throw new Error("VertexArray: attributes must be Buffers or constants (i.e. typed array)");var r=t;this.setBuffer(n,r.buffer,r)}}},{key:"_setConstantAttributes",value:function(n,t){var e=Math.max(0|n,0|t),l=this.values[0];ArrayBuffer.isView(l)&&this._setConstantAttributeZero(l,e);for(var i=1;i<this.vertexArrayObject.MAX_ATTRIBUTES;i++)l=this.values[i],ArrayBuffer.isView(l)&&this._setConstantAttribute(i,l)}},{key:"_setConstantAttributeZero",value:function(n,t){if(Le.isSupported(this.gl,{constantAttributeZero:!0}))this._setConstantAttribute(0,n);else{var e=this.vertexArrayObject.getConstantBuffer(t,n);this.vertexArrayObject.setBuffer(0,e,this.accessors[0])}}},{key:"_setConstantAttribute",value:function(n,t){Le.setConstant(this.gl,n,t),this.vertexArrayObject.isDefault&&this.vertexArrayObject.enable(n,!1)}},{key:"_updateDrawParams",value:function(){for(var n={isIndexed:!1,isInstanced:!1,indexCount:1/0,vertexCount:1/0,instanceCount:1/0},t=0;t<this.vertexArrayObject.MAX_ATTRIBUTES;t++)this._updateDrawParamsForLocation(n,t);return this.elements&&(n.elementCount=this.elements.getElementCount(this.elements.accessor),n.isIndexed=!0,n.indexType=this.elementsAccessor.type||this.elements.accessor.type,n.indexOffset=this.elementsAccessor.offset||0),n.indexCount===1/0&&(n.indexCount=0),n.vertexCount===1/0&&(n.vertexCount=0),n.instanceCount===1/0&&(n.instanceCount=0),n}},{key:"_updateDrawParamsForLocation",value:function(n,t){var e=this.values[t],l=this.accessors[t];if(e){var i=l.divisor>0;if(n.isInstanced=n.isInstanced||i,e instanceof En){var r=e;if(i){var u=r.getVertexCount(l);n.instanceCount=Math.min(n.instanceCount,u)}else{var o=r.getVertexCount(l);n.vertexCount=Math.min(n.vertexCount,o)}}}}},{key:"setElements",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return o.deprecated("setElements","setElementBuffer")(),this.setElementBuffer(n,t)}}]),n}(),Ie=5126,ke=5124,Fe=5125,Ne=function(){function n(t){var e;for(var i in Object(l.a)(this,n),this.layout={},this.size=0,t)this._addUniform(i,t[i]);this.size+=(4-this.size%4)%4;var r=new Float32Array(this.size);this.typedArray=(e={},Object(A.a)(e,Ie,r),Object(A.a)(e,ke,new Int32Array(r.buffer)),Object(A.a)(e,Fe,new Uint32Array(r.buffer)),e)}return Object(i.a)(n,[{key:"getBytes",value:function(){return 4*this.size}},{key:"getData",value:function(){return this.typedArray[Ie]}},{key:"getSubData",value:function(n){var t,e;if(void 0===n)t=this.data,e=0;else{var l=this.offsets[n],i=l+this.sizes[n];t=this.data.subarray(l,i),e=4*l}return{data:t,offset:e}}},{key:"setUniforms",value:function(n){for(var t in n)this._setValue(t,n[t]);return this}},{key:"_setValue",value:function(n,t){var e=this.layout[n];M(e,"UniformLayoutStd140 illegal argument");var l=this.typedArray[e.type];1===e.size?l[e.offset]=t:l.set(t,e.offset)}},{key:"_addUniform",value:function(n,t){var e=_e(t);M(e,"UniformBufferLayout illegal argument");var l=e.type,i=e.components;this.size=this._alignTo(this.size,i);var r=this.size;this.size+=i,this.layout[n]={type:l,size:i,offset:r}}},{key:"_alignTo",value:function(n,t){switch(t){case 1:return n;case 2:return n+n%2;default:return n+(4-n%4)%4}}}]),n}();function De(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.header,e=void 0===t?"Uniforms":t,l=n.program,i=n.uniforms,r=n.undefinedOnly,u=void 0!==r&&r;M(l);var o=l._uniformSetters,a={},s=Object.keys(o).sort(),c=0,h=!0,f=!1,d=void 0;try{for(var p,g=s[Symbol.iterator]();!(h=(p=g.next()).done);h=!0){var v=p.value;v.match(".*_.*")||v.match(".*Matrix")||Be({table:a,header:e,uniforms:i,uniformName:v,undefinedOnly:u})&&c++}}catch(n){f=!0,d=n}finally{try{h||null==g.return||g.return()}finally{if(f)throw d}}var m=!0,_=!1,b=void 0;try{for(var y,x=s[Symbol.iterator]();!(m=(y=x.next()).done);m=!0){var w=y.value;w.match(".*Matrix")&&Be({table:a,header:e,uniforms:i,uniformName:w,undefinedOnly:u})&&c++}}catch(n){_=!0,b=n}finally{try{m||null==x.return||x.return()}finally{if(_)throw b}}var E=!0,P=!1,O=void 0;try{for(var S,T=s[Symbol.iterator]();!(E=(S=T.next()).done);E=!0){var C=S.value;a[C]||Be({table:a,header:e,uniforms:i,uniformName:C,undefinedOnly:u})&&c++}}catch(n){P=!0,O=n}finally{try{E||null==T.return||T.return()}finally{if(P)throw O}}var L=0,j={};if(!u)for(var R in i){var I=i[R];a[R]||(L++,j[R]=Object(A.a)({Type:"NOT USED: ".concat(I)},e,F(I)))}return{table:a,count:c,unusedTable:j,unusedCount:L}}function Be(n){var t,e=n.table,l=n.header,i=n.uniforms,r=n.uniformName,u=n.undefinedOnly,o=i[r],a=function(n){return null!=n}(o);return(!u||!a)&&(e[r]=(t={},Object(A.a)(t,l,a?F(o):"N/A"),Object(A.a)(t,"Uniform Type",a?o:"NOT PROVIDED"),t),!0)}function Ue(n,t,e,l){var i,r,u,o,a=n.gl,s="NOT PROVIDED",c="N/A",h="N/A",f="N/A";if(e&&(s=e.type,c=e.size,r=-1!==(s=String(s).replace("Array","")).indexOf("nt")),t instanceof En){var d,p,g=t,v=g.getDebugData(),m=v.data;if(u=v.modified?"*":"",o=m,h=(f=g.byteLength)/m.BYTES_PER_ELEMENT/c,e){var _=e.divisor>0;p="".concat(_?"I ":"P "," ").concat(h," (x").concat(c,"=").concat(f," bytes ").concat(rn(a,s),")")}else r=!0,p="".concat(f," bytes");return d={},Object(A.a)(d,l,"".concat(u).concat(F(o,{size:c,isInteger:r}))),Object(A.a)(d,"Format ",p),d}return o=t,c=t.length,r=-1!==(s=String(t.constructor.name).replace("Array","")).indexOf("nt"),i={},Object(A.a)(i,l,"".concat(F(o,{size:c,isInteger:r})," (constant)")),Object(A.a)(i,"Format ","".concat(c,"x").concat(s," (constant)")),i}function ze(n,t){var e=be(t.type,t.size);return e?"".concat(n," (").concat(e.name,")"):n}function Ve(n){var t=n.accessor,e=be(t.type,t.size);return e?"".concat(e.name," ").concat(n.name):n.name}var Ge={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6},We=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,n);var e=t.id,i=void 0===e?R("geometry"):e,r=t.drawMode,u=void 0===r?Ge.TRIANGLES:r,o=t.mode,a=t.attributes,s=void 0===a?{}:a,c=t.indices,h=void 0===c?null:c,f=t.vertexCount,d=void 0===f?null:f;this.id=i,this.drawMode=0|u||0|o,this.attributes={},this.userData={},this._setAttributes(s,h),this.vertexCount=d||this._calculateVertexCount(this.attributes,this.indices)}return Object(i.a)(n,null,[{key:"DRAW_MODE",get:function(){return Ge}}]),Object(i.a)(n,[{key:"getVertexCount",value:function(){return this.vertexCount}},{key:"getAttributes",value:function(){return this.indices?T({indices:this.indices},this.attributes):this.attributes}},{key:"_print",value:function(n){return"Geometry ".concat(this.id," attribute ").concat(n)}},{key:"_setAttributes",value:function(n,t){for(var e in t&&(this.indices=ArrayBuffer.isView(t)?{value:t,size:1}:t),n){var l=n[e];l=ArrayBuffer.isView(l)?{value:l}:l,M(ArrayBuffer.isView(l.value),"".concat(this._print(e),": must be typed array or object with value as typed array")),"indices"===e?(M(!this.indices),this.indices=l,void 0!==this.indices.isIndexed&&(this.indices=Object.assign({},this.indices),delete this.indices.isIndexed)):this.attributes[e]=l}return this}},{key:"_calculateVertexCount",value:function(n,t){if(t)return t.value.length;var e=1/0;for(var l in n){var i=n[l],r=i.value,u=i.size;!i.constant&&r&&u>=1&&(e=Math.min(e,r.length/u))}if(!Number.isFinite(e)){var o=n.POSITION||n.positions;o&&(e=o.value&&o.value.length/(o.size||3))}return M(Number.isFinite(e)),e}},{key:"mode",get:function(){return this.drawMode}}]),n}(),He=function n(){Object(l.a)(this,n)},Xe=e(61),Ye=[255,255,255],Ze=[0,0,1],qe=[0,0,-1],$e=[0,0,1],Ke=function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,n),this.id=t.id||R("light");var e=t.color,i=void 0===e?Ye:e;this.color=i;var r=t.intensity,u=void 0===r?1:r;this.intensity=u},Qe=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(l.a)(this,t),(n=Object(un.a)(this,Object(on.a)(t).call(this,e))).type="ambient",n}return Object(sn.a)(t,n),t}(Ke),Je=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t),(n=Object(un.a)(this,Object(on.a)(t).call(this,e))).type="directional";var i=e.direction,r=void 0===i?qe:i;return n.direction=new Xe.a(r).normalize().toArray(),n}return Object(sn.a)(t,n),t}(Ke),nl=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t),(n=Object(un.a)(this,Object(on.a)(t).call(this,e))).type="point";var i=e.position,r=void 0===i?$e:i;return n.position=r,n.attenuation=n._getAttenuation(e),n}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_getAttenuation",value:function(n){return"attenuation"in n?n.attenuation:"intensity"in n?[0,0,n.intensity]:Ze}}]),t}(Ke),tl=e(17),el=0,ll=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,n);var e=t.onCreateContext,i=void 0===e?function(n){return At(n)}:e,r=t.onAddHTML,u=void 0===r?null:r,a=t.onInitialize,c=void 0===a?function(){}:a,h=t.onRender,f=void 0===h?function(){}:h,d=t.onFinalize,p=void 0===d?function(){}:d,g=t.gl,v=void 0===g?null:g,m=t.glOptions,_=void 0===m?{}:m,b=t.debug,y=void 0!==b&&b,x=t.createFramebuffer,w=void 0!==x&&x,E=t.autoResizeViewport,P=void 0===E||E,O=t.autoResizeDrawingBuffer,S=void 0===O||O,A=t.stats,T=void 0===A?s.get("animation-loop-".concat(el++)):A,C=t.useDevicePixels,L=void 0===C||C;"useDevicePixelRatio"in t&&(o.deprecated("useDevicePixelRatio","useDevicePixels")(),L=t.useDevicePixelRatio),this.props={onCreateContext:i,onAddHTML:u,onInitialize:c,onRender:f,onFinalize:p,gl:v,glOptions:_,debug:y,createFramebuffer:w},this.gl=v,this.needsRedraw=null,this.stats=T,this.cpuTime=this.stats.get("CPU Time"),this.gpuTime=this.stats.get("GPU Time"),this.frameRate=this.stats.get("Frame Rate"),this._initialized=!1,this._running=!1,this._animationFrameId=null,this._nextFramePromise=null,this._resolveNextFrame=null,this._cpuStartTime=0,this.setProps({autoResizeViewport:P,autoResizeDrawingBuffer:S,useDevicePixels:L}),this.start=this.start.bind(this),this.stop=this.stop.bind(this),this._onMousemove=this._onMousemove.bind(this),this._onMouseleave=this._onMouseleave.bind(this)}return Object(i.a)(n,[{key:"delete",value:function(){this.stop(),this._setDisplay(null)}},{key:"setNeedsRedraw",value:function(n){return M("string"==typeof n),this.needsRedraw=this.needsRedraw||n,this}},{key:"setProps",value:function(n){return"autoResizeViewport"in n&&(this.autoResizeViewport=n.autoResizeViewport),"autoResizeDrawingBuffer"in n&&(this.autoResizeDrawingBuffer=n.autoResizeDrawingBuffer),"useDevicePixels"in n&&(this.useDevicePixels=n.useDevicePixels),this}},{key:"start",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._running?this:(this._running=!0,V().then(function(){return!n._running||n._initialized?null:(n._createWebGLContext(t),n._createFramebuffer(),n._startEventHandling(),n._initializeCallbackData(),n._updateCallbackData(),n._resizeCanvasDrawingBuffer(),n._resizeViewport(),n._gpuTimeQuery=Ee.isSupported(n.gl,["timers"])?new Ee(n.gl):null,n._initialized=!0,n.onInitialize(n.animationProps))}).then(function(t){n._running&&(n._addCallbackData(t||{}),!1!==t&&n._startLoop())}),this)}},{key:"redraw",value:function(){return this._beginTimers(),this._setupFrame(),this._updateCallbackData(),this._renderFrame(this.animationProps),this._clearNeedsRedraw(),this.offScreen&&this.gl.commit&&this.gl.commit(),this._resolveNextFrame&&(this._resolveNextFrame(this),this._nextFramePromise=null,this._resolveNextFrame=null),this._endTimers(),this}},{key:"stop",value:function(){return this._running&&(this._finalizeCallbackData(),Q(this._animationFrameId),this._nextFramePromise=null,this._resolveNextFrame=null,this._animationFrameId=null,this._running=!1),this}},{key:"waitForRender",value:function(){var n=this;return this.setNeedsRedraw("waitForRender"),this._nextFramePromise||(this._nextFramePromise=new Promise(function(t){n._resolveNextFrame=t})),this._nextFramePromise}},{key:"toDataURL",value:function(){var n=Object(Fn.a)(kn.a.mark(function n(){return kn.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return this.setNeedsRedraw("toDataURL"),n.next=3,this.waitForRender();case 3:return n.abrupt("return",this.gl.canvas.toDataURL());case 4:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"onCreateContext",value:function(){var n;return(n=this.props).onCreateContext.apply(n,arguments)}},{key:"onInitialize",value:function(){var n;return(n=this.props).onInitialize.apply(n,arguments)}},{key:"onRender",value:function(){var n;return(n=this.props).onRender.apply(n,arguments)}},{key:"onFinalize",value:function(){var n;return(n=this.props).onFinalize.apply(n,arguments)}},{key:"getHTMLControlValue",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,e=document.getElementById(n);return e?Number(e.value):t}},{key:"setViewParameters",value:function(){return o.removed("AnimationLoop.setViewParameters","AnimationLoop.setProps")(),this}},{key:"_startLoop",value:function(){var n=this;Q(this._animationFrameId),this._animationFrameId=this._requestAnimationFrame(function t(){n._running&&(n.redraw(),n._animationFrameId=n._requestAnimationFrame(t))})}},{key:"_setDisplay",value:function(n){this.display&&(this.display.delete(),this.display.animationLoop=null),n&&(n.animationLoop=this),this.display=n}},{key:"_requestAnimationFrame",value:function(n){this.display&&this.display.requestAnimationFrame(n)||K(n)}},{key:"_renderFrame",value:function(){var n;this.display?(n=this.display)._renderFrame.apply(n,arguments):this.onRender.apply(this,arguments)}},{key:"_clearNeedsRedraw",value:function(){this.needsRedraw=null}},{key:"_setupFrame",value:function(){this._onSetupFrame?this._onSetupFrame(this.animationProps):(this._resizeCanvasDrawingBuffer(),this._resizeViewport(),this._resizeFramebuffer())}},{key:"_initializeCallbackData",value:function(){this.animationProps={gl:this.gl,stop:this.stop,canvas:this.gl.canvas,framebuffer:this.framebuffer,useDevicePixels:this.useDevicePixels,needsRedraw:null,startTime:Date.now(),time:0,tick:0,tock:0,_loop:this,_animationLoop:this,_mousePosition:null}}},{key:"_updateCallbackData",value:function(){var n=this._getSizeAndAspect(),t=n.width,e=n.height,l=n.aspect;t===this.animationProps.width&&e===this.animationProps.height||this.setNeedsRedraw("drawing buffer resized"),l!==this.animationProps.aspect&&this.setNeedsRedraw("drawing buffer aspect changed"),this.animationProps.width=t,this.animationProps.height=e,this.animationProps.aspect=l,this.animationProps.needsRedraw=this.needsRedraw,this.animationProps.time=Date.now()-this.animationProps.startTime,this.animationProps.tick=Math.floor(this.animationProps.time/1e3*60),this.animationProps.tock++,this.animationProps._offScreen=this.offScreen}},{key:"_finalizeCallbackData",value:function(){this.onFinalize(this.animationProps)}},{key:"_addCallbackData",value:function(n){"object"===Object(tl.a)(n)&&null!==n&&(this.animationProps=Object.assign({},this.animationProps,n))}},{key:"_createWebGLContext",value:function(n){if(this.offScreen=n.canvas&&"undefined"!=typeof OffscreenCanvas&&n.canvas instanceof OffscreenCanvas,n=Object.assign({},n,this.props.glOptions),this.gl=this.props.gl?Tt(this.props.gl,n):this.onCreateContext(n),!Y(this.gl))throw new Error("AnimationLoop.onCreateContext - illegal context returned");Object(c.d)(this.gl),this._createInfoDiv()}},{key:"_createInfoDiv",value:function(){if(this.gl.canvas&&this.props.onAddHTML){var n=document.createElement("div");document.body.appendChild(n),n.style.position="relative";var t=document.createElement("div");t.style.position="absolute",t.style.left="10px",t.style.bottom="10px",t.style.width="300px",t.style.background="white",n.appendChild(this.gl.canvas),n.appendChild(t);var e=this.props.onAddHTML(t);e&&(t.innerHTML=e)}}},{key:"_getSizeAndAspect",value:function(){var n=this.gl.drawingBufferWidth,t=this.gl.drawingBufferHeight,e=1,l=this.gl.canvas,i=l.clientWidth,r=l.clientHeight;return i>0&&r>0?e=i/r:n>0&&t>0&&(e=n/t),{width:n,height:t,aspect:e}}},{key:"_resizeViewport",value:function(){this.autoResizeViewport&&this.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight)}},{key:"_resizeCanvasDrawingBuffer",value:function(){this.autoResizeDrawingBuffer&&Lt(this.gl,{useDevicePixels:this.useDevicePixels})}},{key:"_createFramebuffer",value:function(){this.props.createFramebuffer&&(this.framebuffer=new wt(this.gl))}},{key:"_resizeFramebuffer",value:function(){this.framebuffer&&this.framebuffer.resize({width:this.gl.drawingBufferWidth,height:this.gl.drawingBufferHeight})}},{key:"_beginTimers",value:function(){this.frameRate.timeEnd(),this.frameRate.timeStart(),this._gpuTimeQuery&&this._gpuTimeQuery.isResultAvailable()&&!this._gpuTimeQuery.isTimerDisjoint()&&this.stats.get("GPU Time").addTime(this._gpuTimeQuery.getTimerMilliseconds()),this._gpuTimeQuery&&this._gpuTimeQuery.beginTimeElapsedQuery(),this.cpuTime.timeStart()}},{key:"_endTimers",value:function(){this.cpuTime.timeEnd(),this._gpuTimeQuery&&this._gpuTimeQuery.end()}},{key:"_startEventHandling",value:function(){this.gl.canvas.addEventListener("mousemove",this._onMousemove),this.gl.canvas.addEventListener("mouseleave",this._onMouseleave)}},{key:"_onMousemove",value:function(n){this.animationProps._mousePosition=[n.offsetX,n.offsetY]}},{key:"_onMouseleave",value:function(n){this.animationProps._mousePosition=null}}]),n}(),il=new Uint8Array([0,0,0]);function rl(n){return[n+1&255,n+1>>8&255,n+1>>16&255]}function ul(n){var t=Object(h.a)(n,3);return t[0]+256*t[1]+65536*t[2]-1}function ol(){return il}var al={POSITION:"positions",NORMAL:"normals",COLOR_0:"colors",TEXCOORD_0:"texCoords",TEXCOORD_1:"texCoords1",TEXCOORD_2:"texCoords2"};function sl(n,t){var e=(t||{}).attributeMap,l=void 0===e?al:e;return l&&l[n]||n}function cl(n,t){var e;switch(n){case"indices":e=e||"indices";break;case"texCoords":case"texCoord1":case"texCoord2":case"texCoord3":e="uvs";break;case"vertices":case"positions":case"normals":case"pickingColors":e="vectors"}switch(e){case"vectors":t.size=t.size||3;break;case"uvs":t.size=t.size||2;break;case"indices":t.size=t.size||1,t.isIndexed=void 0===t.isIndexed||t.isIndexed,M(t.value instanceof Uint16Array||t.value instanceof Uint32Array,'attribute array for "indices" must be of integer type')}M(Number.isFinite(t.size),"attribute ".concat(n," needs size"))}function hl(n,t,e){switch(t){case 300:return e?function(n){return n.replace(/attribute\s+/g,"in ").replace(/varying\s+/g,"out ").replace(/texture2D\(/g,"texture(").replace(/textureCube\(+/g,"texture(").replace(/texture2DLodEXT\(/g,"textureLod(").replace(/textureCubeLodEXT\(/g,"textureLod(")}(n):function(n){return n.replace(/varying\s+/g,"in ").replace(/texture2D\(/g,"texture(").replace(/textureCube\(/g,"texture(").replace(/texture2DLodEXT\(/g,"textureLod(").replace(/textureCubeLodEXT\(/g,"textureLod(")}(n);case 100:return e?function(n){return n.replace(/^in\s+/gm,"attribute ").replace(/^out\s+/gm,"varying ").replace(/texture\(/g,"texture2D(")}(n):function(n){return n.replace(/^in\s+/gm,"varying ").replace(/texture\(/g,"texture2D(")}(n);default:throw new Error("unknown GLSL version ".concat(t))}}function fl(n,t){if(!n)throw new Error(t||"shadertools: assertion failed.")}var dl=function(){function n(t){var e=t.name,i=t.vs,r=t.fs,u=t.dependencies,o=void 0===u?[]:u,a=t.getUniforms,s=void 0===a?function(){return{}}:a,c=t.deprecations,h=void 0===c?[]:c,f=t.defines,d=void 0===f?{}:f,p=t.vertexShader,g=t.fragmentShader;Object(l.a)(this,n),fl("string"==typeof e),this.name=e,this.vs=i||p,this.fs=r||g,this.getModuleUniforms=s,this.dependencies=o,this.deprecations=this._parseDeprecationDefinitions(h),this.defines=d}return Object(i.a)(n,[{key:"getModuleSource",value:function(n,t){var e;switch(n){case"vs":e=hl(this.vs||"",t,!0);break;case"fs":e=hl(this.fs||"",t,!1);break;default:fl(!1)}return"string"!=typeof e?"":"#define MODULE_".concat(this.name.toUpperCase(),"\n").concat(e,"// END MODULE_").concat(this.name,"\n\n")}},{key:"getUniforms",value:function(n,t){return this.getModuleUniforms(n,t)}},{key:"getDefines",value:function(){return this.defines}},{key:"checkDeprecations",value:function(n,t){this.deprecations.forEach(function(e){e.regex.test(n)&&(e.deprecated&&t?t.deprecated(e.old,e.new)():t&&t.removed(e.old,e.new)())})}},{key:"_parseDeprecationDefinitions",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return n.forEach(function(n){switch(n.type){case"function":n.regex=new RegExp("\\b".concat(n.old,"\\("));break;default:n.regex=new RegExp("".concat(n.type," ").concat(n.old,";"))}}),n}}]),n}(),pl=new(function(){function n(){Object(l.a)(this,n),this.shaderModules={},this.defaultShaderModules=[]}return Object(i.a)(n,[{key:"setDefaultShaderModules",value:function(n){this.defaultShaderModules=this.resolveModules(n)}},{key:"registerShaderModules",value:function(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).ignoreMultipleRegistrations,e=void 0!==t&&t,l=!0,i=!1,r=void 0;try{for(var u,o=n[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){var a=u.value;this._registerShaderModule(a,e)}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}}},{key:"getShaderModule",value:function(n){if(n instanceof dl)return n;if("string"!=typeof n)return this._registerShaderModule(n,!0);var t=this.shaderModules[n];return t||fl(!1,"Unknown shader module ".concat(n)),t}},{key:"resolveModules",value:function(n){var t=this;return n.map(function(n){return t.getShaderModule(n)})}},{key:"_registerShaderModule",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(n instanceof dl)return n;if(fl(n.name,"shader module has no name"),this.shaderModules[n.name]&&!t)throw new Error("shader module ".concat(n.name," already registered"));return(n=new dl(n)).dependencies=this.resolveModules(n.dependencies),this.shaderModules[n.name]=n,this.shaderModules[n.name]}}]),n}());function gl(n){pl.setDefaultShaderModules(n)}function vl(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).ignoreMultipleRegistrations,e=void 0!==t&&t;pl.registerShaderModules(n,{ignoreMultipleRegistrations:e})}function ml(n){var t={},e={};return _l({modules:n,level:0,moduleMap:t,moduleDepth:e}),Object.keys(e).sort(function(n,t){return e[t]-e[n]}).map(function(n){return t[n]})}function _l(n){var t=n.modules,e=n.level,l=n.moduleMap,i=n.moduleDepth;if(e>=5)throw new Error("Possible loop in shader dependency graph");var r=!0,u=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value;l[c.name]=c,(void 0===i[c.name]||i[c.name]<e)&&(i[c.name]=e)}}catch(n){u=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(u)throw o}}var h=!0,f=!1,d=void 0;try{for(var p,g=t[Symbol.iterator]();!(h=(p=g.next()).done);h=!0){var v=p.value;v.dependencies&&_l({modules:v.dependencies,level:e+1,moduleMap:l,moduleDepth:i})}}catch(n){f=!0,d=n}finally{try{h||null==g.return||g.return()}finally{if(f)throw d}}}var bl="vs",yl="fs";var xl=7936,wl=7937,El=7938,Pl=35724,Ol={GLSL_FRAG_DATA:["WEBGL_draw_buffers",!0],GLSL_FRAG_DEPTH:["EXT_frag_depth",!0],GLSL_DERIVATIVES:["OES_standard_derivatives",!0],GLSL_TEXTURE_LOD:["EXT_shader_texture_lod",!0]},Sl={};Object.keys(Ol).forEach(function(n){Sl[n]=n});var Al={};function Tl(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=Ol[t];if(fl(l,t),!function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t="undefined"!=typeof window&&window.navigator||{},e=n.userAgent||t.userAgent||"",l=-1!==e.indexOf("MSIE "),i=-1!==e.indexOf("Trident/");return l||i}(e))return!0;if(t in Al)return Al[t];var i=l[0],r=e.behavior||"enable",u="#extension GL_".concat(i," : ").concat(r,"\nvoid main(void) {}"),o=n.createShader(35633);n.shaderSource(o,u),n.compileShader(o);var a=n.getShaderParameter(o,35713);return n.deleteShader(o),Al[t]=a,a}function Cl(n,t){var e=Ol[t];fl(e,t);var l=function(n){return Boolean(n&&2===n._version)}(n)&&e[1]||e[0],i="string"==typeof l?Boolean(n.getExtension(l)):l;return fl(!1===i||!0===i),i}function Ll(n,t){return(t=Array.isArray(t)?t:[t]).every(function(t){return Cl(n,t)})}function Ml(n){switch(function(n){var t=n.getExtension("WEBGL_debug_renderer_info"),e=n.getParameter(t&&t.UNMASKED_VENDOR_WEBGL||xl),l=n.getParameter(t&&t.UNMASKED_RENDERER_WEBGL||wl);return{gpuVendor:function(n,t){return n.match(/NVIDIA/i)||t.match(/NVIDIA/i)?"NVIDIA":n.match(/INTEL/i)||t.match(/INTEL/i)?"INTEL":n.match(/AMD/i)||t.match(/AMD/i)||n.match(/ATI/i)||t.match(/ATI/i)?"AMD":"UNKNOWN GPU"}(e,l),vendor:e,renderer:l,version:n.getParameter(El),shadingLanguageVersion:n.getParameter(Pl)}}(n).gpuVendor.toLowerCase()){case"nvidia":return"#define NVIDIA_GPU\n// Nvidia optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n";case"intel":return"#define INTEL_GPU\n// Intel optimizes away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n";case"amd":return"#define AMD_GPU\n";default:return"#define DEFAULT_GPU\n// Prevent driver from optimizing away the calculation necessary for emulated fp64\n#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1\n// Intel's built-in 'tan' function doesn't have acceptable precision\n#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1\n// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow\n#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1\n"}}var jl,Rl,Il=(jl={},Object(A.a)(jl,bl,"#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n"),Object(A.a)(jl,yl,"#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth();\n#endif\n"),jl),kl=/void main\s*\([^)]*\)\s*\{\n?/,Fl=/}\n?[^{}]*$/;function Nl(n){var t={};return fl(Array.isArray(n)&&n.length>1),n.forEach(function(n){for(var e in n)t[e]=t[e]?"".concat(t[e],"\n").concat(n[e]):n[e]}),t}var Dl=(Rl={},Object(A.a)(Rl,bl,"vertex"),Object(A.a)(Rl,yl,"fragment"),Rl),Bl="precision highp float;\n\n";function Ul(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.vs,l=t.fs,i=function(n){return n=n.concat(pl.defaultShaderModules),ml(n=pl.resolveModules(n))}(t.modules||[]);return{gl:n,vs:zl(n,Object.assign({},t,{source:e,type:bl,modules:i})),fs:zl(n,Object.assign({},t,{source:l,type:yl,modules:i})),getUniforms:Vl(i),modules:Gl(i)}}function zl(n,t){var e=t.id,l=t.source,i=t.type,r=t.modules,u=void 0===r?[]:r,o=t.defines,a=void 0===o?{}:o,s=t.inject,c=void 0===s?{}:s,h=t.prologue,f=void 0===h||h,d=t.log;fl("string"==typeof l,"shader source must be a string");var p=i===bl,g=l.split("\n"),v=100,m="",_=l;0===g[0].indexOf("#version ")&&(v=300,m=g[0],_=g.slice(1).join("\n"));var b={};u.forEach(function(n){Object.assign(b,n.getDefines())}),Object.assign(b,a);var y=f?"".concat(m,"\n").concat(function(n){var t=n.id,e=n.source,l=n.type;return t&&"string"==typeof t&&-1===e.indexOf("SHADER_NAME")?"\n#define SHADER_NAME ".concat(t,"_").concat(Dl[l],"\n\n"):""}({id:e,source:l,type:i}),"\n").concat(function(n){var t=n.type;return"\n#define SHADER_TYPE_".concat(Dl[t].toUpperCase(),"\n")}({type:i}),"\n").concat(Ml(n),"\n").concat(function(n,t,e){var l="#if (__VERSION__ > 120)\n\n# define FRAG_DEPTH\n# define DERIVATIVES\n# define DRAW_BUFFERS\n# define TEXTURE_LOD\n\n#endif // __VERSION\n";return Ll(n,Sl.GLSL_FRAG_DEPTH)&&(l+="// FRAG_DEPTH => gl_FragDepth is available\n#ifdef GL_EXT_frag_depth\n#extension GL_EXT_frag_depth : enable\n# define FRAG_DEPTH\n# define gl_FragDepth gl_FragDepthEXT\n#endif\n"),Ll(n,Sl.GLSL_DERIVATIVES)&&Tl(n,Sl.GLSL_DERIVATIVES)&&(l+="// DERIVATIVES => dxdF, dxdY and fwidth are available\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n# define DERIVATIVES\n#endif\n"),Ll(n,Sl.GLSL_FRAG_DATA)&&Tl(n,Sl.GLSL_FRAG_DATA,{behavior:"require"})&&(l+="// DRAW_BUFFERS => gl_FragData[] is available\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers : require\n#define DRAW_BUFFERS\n#endif\n"),Ll(n,Sl.GLSL_TEXTURE_LOD)&&(l+="// TEXTURE_LOD => texture2DLod etc are available\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n# define TEXTURE_LOD\n#define texture2DLod texture2DLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define texture2DProjLod texture2DProjLodEXT\n#define textureCubeLod textureCubeLodEXT\n#define texture2DGrad texture2DGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define texture2DProjGrad texture2DProjGradEXT\n#define textureCubeGrad textureCubeGradEXT\n#endif\n"),l}(n),"\n").concat(function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=0,e="";for(var l in n){0===t&&(e+="\n// APPLICATION DEFINES\n"),t++;var i=n[l];(i||Number.isFinite(i))&&(e+="#define ".concat(l.toUpperCase()," ").concat(n[l],"\n"))}0===t&&(e+="\n");return e}(b),"\n").concat(p?"":Bl,"\n"):"".concat(m,"\n"),x=!1,w=!0,E=!1,P=void 0;try{for(var O,S=u[Symbol.iterator]();!(w=(O=S.next()).done);w=!0){var A=O.value;switch(A.name){case"inject":x=!0;break;default:A.checkDeprecations(_,d),y+=A.getModuleSource(i,v)}}}catch(n){E=!0,P=n}finally{try{w||null==S.return||S.return()}finally{if(E)throw P}}return y=function(n,t,e,l){var i=t===bl,r=function(t){var l=e[t];switch(t){case"vs:#decl":i&&(n=n.replace(kl,function(n){return"".concat(l,"\n").concat(n)}));break;case"vs:#main-start":i&&(n=n.replace(kl,function(n){return n+l}));break;case"vs:#main-end":i&&(n=n.replace(Fl,function(n){return l+n}));break;case"fs:#decl":i||(n=n.replace(kl,function(n){return"".concat(l,"\n").concat(n)}));break;case"fs:#main-start":i||(n=n.replace(kl,function(n){return n+l}));break;case"fs:#main-end":i||(n=n.replace(Fl,function(n){return l+n}));break;default:n=n.replace(t,function(n){return n+l})}};for(var u in e)r(u);return l&&(n=n.replace("}s*$",function(n){return n+Il[t]})),n}(y+=_,i,c,x)}function Vl(n){return function(t){var e={},l=!0,i=!1,r=void 0;try{for(var u,o=n[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){var a=u.value.getUniforms(t,e);Object.assign(e,a)}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}return e}}function Gl(n){var t,e={},l=!0,i=!1,r=void 0;try{for(var u,o=n[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){var a=u.value,s=(t=a,pl.getShaderModule(t));e[a]=s}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}return e}var Wl={boolean:{validate:function(n,t){return!0}},number:{validateType:function(n,t){return"value"in t&&(!("max"in t)||Number.isFinite(t.max))&&(!("min"in t)||Number.isFinite(t.min))},validate:function(n,t){return Number.isFinite(n)&&(!("max"in t)||n<=t.max)&&(!("min"in t)||n>=t.min)}}};function Hl(n,t){switch(Xl(t)){case"object":return function(n){var t=n.type;(Wl[t]||{}).typeValidator;return n}(t=function(n,t){if(!("type"in t))return"value"in t?Object.assign({name:n,type:Xl(t.value)},t):{name:n,type:"object",value:t};return Object.assign({name:n},t)}(n,t));case"array":return function(n,t){if(/color/i.test(n)&&(3===t.length||4===t.length))return{name:n,type:"color",value:t};return{name:n,type:"array",value:t}}(n,t);case"boolean":return{name:n,type:"boolean",value:t};case"number":return function(n,t){var e=/radius|scale|width|height|pixel|size|miter/i.test(n)&&/^((?!scale).)*$/.test(n)?100:1;return{name:n,type:"number",max:Math.max(t,e),min:Math.min(t,0),value:t}}(n,t);case"function":return{name:n,type:"function",value:t};default:return{name:n,type:"unknown",value:t}}}function Xl(n){return Array.isArray(n)||ArrayBuffer.isView(n)?"array":null===n?"null":Object(tl.a)(n)}function Yl(n){if(!n.normalized){if(n.normalized=!0,n.uniforms){var t=function(n){for(var t={},e={},l=0,i=Object.entries(n);l<i.length;l++){var r=Object(h.a)(i[l],2),u=r[0],o=Hl(u,r[1]);t[u]=o,e[u]=o.value}return{propTypes:t,defaultProps:e}}(n.uniforms).propTypes;n.uniforms=t}n.uniforms&&!n.getUniforms&&(n.getUniforms=function(n,t){var e={};if(void 0===t){for(var l in n.uniforms)e[l]=n.uniforms[l].value;return e}for(var i in t)e[i]=t[i];return e}.bind(null,n))}return n}var Zl="void main() {}",ql="#version 300 es\n".concat(Zl);function $l(n,t){t=Array.isArray(t)?t:[t];var e=n.replace(/^\s+/,"").split(/\s+/),l=Object(h.a)(e,3),i=l[0],r=l[1],u=l[2];return t.includes(i)&&r&&u?{qualifier:i,type:r,name:u.split(";")[0]}:null}function Kl(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.version,e=void 0===t?100:t,l=n.input,i=n.inputType,r=n.output;if(!l)return 300===e?ql:Zl;var u=ni(l,i);return 300===e?"#version 300 es\nin ".concat(i," ").concat(l,";\nout vec4 ").concat(r,";\nvoid main() {\n  ").concat(r," = ").concat(u,";\n}"):"varying ".concat(i," ").concat(l,";\nvoid main() {\n  gl_FragColor = ").concat(u,";\n}")}function Ql(n){switch(n){case"float":return"x";case"vec2":return"xy";case"vec3":return"xyz";case"vec4":return"xyzw";default:return fl(!1),null}}function Jl(n){switch(n){case"float":return 1;case"vec2":return 2;case"vec3":return 3;case"vec4":return 4;default:return fl(!1),null}}function ni(n,t){switch(t){case"float":return"vec4(".concat(n,", 0.0, 0.0, 1.0)");case"vec2":return"vec4(".concat(n,", 0.0, 1.0)");case"vec3":return"vec4(".concat(n,", 1.0)");case"vec4":return n;default:return fl(!1),null}}var ti={name:"fp32",vs:"#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\nconst float TWO_PI = 6.2831854820251465;\nconst float PI_2 = 1.5707963705062866;\nconst float PI_16 = 0.1963495463132858;\n\nconst float SIN_TABLE_0 = 0.19509032368659973;\nconst float SIN_TABLE_1 = 0.3826834261417389;\nconst float SIN_TABLE_2 = 0.5555702447891235;\nconst float SIN_TABLE_3 = 0.7071067690849304;\n\nconst float COS_TABLE_0 = 0.9807852506637573;\nconst float COS_TABLE_1 = 0.9238795042037964;\nconst float COS_TABLE_2 = 0.8314695954322815;\nconst float COS_TABLE_3 = 0.7071067690849304;\n\nconst float INVERSE_FACTORIAL_3 = 1.666666716337204e-01;\nconst float INVERSE_FACTORIAL_5 = 8.333333767950535e-03;\nconst float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04;\nconst float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06;\n\nfloat sin_taylor_fp32(float a) {\n  float r, s, t, x;\n\n  if (a == 0.0) {\n    return 0.0;\n  }\n\n  x = -a * a;\n  s = a;\n  r = a;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_3;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_5;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_7;\n  s = s + t;\n\n  r = r * x;\n  t = r * INVERSE_FACTORIAL_9;\n  s = s + t;\n\n  return s;\n}\n\nvoid sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {\n  if (a == 0.0) {\n    sin_t = 0.0;\n    cos_t = 1.0;\n  }\n  sin_t = sin_taylor_fp32(a);\n  cos_t = sqrt(1.0 - sin_t * sin_t);\n}\n\nfloat tan_taylor_fp32(float a) {\n    float sin_a;\n    float cos_a;\n\n    if (a == 0.0) {\n        return 0.0;\n    }\n    float z = floor(a / TWO_PI);\n    float r = a - TWO_PI * z;\n\n    float t;\n    float q = floor(r / PI_2 + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return 0.0 / 0.0;\n    }\n\n    t = r - PI_2 * q;\n\n    q = floor(t / PI_16 + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return 0.0 / 0.0;\n    } else {\n        t = t - PI_16 * q;\n    }\n\n    float u = 0.0;\n    float v = 0.0;\n\n    float sin_t, cos_t;\n    float s, c;\n    sincos_taylor_fp32(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0;\n            v = SIN_TABLE_0;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1;\n            v = SIN_TABLE_1;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2;\n            v = SIN_TABLE_2;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3;\n            v = SIN_TABLE_3;\n        }\n        if (k > 0) {\n            s = u * sin_t + v * cos_t;\n            c = u * cos_t - v * sin_t;\n        } else {\n            s = u * sin_t - v * cos_t;\n            c = u * cos_t + v * sin_t;\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return sin_a / cos_a;\n}\n#endif\n\nfloat tan_fp32(float a) {\n#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND\n  return tan_taylor_fp32(a);\n#else\n  return tan(a);\n#endif\n}\n",fs:null};function ei(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,l=Math.fround(n),i=n-l;return t[e]=l,t[e+1]=i,t}var li="uniform float ONE;\nvec2 split(float a) {\n  const float SPLIT = 4097.0;\n  float t = a * SPLIT;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float a_hi = t * ONE - (t - a);\n  float a_lo = a * ONE - a_hi;\n#else\n  float a_hi = t - (t - a);\n  float a_lo = a - a_hi;\n#endif\n  return vec2(a_hi, a_lo);\n}\nvec2 split2(vec2 a) {\n  vec2 b = split(a.x);\n  b.y += a.y;\n  return b;\n}\nvec2 quickTwoSum(float a, float b) {\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float sum = (a + b) * ONE;\n  float err = b - (sum - a) * ONE;\n#else\n  float sum = a + b;\n  float err = b - (sum - a);\n#endif\n  return vec2(sum, err);\n}\nvec2 twoSum(float a, float b) {\n  float s = (a + b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE + (b - v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) + (b - v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSub(float a, float b) {\n  float s = (a - b);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float v = (s * ONE - a) * ONE;\n  float err = (a - (s - v) * ONE) * ONE * ONE * ONE - (b + v);\n#else\n  float v = s - a;\n  float err = (a - (s - v)) - (b + v);\n#endif\n  return vec2(s, err);\n}\n\nvec2 twoSqr(float a) {\n  float prod = a * a;\n  vec2 a_fp64 = split(a);\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  float err = ((a_fp64.x * a_fp64.x - prod) * ONE + 2.0 * a_fp64.x *\n    a_fp64.y * ONE * ONE) + a_fp64.y * a_fp64.y * ONE * ONE * ONE;\n#else\n  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;\n#endif\n  return vec2(prod, err);\n}\n\nvec2 twoProd(float a, float b) {\n  float prod = a * b;\n  vec2 a_fp64 = split(a);\n  vec2 b_fp64 = split(b);\n  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +\n    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;\n  return vec2(prod, err);\n}\n\nvec2 sum_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSum(a.x, b.x);\n  t = twoSum(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 sub_fp64(vec2 a, vec2 b) {\n  vec2 s, t;\n  s = twoSub(a.x, b.x);\n  t = twoSub(a.y, b.y);\n  s.y += t.x;\n  s = quickTwoSum(s.x, s.y);\n  s.y += t.y;\n  s = quickTwoSum(s.x, s.y);\n  return s;\n}\n\nvec2 mul_fp64(vec2 a, vec2 b) {\n  vec2 prod = twoProd(a.x, b.x);\n  prod.y += a.x * b.y;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  prod.y += a.y * b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  prod = split2(prod);\n#endif\n  prod = quickTwoSum(prod.x, prod.y);\n  return prod;\n}\n\nvec2 div_fp64(vec2 a, vec2 b) {\n  float xn = 1.0 / b.x;\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  vec2 yn = mul_fp64(a, vec2(xn, 0));\n#else\n  vec2 yn = a * xn;\n#endif\n  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;\n  vec2 prod = twoProd(xn, diff);\n  return sum_fp64(yn, prod);\n}\n\nvec2 sqrt_fp64(vec2 a) {\n  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n\n  float x = 1.0 / sqrt(a.x);\n  float yn = a.x * x;\n#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)\n  vec2 yn_sqr = twoSqr(yn) * ONE;\n#else\n  vec2 yn_sqr = twoSqr(yn);\n#endif\n  float diff = sub_fp64(a, yn_sqr).x;\n  vec2 prod = twoProd(x * 0.5, diff);\n#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)\n  return sum_fp64(split(yn), prod);\n#else\n  return sum_fp64(vec2(yn, 0.0), prod);\n#endif\n}\n",ii="".concat(li,"\n").concat("const vec2 E_FP64 = vec2(2.7182817459106445e+00, 8.254840366817007e-08);\nconst vec2 LOG2_FP64 = vec2(0.6931471824645996e+00, -1.9046542121259336e-09);\nconst vec2 PI_FP64 = vec2(3.1415927410125732, -8.742278012618954e-8);\nconst vec2 TWO_PI_FP64 = vec2(6.2831854820251465, -1.7484556025237907e-7);\nconst vec2 PI_2_FP64 = vec2(1.5707963705062866, -4.371139006309477e-8);\nconst vec2 PI_4_FP64 = vec2(0.7853981852531433, -2.1855695031547384e-8);\nconst vec2 PI_16_FP64 = vec2(0.19634954631328583, -5.463923757886846e-9);\nconst vec2 PI_16_2_FP64 = vec2(0.39269909262657166, -1.0927847515773692e-8);\nconst vec2 PI_16_3_FP64 = vec2(0.5890486240386963, -1.4906100798128818e-9);\nconst vec2 PI_180_FP64 = vec2(0.01745329238474369, 1.3519960498364902e-10);\n\nconst vec2 SIN_TABLE_0_FP64 = vec2(0.19509032368659973, -1.6704714833615242e-9);\nconst vec2 SIN_TABLE_1_FP64 = vec2(0.3826834261417389, 6.22335089017767e-9);\nconst vec2 SIN_TABLE_2_FP64 = vec2(0.5555702447891235, -1.1769521357507529e-8);\nconst vec2 SIN_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617041793133e-8);\n\nconst vec2 COS_TABLE_0_FP64 = vec2(0.9807852506637573, 2.9739473106360492e-8);\nconst vec2 COS_TABLE_1_FP64 = vec2(0.9238795042037964, 2.8307490351764386e-8);\nconst vec2 COS_TABLE_2_FP64 = vec2(0.8314695954322815, 1.6870263741530778e-8);\nconst vec2 COS_TABLE_3_FP64 = vec2(0.7071067690849304, 1.2101617152815436e-8);\n\nconst vec2 INVERSE_FACTORIAL_3_FP64 = vec2(1.666666716337204e-01, -4.967053879312289e-09);\nconst vec2 INVERSE_FACTORIAL_4_FP64 = vec2(4.16666679084301e-02, -1.2417634698280722e-09);\nconst vec2 INVERSE_FACTORIAL_5_FP64 = vec2(8.333333767950535e-03, -4.34617203337595e-10);\nconst vec2 INVERSE_FACTORIAL_6_FP64 = vec2(1.3888889225199819e-03, -3.3631094437103215e-11);\nconst vec2 INVERSE_FACTORIAL_7_FP64 = vec2(1.9841270113829523e-04,  -2.725596874933456e-12);\nconst vec2 INVERSE_FACTORIAL_8_FP64 = vec2(2.4801587642286904e-05, -3.406996025904184e-13);\nconst vec2 INVERSE_FACTORIAL_9_FP64 = vec2(2.75573188446287533e-06, 3.7935713937038186e-14);\nconst vec2 INVERSE_FACTORIAL_10_FP64 = vec2(2.755731998149713e-07, -7.575112367869873e-15);\n\nfloat nint(float d) {\n    if (d == floor(d)) return d;\n    return floor(d + 0.5);\n}\n\nvec2 nint_fp64(vec2 a) {\n    float hi = nint(a.x);\n    float lo;\n    vec2 tmp;\n    if (hi == a.x) {\n        lo = nint(a.y);\n        tmp = quickTwoSum(hi, lo);\n    } else {\n        lo = 0.0;\n        if (abs(hi - a.x) == 0.5 && a.y < 0.0) {\n            hi -= 1.0;\n        }\n        tmp = vec2(hi, lo);\n    }\n    return tmp;\n}\n\nvec2 exp_fp64(vec2 a) {\n\n  const int k_power = 4;\n  const float k = 16.0;\n\n  const float inv_k = 1.0 / k;\n\n  if (a.x <= -88.0) return vec2(0.0, 0.0);\n  if (a.x >= 88.0) return vec2(1.0 / 0.0, 1.0 / 0.0);\n  if (a.x == 0.0 && a.y == 0.0) return vec2(1.0, 0.0);\n  if (a.x == 1.0 && a.y == 0.0) return E_FP64;\n\n  float m = floor(a.x / LOG2_FP64.x + 0.5);\n  vec2 r = sub_fp64(a, mul_fp64(LOG2_FP64, vec2(m, 0.0))) * inv_k;\n  vec2 s, t, p;\n\n  p = mul_fp64(r, r);\n  s = sum_fp64(r, p * 0.5);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_3_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_4_FP64);\n\n  s = sum_fp64(s, t);\n  p = mul_fp64(p, r);\n  t = mul_fp64(p, INVERSE_FACTORIAL_5_FP64);\n\n\n\n\n\n\n  s = sum_fp64(s, t);\n  for (int i = 0; i < k_power; i++) {\n    s = sum_fp64(s * 2.0, mul_fp64(s, s));\n  }\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = sum_fp64(s, vec2(ONE, 0.0));\n#else\n  s = sum_fp64(s, vec2(1.0, 0.0));\n#endif\n\n  return s * pow(2.0, m);\n}\n\nvec2 log_fp64(vec2 a)\n{\n  if (a.x == 1.0 && a.y == 0.0) return vec2(0.0, 0.0);\n  if (a.x <= 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);\n  vec2 x = vec2(log(a.x), 0.0);\n  vec2 s;\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n  s = vec2(ONE, 0.0);\n#else\n  s = vec2(1.0, 0.0);\n#endif\n\n  x = sub_fp64(sum_fp64(x, mul_fp64(a, exp_fp64(-x))), s);\n  return x;\n}\n\nvec2 sin_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(0.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  s = a;\n  r = a;\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_3_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_5_FP64);\n  s = sum_fp64(s, t);\n\n\n\n\n\n\n  return s;\n}\n\nvec2 cos_taylor_fp64(vec2 a) {\n  vec2 r, s, t, x;\n\n  if (a.x == 0.0 && a.y == 0.0) {\n    return vec2(1.0, 0.0);\n  }\n\n  x = -mul_fp64(a, a);\n  r = x;\n  s = sum_fp64(vec2(1.0, 0.0), r * 0.5);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_4_FP64);\n  s = sum_fp64(s, t);\n\n  r = mul_fp64(r, x);\n  t = mul_fp64(r, INVERSE_FACTORIAL_6_FP64);\n  s = sum_fp64(s, t);\n\n\n\n\n\n\n  return s;\n}\n\nvoid sincos_taylor_fp64(vec2 a, out vec2 sin_t, out vec2 cos_t) {\n  if (a.x == 0.0 && a.y == 0.0) {\n    sin_t = vec2(0.0, 0.0);\n    cos_t = vec2(1.0, 0.0);\n  }\n\n  sin_t = sin_taylor_fp64(a);\n  cos_t = sqrt_fp64(sub_fp64(vec2(1.0, 0.0), mul_fp64(sin_t, sin_t)));\n}\n\nvec2 sin_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return sin_taylor_fp64(t);\n        } else if (j == 1) {\n            return cos_taylor_fp64(t);\n        } else if (j == -1) {\n            return -cos_taylor_fp64(t);\n        } else {\n            return -sin_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 cos_fp64(vec2 a) {\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(1.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n\n    if (k == 0) {\n        if (j == 0) {\n            return cos_taylor_fp64(t);\n        } else if (j == 1) {\n            return -sin_taylor_fp64(t);\n        } else if (j == -1) {\n            return sin_taylor_fp64(t);\n        } else {\n            return -cos_taylor_fp64(t);\n        }\n    }\n\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n    if (abs(float(abs_k) - 1.0) < 0.5) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs(float(abs_k) - 2.0) < 0.5) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs(float(abs_k) - 3.0) < 0.5) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs(float(abs_k) - 4.0) < 0.5) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#else\n    if (abs_k == 1) {\n        u = COS_TABLE_0_FP64;\n        v = SIN_TABLE_0_FP64;\n    } else if (abs_k == 2) {\n        u = COS_TABLE_1_FP64;\n        v = SIN_TABLE_1_FP64;\n    } else if (abs_k == 3) {\n        u = COS_TABLE_2_FP64;\n        v = SIN_TABLE_2_FP64;\n    } else if (abs_k == 4) {\n        u = COS_TABLE_3_FP64;\n        v = SIN_TABLE_3_FP64;\n    }\n#endif\n\n    vec2 sin_t, cos_t;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    vec2 result = vec2(0.0, 0.0);\n    if (j == 0) {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            result = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    } else if (j == 1) {\n        if (k > 0) {\n            result = -sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(v, cos_t), mul_fp64(u, sin_t));\n        }\n    } else if (j == -1) {\n        if (k > 0) {\n            result = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        } else {\n            result = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n        }\n    } else {\n        if (k > 0) {\n            result = sub_fp64(mul_fp64(v, sin_t), mul_fp64(u, cos_t));\n        } else {\n            result = -sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    return result;\n}\n\nvec2 tan_fp64(vec2 a) {\n    vec2 sin_a;\n    vec2 cos_a;\n\n    if (a.x == 0.0 && a.y == 0.0) {\n        return vec2(0.0, 0.0);\n    }\n    vec2 z = nint_fp64(div_fp64(a, TWO_PI_FP64));\n    vec2 r = sub_fp64(a, mul_fp64(TWO_PI_FP64, z));\n\n    vec2 t;\n    float q = floor(r.x / PI_2_FP64.x + 0.5);\n    int j = int(q);\n\n\n    if (j < -2 || j > 2) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    }\n\n    t = sub_fp64(r, mul_fp64(PI_2_FP64, vec2(q, 0.0)));\n\n    q = floor(t.x / PI_16_FP64.x + 0.5);\n    int k = int(q);\n    int abs_k = int(abs(float(k)));\n\n    if (abs_k > 4) {\n        return vec2(0.0 / 0.0, 0.0 / 0.0);\n    } else {\n        t = sub_fp64(t, mul_fp64(PI_16_FP64, vec2(q, 0.0)));\n    }\n\n\n    vec2 u = vec2(0.0, 0.0);\n    vec2 v = vec2(0.0, 0.0);\n\n    vec2 sin_t, cos_t;\n    vec2 s, c;\n    sincos_taylor_fp64(t, sin_t, cos_t);\n\n    if (k == 0) {\n        s = sin_t;\n        c = cos_t;\n    } else {\n#if defined(NVIDIA_FP64_WORKAROUND) || defined(INTEL_FP64_WORKAROUND)\n        if (abs(float(abs_k) - 1.0) < 0.5) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs(float(abs_k) - 2.0) < 0.5) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs(float(abs_k) - 3.0) < 0.5) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs(float(abs_k) - 4.0) < 0.5) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#else\n        if (abs_k == 1) {\n            u = COS_TABLE_0_FP64;\n            v = SIN_TABLE_0_FP64;\n        } else if (abs_k == 2) {\n            u = COS_TABLE_1_FP64;\n            v = SIN_TABLE_1_FP64;\n        } else if (abs_k == 3) {\n            u = COS_TABLE_2_FP64;\n            v = SIN_TABLE_2_FP64;\n        } else if (abs_k == 4) {\n            u = COS_TABLE_3_FP64;\n            v = SIN_TABLE_3_FP64;\n        }\n#endif\n        if (k > 0) {\n            s = sum_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sub_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        } else {\n            s = sub_fp64(mul_fp64(u, sin_t), mul_fp64(v, cos_t));\n            c = sum_fp64(mul_fp64(u, cos_t), mul_fp64(v, sin_t));\n        }\n    }\n\n    if (j == 0) {\n        sin_a = s;\n        cos_a = c;\n    } else if (j == 1) {\n        sin_a = c;\n        cos_a = -s;\n    } else if (j == -1) {\n        sin_a = -c;\n        cos_a = s;\n    } else {\n        sin_a = -s;\n        cos_a = -c;\n    }\n    return div_fp64(sin_a, cos_a);\n}\n\nvec2 radians_fp64(vec2 degree) {\n  return mul_fp64(degree, PI_180_FP64);\n}\n\nvec2 mix_fp64(vec2 a, vec2 b, float x) {\n  vec2 range = sub_fp64(b, a);\n  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));\n}\n\nvoid vec2_sum_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sum_fp64(a[0], b[0]);\n    out_val[1] = sum_fp64(a[1], b[1]);\n}\n\nvoid vec2_sub_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = sub_fp64(a[0], b[0]);\n    out_val[1] = sub_fp64(a[1], b[1]);\n}\n\nvoid vec2_mul_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = mul_fp64(a[0], b[0]);\n    out_val[1] = mul_fp64(a[1], b[1]);\n}\n\nvoid vec2_div_fp64(vec2 a[2], vec2 b[2], out vec2 out_val[2]) {\n    out_val[0] = div_fp64(a[0], b[0]);\n    out_val[1] = div_fp64(a[1], b[1]);\n}\n\nvoid vec2_mix_fp64(vec2 x[2], vec2 y[2], float a, out vec2 out_val[2]) {\n  vec2 range[2];\n  vec2_sub_fp64(y, x, range);\n  vec2 portion[2];\n  portion[0] = range[0] * a;\n  portion[1] = range[1] * a;\n  vec2_sum_fp64(x, portion, out_val);\n}\n\nvec2 vec2_length_fp64(vec2 x[2]) {\n  return sqrt_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])));\n}\n\nvoid vec2_normalize_fp64(vec2 x[2], out vec2 out_val[2]) {\n  vec2 length = vec2_length_fp64(x);\n  vec2 length_vec2[2];\n  length_vec2[0] = length;\n  length_vec2[1] = length;\n\n  vec2_div_fp64(x, length_vec2, out_val);\n}\n\nvec2 vec2_distance_fp64(vec2 x[2], vec2 y[2]) {\n  vec2 diff[2];\n  vec2_sub_fp64(x, y, diff);\n  return vec2_length_fp64(diff);\n}\n\nvec2 vec2_dot_fp64(vec2 a[2], vec2 b[2]) {\n  vec2 v[2];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n\n  return sum_fp64(v[0], v[1]);\n}\nvoid vec3_sub_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec3_sum_fp64(vec2 a[3], vec2 b[3], out vec2 out_val[3]) {\n  for (int i = 0; i < 3; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvec2 vec3_length_fp64(vec2 x[3]) {\n  return sqrt_fp64(sum_fp64(sum_fp64(mul_fp64(x[0], x[0]), mul_fp64(x[1], x[1])),\n    mul_fp64(x[2], x[2])));\n}\n\nvec2 vec3_distance_fp64(vec2 x[3], vec2 y[3]) {\n  vec2 diff[3];\n  vec3_sub_fp64(x, y, diff);\n  return vec3_length_fp64(diff);\n}\nvoid vec4_fp64(vec4 a, out vec2 out_val[4]) {\n  out_val[0].x = a[0];\n  out_val[0].y = 0.0;\n\n  out_val[1].x = a[1];\n  out_val[1].y = 0.0;\n\n  out_val[2].x = a[2];\n  out_val[2].y = 0.0;\n\n  out_val[3].x = a[3];\n  out_val[3].y = 0.0;\n}\n\nvoid vec4_scalar_mul_fp64(vec2 a[4], vec2 b, out vec2 out_val[4]) {\n  out_val[0] = mul_fp64(a[0], b);\n  out_val[1] = mul_fp64(a[1], b);\n  out_val[2] = mul_fp64(a[2], b);\n  out_val[3] = mul_fp64(a[3], b);\n}\n\nvoid vec4_sum_fp64(vec2 a[4], vec2 b[4], out vec2 out_val[4]) {\n  for (int i = 0; i < 4; i++) {\n    out_val[i] = sum_fp64(a[i], b[i]);\n  }\n}\n\nvoid vec4_dot_fp64(vec2 a[4], vec2 b[4], out vec2 out_val) {\n  vec2 v[4];\n\n  v[0] = mul_fp64(a[0], b[0]);\n  v[1] = mul_fp64(a[1], b[1]);\n  v[2] = mul_fp64(a[2], b[2]);\n  v[3] = mul_fp64(a[3], b[3]);\n\n  out_val = sum_fp64(sum_fp64(v[0], v[1]), sum_fp64(v[2], v[3]));\n}\n\nvoid mat4_vec4_mul_fp64(vec2 b[16], vec2 a[4], out vec2 out_val[4]) {\n  vec2 tmp[4];\n\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      tmp[j] = b[j + i * 4];\n    }\n    vec4_dot_fp64(a, tmp, out_val[i]);\n  }\n}\n"),ri={ONE:1};var ui={name:"fp64",vs:ii,fs:null,fp64ify:ei,fp64LowPart:function(n){return n-Math.fround(n)},fp64ifyMatrix4:function(n){for(var t=new Float32Array(32),e=0;e<4;++e)for(var l=0;l<4;++l){var i=4*e+l;ei(n[4*l+e],t,2*i)}return t},getUniforms:function(){return Object.assign({},ri)}},oi=("".concat(li),e(124)),ai=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],si={modelMatrix:ai,viewMatrix:ai,projectionMatrix:ai,cameraPositionWorld:[0,0,0]};var ci="varying vec4 project_vPositionWorld;\nvarying vec3 project_vNormalWorld;\n\nvec4 project_getPosition_World() {\n  return project_vPositionWorld;\n}\n\nvec3 project_getNormal_World() {\n  return project_vNormalWorld;\n}\n",hi={name:"project",getUniforms:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:si,t=(arguments.length>1&&void 0!==arguments[1]&&arguments[1],{});return void 0!==n.modelMatrix&&(t.modelMatrix=n.modelMatrix),void 0!==n.viewMatrix&&(t.viewMatrix=n.viewMatrix),void 0!==n.projectionMatrix&&(t.projectionMatrix=n.projectionMatrix),void 0!==n.cameraPositionWorld&&(t.cameraPositionWorld=n.cameraPositionWorld),void 0===n.projectionMatrix&&void 0===n.viewMatrix||(t.viewProjectionMatrix=new oi.a(n.projectionMatrix).multiplyRight(n.viewMatrix)),t},vs:"".concat(ci,"\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewProjectionMatrix;\nuniform vec3 cameraPositionWorld;\n\nstruct World {\n  vec3 position;\n  vec3 normal;\n};\n\nWorld world;\n\nvoid project_setPosition(vec4 position) {\n  project_vPositionWorld = position;\n}\n\nvoid project_setNormal(vec3 normal) {\n  project_vNormalWorld = normal;\n}\n\nvoid project_setPositionAndNormal_World(vec3 position, vec3 normal) {\n  world.position = position;\n  world.normal = normal;\n}\n\nvoid project_setPositionAndNormal_Model(vec3 position, vec3 normal) {\n  world.position = (modelMatrix * vec4(position, 1.)).xyz;\n  world.normal = mat3(modelMatrix) * normal;\n}\n\nvec4 project_model_to_clipspace(vec4 position) {\n  return viewProjectionMatrix * modelMatrix * position;\n}\n\nvec4 project_model_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);\n}\n\nvec4 project_world_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_view_to_clipspace(vec3 position) {\n  return projectionMatrix * vec4(position, 1.);\n}\n\nvec4 project_to_clipspace(vec3 position) {\n  return viewProjectionMatrix * vec4(position, 1.);\n}\n"),fs:"\n".concat(ci)},fi="#if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))\n\nstruct AmbientLight {\n vec3 color;\n};\n\nstruct PointLight {\n vec3 color;\n vec3 position;\n vec3 attenuation;\n};\n\nstruct DirectionalLight {\n  vec3 color;\n  vec3 direction;\n};\n\nuniform AmbientLight lighting_uAmbientLight;\nuniform PointLight lighting_uPointLight[MAX_LIGHTS];\nuniform DirectionalLight lighting_uDirectionalLight[MAX_LIGHTS];\nuniform int lighting_uPointLightCount;\nuniform int lighting_uDirectionalLightCount;\n\nuniform bool lighting_uEnabled;\n\nfloat getPointLightAttenuation(PointLight pointLight, float distance) {\n  return pointLight.attenuation.x\n       + pointLight.attenuation.y * distance\n       + pointLight.attenuation.z * distance * distance;\n}\n\n#endif\n",di={name:"lights",vs:fi,fs:fi,getUniforms:function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:pi;if("lightSources"in t){var e=t.lightSources||{},l=e.ambientLight,i=e.pointLights,r=e.directionalLights,u=l||i&&i.length>0||r&&r.length>0;return u?Object.assign({},function(n){var t=n.ambientLight,e=n.pointLights,l=void 0===e?[]:e,i=n.directionalLights,r=void 0===i?[]:i,u={};u["lighting_uAmbientLight.color"]=t?gi(t):[0,0,0];return l.forEach(function(n,t){u["lighting_uPointLight[".concat(t,"].color")]=gi(n),u["lighting_uPointLight[".concat(t,"].position")]=n.position,u["lighting_uPointLight[".concat(t,"].attenuation")]=n.attenuation}),u.lighting_uPointLightCount=l.length,r.forEach(function(n,t){u["lighting_uDirectionalLight[".concat(t,"].color")]=gi(n),u["lighting_uDirectionalLight[".concat(t,"].direction")]=n.direction}),u.lighting_uDirectionalLightCount=r.length,u}({ambientLight:l,pointLights:i,directionalLights:r}),{lighting_uEnabled:!0}):{lighting_uEnabled:!1}}if("lights"in t){var o={pointLights:[],directionalLights:[]},a=!0,s=!1,c=void 0;try{for(var h,f=(t.lights||[])[Symbol.iterator]();!(a=(h=f.next()).done);a=!0){var d=h.value;switch(d.type){case"ambient":o.ambientLight=d;break;case"directional":o.directionalLights.push(d);break;case"point":o.pointLights.push(d)}}}catch(n){s=!0,c=n}finally{try{a||null==f.return||f.return()}finally{if(s)throw c}}return n({lightSources:o})}return{}},defines:{MAX_LIGHTS:3}},pi={};function gi(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.color,e=void 0===t?[0,0,0]:t,l=n.intensity,i=void 0===l?1:l;return e.map(function(n){return n*i/255})}var vi={lightDirection:new Float32Array([1,1,2])};var mi={name:"dirlight",vs:null,fs:"uniform vec3 dirlight_uLightDirection;\nvec4 dirlight_filterColor(vec4 color) {\n  vec3 normal = project_getNormal_World();\n  float d = abs(dot(normalize(normal), normalize(dirlight_uLightDirection)));\n  return vec4(color.rgb * d, color.a);\n}\n",getUniforms:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vi,t={};return n.lightDirection&&(t.dirlight_uLightDirection=n.lightDirection),t},dependencies:[hi]},_i={pickingSelectedColor:null,pickingHighlightColor:new Uint8Array([0,255,255,255]),pickingThreshold:1,pickingActive:!1};var bi={name:"picking",vs:"uniform vec3 picking_uSelectedColor;\nuniform float picking_uThreshold;\nuniform bool picking_uSelectedColorValid;\n\nout vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\n\nbool isVertexPicked(vec3 vertexColor) {\n  return\n    picking_uSelectedColorValid &&\n    abs(vertexColor.r - picking_uSelectedColor.r) < picking_uThreshold &&\n    abs(vertexColor.g - picking_uSelectedColor.g) < picking_uThreshold &&\n    abs(vertexColor.b - picking_uSelectedColor.b) < picking_uThreshold;\n}\n\nvoid picking_setPickingColor(vec3 pickingColor) {\n  picking_vRGBcolor_Aselected.a =\n    float(isVertexPicked(pickingColor));\n  picking_vRGBcolor_Aselected.rgb = pickingColor * COLOR_SCALE;\n}\n",fs:"uniform bool picking_uActive;\nuniform vec3 picking_uSelectedColor;\nuniform vec4 picking_uHighlightColor;\n\nin vec4 picking_vRGBcolor_Aselected;\n\nconst float COLOR_SCALE = 1. / 255.;\nvec4 picking_filterHighlightColor(vec4 color) {\n  bool selected = bool(picking_vRGBcolor_Aselected.a);\n\n  if (selected) {\n    vec4 highLightColor = picking_uHighlightColor * COLOR_SCALE;\n\n    float highLightAlpha = highLightColor.a;\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\n    float highLightRatio = highLightAlpha / blendedAlpha;\n\n    vec3 blendedRGB = mix(color.rgb, highLightColor.rgb, highLightRatio);\n    return vec4(blendedRGB, blendedAlpha);\n  } else {\n    return color;\n  }\n}\nvec4 picking_filterPickingColor(vec4 color) {\n  vec3 pickingColor = picking_vRGBcolor_Aselected.rgb;\n  if (picking_uActive && length(pickingColor) < 0.001) {\n    discard;\n  }\n  return picking_uActive ? vec4(pickingColor, 1.0) : color;\n}\nvec4 picking_filterColor(vec4 color) {\n  vec4 highightColor = picking_filterHighlightColor(color);\n  return picking_filterPickingColor(highightColor);\n}\n\n",getUniforms:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_i,t={};if(void 0!==n.pickingSelectedColor)if(null===n.pickingSelectedColor)t.picking_uSelectedColorValid=0;else{var e=[n.pickingSelectedColor[0],n.pickingSelectedColor[1],n.pickingSelectedColor[2]];t.picking_uSelectedColorValid=1,t.picking_uSelectedColor=e}return void 0!==n.pickingHighlightColor&&(t.picking_uHighlightColor=n.pickingHighlightColor),void 0!==n.pickingThreshold&&(t.picking_uThreshold=n.pickingThreshold),void 0!==n.pickingActive&&(t.picking_uActive=n.pickingActive?1:0),t}},yi={diffuseTexture:null,diffuseColor:[.5,.5,.5,1]};var xi={name:"diffuse",getUniforms:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:yi,t={};return void 0!==n.diffuseTexture&&(t.diffuse_uHasTexture=Boolean(n.diffuseTexture),t.diffuse_uTexture=n.diffuseTexture),void 0!==n.diffuseColor&&(t.diffuse_uColor=n.diffuseColor),t},vs:"out vec2 diffuse_vTexCoord;\nvoid diffuse_setTextureCoordinate(vec2 uv) {\n  diffuse_vTexCoord = uv;\n}\n",fs:"uniform vec4 diffuse_uColor;\nuniform bool diffuse_uHasTexture;\nuniform sampler2D diffuse_uTexture;\n\nin vec2 diffuse_vTexCoord;\n\n\n\nvec4 diffuse_getColor() {\n  vec2 texCoord = diffuse_vTexCoord;\n  return diffuse_uHasTexture ?\n    texture2D(diffuse_uTexture, vec2(texCoord.s, texCoord.t)) :\n    diffuse_uColor;\n}\n\nvec4 diffuse_filterColor(vec4 color) {\n  return diffuse_getColor();\n}\n"},wi="\nuniform float lighting_uAmbient;\nuniform float lighting_uDiffuse;\nuniform float lighting_uShininess;\nuniform vec3  lighting_uSpecularColor;\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {\n    vec3 halfway_direction = normalize(light_direction + view_direction);\n    float lambertian = dot(light_direction, normal_worldspace);\n    float specular = 0.0;\n    if (lambertian > 0.0) {\n      float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);\n      specular = pow(specular_angle, lighting_uShininess);\n    }\n    lambertian = max(lambertian, 0.0);\n    return (lambertian * lighting_uDiffuse * surfaceColor + specular * lighting_uSpecularColor) * color;\n}\n\nvec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = surfaceColor;\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n    lightColor = lighting_uAmbient * surfaceColor * lighting_uAmbientLight.color;\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n\nvec3 lighting_getSpecularLightColor(vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {\n  vec3 lightColor = vec3(0, 0, 0);\n  vec3 surfaceColor = vec3(0, 0, 0);\n\n  if (lighting_uEnabled) {\n    vec3 view_direction = normalize(cameraPosition - position_worldspace);\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uPointLightCount) {\n        break;\n      }\n      PointLight pointLight = lighting_uPointLight[i];\n      vec3 light_position_worldspace = pointLight.position;\n      vec3 light_direction = normalize(light_position_worldspace - position_worldspace);\n      lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);\n    }\n\n    for (int i = 0; i < MAX_LIGHTS; i++) {\n      if (i >= lighting_uDirectionalLightCount) {\n        break;\n      }\n      DirectionalLight directionalLight = lighting_uDirectionalLight[i];\n      lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);\n    }\n  }\n  return lightColor;\n}\n",Ei={name:"gouraud-lighting",dependencies:[di],vs:wi,defines:{LIGHTING_VERTEX:1},getUniforms:Si},Pi={name:"phong-lighting",dependencies:[di],fs:wi,defines:{LIGHTING_FRAGMENT:1},getUniforms:Si},Oi={};function Si(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Oi;if(!("material"in n))return{};var t=n.material;return t?function(n){var t={};return t.lighting_uAmbient=n.ambient,t.lighting_uDiffuse=n.diffuse,t.lighting_uShininess=n.shininess,t.lighting_uSpecularColor=n.specularColor,t}(t):{lighting_uEnabled:!1}}var Ai="uniform mat4 u_MVPMatrix;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_NormalMatrix;\n",Ti={name:"pbr",vs:"varying vec3 pbr_vPosition;\nvarying vec2 pbr_vUV;\n\n#ifdef HAS_NORMALS\n# ifdef HAS_TANGENTS\nvarying mat3 pbr_vTBN;\n# else\nvarying vec3 pbr_vNormal;\n# endif\n#endif\n\nvoid pbr_setPositionNormalTangentUV(vec4 position, vec4 normal, vec4 tangent, vec2 uv)\n{\n  vec4 pos = u_ModelMatrix * position;\n  pbr_vPosition = vec3(pos.xyz) / pos.w;\n\n#ifdef HAS_NORMALS\n#ifdef HAS_TANGENTS\n  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(normal.xyz, 0.0)));\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(tangent.xyz, 0.0)));\n  vec3 bitangentW = cross(normalW, tangentW) * tangent.w;\n  pbr_vTBN = mat3(tangentW, bitangentW, normalW);\n#else\n  pbr_vNormal = normalize(vec3(u_ModelMatrix * vec4(normal.xyz, 0.0)));\n#endif\n#endif\n\n#ifdef HAS_UV\n  pbr_vUV = uv;\n#else\n  pbr_vUV = vec2(0.,0.);\n#endif\n}\n",fs:"#if (__VERSION__ < 300)\n#extension GL_EXT_shader_texture_lod: enable\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n\n#if (__VERSION__ < 300)\n  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL1COND; INCR)\n#else\n  #define SMART_FOR(INIT, WEBGL1COND, WEBGL2COND, INCR) for (INIT; WEBGL2COND; INCR)\n#endif\n\nprecision highp float;\n\n#ifdef USE_IBL\nuniform samplerCube u_DiffuseEnvSampler;\nuniform samplerCube u_SpecularEnvSampler;\nuniform sampler2D u_brdfLUT;\nuniform vec2 u_ScaleIBLAmbient;\n#endif\n\n#ifdef HAS_BASECOLORMAP\nuniform sampler2D u_BaseColorSampler;\n#endif\n#ifdef HAS_NORMALMAP\nuniform sampler2D u_NormalSampler;\nuniform float u_NormalScale;\n#endif\n#ifdef HAS_EMISSIVEMAP\nuniform sampler2D u_EmissiveSampler;\nuniform vec3 u_EmissiveFactor;\n#endif\n#ifdef HAS_METALROUGHNESSMAP\nuniform sampler2D u_MetallicRoughnessSampler;\n#endif\n#ifdef HAS_OCCLUSIONMAP\nuniform sampler2D u_OcclusionSampler;\nuniform float u_OcclusionStrength;\n#endif\n\n#ifdef ALPHA_CUTOFF\nuniform float u_AlphaCutoff;\n#endif\n\nuniform vec2 u_MetallicRoughnessValues;\nuniform vec4 u_BaseColorFactor;\n\nuniform vec3 u_Camera;\n#ifdef PBR_DEBUG\nuniform vec4 u_ScaleDiffBaseMR;\nuniform vec4 u_ScaleFGDSpec;\n#endif\n\nvarying vec3 pbr_vPosition;\n\nvarying vec2 pbr_vUV;\n\n#ifdef HAS_NORMALS\n#ifdef HAS_TANGENTS\nvarying mat3 pbr_vTBN;\n#else\nvarying vec3 pbr_vNormal;\n#endif\n#endif\n\n\nstruct PBRInfo\n{\n  float NdotL;\n  float NdotV;\n  float NdotH;\n  float LdotH;\n  float VdotH;\n  float perceptualRoughness;\n  float metalness;\n  vec3 reflectance0;\n  vec3 reflectance90;\n  float alphaRoughness;\n  vec3 diffuseColor;\n  vec3 specularColor;\n  vec3 n;\n  vec3 v;\n};\n\nconst float M_PI = 3.141592653589793;\nconst float c_MinRoughness = 0.04;\n\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n#ifdef MANUAL_SRGB\n#ifdef SRGB_FAST_APPROXIMATION\n  vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\n#else\n  vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\n  vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\n#endif\n  return vec4(linOut,srgbIn.w);;\n#else\n  return srgbIn;\n#endif\n}\n\nvec3 getNormal()\n{\n#ifndef HAS_TANGENTS\n  vec3 pos_dx = dFdx(pbr_vPosition);\n  vec3 pos_dy = dFdy(pbr_vPosition);\n  vec3 tex_dx = dFdx(vec3(pbr_vUV, 0.0));\n  vec3 tex_dy = dFdy(vec3(pbr_vUV, 0.0));\n  vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n#ifdef HAS_NORMALS\n  vec3 ng = normalize(pbr_vNormal);\n#else\n  vec3 ng = cross(pos_dx, pos_dy);\n#endif\n\n  t = normalize(t - ng * dot(ng, t));\n  vec3 b = normalize(cross(ng, t));\n  mat3 tbn = mat3(t, b, ng);\n#else\n  mat3 tbn = pbr_vTBN;\n#endif\n\n#ifdef HAS_NORMALMAP\n  vec3 n = texture2D(u_NormalSampler, pbr_vUV).rgb;\n  n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\n#else\n  vec3 n = normalize(tbn[2].xyz);\n#endif\n\n  return n;\n}\n\n\n#ifdef USE_IBL\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\n{\n  float mipCount = 9.0;\n  float lod = (pbrInputs.perceptualRoughness * mipCount);\n  vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT,\n    vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\n  vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\n\n#ifdef USE_TEX_LOD\n  vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, reflection, lod)).rgb;\n#else\n  vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\n#endif\n\n  vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\n  vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\n  diffuse *= u_ScaleIBLAmbient.x;\n  specular *= u_ScaleIBLAmbient.y;\n\n  return diffuse + specular;\n}\n#endif\n\n\nvec3 diffuse(PBRInfo pbrInputs)\n{\n  return pbrInputs.diffuseColor / M_PI;\n}\n\nvec3 specularReflection(PBRInfo pbrInputs)\n{\n  return pbrInputs.reflectance0 +\n    (pbrInputs.reflectance90 - pbrInputs.reflectance0) *\n    pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\n}\n\n\n\nfloat geometricOcclusion(PBRInfo pbrInputs)\n{\n  float NdotL = pbrInputs.NdotL;\n  float NdotV = pbrInputs.NdotV;\n  float r = pbrInputs.alphaRoughness;\n\n  float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n  float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n  return attenuationL * attenuationV;\n}\n\n\n\n\n\nfloat microfacetDistribution(PBRInfo pbrInputs)\n{\n  float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\n  float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\n  return roughnessSq / (M_PI * f * f);\n}\n\nvoid PBRInfo_setAmbientLight(inout PBRInfo pbrInputs) {\n  pbrInputs.NdotL = 1.0;\n  pbrInputs.NdotH = 0.0;\n  pbrInputs.LdotH = 0.0;\n  pbrInputs.VdotH = 1.0;\n}\n\nvoid PBRInfo_setDirectionalLight(inout PBRInfo pbrInputs, vec3 lightDirection) {\n  vec3 n = pbrInputs.n;\n  vec3 v = pbrInputs.v;\n  vec3 l = normalize(lightDirection);\n  vec3 h = normalize(l+v);\n\n  pbrInputs.NdotL = clamp(dot(n, l), 0.001, 1.0);\n  pbrInputs.NdotH = clamp(dot(n, h), 0.0, 1.0);\n  pbrInputs.LdotH = clamp(dot(l, h), 0.0, 1.0);\n  pbrInputs.VdotH = clamp(dot(v, h), 0.0, 1.0);\n}\n\nvoid PBRInfo_setPointLight(inout PBRInfo pbrInputs, PointLight pointLight) {\n  vec3 light_direction = normalize(pointLight.position - pbr_vPosition);\n  PBRInfo_setDirectionalLight(pbrInputs, light_direction);\n}\n\nvec3 calculateFinalColor(PBRInfo pbrInputs, vec3 lightColor) {\n  vec3 F = specularReflection(pbrInputs);\n  float G = geometricOcclusion(pbrInputs);\n  float D = microfacetDistribution(pbrInputs);\n  vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\n  vec3 specContrib = F * G * D / (4.0 * pbrInputs.NdotL * pbrInputs.NdotV);\n  return pbrInputs.NdotL * lightColor * (diffuseContrib + specContrib);\n}\n\nvec4 pbr_filterColor(vec4 colorUnused)\n{\n\n\n  float perceptualRoughness = u_MetallicRoughnessValues.y;\n  float metallic = u_MetallicRoughnessValues.x;\n#ifdef HAS_METALROUGHNESSMAP\n\n  vec4 mrSample = texture2D(u_MetallicRoughnessSampler, pbr_vUV);\n  perceptualRoughness = mrSample.g * perceptualRoughness;\n  metallic = mrSample.b * metallic;\n#endif\n  perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\n  metallic = clamp(metallic, 0.0, 1.0);\n\n  float alphaRoughness = perceptualRoughness * perceptualRoughness;\n#ifdef HAS_BASECOLORMAP\n  vec4 baseColor = SRGBtoLINEAR(texture2D(u_BaseColorSampler, pbr_vUV)) * u_BaseColorFactor;\n#else\n  vec4 baseColor = u_BaseColorFactor;\n#endif\n\n#ifdef ALPHA_CUTOFF\n  if (baseColor.a < u_AlphaCutoff) {\n    discard;\n  }\n#endif\n\n  vec3 f0 = vec3(0.04);\n  vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n  diffuseColor *= 1.0 - metallic;\n  vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n  float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n\n\n  float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n  vec3 specularEnvironmentR0 = specularColor.rgb;\n  vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n  vec3 n = getNormal();\n  vec3 v = normalize(u_Camera - pbr_vPosition);\n\n  float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);\n  vec3 reflection = -normalize(reflect(v, n));\n\n  PBRInfo pbrInputs = PBRInfo(\n    0.0,\n    NdotV,\n    0.0,\n    0.0,\n    0.0,\n    perceptualRoughness,\n    metallic,\n    specularEnvironmentR0,\n    specularEnvironmentR90,\n    alphaRoughness,\n    diffuseColor,\n    specularColor,\n    n,\n    v\n  );\n\n  vec3 color = vec3(0, 0, 0);\n\n#ifdef USE_LIGHTS\n  PBRInfo_setAmbientLight(pbrInputs);\n  color += calculateFinalColor(pbrInputs, lighting_uAmbientLight.color);\n  SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uDirectionalLightCount, i++) {\n    if (i < lighting_uDirectionalLightCount) {\n      PBRInfo_setDirectionalLight(pbrInputs, lighting_uDirectionalLight[i].direction);\n      color += calculateFinalColor(pbrInputs, lighting_uDirectionalLight[i].color);\n    }\n  }\n  SMART_FOR(int i = 0, i < MAX_LIGHTS, i < lighting_uPointLightCount, i++) {\n    if (i < lighting_uPointLightCount) {\n      PBRInfo_setPointLight(pbrInputs, lighting_uPointLight[i]);\n      float attenuation = getPointLightAttenuation(lighting_uPointLight[i], distance(lighting_uPointLight[i].position, pbr_vPosition));\n      color += calculateFinalColor(pbrInputs, lighting_uPointLight[i].color / attenuation);\n    }\n  }\n#endif\n#ifdef USE_IBL\n  color += getIBLContribution(pbrInputs, n, reflection);\n#endif\n#ifdef HAS_OCCLUSIONMAP\n  float ao = texture2D(u_OcclusionSampler, pbr_vUV).r;\n  color = mix(color, color * ao, u_OcclusionStrength);\n#endif\n\n#ifdef HAS_EMISSIVEMAP\n  vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, pbr_vUV)).rgb * u_EmissiveFactor;\n  color += emissive;\n#endif\n\n#ifdef PBR_DEBUG\n\n\n\n\n\n  color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\n  color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\n  color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\n#endif\n\n  return vec4(pow(color,vec3(1.0/2.2)), baseColor.a);\n}\n",defines:{LIGHTING_FRAGMENT:1},dependencies:[{name:"project2",vs:Ai,fs:Ai},di]},Ci={name:"transform",vs:"attribute float transform_elementID;\nvec2 transform_getPixelSizeHalf(vec2 size) {\n  return vec2(1.) / (2. * size);\n}\n\nvec2 transform_getPixelIndices(vec2 texSize, vec2 pixelSizeHalf) {\n  float yIndex = floor((transform_elementID / texSize[0]) + pixelSizeHalf[1]);\n  float xIndex = transform_elementID - (yIndex * texSize[0]);\n  return vec2(xIndex, yIndex);\n}\nvec2 transform_getTexCoord(vec2 size) {\n  vec2 pixelSizeHalf = transform_getPixelSizeHalf(size);\n  vec2 indices = transform_getPixelIndices(size, pixelSizeHalf);\n  vec2 coord = indices / size + pixelSizeHalf;\n  return coord;\n}\nvec2 transform_getPos(vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec2 pos = (texCoord * (2.0, 2.0)) - (1., 1.);\n  return pos;\n}\nvec4 transform_getInput(sampler2D texSampler, vec2 size) {\n  vec2 texCoord = transform_getTexCoord(size);\n  vec4 textureColor = texture2D(texSampler, texCoord);\n  return textureColor;\n}\n",fs:null},Li={vs:"#define SHADER_NAME luma_modular_vertex\n\n// object attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec4 colors;\nattribute vec2 texCoords;\nattribute vec3 pickingColors;\n\nvoid main(void) {\n\n  // Set up position\n#ifdef MODULE_GEOMETRY\n  geometry_setPosition(positions);\n  geometry_setNormal(normals);\n#endif\n\n#ifdef MODULE_PROJECT\n  project_setPositionAndNormal_Model(positions, normals);\n  gl_Position = project_model_to_clipspace(positions);\n#endif\n\n  // Set up depth\n#ifdef MODULE_LOGDEPTH\n  logdepth_adjustPosition(gl_Position);\n#endif\n\n#ifdef MODULE_DIFFUSE\n  diffuse_setTextureCoordinate(texCoords);\n#endif\n\n  // Set up color calculations\n#ifdef MODULE_MATERIAL\n  material_setDiffuseColor(colors);\n  material_setDiffuseTextureCoordinates(texCoords);\n#endif\n\n#ifdef MODULE_LIGHTING\n  lighting_setPositionAndNormal(positions, normals);\n  lighting_apply_light(positions);\n  lighting_apply_reflection(positions);\n#endif\n\n#ifdef MODULE_PICKING\n  picking_setPickingColor(pickingColors);\n#endif\n\n}\n",fs:"#define SHADER_NAME luma-modular-fragment\n\nprecision highp float;\n\n// varyings\nvarying vec4 vColor;\n\nvoid main(){\n  gl_FragColor = vec4(1., 0., 1., 1.);\n\n#ifdef MODULE_DIFFUSE\n  gl_FragColor = diffuse_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_MATERIAL\n  gl_FragColor = material_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LIGHTING\n  gl_FragColor = lighting_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_FOG\n  gl_FragColor = fog_filterColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_PICKING\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n#endif\n\n#ifdef MODULE_LOGDEPTH\n  logdepth_setFragDepth(gl_Position);\n#endif\n}\n",defaultUniforms:{}},Mi=e(19),ji=e.n(Mi),Ri={},Ii=function n(t,e,l){t&&(e.length>1?n(t[e[0]],e.slice(1),l):t[e[0]]=l)},ki=new Map;ji.a.listenFor("luma.gl",function(n){var t=Ri[n.itemKey];if(t&&"edit"===n.type&&"uniforms"===n.valuePath[0]){var e=n.valuePath.slice(1);!function(n,t,e){u.d.__SEER_INITIALIZED__&&(ki.has(n)||ki.set(n,new Map),ki.get(n).set(t,e))}(n.itemKey,e,n.value);var l=t.getUniforms();Ii(l,e,n.value),t.setUniforms(l)}});var Fi,Ni=["renderPickingBuffer","pickingEnabled"],Di=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,n),M(Y(t));var i=e.id,r=void 0===i?R("base-model"):i;this.id=r,this.gl=t,this.id=e.id||R("Model"),this.lastLogTime=0,this.initialize(e),this._setBaseModelProps(e)}return Object(i.a)(n,[{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.props={},this.program=this._createProgram(n),this.vertexArray=new Re(this.gl,{program:this.program}),this.userData={},this.needsRedraw=!0,this._attributes={},this.attributes={},this.animatedUniforms={},this.animated=!1,this.animationLoop=null,this.timerQueryEnabled=!1,this.timeElapsedQuery=void 0,this.lastQueryReturned=!0,this.stats={accumulatedFrameTime:0,averageFrameTime:0,profileFrameCount:0},this.pickable=!0,this._setBaseModelProps(n),this.setUniforms(Object.assign({},this.getModuleUniforms(),this.getModuleUniforms(n.moduleSettings)))}},{key:"setProps",value:function(n){this._setBaseModelProps(n)}},{key:"delete",value:function(){for(var n in this._attributes)this._attributes[n]!==this.attributes[n]&&this._attributes[n].delete();var t;this.program.delete(),this.vertexArray.delete(),t=this.id,delete Ri[t],ji.a.deleteItem("luma.gl",t)}},{key:"destroy",value:function(){this.delete()}},{key:"isAnimated",value:function(){return this.animated}},{key:"getProgram",value:function(){return this.program}},{key:"getUniforms",value:function(){return this.program.getUniforms()}},{key:"setUniforms",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return t=Object.assign({},t),function(n,t){if(u.d.__SEER_INITIALIZED__&&n){var e=ki.get(n);e&&e.forEach(function(n,e){Ii(t,e,n)})}}(this.id,t),t=this._extractAnimatedUniforms(t),this.program.setUniforms(t,function(){n._checkForDeprecatedUniforms(t)}),this}},{key:"updateModuleSettings",value:function(n){var t=this.getModuleUniforms(n||{});return this.setUniforms(t)}},{key:"clear",value:function(n){return Jn(this.program.gl,n),this}},{key:"drawGeometry",value:function(){var n,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.moduleSettings,l=void 0===e?null:e,i=t.framebuffer,r=t.uniforms,u=void 0===r?{}:r,a=t.attributes,s=void 0===a?{}:a,c=t.transformFeedback,h=void 0===c?this.transformFeedback:c,f=t.parameters,d=void 0===f?{}:f,p=t.vertexArray,g=void 0===p?this.vertexArray:p,v=t.animationProps;Ri[(n=this).id]||(Ri[n.id]=n,ji.a.listItem("luma.gl",n.id)),this.setAttributes(s),this.updateModuleSettings(l),this.setUniforms(u),this._refreshAnimationProps(v);var m=this._logDrawCallStart(2),_=this.vertexArray.getDrawParams(this.props);_.isInstanced&&!this.isInstanced&&o.warn("Found instanced attributes on non-instanced model",this.id)();var b=_.isIndexed,y=_.indexType,x=_.indexOffset,w=this.isInstanced,E=this.instanceCount,P=function(){},O=this.props,S=O.onBeforeRender,A=void 0===S?P:S,T=O.onAfterRender,C=void 0===T?P:T;A(),this._timerQueryStart();var L=this.program.draw(Object.assign({},t,{logPriority:m,uniforms:null,framebuffer:i,parameters:d,drawMode:this.getDrawMode(),vertexCount:this.getVertexCount(),vertexArray:g,transformFeedback:h,isIndexed:b,indexType:y,isInstanced:w,instanceCount:E,offset:b?x:0}));return this._timerQueryEnd(),C(),this._logDrawCallEnd(m,g,i),L}},{key:"transform",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.discard,e=void 0===t||t,l=n.feedbackBuffers,i=n.unbindModels,r=void 0===i?[]:i,u=n.parameters;l&&this._setFeedbackBuffers(l),e&&(u=Object.assign({},u,Object(A.a)({},35977,e))),r.forEach(function(n){return n.vertexArray.unbindBuffers()});try{this.draw(Object.assign({},n,{parameters:u}))}finally{r.forEach(function(n){return n.vertexArray.bindBuffers()})}return this}},{key:"_setBaseModelProps",value:function(n){Object.assign(this.props,n),"uniforms"in n&&this.setUniforms(n.uniforms),"pickable"in n&&(this.pickable=n.pickable),"timerQueryEnabled"in n&&(this.timerQueryEnabled=n.timerQueryEnabled&&Ee.isSupported(this.gl,["timers"]),n.timerQueryEnabled&&!this.timerQueryEnabled&&o.warn("GPU timer not supported")()),"_animationProps"in n&&this._setAnimationProps(n._animationProps),"_animationLoop"in n&&(this.animationLoop=n._animationLoop)}},{key:"_createProgram",value:function(n){var t=n.vs,e=void 0===t?null:t,l=n.fs,i=void 0===l?null:l,r=n.modules,u=void 0===r?null:r,a=n.defines,s=void 0===a?{}:a,c=n.inject,h=void 0===c?{}:c,f=n.shaderCache,d=void 0===f?null:f,p=n.varyings,g=void 0===p?null:p,v=n.bufferMode,m=void 0===v?35981:v,_=n.program,b=void 0===_?null:_;this.getModuleUniforms=function(n){};var y=this.id;if(!b){e=e||Li.vs,i=i||Li.fs;var x=Ul(this.gl,{vs:e,fs:i,modules:u,inject:h,defines:s,log:o});e=x.vs,i=x.fs,b=d?d.getProgram(this.gl,{id:y,vs:e,fs:i}):new we(this.gl,{id:y,vs:e,fs:i,varyings:g,bufferMode:m}),this.getModuleUniforms=x.getUniforms||function(n){}}return M(b instanceof we,"Model needs a program"),b}},{key:"_checkForDeprecatedUniforms",value:function(n){Ni.forEach(function(t){t in n&&o.deprecated(t,"use picking shader module and Model class updateModuleSettings()")()})}},{key:"_refreshAnimationProps",value:function(n){(n=n||this.animationLoop&&this.animationLoop.animationProps)&&this._setAnimationProps(n)}},{key:"_evaluateAnimateUniforms",value:function(n){if(!this.animated)return{};var t={};for(var e in this.animatedUniforms){var l=this.animatedUniforms[e];t[e]=l(n)}return t}},{key:"_extractAnimatedUniforms",value:function(n){var t=!1;for(var e in n){var l=n[e];"function"==typeof l?(this.animatedUniforms[e]=l,t=!0):delete this.animatedUniforms[e]}if(this.animated=!k(this.animatedUniforms),!t)return n;var i={};for(var r in n)this.animatedUniforms[r]||(i[r]=n[r]);return i}},{key:"_timerQueryStart",value:function(){!0===this.timerQueryEnabled&&(this.timeElapsedQuery||(this.timeElapsedQuery=new Ee(this.gl)),this.lastQueryReturned&&(this.lastQueryReturned=!1,this.timeElapsedQuery.beginTimeElapsedQuery()))}},{key:"_timerQueryEnd",value:function(){if(!0===this.timerQueryEnabled&&(this.timeElapsedQuery.end(),this.timeElapsedQuery.isResultAvailable())){this.lastQueryReturned=!0;var n=this.timeElapsedQuery.getTimerMilliseconds();this.stats.lastFrameTime=n,this.stats.accumulatedFrameTime+=n,this.stats.profileFrameCount++,this.stats.averageFrameTime=this.stats.accumulatedFrameTime/this.stats.profileFrameCount,o.log(2,"GPU time ".concat(this.program.id,": ").concat(this.stats.lastFrameTime,"ms average ").concat(this.stats.averageFrameTime,"ms accumulated: ").concat(this.stats.accumulatedFrameTime,"ms count: ").concat(this.stats.profileFrameCount))()}}},{key:"_logDrawCallStart",value:function(n){var t=n>3?0:1e4;if(!(o.priority<n||Date.now()-this.lastLogTime<t))return this.lastLogTime=Date.now(),o.group(2,">>> DRAWING MODEL ".concat(this.id),{collapsed:o.priority<=2})(),n}},{key:"_logDrawCallEnd",value:function(n,t,e,l){if(void 0!==n){var i=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.vertexArray,e=n.header,l=void 0===e?"Attributes":e;if(!t.configuration)return{};var i={};t.elements&&(i.ELEMENT_ARRAY_BUFFER=Ue(t,t.elements,null,l));var r=t.values;for(var u in r){var o=t._getAttributeInfo(u);if(o){var a="".concat(u,": ").concat(o.name),s=t.accessors[o.location];s&&(a="".concat(u,": ").concat(ze(o.name,s))),i[a]=Ue(t,r[u],s,l)}}return i}({vertexArray:t,header:"".concat(this.id," attributes"),attributes:this._attributes}),r=De({header:"".concat(this.id," uniforms"),program:this.program,uniforms:Object.assign({},this.program.uniforms,e)}),u=r.table,a=r.unusedTable,s=r.unusedCount,c=De({header:"".concat(this.id," uniforms"),program:this.program,uniforms:Object.assign({},this.program.uniforms,e),undefinedOnly:!0}),h=c.table;c.count>0&&o.log("MISSING UNIFORMS",Object.keys(h))(),s>0&&o.log("UNUSED UNIFORMS",Object.keys(a))();var f=function(n){var t={},e="Accessors for ".concat(n.id),l=!0,i=!1,r=void 0;try{for(var u,o=n.attributeInfos[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){var a=u.value;if(a){var s=Ve(a);t["in ".concat(s)]=Object(A.a)({},e,JSON.stringify(a.accessor))}}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}var c=!0,h=!1,f=void 0;try{for(var d,p=n.varyingInfos[Symbol.iterator]();!(c=(d=p.next()).done);c=!0){var g=d.value;if(g){var v=Ve(g);t["out ".concat(v)]=Object(A.a)({},e,JSON.stringify(g.accessor))}}}catch(n){h=!0,f=n}finally{try{c||null==p.return||p.return()}finally{if(h)throw f}}return t}(this.vertexArray.configuration);o.table(n,i)(),o.table(n,u)(),o.table(n+1,f)(),function(n,t){if(ji.a.isReady()&&!ji.a.throttle("luma.gl:".concat(n.id),1e3)){var e=n.geometry?Object.assign({},n.geometry.attributes,n.attributes):n.attributes,l=Object.assign({},n.uniforms,t);ji.a.multiUpdate("luma.gl",n.id,[{path:"objects.uniforms",data:l},{path:"objects.attributes",data:e}])}}(this,e),l&&l.log({priority:2,message:"Rendered to ".concat(l.id)}),o.groupEnd(2,">>> DRAWING MODEL ".concat(this.id))()}}}]),n}(),Bi=function(n){function t(n,e){Object(l.a)(this,t);var i=e.id,r=void 0===i?R("model"):i;return Object(un.a)(this,Object(on.a)(t).call(this,n,T({},e,{id:r})))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Gt(Object(on.a)(t.prototype),"initialize",this).call(this,n),this.drawMode=void 0!==n.drawMode?n.drawMode:4,this.vertexCount=n.vertexCount||0,this.geometryBuffers={},this.isInstanced=n.isInstanced||n.instanced,this._setModelProps(n),this.geometry={},M(void 0!==this.drawMode&&Number.isFinite(this.vertexCount),"Model needs drawMode and vertexCount")}},{key:"setProps",value:function(n){Gt(Object(on.a)(t.prototype),"setProps",this).call(this,n),this._setModelProps(n)}},{key:"delete",value:function(){Gt(Object(on.a)(t.prototype),"delete",this).call(this),this._deleteGeometryBuffers()}},{key:"destroy",value:function(){this.delete()}},{key:"getDrawMode",value:function(){return this.drawMode}},{key:"getVertexCount",value:function(){return this.vertexCount}},{key:"getInstanceCount",value:function(){return this.instanceCount}},{key:"getAttributes",value:function(){return this.attributes}},{key:"setDrawMode",value:function(n){return this.drawMode=n,this}},{key:"setVertexCount",value:function(n){return M(Number.isFinite(n)),this.vertexCount=n,this}},{key:"setInstanceCount",value:function(n){return M(Number.isFinite(n)),this.instanceCount=n,this}},{key:"setGeometry",value:function(n){return this.drawMode=n.drawMode,this.vertexCount=n.getVertexCount(),this._deleteGeometryBuffers(),this.geometryBuffers=function(n,t,e){var l={};for(var i in t.attributes){var r=t.attributes[i],u=sl(i,e);if(r.constant)l[u]=r.value;else{var o=r.value,a=T({},r);delete a.value,l[u]=[new En(n,o),a],cl(i,a)}}return t.indices&&(l.indices=new En(n,{data:t.indices.value||t.indices,target:34963})),l}(this.gl,n),this.vertexArray.setAttributes(this.geometryBuffers),this}},{key:"setAttributes",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(k(n))return this;var t={};for(var e in n){var l=n[e];t[e]=l.getValue?l.getValue():l}return this.vertexArray.setAttributes(t),this}},{key:"draw",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.drawGeometry(n)}},{key:"transform",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.discard,e=void 0===t||t,l=n.feedbackBuffers,i=n.unbindModels,r=void 0===i?[]:i,u=n.parameters;l&&this._setFeedbackBuffers(l),e&&(u=Object.assign({},u,Object(A.a)({},35977,e))),r.forEach(function(n){return n.vertexArray.unbindBuffers()});try{this.draw(Object.assign({},n,{parameters:u}))}finally{r.forEach(function(n){return n.vertexArray.bindBuffers()})}return this}},{key:"render",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return o.warn("Model.render() is deprecated. Use Model.setUniforms() and Model.draw()")(),this.setUniforms(n).draw()}},{key:"_setModelProps",value:function(n){"instanceCount"in n&&(this.instanceCount=n.instanceCount),"geometry"in n&&this.setGeometry(n.geometry),"attributes"in n&&this.setAttributes(n.attributes),"_feedbackBuffers"in n&&this._setFeedbackBuffers(n._feedbackBuffers)}},{key:"_deleteGeometryBuffers",value:function(){for(var n in this.geometryBuffers){var t=this.geometryBuffers[n][0]||this.geometryBuffers[n];t instanceof En&&t.delete()}}},{key:"_setAnimationProps",value:function(n){var t=this;if(this.animated){M(n,"Model.draw(): animated uniforms but no animationProps");var e=this._evaluateAnimateUniforms(n);this.program.setUniforms(e,function(){t._checkForDeprecatedUniforms(e)})}}},{key:"_setFeedbackBuffers",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(k(n))return this;var t=this.program.gl;return this.transformFeedback=this.transformFeedback||new Pe(t,{program:this.program}),this.transformFeedback.setBuffers(n),this}},{key:"_timerQueryStart",value:function(){!0===this.timerQueryEnabled&&(this.timeElapsedQuery||(this.timeElapsedQuery=new Ee(this.gl)),this.lastQueryReturned&&(this.lastQueryReturned=!1,this.timeElapsedQuery.beginTimeElapsedQuery()))}},{key:"_timerQueryEnd",value:function(){if(!0===this.timerQueryEnabled&&(this.timeElapsedQuery.end(),this.timeElapsedQuery.isResultAvailable())){this.lastQueryReturned=!0;var n=this.timeElapsedQuery.getTimerMilliseconds();this.stats.lastFrameTime=n,this.stats.accumulatedFrameTime+=n,this.stats.profileFrameCount++,this.stats.averageFrameTime=this.stats.accumulatedFrameTime/this.stats.profileFrameCount,o.log(2,"GPU time ".concat(this.program.id,": ").concat(this.stats.lastFrameTime,"ms average ").concat(this.stats.averageFrameTime,"ms accumulated: ").concat(this.stats.accumulatedFrameTime,"ms count: ").concat(this.stats.profileFrameCount))()}}}]),t}(Di),Ui="transform_uSampler_",zi="transform_uSize_",Vi="transform_position";function Gi(n){var t=n.vs,e=n.sourceTextureMap,l=n.targetTextureVarying,i=n.targetTexture,r=Object.keys(e).length,u=null,o={},a=t,s={};if(r>0||l){var c=a.split("\n"),h=c.slice();if(c.forEach(function(n,t,i){if(r>0){var a=function(n,t){var e={},l=function(n){return $l(n,["attribute","in"])}(n);if(!l)return null;var i=l.type,r=l.name;if(r&&t[r]){var u="// ".concat(n," => Replaced by Transform with a sampler"),o=function(n){var t="".concat(Ui).concat(n),e="".concat(zi).concat(n),l="  uniform sampler2D ".concat(t,";\n  uniform vec2 ").concat(e,";");return{samplerName:t,sizeName:e,uniformDeclerations:l}}(r),a=o.samplerName,s=o.sizeName,c=o.uniformDeclerations,h=Ql(i),f="  ".concat(i," ").concat(r," = transform_getInput(").concat(a,", ").concat(s,").").concat(h,";\n");e[a]=r;var d={"vs:#decl":c,"vs:#main-start":f};return{updatedLine:u,inject:d,samplerTextureMap:e}}return null}(n,e);if(a){var c=a.updatedLine,f=a.inject;h[t]=c,s=Nl([s,f]),Object.assign(o,a.samplerTextureMap),r--}}l&&!u&&(u=function(n,t){var e=$l(n,["varying","out"]);if(!e)return null;return e.name===t?e.type:null}(n,l))}),l){M(i);var f="".concat(zi).concat(l),d="uniform vec2 ".concat(f,";\n"),p="     vec2 ".concat(Vi," = transform_getPos(").concat(f,");\n     gl_Position = vec4(").concat(Vi,", 0, 1.);\n");s=Nl([s,{"vs:#decl":d,"vs:#main-start":p}])}a=h.join("\n")}return{vs:a,targetTextureType:u,inject:s,samplerTextureMap:o}}var Wi=(Fi={},Object(A.a)(Fi,10241,9728),Object(A.a)(Fi,10240,9728),Object(A.a)(Fi,10242,33071),Object(A.a)(Fi,10243,33071),Fi),Hi=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,n),M(Z(t)),this.gl=t,this.model=null,this.elementCount=0,this.currentIndex=0,this.sourceBuffers=new Array(2),this.sourceTextures=new Array(2),this.feedbackBuffers=new Array(2),this.targetTextures=new Array(2),this.transformFeedbacks=new Array(2),this.framebuffers=new Array(2),this._createdBuffers={},this.elementIDBuffer=null,this._targetRefTexName=null,this._initialize(e),Object.seal(this)}return Object(i.a)(n,null,[{key:"isSupported",value:function(n){return Z(n)}}]),Object(i.a)(n,[{key:"delete",value:function(){for(var n in this._createdBuffers)this._createdBuffers[n].delete();this.model.delete()}},{key:"getBuffer",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=n?this.feedbackBuffers[this.currentIndex][n]:null;return t?t instanceof En?t:t.buffer:null}},{key:"_getTargetTexture",value:function(){return this.framebuffers[this.currentIndex]?this.framebuffers[this.currentIndex].attachments[36064]:null}},{key:"getData",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.varyingName,e=void 0===t?null:t,l=n.packed,i=void 0!==l&&l,r=this.getBuffer(e);if(r)return r.getData();M(!e||e===this.targetTextureVarying);var u=et(this.framebuffers[this.currentIndex]);if(!i)return u;for(var o=u.constructor,a=Jl(this.targetTextureType),s=new o(u.length*a/4),c=0,h=0;h<u.length;h+=4)for(var f=0;f<a;f++)s[c++]=u[h+f];return s}},{key:"getFramebuffer",value:function(){return this.framebuffers[this.currentIndex]}},{key:"_getInputs",value:function(){var n={},t=this.currentIndex,e=Object.assign({},this.sourceBuffers[t]);if(this.hasSourceTextures||this.targetTextureVarying){for(var l in e.transform_elementID=this.elementIDBuffer,this.samplerTextureMap){var i=this.samplerTextureMap[l];n[l]=this.sourceTextures[t][i]}this._setSourceTextureParameters();var r=function(n){var t,e,l=n.sourceTextureMap,i=n.targetTextureVarying,r=n.targetTexture,u={};for(var o in i&&(t=r.width,e=r.height,u["".concat(zi).concat(i)]=[t,e]),l){var a=l[o];t=a.width,e=a.height,u["".concat(zi).concat(o)]=[t,e]}return u}({sourceTextureMap:this.sourceTextures[t],targetTextureVarying:this.targetTextureVarying,targetTexture:this.targetTextures[t]});Object.assign(n,r)}return{attributes:e,uniforms:n}}},{key:"run",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this._getInputs(),e=t.attributes,l=t.uniforms;Object.assign(l,n.uniforms);var i=Object.assign({},n.parameters),r=n.clearRenderTarget,u=void 0===r||r,o=null,a=!0;this.renderingToTexture&&(a=!1,M(o=this.framebuffers[this.currentIndex]),i.viewport=[0,0,o.width,o.height],u&&this.gl.clear(this.gl.COLOR_BUFFER_BIT)),this.model.setAttributes(e),this.model.transform(Object.assign({},n,{transformFeedback:this.transformFeedbacks[this.currentIndex],uniforms:l,discard:a,framebuffer:o,parameters:i}))}},{key:"swapBuffers",value:function(){o.deprecated("swapBuffers()","swap()")(),this.swap()}},{key:"swap",value:function(){M(this.feedbackMap||this._swapTexture),this.currentIndex=(this.currentIndex+1)%2}},{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};n.elementCount&&this._setElementCount(n.elementCount);var t=n.sourceBuffers,e=void 0===t?null:t,l=n.feedbackBuffers,i=void 0===l?null:l,r=this.currentIndex;if(e||i){for(var u in i)M(i[u]instanceof En||i[u].buffer instanceof En);Object.assign(this.sourceBuffers[r],e),Object.assign(this.feedbackBuffers[r],i),this._createFeedbackBuffers({feedbackBuffers:i}),this.transformFeedbacks[r]&&this.transformFeedbacks[r].setBuffers(this.feedbackBuffers[r]),this._setupSwapBuffers()}var o=n._sourceTextures,a=n._targetTexture;(o||a)&&(Object.assign(this.sourceTextures[r],o),this._updateTargetTexture(a||this._targetRefTexName,r),this._setupSwapTextures())}},{key:"_setSourceTextureParameters",value:function(){var n=this.currentIndex;for(var t in this.sourceTextures[n])this.sourceTextures[n][t].setParameters(Wi)}},{key:"_setElementCount",value:function(n){this.elementCount!==n&&(this.elementCount<n&&this._updateElementIDBuffer(n),this.model.setVertexCount(n),this.elementCount=n)}},{key:"_updateTargetTexture",value:function(n,t){var e=this._buildTargetTexture(n);e&&(this.targetTextures[t]=e,this.framebuffers[t]&&(this.framebuffers[t].update({attachments:Object(A.a)({},36064,this.targetTextures[t]),resizeAttachments:!1}),this.framebuffers[t].resize({width:e.width,height:e.height})))}},{key:"_initialize",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this._validateProps(n),e=t.feedbackBuffers,l=t.feedbackMap,i=n.sourceBuffers,r=n.varyings,u=n._targetTexture,o=n._targetTextureVarying,a=n._swapTexture,s=r;l&&!Array.isArray(r)&&(s=Object.values(l)),this.varyingsArray=s,this.feedbackMap=l,this._swapTexture=a,u&&(this.targetTextureVarying=o,this.renderingToTexture=!0,M(this.targetTextureVarying)),this._setupBuffers({sourceBuffers:i,feedbackBuffers:e}),this._setupTextures(n),this._setupSwapBuffers(),this._setupSwapTextures(),this._buildModel(Object.assign({},n,{id:n.id||"transform-model",drawMode:n.drawMode||0,varyings:s}))}},{key:"_validateProps",value:function(n){var t=n.feedbackBuffers,e=n.feedbackMap,l=n.destinationBuffers,i=n.sourceDestinationMap;l&&(o.deprecated("destinationBuffers","feedbackBuffers")(),t=t||l),i&&(o.deprecated("sourceDestinationMap","feedbackMap")(),e=e||i);var r=n.vs,u=n.elementCount,a=n.varyings,s=n._sourceTextures,c=n._targetTexture,h=n._targetTextureVarying,f=n._swapTexture;for(var d in M(r&&(a||e||c)&&u),t||{})M(t[d]instanceof En||t[d].buffer instanceof En);for(var p in s||{})M(s[p]instanceof Rn);return M(!c||h),M(!f||s[f]),{feedbackBuffers:t,feedbackMap:e}}},{key:"_setupBuffers",value:function(n){var t=n.sourceBuffers,e=void 0===t?null:t,l=n.feedbackBuffers,i=void 0===l?null:l;this.sourceBuffers[0]=Object.assign({},e),this.feedbackBuffers[0]=Object.assign({},i),this._createFeedbackBuffers({feedbackBuffers:i}),this.sourceBuffers[1]={},this.feedbackBuffers[1]={}}},{key:"_setupTextures",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n._sourceTextures,e=n._targetTexture;if(this.sourceTextures[0]=Object.assign({},t),this.sourceTextures[1]={},this.hasSourceTextures=Object.keys(this.sourceTextures[0]).length>0,this.targetTextureVarying){var l=this._buildTargetTexture(e);M(l),this.targetTextures[0]=l,this.targetTextures[1]=null}}},{key:"_buildTargetTexture",value:function(n){var t;if(n instanceof Rn)return n;var e=this.sourceTextures[0][n];return e?(this._targetRefTexName=n,Et(e,{parameters:(t={},Object(A.a)(t,10241,9728),Object(A.a)(t,10240,9728),Object(A.a)(t,10242,33071),Object(A.a)(t,10243,33071),t),pixelStore:Object(A.a)({},37440,!1)})):null}},{key:"_createFeedbackBuffers",value:function(n){var t=n.feedbackBuffers;if(this.feedbackMap){var e=this.currentIndex;for(var l in this.feedbackMap){var i=this.feedbackMap[l];if(!(i===this.targetTextureVarying||t&&t[i])){var r=this.sourceBuffers[e][l],u=r.byteLength,o=r.usage,a=r.accessor,s=new En(this.gl,{byteLength:u,usage:o,accessor:a});this._createdBuffers[i]&&this._createdBuffers[i].delete(),this._createdBuffers[i]=s,this.feedbackBuffers[e][i]=s}}}}},{key:"_createNewBuffer",value:function(n,t){var e=new En(this.gl,t);return this._createdBuffers[n]&&(this._createdBuffers[n].delete(),this._createdBuffers[n]=e),e}},{key:"_setupSwapBuffers",value:function(){if(this.feedbackMap){var n=this.currentIndex,t=(n+1)%2;for(var e in Object.assign(this.sourceBuffers[t],this.sourceBuffers[n]),Object.assign(this.feedbackBuffers[t],this.feedbackBuffers[n]),this.feedbackMap){var l=this.feedbackMap[e];l!==this.targetTextureVarying&&(this.sourceBuffers[t][e]=this.feedbackBuffers[n][l],this.feedbackBuffers[t][l]=this.sourceBuffers[n][e],M(this.feedbackBuffers[t][l]instanceof En))}this.transformFeedbacks[t]&&this.transformFeedbacks[t].setBuffers(this.feedbackBuffers[t])}}},{key:"_setupSwapTextures",value:function(){if(this._swapTexture&&this.targetTextureVarying){var n=this.currentIndex,t=(n+1)%2;Object.assign(this.sourceTextures[t],this.sourceTextures[n]),this.sourceTextures[t][this._swapTexture]=this.targetTextures[n],this._updateTargetTexture(this.sourceTextures[n][this._swapTexture],t)}}},{key:"_buildModel",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this._getShaders(n),e=t.vs,l=t.fs,i=t.modules,r=t.uniforms,u=t.inject,o=t.samplerTextureMap;this.model=new Bi(this.gl,Object.assign({},n,{vs:e,fs:l,vertexCount:n.elementCount,modules:i,uniforms:r,inject:u})),this.samplerTextureMap=o,this._setupTransformFeedback(),this._setupFramebuffers(),this._setElementCount(n.elementCount)}},{key:"_setupTransformFeedback",value:function(){k(this.feedbackBuffers[0])||(this.transformFeedbacks[0]=new Pe(this.gl,{program:this.model.program,buffers:this.feedbackBuffers[0]}),this.feedbackMap&&(this.transformFeedbacks[1]=new Pe(this.gl,{program:this.model.program,buffers:this.feedbackBuffers[1]})))}},{key:"_setupFramebuffers",value:function(){if(this.renderingToTexture){var n=this.targetTextures[0],t=n.width,e=n.height;if(this.framebuffers[0]=new wt(this.gl,{id:"".concat(this.id||"transform","-framebuffer-0"),width:t,height:e,attachments:Object(A.a)({},36064,this.targetTextures[0])}),this._swapTexture){var l=this.targetTextures[1];t=l.width,e=l.height,this.framebuffers[1]=new wt(this.gl,{id:"".concat(this.id||"transform","-framebuffer-1"),width:t,height:e,attachments:Object(A.a)({},36064,this.targetTextures[1])})}}}},{key:"_updateElementIDBuffer",value:function(n){if(this.hasSourceTextures||this.targetTextureVarying){var t=new Float32Array(n);t.forEach(function(n,t,e){e[t]=t}),this.elementIDBuffer?this.elementIDBuffer.setData({data:t}):this.elementIDBuffer=new En(this.gl,{data:t,size:1})}}},{key:"_getShaders",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=this._processVertexShader(n.vs),e=t.vs,l=t.uniforms,i=t.targetTextureType,r=t.inject,u=t.samplerTextureMap,o=Nl([n.inject||{},r]);return this.targetTextureType=i,{vs:e,fs:Kl({version:Nt(e),input:this.targetTextureVarying,inputType:i,output:"transform_output"}),modules:this.hasSourceTextures||this.targetTextureVarying?[Ci].concat(n.modules||[]):n.modules,uniforms:l,inject:o,samplerTextureMap:u}}},{key:"_processVertexShader",value:function(n){return Gi({vs:n,sourceTextureMap:this.sourceTextures[this.currentIndex],targetTextureVarying:this.targetTextureVarying,targetTexture:this.targetTextures[this.currentIndex]})}}]),n}(),Xi="attribute vec2 aClipSpacePosition;\nattribute vec2 aTexCoord;\nattribute vec2 aCoordinate;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main(void) {\n  gl_Position = vec4(aClipSpacePosition, 0., 1.);\n  position = aClipSpacePosition;\n  coordinate = aCoordinate;\n  uv = aTexCoord;\n}\n",Yi=[-1,-1,1,-1,-1,1,1,1],Zi=function(n){function t(n,e){var i;Object(l.a)(this,t);var r=Yi.map(function(n){return-1===n?0:n});return(i=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({},e,{vs:Xi,geometry:new We({drawMode:5,vertexCount:4,attributes:{aClipSpacePosition:{size:2,value:new Float32Array(Yi)},aTexCoord:{size:2,value:new Float32Array(r)},aCoordinate:{size:2,value:new Float32Array(r)}}})})))).setVertexCount(4),i}return Object(sn.a)(t,n),t}(Bi),qi=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.gl,i=t._cachePrograms,r=void 0!==i&&i;Object(l.a)(this,n),M(e),this.gl=e,this.vertexShaders={},this.fragmentShaders={},this.programs={},this._cachePrograms=r}return Object(i.a)(n,[{key:"delete",value:function(){return this}},{key:"getVertexShader",value:function(n,t){M("string"==typeof t),M(this._compareContexts(n,this.gl));var e=this.vertexShaders[t];return e||(e=new zt(n,t),this.vertexShaders[t]=e),e}},{key:"getFragmentShader",value:function(n,t){M("string"==typeof t),M(this._compareContexts(n,this.gl));var e=this.fragmentShaders[t];return e||(e=new Vt(n,t),this.fragmentShaders[t]=e),e}},{key:"getProgram",value:function(n,t){M(this._compareContexts(n,this.gl)),M("string"==typeof t.vs),M("string"==typeof t.fs),M("string"==typeof t.id);var e=this._getProgramKey(t),l=this.programs[e];return l?(this._resetProgram(l),l):(l=this._createNewProgram(n,t),this._cachePrograms&&this._checkProgramProp(l)&&(l._isCached=!0,this.programs[e]=l),l)}},{key:"_getProgramKey",value:function(n){return"".concat(n.id,"-").concat(n.vs,"-").concat(n.fs)}},{key:"_checkProgramProp",value:function(n){return!n.varyings}},{key:"_createNewProgram",value:function(n,t){var e=t.vs,l=t.fs,i=this.getVertexShader(n,e),r=this.getFragmentShader(n,l);return new we(this.gl,Object.assign({},t,{vs:i,fs:r}))}},{key:"_resetProgram",value:function(n,t){n.reset()}},{key:"_compareContexts",value:function(n,t){return(n.gl||n)===(t.gl||t)}}]),n}(),$i=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,n);var i=e.onInitialize,r=void 0===i?function(){}:i,u=e.onFinalize,o=void 0===u?function(){}:u,a=e.useDevicePixels,s=void 0===a||a,c=e.autoResizeDrawingBuffer,h=void 0===c||c;this.props={onInitialize:r,onFinalize:o},this.setProps({autoResizeDrawingBuffer:h,useDevicePixels:s}),M(t instanceof Worker),this.worker=t,this.canvas=null,this.width=null,this.height=null,this._running=!1,this._animationFrameId=null,this._resolveNextFrame=null,this._nextFramePromise=null,this._onMessage=this._onMessage.bind(this),this._onEvent=this._onEvent.bind(this),this._updateFrame=this._updateFrame.bind(this)}return Object(i.a)(n,null,[{key:"createWorker",value:function(n){return function(t){n.setProps({useDevicePixels:!1,autoResizeDrawingBuffer:!1}),t.canvas=null,t.addEventListener("message",function(e){switch(e.data.command){case"start":l=e.data.opts.canvas,i=new Map,l.addEventListener=function(n,e){t.postMessage({command:"addEventListener",type:n}),i.has(n)||i.set(n,[]),i.get(n).push(e)},l.removeEventListener=function(n,e){t.postMessage({command:"removeEventListener",type:n});var l=i.get(n);l&&l.splice(l.indexOf(e),1)},l.dispatchEvent=function(n,t){var e=i.get(n);e&&e.forEach(function(n){return n(t)})},t.canvas=l,n.start(e.data.opts);break;case"stop":n.stop();break;case"resize":t.canvas.width=e.data.width,t.canvas.height=e.data.height;break;case"event":t.canvas.dispatchEvent(e.data.type,e.data.event)}var l,i})}}}]),Object(i.a)(n,[{key:"setProps",value:function(n){return"autoResizeDrawingBuffer"in n&&(this.autoResizeDrawingBuffer=n.autoResizeDrawingBuffer),"useDevicePixels"in n&&(this.useDevicePixels=n.useDevicePixels),this}},{key:"start",value:function(){var n=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._running?this:(this._running=!0,this.worker.onmessage=this._onMessage,V().then(function(){return n._running?(n._createAndTransferCanvas(t),n.props.onInitialize(n)):null}).then(function(){n._running&&(n._animationFrameId=K(n._updateFrame))}),this)}},{key:"stop",value:function(){return this._running&&(Q(this._animationFrameId),this._animationFrameId=null,this._nextFramePromise=null,this._resolveNextFrame=null,this._running=!1,this.props.onFinalize(this)),this.worker.postMessage({command:"stop"}),this}},{key:"waitForRender",value:function(){var n=this;return this._nextFramePromise||(this._nextFramePromise=new Promise(function(t){n._resolveNextFrame=t})),this._nextFramePromise}},{key:"_onMessage",value:function(n){switch(n.data.command){case"addEventListener":this.canvas.addEventListener(n.data.type,this._onEvent);break;case"removeEventListener":this.canvas.removeEventListener(n.data.type,this._onEvent)}}},{key:"_onEvent",value:function(n){var t=this.useDevicePixels&&window.devicePixelRatio||1,e=n.type,l={};for(var i in n){var r=n[i],u=Object(tl.a)(r);"offsetX"!==i&&"offsetY"!==i||(r*=t),"number"!==u&&"boolean"!==u&&"string"!==u||(l[i]=r)}this.worker.postMessage({command:"event",type:e,event:l})}},{key:"_updateFrame",value:function(){this._resizeCanvasDrawingBuffer(),this._resolveNextFrame&&(this._resolveNextFrame(this),this._nextFramePromise=null,this._resolveNextFrame=null),this._animationFrameId=K(this._updateFrame)}},{key:"_createAndTransferCanvas",value:function(n){var t=G(n);t.transferControlToOffscreen||o.error("OffscreenCanvas is not available in your browser.")();var e=t.transferControlToOffscreen();this.worker.postMessage({command:"start",opts:Object.assign({},n,{canvas:e})},[e]),this.canvas=t}},{key:"_resizeCanvasDrawingBuffer",value:function(){if(this.autoResizeDrawingBuffer){var n=this.useDevicePixels&&window.devicePixelRatio||1,t=this.canvas.clientWidth*n,e=this.canvas.clientHeight*n;this.width===t&&this.height===e||(this.width=t,this.height=e,this.worker.postMessage({command:"resize",width:t,height:e}))}}}]),n}(),Ki=function(){function n(t,e){Object(l.a)(this,n);var i=e.id,r=void 0===i?"pass":i;this.id=r,this.gl=t,this.props={enabled:!0,screen:!1,swap:!1},Object.assign(this.props,e)}return Object(i.a)(n,[{key:"setProps",value:function(n){Object.assign(this.props,n)}},{key:"render",value:function(n,t){var e=this;if(this.props.enabled){var l=this.gl,i={gl:l,outputBuffer:n.writeBuffer,inputBuffer:n.readBuffer,animationProps:t,swapBuffers:function(){return n._swapFramebuffers()}};this.props.screen?(i.inputBuffer=i.outputBuffer,i.outputBuffer=wt.getDefaultFramebuffer(l)):this.props.swap&&(i.inputBuffer=n.writeBuffer,i.outputBuffer=n.readBuffer),_(l,{framebuffer:i.outputBuffer},function(){return e._renderPass(i)}),this.props.debug&&i.outputBuffer.log(1,this.id),this.props.swap&&n._swapFramebuffers()}}},{key:"_renderPass",value:function(n){n.gl,n.inputBuffer,n.outputBuffer,n.animationProps}}]),n}(),Qi=function(n){function t(n,e){return Object(l.a)(this,t),e=Array.isArray(e)?{passes:e}:e,Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"composite-pass"},e)))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"render",value:function(){var n=this.props.passes,t=void 0===n?[]:n,e=!0,l=!1,i=void 0;try{for(var r,u=t[Symbol.iterator]();!(e=(r=u.next()).done);e=!0){var o=r.value;o.render.apply(o,arguments)}}catch(n){l=!0,i=n}finally{try{e||null==u.return||u.return()}finally{if(l)throw i}}}}]),t}(Ki),Ji=function(){function n(t){arguments.length>1&&void 0!==arguments[1]&&arguments[1];Object(l.a)(this,n),this.gl=t,this.framebuffer1=new wt(t,{id:"multi-pass-1",stencil:!0}),this.framebuffer2=new wt(t,{id:"multi-pass-2",stencil:!0}),this.reset()}return Object(i.a)(n,[{key:"reset",value:function(){this.framebuffer1.resize(),this.framebuffer2.resize(),this.writeBuffer=this.framebuffer1,this.readBuffer=this.framebuffer2,this.maskActive=!1}},{key:"_swapFramebuffers",value:function(){var n=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=n}}]),n}(),nr=function(n){function t(n,e){var i;return Object(l.a)(this,t),e=Array.isArray(e)?{passes:e}:e,(i=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"multi-pass"},e)))).renderState=new Ji(n,e),i}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"render",value:function(n){this.renderState.reset();var t=this.props.passes,e=void 0===t?[]:t,l=!0,i=!1,r=void 0;try{for(var u,o=e[Symbol.iterator]();!(l=(u=o.next()).done);l=!0){u.value.render(this.renderState,n)}}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}return this}}]),t}(Qi),tr=function(n){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"clear-pass"},e)))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(n){var t=n.gl,e=this.props.clearBits,l=void 0===e?16640:e;t.clear(l)}}]),t}(Ki),er=function(n){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"render-pass"},e)))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(n){var t=n.animationProps,e=this.props,l=e.models,i=void 0===l?[]:l,r=e.drawParams,u=!0,o=!1,a=void 0;try{for(var s,c=i[Symbol.iterator]();!(u=(s=c.next()).done);u=!0){s.value.draw(Object.assign({},r,{animationProps:t}))}}catch(n){o=!0,a=n}finally{try{u||null==c.return||c.return()}finally{if(o)throw a}}}}]),t}(Ki),lr="uniform sampler2D uDiffuseSampler;\nuniform float uOpacity;\n\nvarying vec2 uv;\n\nvoid main() {\n  vec4 texel = texture2D(uDiffuseSampler, uv);\n  gl_FragColor = uOpacity * texel;\n}\n",ir=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"copy-pass",swap:!0},i)))).clipspace=new Zi(n,{id:"copy-pass",fs:lr}),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(n){var t=n.inputBuffer,e=this.props.opacity,l=void 0===e?1:e;this.clipspace.draw({uniforms:{uDiffuseSampler:t,uOpacity:l},parameters:{depthWrite:!1,depthTest:!1}})}}]),t}(Ki),rr="uniform sampler2D uDiffuseSampler;\nuniform float uOpacity;\nvarying vec2 uv;\n\nvoid main() {\n  vec4 texel = texture2D(uDiffuseSampler, uv);\n  gl_FragColor = uOpacity * texel;\n}\n",ur=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(l.a)(this,t),e=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:"texture-pass"},i)));var r=i.texture,u=i.opacity,o=void 0===u?1:u;return e.clipspace=new Zi(n,{id:"texture-pass",fs:rr,uniforms:{uDiffuseSampler:r,uOpacity:o}}),e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(){this.clipspace.draw({parameters:{depthWrite:!1,depthTest:!1}})}}]),t}(Ki),or=function(n){function t(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({swap:!0},e)))}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(n){var t=n.inputBuffer;n.swapBuffers;this.props.model.setUniforms(this.props),this.props.model.draw({uniforms:{texture:t,texSize:[t.width,t.height]},parameters:{depthWrite:!1,depthTest:!1}})}}]),t}(Ki),ar=function(n){function t(n,e){var i,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(l.a)(this,t);var u="".concat(e.name,"-pass");Yl(e);var o=function(n,t,e,l){if(t.filter||t.sampler){var i=fr(t),r=new or(n,{id:e,model:sr(n,t,i,e,l),uniforms:null});return[r]}var u=t.passes||[];return u.map(function(i){var r=fr(t,i),o="".concat(e,"-").concat(u.length+1);return new or(n,Object.assign({id:o,model:sr(n,t,r,o,l),uniforms:i.uniforms},l))})}(n,e,u,r);return(i=Object(un.a)(this,Object(on.a)(t).call(this,n,Object.assign({id:u,passes:o},r)))).module=e,i}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"_renderPass",value:function(n){var t=n.inputBuffer,e=n.swapBuffers,l=!0,i=!0,r=!1,u=void 0;try{for(var o,a=this.module.passes[Symbol.iterator]();!(i=(o=a.next()).done);i=!0){var s=o.value;l||e(),l=!1,s.uniforms&&s.model.setUniforms(s.uniforms),s.model.draw({uniforms:{texture:t,texSize:[t.width,t.height]},parameters:{depthWrite:!1,depthTest:!1}})}}catch(n){r=!0,u=n}finally{try{i||null==a.return||a.return()}finally{if(r)throw u}}}}]),t}(Qi);function sr(n,t,e,l,i){var r=new Zi(n,{id:l,fs:e,modules:[t]}),u=Object.assign(t.getUniforms(),t.getUniforms(i));return r.setUniforms(u),r}var cr=function(n){return"uniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ".concat(n,"(gl_FragColor, texSize, texCoord);\n}\n")},hr=function(n){return"uniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ".concat(n,"(texture, texSize, texCoord);\n}\n")};function fr(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n;if(t.filter){var e="string"==typeof t.filter?t.filter:"".concat(n.name,"_filterColor");return cr(e)}if(t.sampler){var l="string"==typeof t.sampler?t.sampler:"".concat(n.name,"_sampleColor");return hr(l)}return null}var dr={x:[2,0,1],y:[0,1,2],z:[1,2,0]},pr=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("truncated-code-geometry"):e,r=function(n){for(var t=n.bottomRadius,e=void 0===t?0:t,l=n.topRadius,i=void 0===l?0:l,r=n.height,u=void 0===r?1:r,o=n.nradial,a=void 0===o?10:o,s=n.nvertical,c=void 0===s?10:s,h=n.verticalAxis,f=void 0===h?"y":h,d=n.topCap,p=void 0!==d&&d,g=n.bottomCap,v=void 0!==g&&g,m=(p?2:0)+(v?2:0),_=(a+1)*(c+1+m),b=Math.atan2(e-i,u),y=Math.sin,x=Math.cos,w=Math.PI,E=x(b),P=y(b),O=p?-2:0,S=c+(v?2:0),A=a+1,T=new Uint16Array(a*(c+m)*6),C=dr[f],L=new Float32Array(3*_),M=new Float32Array(3*_),j=new Float32Array(2*_),R=0,I=0,k=O;k<=S;k++){var F=k/c,N=u*F,D=void 0;k<0?(N=0,F=1,D=e):k>c?(N=u,F=1,D=i):D=e+k/c*(i-e),-2!==k&&k!==c+2||(D=0,F=0),N-=u/2;for(var B=0;B<A;B++){var U=y(B*w*2/a),z=x(B*w*2/a);L[R+C[0]]=U*D,L[R+C[1]]=N,L[R+C[2]]=z*D,M[R+C[0]]=k<0||k>c?0:U*E,M[R+C[1]]=k<0?-1:k>c?1:P,M[R+C[2]]=k<0||k>c?0:z*E,j[I+0]=B/a,j[I+1]=F,I+=2,R+=3}}for(var V=0;V<c+m;V++)for(var G=0;G<a;G++){var W=6*(V*a+G);T[W+0]=A*(V+0)+0+G,T[W+1]=A*(V+0)+1+G,T[W+2]=A*(V+1)+1+G,T[W+3]=A*(V+0)+0+G,T[W+4]=A*(V+1)+1+G,T[W+5]=A*(V+1)+0+G}return{indices:T,attributes:{POSITION:{size:3,value:L},NORMAL:{size:3,value:M},TEXCOORD_0:{size:2,value:j}}}}(n),u=r.indices,o=r.attributes;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,indices:u,attributes:T({},o,n.attributes)})))}return Object(sn.a)(t,n),t}(We);var gr=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("cone-geometry"):e,r=n.radius,u=void 0===r?1:r,o=n.cap,a=void 0===o||o;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,topRadius:0,topCap:Boolean(a),bottomCap:Boolean(a),bottomRadius:u})))}return Object(sn.a)(t,n),t}(pr),vr=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),mr=new Float32Array([-1,-1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,1,1,1,1,-1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,-1,1,-1]),_r=new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0]),br=new Float32Array([0,0,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,1,0,1,1,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1]),yr={POSITION:{size:3,value:new Float32Array(mr)},NORMAL:{size:3,value:new Float32Array(_r)},TEXCOORD_0:{size:2,value:new Float32Array(br)}},xr=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("cube-geometry"):e;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,indices:{size:1,value:new Uint16Array(vr)},attributes:T({},yr,n.attributes)})))}return Object(sn.a)(t,n),t}(We),wr=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("cylinder-geometry"):e,r=n.radius,u=void 0===r?1:r;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,bottomRadius:u,topRadius:u})))}return Object(sn.a)(t,n),t}(pr),Er=[-1,0,0,0,1,0,0,0,-1,0,0,1,0,-1,0,1,0,0],Pr=[3,4,5,3,5,1,3,1,0,3,0,4,4,0,2,4,2,5,2,0,1,5,2,1],Or=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("ico-sphere-geometry"):e,r=function(){var n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).iterations,t=void 0===n?0:n,e=Math.PI,l=2*e,i=[].concat(Er),r=[].concat(Pr);i.push(),r.push();for(var u=function(){var n={};return function(t,e){var l=(t*=3)<(e*=3)?t:e,r=t>e?t:e,u="".concat(l,"|").concat(r);if(u in n)return n[u];var o=i[t],a=i[t+1],s=i[t+2],c=i[e],h=i[e+1],f=i[e+2],d=(o+c)/2,p=(a+h)/2,g=(s+f)/2,v=Math.sqrt(d*d+p*p+g*g);return d/=v,p/=v,g/=v,i.push(d,p,g),n[u]=i.length/3-1}}(),o=0;o<t;o++){for(var a=[],s=0;s<r.length;s+=3){var c=u(r[s+0],r[s+1]),h=u(r[s+1],r[s+2]),f=u(r[s+2],r[s+0]);a.push(f,r[s+0],c,c,r[s+1],h,h,r[s+2],f,c,h,f)}r=a}for(var d=new Array(3*r.length),p=new Array(2*r.length),g=r.length-3;g>=0;g-=3){var v=r[g+0],m=r[g+1],_=r[g+2],b=3*v,y=3*m,x=3*_,w=2*v,E=2*m,P=2*_,O=i[b+0],S=i[b+1],A=i[b+2],T=Math.acos(A/Math.sqrt(O*O+S*S+A*A)),C=Math.atan2(S,O)+e,L=T/e,M=1-C/l,j=i[y+0],R=i[y+1],I=i[y+2],k=Math.acos(I/Math.sqrt(j*j+R*R+I*I)),F=Math.atan2(R,j)+e,N=k/e,D=1-F/l,B=i[x+0],U=i[x+1],z=i[x+2],V=Math.acos(z/Math.sqrt(B*B+U*U+z*z)),G=Math.atan2(U,B)+e,W=V/e,H=1-G/l,X=[B-j,U-R,z-I],Y=[O-j,S-R,A-I],Z=new Xe.a(X).cross(Y).normalize(),q=void 0;(0===M||0===D||0===H)&&(0===M||M>.5)&&(0===D||D>.5)&&(0===H||H>.5)&&(i.push(i[b+0],i[b+1],i[b+2]),q=i.length/3-1,r.push(q),p[2*q+0]=1,p[2*q+1]=L,d[3*q+0]=Z.x,d[3*q+1]=Z.y,d[3*q+2]=Z.z,i.push(i[y+0],i[y+1],i[y+2]),q=i.length/3-1,r.push(q),p[2*q+0]=1,p[2*q+1]=N,d[3*q+0]=Z.x,d[3*q+1]=Z.y,d[3*q+2]=Z.z,i.push(i[x+0],i[x+1],i[x+2]),q=i.length/3-1,r.push(q),p[2*q+0]=1,p[2*q+1]=W,d[3*q+0]=Z.x,d[3*q+1]=Z.y,d[3*q+2]=Z.z),d[b+0]=d[y+0]=d[x+0]=Z.x,d[b+1]=d[y+1]=d[x+1]=Z.y,d[b+2]=d[y+2]=d[x+2]=Z.z,p[w+0]=M,p[w+1]=L,p[E+0]=D,p[E+1]=N,p[P+0]=H,p[P+1]=W}return{indices:{size:1,value:new Uint16Array(r)},attributes:{POSITION:{size:3,value:new Float32Array(i)},NORMAL:{size:3,value:new Float32Array(d)},TEXCOORD_0:{size:2,value:new Float32Array(p)}}}}(n),u=r.indices,o=r.attributes;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,indices:u,attributes:T({},o,n.attributes)})))}return Object(sn.a)(t,n),t}(We);var Sr=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("plane-geometry"):e,r=function(n){var t=n.type,e=void 0===t?"x,y":t,l=n.offset,i=void 0===l?0:l,r=n.flipCull,u=void 0!==r&&r,o=n.unpack,a=void 0!==o&&o,s=e.split(","),c=n["".concat(s[0],"len")],h=n["".concat(s[1],"len")],f=n["n".concat(s[0])]||1,d=n["n".concat(s[1])]||1,p=(f+1)*(d+1),g=new Float32Array(3*p),v=new Float32Array(3*p),m=new Float32Array(2*p);u&&(c=-c);for(var _=0,b=0,y=0;y<=d;y++)for(var x=0;x<=f;x++){var w=x/f,E=y/d;switch(m[_+0]=u?1-w:w,m[_+1]=E,e){case"x,y":g[b+0]=c*w-.5*c,g[b+1]=h*E-.5*h,g[b+2]=i,v[b+0]=0,v[b+1]=0,v[b+2]=u?1:-1;break;case"x,z":g[b+0]=c*w-.5*c,g[b+1]=i,g[b+2]=h*E-.5*h,v[b+0]=0,v[b+1]=u?1:-1,v[b+2]=0;break;case"y,z":g[b+0]=i,g[b+1]=c*w-.5*c,g[b+2]=h*E-.5*h,v[b+0]=u?1:-1,v[b+1]=0,v[b+2]=0}_+=2,b+=3}for(var P=f+1,O=new Uint16Array(f*d*6),S=0;S<d;S++)for(var A=0;A<f;A++){var T=6*(S*f+A);O[T+0]=(S+0)*P+A,O[T+1]=(S+1)*P+A,O[T+2]=(S+0)*P+A+1,O[T+3]=(S+1)*P+A,O[T+4]=(S+1)*P+A+1,O[T+5]=(S+0)*P+A+1}var C={indices:{size:1,value:O},attributes:{POSITION:{size:3,value:g},NORMAL:{size:3,value:v},TEXCOORD_0:{size:2,value:m}}};return a?function(n){var t=n.indices,e=n.attributes;if(!t)return n;for(var l=e.POSITION,i=e.NORMAL,r=e.TEXCOORD_0,u=new Float32Array(3*t.length),o=new Float32Array(3*t.length),a=new Float32Array(2*t.length),s=0;s<t.length;++s){var c=t[s];u[3*s+0]=l[3*c+0],u[3*s+1]=l[3*c+1],u[3*s+2]=l[3*c+2],o[3*s+0]=i[3*c+0],o[3*s+1]=i[3*c+1],o[3*s+2]=i[3*c+2],a[2*s+0]=r[2*c+0],a[2*s+1]=r[2*c+1]}return{attributes:{POSITION:u,NORMAL:o,TEXCOORD_0:a}}}(C):C}(n),u=r.indices,o=r.attributes;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,indices:u,attributes:T({},o,n.attributes)})))}return Object(sn.a)(t,n),t}(We);var Ar=function(n){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var e=n.id,i=void 0===e?R("sphere-geometry"):e,r=function(n){var t=n.nlat,e=void 0===t?10:t,l=n.nlong,i=void 0===l?10:l,r=n.radius,u=void 0===r?1:r,o=Math.PI-0,a=2*Math.PI-0,s=(e+1)*(i+1);if("number"==typeof u){var c=u;u=function(n,t,e,l,i){return c}}for(var h=new Float32Array(3*s),f=new Float32Array(3*s),d=new Float32Array(2*s),p=new Uint16Array(e*i*6),g=0;g<=e;g++)for(var v=0;v<=i;v++){var m=v/i,_=g/e,b=v+g*(i+1),y=2*b,x=3*b,w=a*m,E=o*_,P=Math.sin(w),O=Math.cos(w),S=Math.sin(E),A=Math.cos(E),T=O*S,C=A,L=P*S,M=u(T,C,L,m,_);h[x+0]=M*T,h[x+1]=M*C,h[x+2]=M*L,f[x+0]=T,f[x+1]=C,f[x+2]=L,d[y+0]=m,d[y+1]=1-_}for(var j=e+1,R=0;R<e;R++)for(var I=0;I<i;I++){var k=6*(R*i+I);p[k+0]=I*j+R,p[k+1]=I*j+R+1,p[k+2]=(I+1)*j+R,p[k+3]=(I+1)*j+R,p[k+4]=I*j+R+1,p[k+5]=(I+1)*j+R+1}return{indices:{size:1,value:p},attributes:{POSITION:{size:3,value:h},NORMAL:{size:3,value:f},TEXCOORD_0:{size:2,value:d}}}}(n),u=r.indices,o=r.attributes;return Object(un.a)(this,Object(on.a)(t).call(this,T({},n,{id:i,indices:u,attributes:T({},o,n.attributes)})))}return Object(sn.a)(t,n),t}(We);var Tr={ambient:.35,diffuse:.6,shininess:32,specularColor:[30,30,30]},Cr=function(n){function t(n){var e;return Object(l.a)(this,t),e=Object(un.a)(this,Object(on.a)(t).call(this,n)),n=Object.assign({},Tr,n),Object.assign(Object(an.a)(e),n),e}return Object(sn.a)(t,n),t}(He),Lr=function(n){function t(){return Object(l.a)(this,t),Object(un.a)(this,Object(on.a)(t).apply(this,arguments))}return Object(sn.a)(t,n),t}(He),Mr=function(){function n(t){Object(l.a)(this,n);var e=t.id;this.id=e||R(this.constructor.name),this.display=!0,this.position=new Xe.a,this.rotation=new Xe.a,this.scale=new Xe.a(1,1,1),this.matrix=new oi.a,this.userData={},this.props={},this._setScenegraphNodeProps(t)}return Object(i.a)(n,[{key:"delete",value:function(){}},{key:"setProps",value:function(n){return this._setScenegraphNodeProps(n),this}},{key:"toString",value:function(){return"{type: ScenegraphNode, id: ".concat(this.id,")}")}},{key:"setPosition",value:function(n){return M(3===n.length,"setPosition requires vector argument"),this.position=n,this}},{key:"setRotation",value:function(n){return M(3===n.length,"setRotation requires vector argument"),this.rotation=n,this}},{key:"setScale",value:function(n){return M(3===n.length,"setScale requires vector argument"),this.scale=n,this}},{key:"setMatrix",value:function(n){!(arguments.length>1&&void 0!==arguments[1])||arguments[1]?this.matrix.copy(n):this.matrix=n}},{key:"setMatrixComponents",value:function(n){var t=n.position,e=n.rotation,l=n.scale,i=n.update,r=void 0===i||i;return t&&this.setPosition(t),e&&this.setRotation(e),l&&this.setScale(l),r&&this.updateMatrix(),this}},{key:"updateMatrix",value:function(){var n=this.position,t=this.rotation,e=this.scale;return this.matrix.identity(),this.matrix.translate(n),this.matrix.rotateXYZ(t),this.matrix.scale(e),this}},{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.position,e=n.rotation,l=n.scale;return t&&this.setPosition(t),e&&this.setRotation(e),l&&this.setScale(l),this.updateMatrix(),this}},{key:"getCoordinateUniforms",value:function(n,t){M(n),t=t||this.matrix;var e=new oi.a(n).multiplyRight(t),l=e.invert(),i=l.transpose();return{viewMatrix:n,modelMatrix:t,objectMatrix:t,worldMatrix:e,worldInverseMatrix:l,worldInverseTransposeMatrix:i}}},{key:"transform",value:function(){if(this.parent){var n=this.parent;this.endPosition.set(this.position.add(n.endPosition)),this.endRotation.set(this.rotation.add(n.endRotation)),this.endScale.set(this.scale.add(n.endScale))}else this.endPosition.set(this.position),this.endRotation.set(this.rotation),this.endScale.set(this.scale);for(var t=this.children,e=0;e<t.length;++e)t[e].transform();return this}},{key:"_setScenegraphNodeProps",value:function(n){"display"in n&&(this.display=n.display),"position"in n&&this.setPosition(n.position),"rotation"in n&&this.setPosition(n.rotation),"scale"in n&&this.setScale(n.scale),"matrix"in n&&this.setPosition(n.matrix),Object.assign(this.props,n)}}]),n}(),jr=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object(l.a)(this,t);var i=(e=Array.isArray(e)?{children:e}:e).children,r=void 0===i?[]:i;return r.every(function(n){return M(n instanceof Mr)}),(n=Object(un.a)(this,Object(on.a)(t).call(this,e))).children=r,n}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"add",value:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];for(var l=0,i=t;l<i.length;l++){var r=i[l];Array.isArray(r)?this.add.apply(this,Object(f.a)(r)):this.children.push(r)}return this}},{key:"remove",value:function(n){var t=this.children,e=t.indexOf(n);return e>-1&&t.splice(e,1),this}},{key:"removeAll",value:function(){return this.children=[],this}},{key:"delete",value:function(){this.children.forEach(function(n){return n.delete()}),this.removeAll(),Gt(Object(on.a)(t.prototype),"delete",this).call(this)}},{key:"traverse",value:function(n){var e=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).worldMatrix,l=void 0===e?new oi.a:e,i=new oi.a(l).multiplyRight(this.matrix),r=!0,u=!1,o=void 0;try{for(var a,s=this.children[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var c=a.value;c instanceof t?c.traverse(n,{worldMatrix:i}):n(c,{worldMatrix:i})}}catch(n){u=!0,o=n}finally{try{r||null==s.return||s.return()}finally{if(u)throw o}}}},{key:"traverseReverse",value:function(n,t){return o.warn("traverseReverse is not reverse")(),this.traverse(n,t)}}]),t}(Mr),Rr=function(n){function t(n){var e,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(l.a)(this,t),(e=Object(un.a)(this,Object(on.a)(t).call(this,i))).onBeforeRender=null,e.AfterRender=null,n instanceof Bi?(e.model=n,e._setModelNodeProps(i)):e.model=new Bi(n,i),e.managedResources=i.managedResources||[],e}return Object(sn.a)(t,n),Object(i.a)(t,[{key:"setProps",value:function(n){return Gt(Object(on.a)(t.prototype),"setProps",this).call(this,n),this._setModelNodeProps(n),this}},{key:"delete",value:function(){this.model&&(this.model.delete(),this.model=null),this.managedResources.forEach(function(n){return n.delete()}),this.managedResources=[]}},{key:"draw",value:function(){var n;return(n=this.model).draw.apply(n,arguments)}},{key:"setUniforms",value:function(){var n;return(n=this.model).setUniforms.apply(n,arguments),this}},{key:"setAttributes",value:function(){var n;return(n=this.model).setAttributes.apply(n,arguments),this}},{key:"updateModuleSettings",value:function(){var n;return(n=this.model).updateModuleSettings.apply(n,arguments),this}},{key:"_setModelNodeProps",value:function(n){this.model.setProps(n)}}]),t}(Mr),Ir=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(l.a)(this,t),(n=Object(un.a)(this,Object(on.a)(t).call(this,e))).projectionMatrix=e.projectionMatrix,n}return Object(sn.a)(t,n),t}(Mr);e.d(t,"isWebGL",function(){return Y}),e.d(t,"isWebGL2",function(){return Z}),e.d(t,"lumaStats",function(){return s}),e.d(t,"createGLContext",function(){return At}),e.d(t,"destroyGLContext",function(){return Ct}),e.d(t,"resizeGLContext",function(){return Lt}),e.d(t,"setGLContextDefaults",function(){return St}),e.d(t,"getContextInfo",function(){return dt}),e.d(t,"getGLContextInfo",function(){return ft}),e.d(t,"getContextLimits",function(){return ht}),e.d(t,"FEATURES",function(){return pt}),e.d(t,"hasFeature",function(){return vt}),e.d(t,"hasFeatures",function(){return mt}),e.d(t,"getFeatures",function(){return _t}),e.d(t,"canCompileGLGSExtension",function(){return xt}),e.d(t,"cloneTextureFrom",function(){return Et}),e.d(t,"getKeyValue",function(){return ln}),e.d(t,"getKey",function(){return rn}),e.d(t,"setContextDefaults",function(){return St}),e.d(t,"glGetDebugInfo",function(){return W}),e.d(t,"trackContextState",function(){return v.a}),e.d(t,"resetParameters",function(){return c.d}),e.d(t,"getParameter",function(){return c.b}),e.d(t,"getParameters",function(){return c.c}),e.d(t,"setParameter",function(){return c.e}),e.d(t,"setParameters",function(){return g}),e.d(t,"withParameters",function(){return _}),e.d(t,"getModifiedParameters",function(){return c.a}),e.d(t,"Buffer",function(){return En}),e.d(t,"Shader",function(){return Ut}),e.d(t,"VertexShader",function(){return zt}),e.d(t,"FragmentShader",function(){return Vt}),e.d(t,"Program",function(){return we}),e.d(t,"Framebuffer",function(){return wt}),e.d(t,"Renderbuffer",function(){return Wn}),e.d(t,"Texture2D",function(){return Rn}),e.d(t,"TextureCube",function(){return Dn}),e.d(t,"clear",function(){return Jn}),e.d(t,"clearBuffer",function(){return nt}),e.d(t,"readPixelsToArray",function(){return et}),e.d(t,"readPixelsToBuffer",function(){return lt}),e.d(t,"copyToDataUrl",function(){return it}),e.d(t,"copyToImage",function(){return rt}),e.d(t,"copyToTexture",function(){return ut}),e.d(t,"blit",function(){return ot}),e.d(t,"Query",function(){return Ee}),e.d(t,"Texture3D",function(){return Un}),e.d(t,"TransformFeedback",function(){return Pe}),e.d(t,"VertexArrayObject",function(){return Le}),e.d(t,"VertexArray",function(){return Re}),e.d(t,"UniformBufferLayout",function(){return Ne}),e.d(t,"setPathPrefix",function(){return Ln}),e.d(t,"loadFile",function(){return Mn}),e.d(t,"loadImage",function(){return jn}),e.d(t,"_Accessor",function(){return bn}),e.d(t,"_clearBuffer",function(){return nt}),e.d(t,"Geometry",function(){return We}),e.d(t,"Material",function(){return He}),e.d(t,"AmbientLight",function(){return Qe}),e.d(t,"DirectionalLight",function(){return Je}),e.d(t,"PointLight",function(){return nl}),e.d(t,"AnimationLoop",function(){return ll}),e.d(t,"encodePickingColor",function(){return rl}),e.d(t,"decodePickingColor",function(){return ul}),e.d(t,"getNullPickingColor",function(){return ol}),e.d(t,"Model",function(){return Bi}),e.d(t,"Transform",function(){return Hi}),e.d(t,"ClipSpace",function(){return Zi}),e.d(t,"_ShaderCache",function(){return qi}),e.d(t,"_AnimationLoopProxy",function(){return $i}),e.d(t,"_MultiPassRenderer",function(){return nr}),e.d(t,"_RenderState",function(){return Ji}),e.d(t,"_Pass",function(){return Ki}),e.d(t,"_CompositePass",function(){return Qi}),e.d(t,"_ClearPass",function(){return tr}),e.d(t,"_RenderPass",function(){return er}),e.d(t,"_CopyPass",function(){return ir}),e.d(t,"_TexturePass",function(){return ur}),e.d(t,"_ShaderModulePass",function(){return ar}),e.d(t,"ConeGeometry",function(){return gr}),e.d(t,"CubeGeometry",function(){return xr}),e.d(t,"CylinderGeometry",function(){return wr}),e.d(t,"IcoSphereGeometry",function(){return Or}),e.d(t,"PlaneGeometry",function(){return Sr}),e.d(t,"SphereGeometry",function(){return Ar}),e.d(t,"TruncatedConeGeometry",function(){return pr}),e.d(t,"PhongMaterial",function(){return Cr}),e.d(t,"PBRMaterial",function(){return Lr}),e.d(t,"ScenegraphNode",function(){return Mr}),e.d(t,"GroupNode",function(){return jr}),e.d(t,"ModelNode",function(){return Rr}),e.d(t,"CameraNode",function(){return Ir}),e.d(t,"registerShaderModules",function(){return vl}),e.d(t,"setDefaultShaderModules",function(){return gl}),e.d(t,"assembleShaders",function(){return Ul}),e.d(t,"combineInjects",function(){return Nl}),e.d(t,"normalizeShaderModule",function(){return Yl}),e.d(t,"fp32",function(){return ti}),e.d(t,"fp64",function(){return ui}),e.d(t,"project",function(){return hi}),e.d(t,"lights",function(){return di}),e.d(t,"dirlight",function(){return mi}),e.d(t,"picking",function(){return bi}),e.d(t,"diffuse",function(){return xi}),e.d(t,"gouraudlighting",function(){return Ei}),e.d(t,"phonglighting",function(){return Pi}),e.d(t,"pbr",function(){return Ti}),e.d(t,"_transform",function(){return Ci}),e.d(t,"MODULAR_SHADERS",function(){return Li}),e.d(t,"getQualifierDetails",function(){return $l}),e.d(t,"getPassthroughFS",function(){return Kl}),e.d(t,"typeToChannelSuffix",function(){return Ql}),e.d(t,"typeToChannelCount",function(){return Jl}),e.d(t,"convertToVec4",function(){return ni}),e.d(t,"log",function(){return o}),e.d(t,"assert",function(){return M}),e.d(t,"uid",function(){return R}),e.d(t,"self",function(){return u.c}),e.d(t,"window",function(){return u.d}),e.d(t,"global",function(){return u.b}),e.d(t,"document",function(){return u.a})},function(n,t,e){"use strict";function l(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";function l(n,t){for(var e=0;e<t.length;e++){var l=t[e];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(n,l.key,l)}}function i(n,t,e){return t&&l(n.prototype,t),e&&l(n,e),n}e.d(t,"a",function(){return i})},function(n,t,e){"use strict";e.r(t);var l=e(48),i=new(e(123).a)({id:"deck"}).enable();if(l.a.deck&&"7.0.3"!==l.a.deck.VERSION)throw new Error(`deck.gl - multiple versions detected: ${l.a.deck.VERSION} vs 7.0.3`);l.a.deck||(i.log(0,"deck.gl 7.0.3 - set deck.log.priority=1 (or higher) to trace attribute updates")(),l.a.deck=l.a.deck||{VERSION:"7.0.3",version:"7.0.3",log:i}),console.table||(console.table=(()=>{}));var r=e(1);const u={LNG_LAT:1,LNGLAT_AUTO_OFFSET:4,METER_OFFSETS:2,LNGLAT_OFFSETS:3,IDENTITY:0};var o=`${Object.keys(u).map(n=>`const float COORDINATE_SYSTEM_${n} = ${u[n]}.;`).join("")}\n\nuniform float project_uCoordinateSystem;\nuniform float project_uScale;\nuniform bool project_uWrapLongitude;\nuniform float project_uAntimeridian;\nuniform vec3 project_uCommonUnitsPerMeter;\nuniform vec3 project_uCommonUnitsPerWorldUnit;\nuniform vec3 project_uCommonUnitsPerWorldUnit2;\nuniform vec4 project_uCenter;\nuniform mat4 project_uModelMatrix;\nuniform mat4 project_uViewProjectionMatrix;\nuniform vec2 project_uViewportSize;\nuniform float project_uDevicePixelRatio;\nuniform float project_uFocalDistance;\nuniform vec3 project_uCameraPosition;\nuniform vec2 project_uCoordinateOrigin;\n\nconst float TILE_SIZE = 512.0;\nconst float PI = 3.1415926536;\nconst float WORLD_SCALE = TILE_SIZE / (PI * 2.0);\nconst vec2 ZERO_64_XY_LOW = vec2(0.0, 0.0);\n\n//\n// Scaling offsets - scales meters to "world distance"\n// Note the scalar version of project_size is for scaling the z component only\n//\nfloat project_size(float meters) {\n  return meters * project_uCommonUnitsPerMeter.z;\n}\n\nvec2 project_size(vec2 meters) {\n  return meters * project_uCommonUnitsPerMeter.xy;\n}\n\nvec3 project_size(vec3 meters) {\n  return meters * project_uCommonUnitsPerMeter;\n}\n\nvec4 project_size(vec4 meters) {\n  return vec4(meters.xyz * project_uCommonUnitsPerMeter, meters.w);\n}\n\n//\n// Projecting normal - transform deltas from current coordinate system to\n// normals in the worldspace\n//\nvec3 project_normal(vec3 vector) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    return normalize(vector * project_uCommonUnitsPerWorldUnit);\n  }\n  // Apply model matrix\n  vec4 normal_modelspace = project_uModelMatrix * vec4(vector, 0.0);\n  return normalize(normal_modelspace.xyz * project_uCommonUnitsPerMeter);\n}\n\nvec4 project_offset_(vec4 offset) {\n  float dy = offset.y;\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    dy = clamp(dy, -1., 1.);\n  }\n  vec3 commonUnitsPerWorldUnit = project_uCommonUnitsPerWorldUnit + project_uCommonUnitsPerWorldUnit2 * dy;\n  return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);\n}\n\n//\n// Projecting positions - non-linear projection: lnglats => unit tile [0-1, 0-1]\n//\nvec2 project_mercator_(vec2 lnglat) {\n  float x = lnglat.x;\n  if (project_uWrapLongitude) {\n    x = mod(x - project_uAntimeridian, 360.0) + project_uAntimeridian;\n  }\n  return vec2(\n    radians(x) + PI,\n    PI - log(tan_fp32(PI * 0.25 + radians(lnglat.y) * 0.5))\n  );\n}\n\n//\n// Projects lnglats (or meter offsets, depending on mode) to common space\n//\nvec4 project_position(vec4 position, vec2 position64xyLow) {\n  // TODO - why not simply subtract center and fall through?\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNG_LAT) {\n    return project_uModelMatrix * vec4(\n      project_mercator_(position.xy) * WORLD_SCALE * project_uScale,\n      project_size(position.z),\n      position.w\n    );\n  }\n\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    // Subtract high part of 64 bit value. Convert remainder to float32, preserving precision.\n    float X = position.x - project_uCoordinateOrigin.x;\n    float Y = position.y - project_uCoordinateOrigin.y;\n    return project_offset_(vec4(X + position64xyLow.x, Y + position64xyLow.y, position.z, position.w));\n  }\n\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    return project_offset_(position);\n  }\n\n  // METER_OFFSETS or IDENTITY\n  // Apply model matrix\n  vec4 position_modelspace = project_uModelMatrix * position;\n  return project_offset_(position_modelspace);\n}\n\nvec4 project_position(vec4 position) {\n  return project_position(position, ZERO_64_XY_LOW);\n}\n\nvec3 project_position(vec3 position, vec2 position64xyLow) {\n  vec4 projected_position = project_position(vec4(position, 1.0), position64xyLow);\n  return projected_position.xyz;\n}\n\nvec3 project_position(vec3 position) {\n  vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_XY_LOW);\n  return projected_position.xyz;\n}\n\nvec2 project_position(vec2 position) {\n  vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_XY_LOW);\n  return projected_position.xy;\n}\n\n//\n// Projects from "world" coordinates to clip space.\n// Uses project_uViewProjectionMatrix\n//\nvec4 project_common_position_to_clipspace(vec4 position) {\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_METER_OFFSETS ||\n    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {\n    // Needs to be divided with project_uCommonUnitsPerMeter\n    position.w *= project_uCommonUnitsPerMeter.z;\n  }\n  return project_uViewProjectionMatrix * position + project_uCenter;\n}\n\n// Returns a clip space offset that corresponds to a given number of screen pixels\nvec2 project_pixel_size_to_clipspace(vec2 pixels) {\n  vec2 offset = pixels / project_uViewportSize * project_uDevicePixelRatio * 2.0;\n  return offset * project_uFocalDistance;\n}\n\nfloat project_size_to_pixel(float meters) {\n  return project_size(meters);\n}\nfloat project_pixel_size(float pixels) {\n  return pixels;\n}\nvec2 project_pixel_size(vec2 pixels) {\n  return pixels;\n}\n\n// Deprecated, remove in v8\nfloat project_scale(float meters) {\n  return project_size(meters);\n}\nvec2 project_scale(vec2 meters) {\n  return project_size(meters);\n}\nvec3 project_scale(vec3 meters) {\n  return project_size(meters);\n}\nvec4 project_scale(vec4 meters) {\n  return project_size(meters);\n}\nvec4 project_to_clipspace(vec4 position) {\n  return project_common_position_to_clipspace(position);\n}\nvec4 project_pixel_to_clipspace(vec2 pixels) {\n  return vec4(project_pixel_size_to_clipspace(pixels), 0.0, 0.0);\n}\n`,a=e(11),s=e(26);const c={LNGLAT:1,LNGLAT_DEPRECATED:5,METER_OFFSETS:2,METERS:2,LNGLAT_OFFSETS:3,IDENTITY:0},h={click:{handler:"onClick"},panstart:{handler:"onDragStart"},panmove:{handler:"onDrag"},panend:{handler:"onDragEnd"}};function f(n,t){if(n===t)return!0;if(Array.isArray(n)){const e=n.length;if(!t||t.length!==e)return!1;for(let l=0;l<e;l++)if(n[l]!==t[l])return!1;return!0}return!1}function d(n){let t,e={};return l=>{for(const i in l)if(!f(l[i],e[i])){t=n(l),e=l;break}return t}}function p(n,t){if(!n)throw new Error(t||"deck.gl: assertion failed.")}const g=[0,0,0,0],v=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0],m=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],_=[0,0,0],b=[0,0,0],y=12,x=d(function({viewport:n,devicePixelRatio:t,coordinateSystem:e,coordinateOrigin:l,wrapLongitude:i}){const r=n.zoom,{projectionCenter:o,viewProjectionMatrix:h,cameraPos:f,shaderCoordinateSystem:d,shaderCoordinateOrigin:m}=function({viewport:n,coordinateSystem:t,coordinateOrigin:e,coordinateZoom:l}){const{viewMatrixUncentered:i}=n;let{viewMatrix:r}=n;const{projectionMatrix:o}=n;let h,{viewProjectionMatrix:f}=n,d=n.cameraPosition,p=function(n){switch(n){case c.LNGLAT:case c.LNGLAT_EXPERIMENTAL:default:return u.LNGLAT_AUTO_OFFSET;case c.LNGLAT_DEPRECATED:return u.LNG_LAT;case c.METER_OFFSETS:case c.METERS:return u.METER_OFFSETS;case c.LNGLAT_OFFSETS:return u.LNGLAT_OFFSETS;case c.IDENTITY:return u.IDENTITY}}(t),m=e;if(p===u.LNGLAT_AUTO_OFFSET)if(l<y)p=u.LNG_LAT;else{const t=Math.fround(n.longitude),e=Math.fround(n.latitude);m=[t,e]}switch(p){case u.IDENTITY:case u.LNG_LAT:h=g;break;case u.LNGLAT_OFFSETS:case u.METER_OFFSETS:case u.LNGLAT_AUTO_OFFSET:const t=n.projectFlat(m,Math.pow(2,l));d=[d[0]-t[0],d[1]-t[1],d[2]],h=s.c([],[t[0],t[1],0,1],f),r=i||r,f=a.g([],o,r),f=a.g([],f,v);break;default:throw new Error("Unknown projection mode")}return{viewMatrix:r,viewProjectionMatrix:f,projectionCenter:h,cameraPos:d,shaderCoordinateSystem:p,shaderCoordinateOrigin:m}}({coordinateSystem:e,coordinateOrigin:l,coordinateZoom:r,viewport:n});p(h,"Viewport missing modelViewProjectionMatrix");const b=n.getDistanceScales(),x=[n.width*t,n.height*t],w={project_uCoordinateSystem:d,project_uCenter:o,project_uWrapLongitude:i,project_uAntimeridian:(n.longitude||0)-180,project_uViewportSize:x,project_uDevicePixelRatio:t,project_uFocalDistance:n.focalDistance||1,project_uCommonUnitsPerMeter:b.pixelsPerMeter,project_uCommonUnitsPerWorldUnit:b.pixelsPerMeter,project_uCommonUnitsPerWorldUnit2:_,project_uScale:n.scale,project_uViewProjectionMatrix:h,project_uCameraPosition:f},E=n.getDistanceScales(m);switch(d){case u.METER_OFFSETS:w.project_uCommonUnitsPerWorldUnit=E.pixelsPerMeter,w.project_uCommonUnitsPerWorldUnit2=E.pixelsPerMeter2;break;case u.LNGLAT_AUTO_OFFSET:w.project_uCoordinateOrigin=m;case u.LNG_LAT:case u.LNGLAT_OFFSETS:w.project_uCommonUnitsPerWorldUnit=E.pixelsPerDegree,w.project_uCommonUnitsPerWorldUnit2=E.pixelsPerDegree2}return w});function w({viewport:n,devicePixelRatio:t=1,modelMatrix:e=null,coordinateSystem:l=c.LNGLAT,coordinateOrigin:r=b,wrapLongitude:u=!1,projectionMode:o,positionOrigin:a}={}){return p(n),void 0!==o&&i.removed("projectionMode","coordinateSystem")(),void 0!==a&&i.removed("positionOrigin","coordinateOrigin")(),Object.assign({project_uModelMatrix:e||m},x({viewport:n,devicePixelRatio:t,coordinateSystem:l,coordinateOrigin:r,wrapLongitude:u}))}const E={};var P={name:"project",dependencies:[r.fp32],vs:o,getUniforms:function(n=E){return n.viewport?w(n):{}},deprecations:[{type:"function",old:"project_scale",new:"project_size"},{type:"function",old:"project_to_clipspace",new:"project_common_position_to_clipspace"},{type:"function",old:"project_pixel_to_clipspace",new:"project_pixel_size_to_clipspace"}]};var O={name:"project32",dependencies:[P],vs:"\nvec4 project_position_to_clipspace(\n  vec3 position, vec2 position64xyLow, vec3 offset, out vec4 commonPosition\n) {\n  vec3 projectedPosition = project_position(position, position64xyLow);\n  commonPosition = vec4(projectedPosition + offset, 1.0);\n  return project_common_position_to_clipspace(commonPosition);\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec2 position64xyLow, vec3 offset\n) {\n  vec4 commonPosition;\n  return project_position_to_clipspace(position, position64xyLow, offset, commonPosition);\n}\n"};const{fp64ify:S,fp64ifyMatrix4:A}=r.fp64;var T={name:"project64",dependencies:[P,r.fp64],vs:"\nconst vec2 WORLD_SCALE_FP64 = vec2(81.4873275756836, 0.0000032873668232014097);\n\nuniform vec2 project64_uScale;\nuniform vec2 project_uViewProjectionMatrixFP64[16];\n\n// longitude: lnglat_fp64.xy; latitude: lnglat_fp64.zw\nvoid mercatorProject_fp64(vec4 lnglat_fp64, out vec2 out_val[2]) {\n\n#if defined(NVIDIA_FP64_WORKAROUND)\n  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64 * ONE);\n#else\n  out_val[0] = sum_fp64(radians_fp64(lnglat_fp64.xy), PI_FP64);\n#endif\n  out_val[1] = sub_fp64(PI_FP64,\n    log_fp64(tan_fp64(sum_fp64(PI_4_FP64, radians_fp64(lnglat_fp64.zw) / 2.0))));\n  return;\n}\n\nvoid project_position_fp64(vec4 position_fp64, out vec2 out_val[2]) {\n  vec2 pos_fp64[2];\n  mercatorProject_fp64(position_fp64, pos_fp64);\n  vec2 x_fp64 = mul_fp64(pos_fp64[0], project64_uScale);\n  vec2 y_fp64 = mul_fp64(pos_fp64[1], project64_uScale);\n  out_val[0] = mul_fp64(x_fp64, WORLD_SCALE_FP64);\n  out_val[1] = mul_fp64(y_fp64, WORLD_SCALE_FP64);\n\n  return;\n}\n\nvoid project_position_fp64(vec2 position, vec2 position64xyLow, out vec2 out_val[2]) {\n  vec4 position64xy = vec4(\n    position.x, position64xyLow.x,\n    position.y, position64xyLow.y);\n\n  project_position_fp64(position64xy, out_val);\n}\n\nvec4 project_common_position_to_clipspace_fp64(vec2 vertex_pos_modelspace[4]) {\n  vec2 vertex_pos_clipspace[4];\n  mat4_vec4_mul_fp64(project_uViewProjectionMatrixFP64, vertex_pos_modelspace,\n    vertex_pos_clipspace);\n  return vec4(\n    vertex_pos_clipspace[0].x,\n    vertex_pos_clipspace[1].x,\n    vertex_pos_clipspace[2].x,\n    vertex_pos_clipspace[3].x\n    );\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec2 position64xyLow, vec3 offset, out vec4 commonPosition\n) {\n  // This is the local offset to the instance position\n  vec2 offset64[4];\n  vec4_fp64(vec4(offset, 0.0), offset64);\n\n  float z = project_size(position.z);\n\n  // Apply web mercator projection (depends on coordinate system imn use)\n  vec2 projectedPosition64xy[2];\n  project_position_fp64(position.xy, position64xyLow, projectedPosition64xy);\n\n  vec2 commonPosition64[4];\n  commonPosition64[0] = sum_fp64(offset64[0], projectedPosition64xy[0]);\n  commonPosition64[1] = sum_fp64(offset64[1], projectedPosition64xy[1]);\n  commonPosition64[2] = sum_fp64(offset64[2], vec2(z, 0.0));\n  commonPosition64[3] = vec2(1.0, 0.0);\n\n  commonPosition = vec4(projectedPosition64xy[0].x, projectedPosition64xy[1].x, z, 1.0);\n\n  return project_common_position_to_clipspace_fp64(commonPosition64);\n}\n\nvec4 project_position_to_clipspace(\n  vec3 position, vec2 position64xyLow, vec3 offset\n) {\n  vec4 commonPosition;\n  return project_position_to_clipspace(\n    position, position64xyLow, offset, commonPosition\n  );\n}\n\n// Deprecated, remove in v8\nvec4 project_to_clipspace_fp64(vec2 vertex_pos_modelspace[4]) {\n  return project_common_position_to_clipspace_fp64(vertex_pos_modelspace);\n}\n",getUniforms:function(n=C,t={}){const{project_uViewProjectionMatrix:e,project_uScale:l}=t;if(e&&l)return L({project_uViewProjectionMatrix:e,project_uScale:l});return{}},deprecations:[{type:"function",old:"project_to_clipspace_fp64",new:"project_common_position_to_clipspace_fp64"}]};const C={},L=d(function({project_uViewProjectionMatrix:n,project_uScale:t}){const e=A(n),l=S(t);return{project_uViewProjectionMatrixFP64:e,project64_uViewProjectionMatrix:e,project64_uScale:l}});Object(r.registerShaderModules)([r.fp32,r.fp64,P,O,T,r.gouraudlighting,r.phonglighting,r.picking]),Object(r.setDefaultShaderModules)([P]);class M extends r.DirectionalLight{getProjectedLight(){return this}}class j{constructor(n={}){const{id:t="effect"}=n;this.id=t,this.props={},Object.assign(this.props,n)}prepare(){}getParameters(){}}const R={color:[255,255,255],intensity:1},I=[{color:[255,255,255],intensity:1,direction:[-1,-3,-1]},{color:[255,255,255],intensity:.9,direction:[1,8,-2.5]}];class k extends j{constructor(n){super(n),this.ambientLight=null,this.directionalLights=[],this.pointLights=[];for(const t in n){const e=n[t];switch(e.type){case"ambient":this.ambientLight=e;break;case"directional":this.directionalLights.push(e);break;case"point":this.pointLights.push(e)}}this.applyDefaultLights()}getParameters(n){const{ambientLight:t}=this,e=this.getProjectedPointLights(n);return{lightSources:{ambientLight:t,directionalLights:this.getProjectedDirectionalLights(n),pointLights:e}}}applyDefaultLights(){const{ambientLight:n,pointLights:t,directionalLights:e}=this;n||0!==t.length||0!==e.length||(this.ambientLight=new r.AmbientLight(R),this.directionalLights.push(new M(I[0])),this.directionalLights.push(new M(I[1])))}getProjectedPointLights(n){const t=[];for(let e=0;e<this.pointLights.length;e++){const l=this.pointLights[e];t.push(l.getProjectedLight({layer:n}))}return t}getProjectedDirectionalLights(n){const t=[];for(let e=0;e<this.directionalLights.length;e++){const l=this.directionalLights[e];t.push(l.getProjectedLight({layer:n}))}return t}}var F=e(27),N=e(21);function D(n,t,e=!1){const[l,i,r=0]=n,[u,o]=t.projectFlat(n);return[u,o,r*(e?Object(N.b)({longitude:l,latitude:i,scale:t.scale}):t.getDistanceScales()).pixelsPerMeter[2]]}function B(n,{viewport:t,modelMatrix:e,coordinateSystem:l,coordinateOrigin:i,offsetMode:r}){let[u,o,a]=n;switch(e&&([u,o,a]=s.c([],[u,o,a,1],e)),l){case c.LNGLAT:case c.LNGLAT_DEPRECATED:return D([u,o,a],t,r);case c.LNGLAT_OFFSETS:return D([u+i[0],o+i[1],a+(i[2]||0)],t,r);case c.METER_OFFSETS:return D(Object(N.a)(i,[u,o,a]),t,r);case c.IDENTITY:default:return t.projectPosition([u,o,a])}}function U(n,t){const{viewport:e,coordinateSystem:l,coordinateOrigin:i,modelMatrix:r,fromCoordinateSystem:u,fromCoordinateOrigin:o}=function(n){const t=Object.assign({},n),{viewport:e,coordinateSystem:l,coordinateOrigin:i,fromCoordinateSystem:r,fromCoordinateOrigin:u}=n;return void 0===r&&(t.fromCoordinateSystem=l),void 0===u&&(t.fromCoordinateOrigin=i),l===c.LNGLAT&&e.zoom>=y&&(t.coordinateSystem=c.LNGLAT_OFFSETS,t.coordinateOrigin=[Math.fround(e.longitude),Math.fround(e.latitude)]),t}(t);switch(l){case c.LNGLAT_OFFSETS:case c.METER_OFFSETS:{const t=B(n,{viewport:e,modelMatrix:r,coordinateSystem:u,coordinateOrigin:o,offsetMode:!0}),l=D(i,e,!0);return F.h(t,t,l),t}case c.LNGLAT:case c.LNGLAT_DEPRECATED:case c.IDENTITY:default:return B(n,{viewport:e,modelMatrix:r,coordinateSystem:u,coordinateOrigin:o,offsetMode:!1})}}var z=e(5),V=e.n(z);const G=[],W=[];function H(n){let t=G;const e={index:-1,data:n,target:[]};return n?"function"==typeof n[Symbol.iterator]?t=n:n.length>0&&(W.length=n.length,t=W):t=G,{iterable:t,objectInfo:e}}class X{constructor(n,t={}){const{id:e=Object(r.uid)("attribute"),type:l,isIndexed:i=!1}=t;this.gl=n,this.id=e,this.isIndexed=i,this.target=i?V.a.ELEMENT_ARRAY_BUFFER:V.a.ARRAY_BUFFER,this.type=l,i&&!l&&(this.type=n&&Object(r.hasFeature)(n,r.FEATURES.ELEMENT_INDEX_UINT32)?V.a.UNSIGNED_INT:V.a.UNSIGNED_SHORT),this.value=null,this.externalBuffer=null,this.buffer=null,this.userData={},this.update(t),this._validateAttributeDefinition()}delete(){this.buffer&&(this.buffer.delete(),this.buffer=null)}update(n){const{value:t,buffer:e,constant:l=this.constant||!1}=n;if(this.constant=l,e)this.externalBuffer=e,this.constant=!1,this.type=n.type||e.accessor.type,void 0!==e.accessor.divisor&&(this.divisor=e.accessor.divisor),void 0!==n.divisor&&(this.divisor=n.divisor);else if(t){this.externalBuffer=null;const e=this.size||n.size||0;if(l&&t.length!==e){this.value=new Float32Array(e);const n=this.offset/4;for(let e=0;e<this.size;++e)this.value[e]=t[n+e]}else this.value=t;if(!l&&this.gl){const e={...n,id:this.id,target:this.target,accessor:{type:this.type}};Number.isFinite(e.divisor)&&(e.accessor.divisor=e.divisor),delete e.divisor,Number.isFinite(e.size)&&(e.accessor.size=e.size),delete e.size,this.buffer=this.buffer||new r.Buffer(this.gl,e),this.buffer.setData({data:t}),this.type=this.buffer.accessor.type}}this._setAccessor(n)}getBuffer(){return this.constant?null:this.externalBuffer||this.buffer}getValue(){if(this.constant)return this.value;const n=this.externalBuffer||this.buffer;return n?[n,this]:null}_setAccessor(n){const{size:t=this.size,offset:e=this.offset||0,stride:l=this.stride||0,normalized:i=this.normalized||!1,integer:u=this.integer||!1,divisor:o=this.divisor||0,instanced:a,isInstanced:s}=n;this.size=t,this.offset=e,this.stride=l,this.normalized=i,this.integer=u,this.divisor=o,void 0!==s&&(r.log.deprecated("Attribute.isInstanced")(),this.divisor=s?1:0),void 0!==a&&(r.log.deprecated("Attribute.instanced")(),this.divisor=a?1:0)}_validateAttributeDefinition(){}}const Y={isExternalBuffer:!1,needsUpdate:!0,needsRedraw:!1,allocedInstances:-1};class Z extends X{constructor(n,t={}){super(n,t);const{transition:e=!1,noAlloc:l=!1,update:i=null,accessor:r=null,bufferLayout:u=null}=t;let{defaultValue:o=[0,0,0,0]}=t;if(o=Array.isArray(o)?o:[o],this.shaderAttributes={},this.hasShaderAttributes=!1,t.shaderAttributes){const n=t.shaderAttributes;for(const t in n){const e=n[t];this.shaderAttributes[t]=new Z(this.gl,Object.assign({},e,{id:t,constant:e.constant||!1,isIndexed:e.isIndexed||e.elements,size:(e.elements?1:e.size)||this.size,value:e.value||null,divisor:e.instanced||e.divisor||this.divisor,buffer:this.getBuffer(),noAlloc:!0})),this.hasShaderAttributes=!0}}Object.assign(this.userData,Y,t,{transition:e,noAlloc:l,update:i,accessor:r,defaultValue:o,bufferLayout:u}),Object.seal(this.userData),this._validateAttributeUpdaters()}get bufferLayout(){return this.userData.bufferLayout}set bufferLayout(n){this.userData.bufferLayout=n}needsUpdate(){return this.userData.needsUpdate}needsRedraw({clearChangedFlags:n=!1}={}){const t=this.userData.needsRedraw;return this.userData.needsRedraw=this.userData.needsRedraw&&!n,t}getInstanceCount(){return null!==this.value?this.value.length/this.size:0}getUpdateTriggers(){const{accessor:n}=this.userData;return[this.id].concat(n||[])}getAccessor(){return this.userData.accessor}getShaderAttributes(){const n={};return this.hasShaderAttributes?Object.assign(n,this.shaderAttributes):n[this.id]=this,n}supportsTransition(){return this.userData.transition}getTransitionSetting(n){const{transition:t,accessor:e}=this.userData;if(!t)return null;let l=Array.isArray(e)?n[e.find(t=>n[t])]:n[e];return Number.isFinite(l)&&(l={duration:l}),l&&l.duration>0?Object.assign({},t,l):null}setNeedsUpdate(n=this.id){this.userData.needsUpdate=this.userData.needsUpdate||n}setNeedsRedraw(n=this.id){this.userData.needsRedraw=this.userData.needsRedraw||n}allocate(n){const t=this.userData;if(t.isExternalBuffer||t.noAlloc)return!1;const e=this.getInstanceCount();if((0===e||e<n)&&(t.update||t.accessor)){p(Number.isFinite(n));const e=Math.max(n,1),l=q(this.type||V.a.FLOAT);return this.constant=!1,this.value=new l(this.size*e),t.needsUpdate=!0,t.allocedInstances=e,!0}return!1}updateBuffer({numInstances:n,data:t,props:e,context:l}){if(!this.needsUpdate())return!1;const i=this.userData,{update:r,accessor:u}=i;let o=!0;return r?(r.call(l,this,{data:t,props:e,numInstances:n}),this.update({value:this.value,constant:this.constant}),this._checkAttributeArray()):u?(this._updateBufferViaStandardAccessor(t,e),this._checkAttributeArray()):o=!1,this._updateShaderAttributes(),i.needsUpdate=!1,i.needsRedraw=!0,o}update(n){super.update(n),this._updateShaderAttributes()}setGenericValue(n){const t=this.userData;if(void 0===n||"function"==typeof n)return t.isExternalBuffer=!1,!1;n=this._normalizeValue(n);const e=!this.constant||!this._areValuesEqual(n,this.value);return e&&this.update({constant:!0,value:n}),t.needsRedraw=t.needsUpdate||e,t.needsUpdate=!1,t.isExternalBuffer=!0,this._updateShaderAttributes(),!0}setExternalBuffer(n,t){const e=this.userData;if(n){if(e.isExternalBuffer=!0,e.needsUpdate=!1,n instanceof r.Buffer)this.externalBuffer!==n&&(this.update({constant:!1,buffer:n}),e.needsRedraw=!0);else if(this.value!==n){if(!ArrayBuffer.isView(n))throw new Error("Attribute prop must be typed array");if(e.auto&&n.length<=t*this.size)throw new Error("Attribute prop array must match length and size");const l=q(this.type||V.a.FLOAT);n instanceof l?this.update({constant:!1,value:n}):(i.warn(`Attribute prop ${this.id} is casted to ${l.name}`)(),this.update({constant:!1,value:new l(n)})),this.value=n,e.needsRedraw=!0}return this._updateShaderAttributes(),!0}return e.isExternalBuffer=!1,!1}_normalizeValue(n,t=[],e=0){const{defaultValue:l}=this.userData;if(!Array.isArray(n)&&!ArrayBuffer.isView(n))return t[e]=Number.isFinite(n)?n:l[0],t;switch(this.size){case 4:t[e+3]=Number.isFinite(n[3])?n[3]:l[3];case 3:t[e+2]=Number.isFinite(n[2])?n[2]:l[2];case 2:t[e+1]=Number.isFinite(n[1])?n[1]:l[1];case 1:t[e+0]=Number.isFinite(n[0])?n[0]:l[0]}return t}_areValuesEqual(n,t,e=this.size){for(let l=0;l<e;l++)if(n[l]!==t[l])return!1;return!0}_updateBufferViaStandardAccessor(n,t){const e=this.userData,{accessor:l}=e,{value:i,size:r}=this,u=t[l];p("function"==typeof u,`accessor "${l}" is not a function`);let o=0;const{iterable:a,objectInfo:s}=H(n);for(const n of a){s.index++;const t=u(n,s);this._normalizeValue(t,i,o),o+=r}this.update({value:i})}_validateAttributeUpdaters(){const n=this.userData;if(!(n.noAlloc||"function"==typeof n.update||"string"==typeof n.accessor))throw new Error(`Attribute ${this.id} missing update or accessor`)}_checkAttributeArray(){const{value:n}=this;if(n&&n.length>=4){if(!(Number.isFinite(n[0])&&Number.isFinite(n[1])&&Number.isFinite(n[2])&&Number.isFinite(n[3])))throw new Error(`Illegal attribute generated for ${this.id}`)}}_updateShaderAttributes(){const n=this.shaderAttributes;for(const t in n){n[t].update({buffer:this.getBuffer(),value:this.value,constant:this.constant})}}}function q(n,{clamped:t=!0}={}){switch(n){case V.a.FLOAT:return Float32Array;case V.a.UNSIGNED_SHORT:case V.a.UNSIGNED_SHORT_5_6_5:case V.a.UNSIGNED_SHORT_4_4_4_4:case V.a.UNSIGNED_SHORT_5_5_5_1:return Uint16Array;case V.a.UNSIGNED_INT:return Uint32Array;case V.a.UNSIGNED_BYTE:return t?Uint8ClampedArray:Uint8Array;case V.a.BYTE:return Int8Array;case V.a.SHORT:return Int16Array;case V.a.INT:return Int32Array;default:throw new Error("Failed to deduce type from array")}}function $({source:n,target:t,start:e=0,end:l,getData:i}){l=l||t.length;const r=n.length,u=l-e;if(r>u)return void t.set(n.subarray(0,u),e);if(t.set(n,e),!i)return;let o=r;for(;o<u;){const l=i(o,n);for(let n=0;n<l.length;n++)t[e+o]=l[n],o++}}const K={1:"float",2:"vec2",3:"vec3",4:"vec4"};function Q(n){const t={},e={};for(const l in n){const{fromState:i,toState:u,buffer:o}=n[l];t[`${l}From`]=i instanceof r.Buffer?[i,{divisor:0}]:i,t[`${l}To`]=u,e[`${l}`]=o}return{sourceBuffers:t,feedbackBuffers:e}}function J({fromState:n,toState:t,fromLength:e,toLength:l,fromBufferLayout:i,toBufferLayout:u,getData:o=(n=>n)}){if(!(i&&u)&&e>=l||!(n instanceof r.Buffer))return;const a=new Float32Array(l),s=n.getData({}),{size:c,constant:h}=t,f=h?t.getValue():t.getBuffer().getData({}),d=h?(n,t)=>o(f,t):(n,t)=>o(f.subarray(n,n+c),t);!function({source:n,target:t,size:e,getData:l,sourceLayout:i,targetLayout:r}){if(!Array.isArray(r))return $({source:n,target:t,getData:l}),t;let u=0,o=0;const a=l&&((n,t)=>l(n+o,t)),s=Math.min(i.length,r.length);for(let l=0;l<s;l++){const s=i[l]*e,c=r[l]*e;$({source:n.subarray(u,u+s),target:t,start:o,end:o+c,getData:a}),u+=s,o+=c}o<t.length&&$({source:[],target:t,start:o,getData:a})}({source:s,target:a,sourceLayout:i,targetLayout:u,size:t.size,getData:d}),n.setData({data:a})}const nn={NONE:"none",PENDING:"pending",IN_PROGRESS:"in_progress",ENDED:"ended"};function tn(){}class en{constructor(n){this._startTime=null,this._state=nn.NONE,this.duration=1,this.easing=(n=>n),this.onStart=tn,this.onUpdate=tn,this.onInterrupt=tn,this.onEnd=tn,Object.assign(this,n)}get state(){return this._state}get inProgress(){return this._state===nn.PENDING||this._state===nn.IN_PROGRESS}start(n){this.inProgress&&this.onInterrupt(this),Object.assign(this,n),this._setState(nn.PENDING)}cancel(){this.inProgress&&(this.onInterrupt(this),this._setState(nn.NONE))}update(n){if(this.state===nn.PENDING&&(this._startTime=n,this._setState(nn.IN_PROGRESS)),this.state===nn.IN_PROGRESS){let t=!1,e=(n-this._startTime)/this.duration;return e>=1&&(e=1,t=!0),this.time=this.easing(e),this.onUpdate(this),t&&this._setState(nn.ENDED),!0}return!1}_setState(n){if(this._state!==n)switch(this._state=n,n){case nn.PENDING:this.onStart(this);break;case nn.ENDED:this.onEnd(this)}}}const ln=()=>{},rn={duration:0,easing:n=>n,onStart:ln,onEnd:ln,onInterrupt:ln};class un{constructor(n,{id:t}){this.id=t,this.gl=n,this.attributeTransitions={},this.needsRedraw=!1,this.transform=null,this.numInstances=0,r.Transform.isSupported(n)?this.isSupported=!0:n&&i.warn("WebGL2 not supported by this browser. Transition animation is disabled.")()}finalize(){this.transform&&this.transform.delete();for(const n in this.attributeTransitions)this._removeTransition(n)}update({attributes:n,transitions:t={},numInstances:e}){if(this.opts=t,this.numInstances=e||1,!this.isSupported)return;const{attributeTransitions:l}=this,i={};for(const t in n){this._updateAttribute(t,n[t])&&(i[t]=l[t])}for(const t in l){const e=n[t];e&&e.supportsTransition()||this._removeTransition(t)}if(this.transform){if(this.transform){const{sourceBuffers:n,feedbackBuffers:t}=Q(i);this.transform.update({elementCount:this.numInstances,sourceBuffers:n,feedbackBuffers:t})}}else this._createModel()}hasAttribute(n){return n in this.attributeTransitions}getAttributes(){const n={};for(const t in this.attributeTransitions){const e=this.attributeTransitions[t];e.buffer&&(n[t]=e.attributeInTransition)}return n}setCurrentTime(n){if(!this.transform||0===this.numInstances)return!1;const t={};let e=this.needsRedraw;this.needsRedraw=!1;for(const l in this.attributeTransitions){const i=this.attributeTransitions[l];i.update(n)&&(t[`${l}Time`]=i.time,e=!0)}return e&&this.transform.run({uniforms:t}),e}_createTransition(n,t){let e=this.attributeTransitions[n];return e?null:(e=new en({name:n,attribute:t,attributeInTransition:new Z(this.gl,t),bufferLayout:t.bufferLayout}),this.attributeTransitions[n]=e,this._invalidateModel(),e)}_removeTransition(n){const t=this.attributeTransitions[n];t&&(t.buffer&&t.buffer.delete(),t._swapBuffer&&t._swapBuffer.delete(),delete this.attributeTransitions[n],this._invalidateModel())}_updateAttribute(n,t){const e=t.getTransitionSetting(this.opts);if(e){let l,i=this.attributeTransitions[n];if(i?l=t.needsRedraw():(i=this._createTransition(n,t),l=!0),l)return this._triggerTransition(i,e),!0}return!1}_invalidateModel(){this.transform&&(this.transform.delete(),this.transform=null)}_createModel(){0!==Object.keys(this.attributeTransitions).length&&(this.transform=new r.Transform(this.gl,Object.assign({elementCount:this.numInstances},Q(this.attributeTransitions),function(n){const t=[],e=[],l=[],i=[],r=[];for(const u in n){const o=n[u],a=K[o.attribute.size];a&&(o.bufferIndex=t.length,t.push(u),e.push(`attribute ${a} ${u}From;`),e.push(`attribute ${a} ${u}To;`),l.push(`uniform float ${u}Time;`),i.push(`varying ${a} ${u};`),r.push(`${u} = mix(${u}From, ${u}To,\n        ${u}Time);`))}return{vs:`\n#define SHADER_NAME feedback-vertex-shader\n${e.join("\n")}\n${l.join("\n")}\n${i.join("\n")}\n\nvoid main(void) {\n  ${r.join("\n")}\n  gl_Position = vec4(0.0);\n}\n`,fs:`#define SHADER_NAME feedback-fragment-shader\n\nprecision highp float;\n\n${i.join("\n")}\n\nvoid main(void) {\n  gl_FragColor = vec4(0.0);\n}\n`,varyings:t}}(this.attributeTransitions))))}_getNextTransitionStates(n,t){const{attribute:e}=n,{size:l}=e;let i;i=e.constant?new X(this.gl,{constant:!0,value:e.value,size:l}):new X(this.gl,{constant:!1,buffer:e.getBuffer(),divisor:0,size:l,value:e.externalBuffer?null:e.value});const u=n.buffer||i,o=this.numInstances*l,a=u instanceof r.Buffer&&u.getElementCount()||o;let s=n._swapBuffer;return n._swapBuffer=n.buffer,s?s.getElementCount()<o&&s.setData({data:new Float32Array(o)}):s=new r.Buffer(this.gl,{data:new Float32Array(o),usage:V.a.DYNAMIC_COPY}),n.attributeInTransition.update({buffer:s}),J({fromState:u,toState:i,fromLength:a,toLength:o,fromBufferLayout:n.bufferLayout,toBufferLayout:e.bufferLayout,getData:t.enter}),n.bufferLayout=e.bufferLayout,{fromState:u,toState:i,buffer:s}}_triggerTransition(n,t){p(t&&t.duration>0),this.needsRedraw=!0;const e=Object.assign({},rn,t);n.start(Object.assign({},this._getNextTransitionStates(n,t),e))}}const on=2,an=3;function sn(){}const cn={savedMessages:null,timeStart:null,onLog:({level:n,message:t})=>{i.log(n,t)()},onUpdateStart:({level:n,numInstances:t})=>{cn.savedMessages=[],cn.timeStart=new Date},onUpdate:({level:n,message:t})=>{cn.savedMessages&&cn.savedMessages.push(t)},onUpdateEnd:({level:n,id:t,numInstances:e})=>{const l=`${Math.round(new Date-cn.timeStart)}ms`;i.group(n,`Updated attributes for ${e} instances in ${t} in ${l}`,{collapsed:!0})();for(const t of cn.savedMessages)i.log(n,t)();i.groupEnd(n,`Updated attributes for ${e} instances in ${t} in ${l}`)(),cn.savedMessages=null}};class hn{static setDefaultLogFunctions({onLog:n,onUpdateStart:t,onUpdate:e,onUpdateEnd:l}={}){void 0!==n&&(cn.onLog=n||sn),void 0!==t&&(cn.onUpdateStart=t||sn),void 0!==e&&(cn.onUpdate=e||sn),void 0!==l&&(cn.onUpdateEnd=l||sn)}constructor(n,{id:t="attribute-manager",stats:e}={}){this.id=t,this.gl=n,this.attributes={},this.updateTriggers={},this.accessors={},this.needsRedraw=!0,this.userData={},this.stats=e,this.attributeTransitionManager=new un(n,{id:`${t}-transitions`}),Object.seal(this)}finalize(){for(const n in this.attributes)this.attributes[n].delete();this.attributeTransitionManager.finalize()}getNeedsRedraw(n={clearRedrawFlags:!1}){const t=this.needsRedraw;return this.needsRedraw=this.needsRedraw&&!n.clearRedrawFlags,t&&this.id}setNeedsRedraw(n=!0){return this.needsRedraw=!0,this}add(n,t){this._add(n,t)}addInstanced(n,t){this._add(n,t,{instanced:1})}remove(n){for(let t=0;t<n.length;t++){const e=n[t];void 0!==this.attributes[e]&&(this.attributes[e].delete(),delete this.attributes[e])}}invalidate(n){const t=this._invalidateTrigger(n);cn.onLog({level:an,message:`invalidated attributes ${t} (${n}) for ${this.id}`})}invalidateAll(){for(const n in this.attributes)this.attributes[n].setNeedsUpdate();cn.onLog({level:an,message:`invalidated all attributes for ${this.id}`})}update({data:n,numInstances:t,transitions:e,props:l={},buffers:i={},context:r={}}={}){let u=!1;cn.onUpdateStart({level:on,id:this.id,numInstances:t}),this.stats&&this.stats.get("Update Attributes").timeStart();for(const e in this.attributes){const o=this.attributes[e];o.setExternalBuffer(i[e],this.numInstances)||o.setGenericValue(l[o.getAccessor()])||o.needsUpdate()&&(u=!0,this._updateAttribute({attribute:o,numInstances:t,data:n,props:l,context:r})),this.needsRedraw|=o.needsRedraw()}u&&cn.onUpdateEnd({level:on,id:this.id,numInstances:t}),this.stats&&this.stats.get("Update Attributes").timeEnd(),this.attributeTransitionManager.update({attributes:this.attributes,numInstances:t,transitions:e})}updateTransition(n){const{attributeTransitionManager:t}=this,e=t.setCurrentTime(n);return this.needsRedraw=this.needsRedraw||e,e}getAttributes(){return this.attributes}getChangedAttributes(n={clearChangedFlags:!1}){const{attributes:t,attributeTransitionManager:e}=this,l=Object.assign({},e.getAttributes());for(const i in t){const r=t[i];r.needsRedraw(n)&&!e.hasAttribute(i)&&(l[i]=r)}return l}getAccessors(){return this.updateTriggers}_add(n,t,e={}){t&&i.warn("AttributeManager.add({updaters}) - updater map no longer supported")();const l={};for(const t in n){const i=n[t],r=this._createAttribute(t,i,e);l[t]=r}Object.assign(this.attributes,l),this._mapUpdateTriggersToAttributes()}_createAttribute(n,t,e){const l={id:n,constant:t.constant||!1,isIndexed:t.isIndexed||t.elements,size:t.elements?1:t.size,value:t.value||null,divisor:t.instanced||e.instanced?1:t.divisor};return new Z(this.gl,Object.assign({},t,l))}_mapUpdateTriggersToAttributes(){const n={};for(const t in this.attributes){this.attributes[t].getUpdateTriggers().forEach(e=>{n[e]||(n[e]=[]),n[e].push(t)})}this.updateTriggers=n}_invalidateTrigger(n){const{attributes:t,updateTriggers:e}=this,l=e[n];if(l)l.forEach(n=>{const e=t[n];e&&e.setNeedsUpdate()});else{let e=`invalidating non-existent trigger ${n} for ${this.id}\n`;e+=`Valid triggers: ${Object.keys(t).join(", ")}`,i.warn(e,l)()}return l}_updateAttribute({attribute:n,numInstances:t,data:e,props:l,context:i}){n.allocate(t)&&cn.onUpdate({level:an,message:`${n.id} allocated ${t}`,id:this.id});const r=Date.now();if(n.updateBuffer({numInstances:t,data:e,props:l,context:i})){this.needsRedraw=!0;const e=Math.round(Date.now()-r);cn.onUpdate({level:an,message:`${n.id} updated ${t} in ${e}ms`})}}}var fn=e(19),dn=e.n(fn);const pn=(n,t,e)=>{n&&(t.length>1?pn(n[t[0]],t.slice(1),e):n[t[0]]=e)},gn=new Map,vn=(n,t,e)=>{if(!dn.a.isReady())return;gn.has(n)||gn.set(n,new Map),gn.get(n).set(t,e)},mn=n=>{if(!dn.a.isReady()||!n.id)return;const t=gn.get(n.id);t&&t.forEach((t,e)=>{pn(n,e,t),"data"===e[0]&&(n.data=[...n.data])})},_n=n=>{dn.a.isReady()&&dn.a.listenFor("deck.gl",n)},bn=n=>{dn.a.isReady()&&dn.a.listenFor("init",n)},yn=n=>{if(!dn.a.isReady()||!n)return;const t=[n.constructor.layerName];dn.a.listItem("deck.gl",n.id,{badges:t,links:n.state&&n.state.model?[`luma.gl:${n.state.model.id}`]:void 0,parent:n.parent?n.parent.id:void 0})},xn=n=>{if(!dn.a.isReady()||dn.a.throttle(`deck.gl:${n.id}`,1e3))return;const t=function(n){const t=[{path:"objects.props",data:n.props}],e=[n.constructor.layerName];if(n.state){if(n.getAttributeManager()){const e=n.getAttributeManager().getAttributes();t.push({path:"objects.attributes",data:e})}if(n.state.model){n.state.model.setProps({timerQueryEnabled:!0});const{lastFrameTime:t}=n.state.model.stats;t&&e.push(`${(1e3*t).toFixed(0)}μs`)}}return t.push({path:"badges",data:e}),t}(n);dn.a.multiUpdate("deck.gl",n.id,t)},wn=n=>{dn.a.isReady()&&n&&dn.a.deleteItem("deck.gl",n)};function En(n,t){const e=Pn({newProps:n,oldProps:t,propTypes:Sn(n),ignoreProps:{data:null,updateTriggers:null}}),l=function(n,t){if(null===t)return"oldProps is null, initial diff";const{dataComparator:e}=n;if(e){if(!e(n.data,t.data))return"Data comparator detected a change"}else if(n.data!==t.data)return"A new data container was supplied";return null}(n,t);let i=!1;return l||(i=function(n,t){if(null===t)return"oldProps is null, initial diff";if("all"in n.updateTriggers){const e=On(n,t,"all");if(e)return{all:!0}}const e={};let l=!1;for(const i in n.updateTriggers)if("all"!==i){const r=On(n,t,i);r&&(e[i]=!0,l=e)}return l}(n,t)),{dataChanged:l,propsChanged:e,updateTriggersChanged:i}}function Pn({newProps:n,oldProps:t,ignoreProps:e={},propTypes:l={},triggerName:i="props"}={}){if(p(void 0!==t&&void 0!==n,"compareProps args"),t===n)return null;if("object"!=typeof n||null===n)return`${i} changed shallowly`;if("object"!=typeof t||null===t)return`${i} changed shallowly`;for(const r in t)if(!(r in e)){if(!(r in n))return`${i}.${r} dropped`;const e=n[r],u=t[r],o=l[r];let a=o&&o.equal;if(a&&!a(e,u,o))return`${i}.${r} changed deeply`;if(!a&&(a=e&&u&&e.equals)&&!a.call(e,u))return`${i}.${r} changed deeply`;if(!a&&u!==e)return`${i}.${r} changed shallowly`}for(const l in n)if(!(l in e||l in t))return`${i}.${l} added: undefined -> ${n[l]}`;return null}function On(n,t,e){let l=n.updateTriggers[e];l=null==l?{}:l;let i=t.updateTriggers[e];return Pn({oldProps:i=null==i?{}:i,newProps:l,triggerName:e})}function Sn(n){const t=n._component,e=t&&t.constructor;return e?e._propTypes:{}}const An="count(): argument not an object",Tn="count(): argument not a container";function Cn(n){if(null===(t=n)||"object"!=typeof t)throw new Error(An);var t;if("function"==typeof n.count)return n.count();if(Number.isFinite(n.size))return n.size;if(Number.isFinite(n.length))return n.length;if(function(n){return null!==n&&"object"==typeof n&&n.constructor===Object}(n))return Object.keys(n).length;throw new Error(Tn)}const Ln={NO_STATE:"Awaiting state",MATCHED:"Matched. State transferred from previous layer",INITIALIZED:"Initialized",AWAITING_GC:"Discarded. Awaiting garbage collection",AWAITING_FINALIZATION:"No longer matched. Awaiting garbage collection",FINALIZED:"Finalized! Awaiting garbage collection"},Mn={boolean:{validate:(n,t)=>!0,equal:(n,t,e)=>Boolean(n)===Boolean(t)},number:{validate:(n,t)=>Number.isFinite(n)&&(!("max"in t)||n<=t.max)&&(!("min"in t)||n>=t.min)},color:{validate:(n,t)=>kn(n)&&(3===n.length||4===n.length),equal:(n,t,e)=>jn(n,t)},accessor:{validate(n,t){const e=Fn(n);return"function"===e||e===Fn(t.value)},equal:(n,t,e)=>"function"==typeof t||jn(n,t)},array:{validate:(n,t)=>t.optional&&!n||kn(n),equal:(n,t,e)=>e.compare?jn(n,t):n===t},function:{validate:(n,t)=>t.optional&&!n||"function"==typeof n,equal:(n,t,e)=>!e.compare||n===t}};function jn(n,t){if(n===t)return!0;if(!kn(n)||!kn(t))return!1;const e=n.length;if(e!==t.length)return!1;for(let l=0;l<e;l++)if(n[l]!==t[l])return!1;return!0}function Rn(n,t){switch(Fn(t)){case"object":return In(n,t);case"array":return In(n,{type:"array",value:t,compare:!1});case"boolean":return In(n,{type:"boolean",value:t});case"number":return In(n,{type:"number",value:t});case"function":return In(n,{type:"function",value:t,compare:!0});default:return{name:n,type:"unknown",value:t}}}function In(n,t){return"type"in t?Object.assign({name:n},Mn[t.type],t):"value"in t?Object.assign({name:n,type:Fn(t.value)},t):{name:n,type:"object",value:t}}function kn(n){return Array.isArray(n)||ArrayBuffer.isView(n)}function Fn(n){return kn(n)?"array":null===n?"null":typeof n}function Nn(n,t,e){if(t)for(const l in e)if(Un(t,l)){const r=`${n||"Layer"}: ${l}`;for(const n of e[l])Un(t,n)||(t[n]=t[l]);i.deprecated(r,e[l].join("/"))()}}function Dn(n){const t=zn(n,"_mergedDefaultProps");return t?{defaultProps:t,propTypes:zn(n,"_propTypes"),deprecatedProps:zn(n,"_deprecatedProps")}:function(n){const t=n.prototype;if(!t)return{defaultProps:{}};const e=Object.getPrototypeOf(n),l=t&&Dn(e)||null,r=function(n){const t={},e={},l={};for(const[i,r]of Object.entries(n))if(r&&r.deprecatedFor)l[i]=Array.isArray(r.deprecatedFor)?r.deprecatedFor:[r.deprecatedFor];else{const n=Rn(i,r);t[i]=n,e[i]=n.value}return{propTypes:t,defaultProps:e,deprecatedProps:l}}(zn(n,"defaultProps")||{}),u=Object.assign({},l&&l.propTypes,r.propTypes),o=function(n,t,e,l){const r=Object.create(null);Object.assign(r,t,n);const u=function(n){const t=zn(n,"layerName")||zn(n,"componentName");t||i.once(0,`${n.name}.componentName not specified`)();return t||n.name}(l);return delete n.id,Object.defineProperties(r,{id:{configurable:!1,writable:!0,value:u}}),function(n,t){const e={},l={_asyncPropDefaultValues:{enumerable:!1,value:e},_asyncPropOriginalValues:{enumerable:!1,value:{}}};for(const n in t){const i=t[n],{name:r,value:u}=i;i.async&&(e[r]=u,l[r]=Bn(r))}Object.defineProperties(n,l)}(r,e),r}(r.defaultProps,l&&l.defaultProps,u,n),a=Object.assign({},l&&l.deprecatedProps,r.deprecatedProps);return n._mergedDefaultProps=o,n._propTypes=u,n._deprecatedProps=a,{propTypes:u,defaultProps:o,deprecatedProps:a}}(n)}function Bn(n){return{configurable:!1,enumerable:!0,set(t){"string"==typeof t||t instanceof Promise?this._asyncPropOriginalValues[n]=t:this._asyncPropResolvedValues[n]=t},get(){if(this._asyncPropResolvedValues){if(n in this._asyncPropResolvedValues){const t=this._asyncPropResolvedValues[n];return"data"===n?t||this._asyncPropDefaultValues[n]:t}if(n in this._asyncPropOriginalValues){const t=this._component&&this._component.internalState;if(t&&t.hasAsyncProp(n))return t.getAsyncProp(n)}}return this._asyncPropDefaultValues[n]}}}function Un(n,t){return Object.prototype.hasOwnProperty.call(n,t)}function zn(n,t){return Un(n,t)&&n[t]}const Vn=Object.freeze({});class Gn{constructor(n=null){this.component=n,this.asyncProps={},this.onAsyncPropUpdated=(()=>{}),this.oldProps=Vn,this.oldAsyncProps=null}getOldProps(){return this.oldAsyncProps||this.oldProps}resetOldProps(){this.oldAsyncProps=null,this.oldProps=this.component.props}freezeAsyncOldProps(){if(!this.oldAsyncProps){this.oldProps=this.oldProps||this.component.props,this.oldAsyncProps={};for(const n in this.oldProps)this.oldAsyncProps[n]=this.oldProps[n]}}hasAsyncProp(n){return n in this.asyncProps}getAsyncProp(n){const t=this.asyncProps[n];return t&&t.resolvedValue}isAsyncPropLoading(n){const t=this.asyncProps[n];return Boolean(t&&t.pendingLoadCount>0&&t.pendingLoadCount!==t.resolvedLoadCount)}setAsyncProps(n){const t=n._asyncPropResolvedValues||{},e=n._asyncPropOriginalValues||n,l=n._asyncPropDefaultValues||{};for(const n in t){const e=t[n];this._createAsyncPropData(n,e,l[n]),this._updateAsyncProp(n,e)}for(const n in e){const t=e[n];this._createAsyncPropData(n,t,l[n]),this._updateAsyncProp(n,t)}}_updateAsyncProp(n,t){if(this._didAsyncInputValueChange(n,t)){if("string"==typeof t){const{fetch:e}=this.layer.props;t=e(t,{propName:n,layer:this.layer})}t instanceof Promise?this._watchPromise(n,t):this._setPropValue(n,t)}}_didAsyncInputValueChange(n,t){const e=this.asyncProps[n];return t!==e.lastValue&&(e.lastValue=t,!0)}_setPropValue(n,t){const e=this.asyncProps[n];e.value=t,e.resolvedValue=t,e.pendingLoadCount++,e.resolvedLoadCount=e.pendingLoadCount}_setAsyncPropValue(n,t,e){const l=this.asyncProps[n];l&&e>=l.resolvedLoadCount&&(p(void 0!==t),this.freezeAsyncOldProps(),t=this._postProcessValue(n,t),l.resolvedValue=t,l.resolvedLoadCount=e,this.onAsyncPropUpdated(n,t))}_watchPromise(n,t){const e=this.asyncProps[n];e.pendingLoadCount++;const l=e.pendingLoadCount;t.then(t=>this._setAsyncPropValue(n,t,l)).catch(n=>i.error(n)())}_postProcessValue(n,t){const{dataTransform:e}=this.component?this.component.props:{};return"data"===n&&e&&(t=e(t)),t}_createAsyncPropData(n,t,e){this.asyncProps[n]||(this.asyncProps[n]={lastValue:null,resolvedValue:e,pendingLoadCount:0,resolvedLoadCount:0})}}let Wn=0;class Hn{constructor(){this.props=function(){const n=Dn(this.constructor),t=n.defaultProps,e=Object.create(t,{_component:{enumerable:!1,value:this},_asyncPropOriginalValues:{enumerable:!1,value:{}},_asyncPropResolvedValues:{enumerable:!1,value:{}}});for(let n=0;n<arguments.length;++n)Object.assign(e,arguments[n]);const{layerName:l}=this.constructor,{deprecatedProps:i}=n;return Nn(l,e,i),Nn(l,e.updateTriggers,i),Nn(l,e.transitions,i),mn(e),Object.freeze(e),e}.apply(this,arguments),this.id=this.props.id,this.count=Wn++,this.lifecycle=Ln.NO_STATE,this.parent=null,this.context=null,this.state=null,this.internalState=null,Object.seal(this)}clone(n){const{props:t}=this,e={};for(const n in t._asyncPropDefaultValues)n in t._asyncPropResolvedValues?e[n]=t._asyncPropResolvedValues[n]:n in t._asyncPropOriginalValues&&(e[n]=t._asyncPropOriginalValues[n]);return new this.constructor(Object.assign({},t,e,n))}get stats(){return this.internalState.stats}_initState(){this.internalState=new Gn({})}}Hn.componentName="Component",Hn.defaultProps={};class Xn extends Gn{constructor({attributeManager:n,layer:t}){super(t),this.attributeManager=n,this.model=null,this.needsRedraw=!0,this.subLayers=null}get layer(){return this.component}set layer(n){this.component=n}}const Yn=1,Zn=Object.freeze([]);let qn=new Uint8ClampedArray(0);const $n={data:{type:"data",value:Zn,async:!0},dataComparator:null,dataTransform:{type:"function",value:n=>n,compare:!1},fetch:{type:"function",value:n=>fetch(n).then(n=>n.json()),compare:!1},updateTriggers:{},numInstances:void 0,visible:!0,pickable:!1,opacity:{type:"number",min:0,max:1,value:.8},onHover:{type:"function",value:null,compare:!1,optional:!0},onClick:{type:"function",value:null,compare:!1,optional:!0},onDragStart:{type:"function",value:null,compare:!1,optional:!0},onDrag:{type:"function",value:null,compare:!1,optional:!0},onDragEnd:{type:"function",value:null,compare:!1,optional:!0},coordinateSystem:c.LNGLAT,coordinateOrigin:{type:"array",value:[0,0,0],compare:!0},modelMatrix:{type:"array",value:null,compare:!0,optional:!0},wrapLongitude:!1,parameters:{},uniforms:{},framebuffer:null,animation:null,getPolygonOffset:{type:"function",value:({layerIndex:n})=>[0,100*-n],compare:!1},highlightedObjectIndex:null,autoHighlight:!1,highlightColor:{type:"color",value:[0,0,128,128]}};class Kn extends Hn{toString(){return`${this.constructor.layerName||this.constructor.name}({id: '${this.props.id}'})`}setState(n){this.setChangeFlags({stateChanged:!0}),Object.assign(this.state,n),this.setNeedsRedraw()}setNeedsRedraw(n=!0){this.internalState&&(this.internalState.needsRedraw=n)}setLayerNeedsUpdate(){this.context.layerManager.setNeedsUpdate(String(this))}getNeedsRedraw(n={clearRedrawFlags:!1}){return this._getNeedsRedraw(n)}needsUpdate(){return this.shouldUpdateState(this._getUpdateParams())}isPickable(){return this.props.pickable&&this.props.visible}getModels(){return this.state&&(this.state.models||(this.state.model?[this.state.model]:[]))}getSingleModel(){return this.state&&this.state.model}getAttributeManager(){return this.internalState&&this.internalState.attributeManager}getCurrentLayer(){return this.internalState&&this.internalState.layer}getFirstObject(){const{data:n}=this.props;for(const t of n)return t;return null}project(n){const{viewport:t}=this.context,e=B(n,{viewport:t,modelMatrix:this.props.modelMatrix,coordinateOrigin:this.props.coordinateOrigin,coordinateSystem:this.props.coordinateSystem}),[l,i,r]=Object(N.k)(e,t.pixelProjectionMatrix);return 2===n.length?[l,i]:[l,i,r]}unproject(n){const{viewport:t}=this.context;return p(Array.isArray(n)),t.unproject(n)}projectPosition(n){return p(Array.isArray(n)),U(n,{viewport:this.context.viewport,modelMatrix:this.props.modelMatrix,coordinateOrigin:this.props.coordinateOrigin,coordinateSystem:this.props.coordinateSystem})}projectFlat(n){i.deprecated("layer.projectFlat","layer.projectPosition")();const{viewport:t}=this.context;return p(Array.isArray(n)),t.projectFlat(n)}unprojectFlat(n){i.deprecated("layer.unprojectFlat")();const{viewport:t}=this.context;return p(Array.isArray(n)),t.unprojectFlat(n)}use64bitProjection(){if(this.props.fp64){if(this.props.coordinateSystem===c.LNGLAT_DEPRECATED)return!0;i.once(0,"Legacy 64-bit mode only works with coordinateSystem set to\n        COORDINATE_SYSTEM.LNGLAT_DEPRECATED. Rendering in 32-bit mode instead")()}return!1}use64bitPositions(){return this.props.fp64||this.props.coordinateSystem===c.LNGLAT}screenToDevicePixels(n){return i.deprecated("screenToDevicePixels","DeckGL prop useDevicePixels for conversion")(),n*("undefined"!=typeof window?window.devicePixelRatio:1)}onHover(n,t){return!!this.props.onHover&&this.props.onHover(n,t)}onClick(n,t){return!!this.props.onClick&&this.props.onClick(n,t)}nullPickingColor(){return[0,0,0]}encodePickingColor(n,t=[]){return p(n<16777215,"index out of picking color range"),t[0]=n+1&255,t[1]=n+1>>8&255,t[2]=n+1>>8>>8&255,t}decodePickingColor(n){p(n instanceof Uint8Array);const[t,e,l]=n;return t+256*e+65536*l-1}initializeState(){throw new Error(`Layer ${this} has not defined initializeState`)}shouldUpdateState({oldProps:n,props:t,context:e,changeFlags:l}){return l.propsOrDataChanged}updateState({oldProps:n,props:t,context:e,changeFlags:l}){const i=this.getAttributeManager();l.dataChanged&&i&&i.invalidateAll()}finalizeState(){for(const n of this.getModels())n.delete();const n=this.getAttributeManager();n&&n.finalize()}draw(n){for(const t of this.getModels())t.draw(n)}getPickingInfo({info:n,mode:t}){const{index:e}=n;return e>=0&&Array.isArray(this.props.data)&&(n.object=this.props.data[e]),n}invalidateAttribute(n="all",t=""){const e=this.getAttributeManager();e&&("all"===n?(i.log(Yn,`updateTriggers invalidating all attributes: ${t}`)(),e.invalidateAll()):(i.log(Yn,`updateTriggers invalidating attribute ${n}: ${t}`)(),e.invalidate(n)))}updateAttributes(n){const t=this.getAttributeManager();if(!t)return;const e=this.getNumInstances(n);t.update({data:n.data,numInstances:e,props:n,transitions:n.transitions,buffers:n,context:this,ignoreUnknownAttributes:!0});const l=this.getModels();if(l.length>0){const n=t.getChangedAttributes({clearChangedFlags:!0});for(let t=0,e=l.length;t<e;++t)this._setModelAttributes(l[t],n)}}updateTransition(){const n=this.getAttributeManager();n&&n.updateTransition(this.context.time)}calculateInstancePickingColors(n,{numInstances:t}){const{value:e,size:l}=n;if(1===e[0])return;const i=qn.length/l;if(i<t){const n=new Uint8ClampedArray(t*l);n.set(qn);const e=[];for(let r=i;r<t;r++)this.encodePickingColor(r,e),n[r*l+0]=e[0],n[r*l+1]=e[1],n[r*l+2]=e[2];qn=n}e.set(t<i?qn.subarray(0,t*l):qn)}_setModelAttributes(n,t){const e={},l=n.userData.excludeAttributes||{};for(const n in t)l[n]||Object.assign(e,t[n].getShaderAttributes());n.setAttributes(e)}_clearInstancePickingColor(n){const{instancePickingColors:t}=this.getAttributeManager().attributes,{value:e,size:l}=t,i=this.decodePickingColor(n);e[i*l+0]=0,e[i*l+1]=0,e[i*l+2]=0,t.update({value:e})}_clearPickingColor(n){const{pickingColors:t}=this.getAttributeManager().attributes,{value:e}=t;for(let t=0;t<e.length;t+=3)e[t+0]===n[0]&&e[t+1]===n[1]&&e[t+2]===n[2]&&(e[t+0]=0,e[t+1]=0,e[t+2]=0);t.update({value:e})}clearPickingColor(n){this.getAttributeManager().attributes.pickingColors?this._clearPickingColor(n):this._clearInstancePickingColor(n)}copyPickingColors(){const{pickingColors:n,instancePickingColors:t}=this.getAttributeManager().attributes;return new Uint8ClampedArray((n||t).value)}restorePickingColors(n){const{pickingColors:t,instancePickingColors:e}=this.getAttributeManager().attributes;(t||e).update({value:n})}getNumInstances(n){if(void 0!==(n=n||this.props).numInstances)return n.numInstances;if(this.state&&void 0!==this.state.numInstances)return this.state.numInstances;const{data:t}=this.props;return Cn(t)}_initialize(){this._initState(),this.initializeState(this.context),this.state.attributeManager=this.getAttributeManager(),this.setChangeFlags({dataChanged:!0,propsChanged:!0,viewportChanged:!0}),this._updateState();const n=this.getSingleModel();n&&(n.id=this.props.id,n.program.id=`${this.props.id}-program`)}_update(){this.needsUpdate()&&this._updateState()}_updateState(){const n=this._getUpdateParams();if(this.context.gl)this.updateState(n);else try{this.updateState(n)}catch(n){}this.isComposite?this._renderLayers(n):(this.setNeedsRedraw(),this.updateAttributes(this.props),this._updateBaseUniforms(),this.state.model&&this.state.model.setInstanceCount(this.getNumInstances())),this.clearChangeFlags(),this.internalState.resetOldProps()}_finalize(){p(this.internalState&&this.state),this.finalizeState(this.context),wn(this.id)}drawLayer({moduleParameters:n=null,uniforms:t={},parameters:e={}}){t.picking_uActive||this.updateTransition(),n&&this.setModuleParameters(n);const{animationProps:l}=this.context;if(l)for(const n of this.getModels())n._setAnimationProps(l);const{getPolygonOffset:i}=this.props,u=i&&i(t)||[0,0];e.polygonOffset=u,Object(r.withParameters)(this.context.gl,e,()=>{this.draw({moduleParameters:n,uniforms:t,parameters:e,context:this.context})})}pickLayer(n){return this.getPickingInfo(n)}getChangeFlags(){return this.internalState.changeFlags}setChangeFlags(n){this.internalState.changeFlags=this.internalState.changeFlags||{};const t=this.internalState.changeFlags;n.dataChanged&&!t.dataChanged&&(t.dataChanged=n.dataChanged,i.log(Yn+1,()=>`dataChanged: ${n.dataChanged} in ${this.id}`)()),n.updateTriggersChanged&&!t.updateTriggersChanged&&(t.updateTriggersChanged=t.updateTriggersChanged&&n.updateTriggersChanged?Object.assign({},n.updateTriggersChanged,t.updateTriggersChanged):n.updateTriggersChanged||t.updateTriggersChanged,i.log(Yn+1,()=>"updateTriggersChanged: "+`${Object.keys(n.updateTriggersChanged).join(", ")} in ${this.id}`)()),n.propsChanged&&!t.propsChanged&&(t.propsChanged=n.propsChanged,i.log(Yn+1,()=>`propsChanged: ${n.propsChanged} in ${this.id}`)()),n.viewportChanged&&!t.viewportChanged&&(t.viewportChanged=n.viewportChanged,i.log(Yn+2,()=>`viewportChanged: ${n.viewportChanged} in ${this.id}`)()),n.stateChanged&&!t.stateChanged&&(t.stateChanged=n.stateChanged,i.log(Yn+1,()=>`stateChanged: ${n.stateChanged} in ${this.id}`)());const e=n.dataChanged||n.updateTriggersChanged||n.propsChanged;t.propsOrDataChanged=t.propsOrDataChanged||e,t.somethingChanged=t.somethingChanged||e||n.viewportChanged||n.stateChanged}clearChangeFlags(){this.internalState.changeFlags={dataChanged:!1,propsChanged:!1,updateTriggersChanged:!1,viewportChanged:!1,stateChanged:!1,propsOrDataChanged:!1,somethingChanged:!1}}printChangeFlags(){const n=this.internalState.changeFlags;return`${n.dataChanged?"data ":""}${n.propsChanged?"props ":""}${n.updateTriggersChanged?"triggers ":""}${n.viewportChanged?"viewport":""}`}diffProps(n,t){const e=En(n,t);if(e.updateTriggersChanged)for(const n in e.updateTriggersChanged)e.updateTriggersChanged[n]&&this._activeUpdateTrigger(n);return this.setChangeFlags(e)}validateProps(){!function(n){const t=Sn(n);for(const e in t){const l=t[e],{validate:i}=l;if(i&&!i(n[e],l))throw new Error(`Invalid prop ${e}: ${n[e]}`)}}(this.props)}setModuleParameters(n){for(const t of this.getModels())t.updateModuleSettings(n)}_getUpdateParams(){return{props:this.props,oldProps:this.internalState.getOldProps(),context:this.context,changeFlags:this.internalState.changeFlags}}_getNeedsRedraw(n){if(!this.internalState)return!1;let t=!1;t=t||this.internalState.needsRedraw&&this.id,this.internalState.needsRedraw=this.internalState.needsRedraw&&!n.clearRedrawFlags;const e=this.getAttributeManager(),l=e&&e.getNeedsRedraw(n);return t=t||l}_getAttributeManager(){return new hn(this.context.gl,{id:this.props.id,stats:this.context.stats})}_initState(){p(!this.internalState&&!this.state);const n=this._getAttributeManager();n&&n.addInstanced({instancePickingColors:{type:V.a.UNSIGNED_BYTE,size:3,update:this.calculateInstancePickingColors}}),this.internalState=new Xn({attributeManager:n,layer:this}),this.state={},this.state.attributeManager=n,this.internalState.onAsyncPropUpdated=this._onAsyncPropUpdated.bind(this),this.internalState.setAsyncProps(this.props)}_transferState(n){const{state:t,internalState:e}=n;if(p(t&&e),this!==n){this.internalState=e,this.internalState.component=this,this.state=t,t.layer=this,this.internalState.setAsyncProps(this.props);for(const n of this.getModels())n.userData.layer=this;this.diffProps(this.props,this.internalState.getOldProps())}}_onAsyncPropUpdated(){this.diffProps(this.props,this.internalState.getOldProps()),this.setLayerNeedsUpdate()}_activeUpdateTrigger(n){this.invalidateAttribute(n)}_updateBaseUniforms(){const n={opacity:"function"==typeof this.props.opacity?n=>Math.pow(this.props.opacity(n),1/2.2):Math.pow(this.props.opacity,1/2.2)};for(const t of this.getModels())t.setUniforms(n)}setUniforms(n){for(const t of this.getModels())t.setUniforms(n);this.setNeedsRedraw(),i.deprecated("layer.setUniforms","model.setUniforms")()}is64bitEnabled(){return i.deprecated("is64bitEnabled","use64bitProjection")(),this.use64bitProjection()}}function Qn(n,{filter:t=(()=>!0),map:e=(n=>n),result:l=[]}={}){return Array.isArray(n)?function n(t,e,l,i){let r=-1;for(;++r<t.length;){const u=t[r];Array.isArray(u)?n(u,e,l,i):e(u)&&i.push(l(u))}return i}(n,t,e,l):t(n)?[e(n)]:[]}function Jn({target:n,source:t,start:e=0,count:l=1}){const i=t.length,r=l*i;let u=0;for(let l=e;u<i;u++)n[l++]=t[u];for(;u<r;)u<r-u?(n.copyWithin(e+u,e,e+u),u*=2):(n.copyWithin(e+u,e,e+r-u),u=r);return n}Kn.layerName="Layer",Kn.defaultProps=$n;class nt extends Kn{get isComposite(){return!0}getSubLayers(){return this.internalState&&this.internalState.subLayers||[]}initializeState(){}setState(n){super.setState(n),this.setLayerNeedsUpdate()}getPickingInfo({info:n}){return n}renderLayers(){return null}shouldRenderSubLayer(n,t){const{_subLayerProps:e}=this.props;return t&&t.length||e&&e[n]}getSubLayerClass(n,t){const{_subLayerProps:e}=this.props;return e&&e[n]&&e[n].type||t}getSubLayerProps(n){const{opacity:t,pickable:e,visible:l,parameters:i,getPolygonOffset:r,highlightedObjectIndex:u,autoHighlight:o,highlightColor:a,coordinateSystem:s,coordinateOrigin:c,wrapLongitude:h,positionFormat:f,modelMatrix:d,_subLayerProps:p}=this.props,g={opacity:t,pickable:e,visible:l,parameters:i,getPolygonOffset:r,highlightedObjectIndex:u,autoHighlight:o,highlightColor:a,coordinateSystem:s,coordinateOrigin:c,wrapLongitude:h,positionFormat:f,modelMatrix:d};return n&&Object.assign(g,n,p&&p[n.id],{id:`${this.props.id}-${n.id}`,updateTriggers:Object.assign({all:this.props.updateTriggers.all},n.updateTriggers)}),g}_getAttributeManager(){return null}_renderLayers(){let{subLayers:n}=this.internalState;n&&!this.needsUpdate()?i.log(3,`Composite layer reused subLayers ${this}`,this.internalState.subLayers)():(n=Qn(n=this.renderLayers(),{filter:Boolean}),this.internalState.subLayers=n,i.log(2,`Composite layer rendered new subLayers ${this}`,n)());for(const t of n)t.parent=this}}nt.layerName="CompositeLayer";var tt=e(125);var et=e(13),lt=e(124),it=e(61);const rt=Math.PI/180,ut=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],ot=[0,0,0],at=0,st="Illegal argument to Viewport";class ct{constructor(n={}){const{id:t=null,x:e=0,y:l=0,width:i=1,height:r=1}=n;this.id=t||this.constructor.displayName||"viewport",this.x=e,this.y=l,this.width=i||1,this.height=r||1,this._initViewMatrix(n),this._initProjectionMatrix(n),this._initPixelMatrices(),this.equals=this.equals.bind(this),this.project=this.project.bind(this),this.unproject=this.unproject.bind(this),this.projectPosition=this.projectPosition.bind(this),this.unprojectPosition=this.unprojectPosition.bind(this),this.projectFlat=this.projectFlat.bind(this),this.unprojectFlat=this.unprojectFlat.bind(this),this.getMatrices=this.getMatrices.bind(this)}equals(n){return n instanceof ct&&(n.width===this.width&&n.height===this.height&&n.scale===this.scale&&Object(et.e)(n.projectionMatrix,this.projectionMatrix)&&Object(et.e)(n.viewMatrix,this.viewMatrix))}project(n,{topLeft:t=!0}={}){const e=this.projectPosition(n),l=Object(N.k)(e,this.pixelProjectionMatrix),[i,r]=l,u=t?r:this.height-r;return 2===n.length?[i,u]:[i,u,l[2]]}unproject(n,{topLeft:t=!0,targetZ:e}={}){const[l,i,r]=n,u=t?i:this.height-i,o=e&&e*this.distanceScales.pixelsPerMeter[2],a=Object(N.h)([l,u,r],this.pixelUnprojectionMatrix,o),[s,c,h]=this.unprojectPosition(a);return Number.isFinite(r)?[s,c,h]:Number.isFinite(e)?[s,c,e]:[s,c]}projectPosition(n){const[t,e]=this.projectFlat(n);return[t,e,(n[2]||0)*this.distanceScales.pixelsPerMeter[2]]}unprojectPosition(n){const[t,e]=this.unprojectFlat(n);return[t,e,(n[2]||0)*this.distanceScales.metersPerPixel[2]]}projectFlat(n,t=this.scale){if(this.isGeospatial)return Object(N.g)(n,t);const{pixelsPerMeter:e}=this.distanceScales;return[n[0]*e[0],n[1]*e[1]]}unprojectFlat(n,t=this.scale){if(this.isGeospatial)return Object(N.j)(n,t);const{metersPerPixel:e}=this.distanceScales;return[n[0]*e[0],n[1]*e[1]]}getDistanceScales(n=null){return n?Object(N.b)({longitude:n[0],latitude:n[1],scale:this.scale,highPrecision:!0}):this.distanceScales}getMatrices({modelMatrix:n=null}={}){let t=this.viewProjectionMatrix,e=this.pixelProjectionMatrix,l=this.pixelUnprojectionMatrix;return n&&(t=a.g([],this.viewProjectionMatrix,n),e=a.g([],this.pixelProjectionMatrix,n),l=a.e([],e)),Object.assign({modelViewProjectionMatrix:t,viewProjectionMatrix:this.viewProjectionMatrix,viewMatrix:this.viewMatrix,projectionMatrix:this.projectionMatrix,pixelProjectionMatrix:e,pixelUnprojectionMatrix:l,width:this.width,height:this.height,scale:this.scale})}containsPixel({x:n,y:t,width:e=1,height:l=1}){return n<this.x+this.width&&this.x<n+e&&t<this.y+this.height&&this.y<t+l}getCameraPosition(){return this.cameraPosition}getCameraDirection(){return this.cameraDirection}getCameraUp(){return this.cameraUp}_addMetersToLngLat(n,t){const[e,l,i=0]=n,[r,u,o=0]=this._metersToLngLatDelta(t);return 2===n.length?[e+r,l+u]:[e+r,l+u,i+o]}_metersToLngLatDelta(n){const[t,e,l=0]=n;p(Number.isFinite(t)&&Number.isFinite(e)&&Number.isFinite(l),st);const{pixelsPerMeter:i,degreesPerPixel:r}=this.distanceScales,u=t*i[0]*r[0],o=e*i[1]*r[1];return 2===n.length?[u,o]:[u,o,l]}_createProjectionMatrix({orthographic:n,fovyRadians:t,aspect:e,focalDistance:l,near:i,far:r}){return p(Number.isFinite(t)),n?(new lt.a).orthographic({fovy:t,aspect:e,focalDistance:l,near:i,far:r}):(new lt.a).perspective({fovy:t,aspect:e,near:i,far:r})}_initViewMatrix(n){const{viewMatrix:t=ut,longitude:e=null,latitude:l=null,zoom:i=null,position:r=null,modelMatrix:u=null,focalDistance:o=1,distanceScales:s=null}=n;this.isGeospatial=Number.isFinite(l)&&Number.isFinite(e),this.zoom=i,Number.isFinite(this.zoom)||(this.zoom=this.isGeospatial?Object(N.c)({latitude:l})+Math.log2(o):at);const c=Math.pow(2,this.zoom);this.scale=c,this.distanceScales=this.isGeospatial?Object(N.b)({latitude:l,longitude:e,scale:this.scale}):s||{pixelsPerMeter:[c,c,c],metersPerPixel:[1/c,1/c,1/c]},this.focalDistance=o,this.distanceScales.metersPerPixel=new it.a(this.distanceScales.metersPerPixel),this.distanceScales.pixelsPerMeter=new it.a(this.distanceScales.pixelsPerMeter),this.position=ot,this.meterOffset=ot,r&&(this.position=r,this.modelMatrix=u,this.meterOffset=u?u.transformVector(r):r),this.isGeospatial?(this.longitude=e,this.latitude=l,this.center=this._getCenterInWorld({longitude:e,latitude:l}),this.viewMatrixUncentered=a.n([],t,[1,-1,1])):(this.center=r?this.projectPosition(r):[0,0,0],this.viewMatrixUncentered=t),this.viewMatrix=(new lt.a).multiplyRight(this.viewMatrixUncentered).translate(new it.a(this.center||ot).negate())}_getCenterInWorld({longitude:n,latitude:t}){const{meterOffset:e,scale:l,distanceScales:i}=this,r=this.projectFlat([n,t],l),u=new it.a(r[0],r[1],0);if(e){const n=new it.a(e).scale(i.pixelsPerMeter);u.add(n)}return u}_initProjectionMatrix(n){const{projectionMatrix:t=null,orthographic:e=!1,fovyRadians:l,fovyDegrees:i,fovy:r,near:u=.1,far:o=1e3,focalDistance:a=1,orthographicFocalDistance:s}=n,c=l||(i||r||75)*rt;this.projectionMatrix=t||this._createProjectionMatrix({orthographic:e,fovyRadians:c,aspect:this.width/this.height,focalDistance:s||a,near:u,far:o})}_initPixelMatrices(){const n=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];a.g(n,n,this.projectionMatrix),a.g(n,n,this.viewMatrix),this.viewProjectionMatrix=n,this.viewMatrixInverse=a.e([],this.viewMatrix)||this.viewMatrix;const{eye:t,direction:e,up:l}=function({viewMatrix:n,viewMatrixInverse:t}){return{eye:[t[12],t[13],t[14]],direction:[n[2],n[6],n[10]],up:[n[1],n[5],n[9]]}}({viewMatrix:this.viewMatrix,viewMatrixInverse:this.viewMatrixInverse});this.cameraPosition=t,this.cameraDirection=e,this.cameraUp=l;const r=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],u=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];a.n(r,r,[this.width/2,-this.height/2,1]),a.o(r,r,[1,-1,0]),a.g(u,r,this.viewProjectionMatrix),this.pixelProjectionMatrix=u,this.viewportMatrix=r,this.pixelUnprojectionMatrix=a.e([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],this.pixelProjectionMatrix),this.pixelUnprojectionMatrix||i.warn("Pixel project matrix not invertible")()}}ct.displayName="Viewport";const ht=2,ft=4,dt=Object.seal({layerManager:null,deck:null,gl:null,time:-1,useDevicePixels:!0,stats:null,shaderCache:null,pickingFBO:null,animationProps:null,userData:{}}),pt=n=>n instanceof Kn?`${n}`:n?"invalid":"null";class gt{constructor(n,{deck:t,stats:e,viewport:l=null}={}){this.lastRenderedLayers=[],this.layers=[],this.context=Object.assign({},dt,{layerManager:this,deck:t,gl:n,shaderCache:n&&new r._ShaderCache({gl:n,_cachePrograms:!0}),stats:e||new tt.a({id:"deck.gl"}),viewport:l||new ct({id:"DEFAULT-INITIAL-VIEWPORT"})}),this._needsRedraw="Initial render",this._needsUpdate=!1,this._debug=!1,this.activateViewport=this.activateViewport.bind(this),this._initSeer=this._initSeer.bind(this),this._editSeer=this._editSeer.bind(this),Object.seal(this),bn(this._initSeer),_n(this._editSeer)}finalize(){dn.a.removeListener(this._initSeer),dn.a.removeListener(this._editSeer)}needsRedraw(n={clearRedrawFlags:!1}){return this._checkIfNeedsRedraw(n)}needsUpdate(){return this._needsUpdate}setNeedsRedraw(n){this._needsRedraw=this._needsRedraw||n}setNeedsUpdate(n){this._needsUpdate=this._needsUpdate||n}getLayers({layerIds:n=null}={}){return n?this.layers.filter(t=>n.find(n=>0===t.id.indexOf(n))):this.layers}setProps(n){"debug"in n&&(this._debug=n.debug),"userData"in n&&(this.context.userData=n.userData),"useDevicePixels"in n&&(this.context.useDevicePixels=n.useDevicePixels),"layers"in n&&this.setLayers(n.layers)}setLayers(n){if(n===this.lastRenderedLayers)return i.log(3,"Ignoring layer update due to layer array not changed")(),this;this.lastRenderedLayers=n,n=Qn(n,{filter:Boolean});for(const t of n)t.context=this.context;const{error:t,generatedLayers:e}=this._updateLayers({oldLayers:this.layers,newLayers:n});if(this.layers=e,t)throw t;return this}updateLayers(n={}){"time"in n&&(this.context.time=n.time);const t=this.needsUpdate();t&&(this.setNeedsRedraw(`updating layers: ${t}`),this.setLayers([...this.lastRenderedLayers]))}_checkIfNeedsRedraw(n){let t=this._needsRedraw;n.clearRedrawFlags&&(this._needsRedraw=!1);for(const e of this.layers){const l=e.getNeedsRedraw(n);t=t||l}return t}activateViewport(n){const t=this.context.viewport;if(!t||!n.equals(t)){i.log(4,"Viewport changed",n)(),this.context.viewport=n;for(const n of this.layers)n.setChangeFlags({viewportChanged:"Viewport changed"}),this._updateLayer(n)}return p(this.context.viewport,"LayerManager: viewport not set"),this}_updateLayers({oldLayers:n,newLayers:t}){const e={};for(const t of n)e[t.id]?i.warn(`Multiple old layers with same id ${pt(t)}`)():e[t.id]=t;const l=[],r=this._updateSublayersRecursively({newLayers:t,oldLayerMap:e,generatedLayers:l}),u=this._finalizeOldLayers(e);return this._needsUpdate=!1,{error:r||u,generatedLayers:l}}_updateSublayersRecursively({newLayers:n,oldLayerMap:t,generatedLayers:e}){let l=null;for(const r of n){r.context=this.context;const n=t[r.id];null===n&&i.warn(`Multiple new layers with same id ${pt(r)}`)(),t[r.id]=null;let u=null;try{if(this._debug&&n!==r&&r.validateProps(),n){this._transferLayerState(n,r);const t=this._updateLayer(r);l=l||t,xn(r)}else{const n=this._initializeLayer(r);l=l||n,yn(r)}e.push(r),u=r.isComposite&&r.getSubLayers()}catch(n){i.warn(`error during matching of ${pt(r)}`,n)(),l=l||n}if(u){const n=this._updateSublayersRecursively({newLayers:u,oldLayerMap:t,generatedLayers:e});l=l||n}}return l}_finalizeOldLayers(n){let t=null;for(const e in n){const l=n[e];l&&(t=t||this._finalizeLayer(l))}return t}_initializeLayer(n){i.log(ht,`initializing ${pt(n)}`)();let t=null;try{n._initialize(),n.lifecycle=Ln.INITIALIZED}catch(e){i.warn(`error while initializing ${pt(n)}\n`,e)(),t=t||e}n.internalState.layer=n;for(const t of n.getModels())t.userData.layer=n;return t}_transferLayerState(n,t){t._transferState(n),t.lifecycle=Ln.MATCHED,t!==n?(i.log(ft,`matched ${pt(t)}`,n,"->",t)(),n.lifecycle=Ln.AWAITING_GC):i.log(ft,`Matching layer is unchanged ${t.id}`)()}_updateLayer(n){i.log(ft,`updating ${n} because: ${n.printChangeFlags()}`)();let t=null;try{n._update()}catch(e){i.warn(`error during update of ${pt(n)}`,e)(),t=e}return t}_finalizeLayer(n){p(n.lifecycle!==Ln.AWAITING_FINALIZATION),n.lifecycle=Ln.AWAITING_FINALIZATION;let t=null;this.setNeedsRedraw(`finalized ${pt(n)}`);try{n._finalize()}catch(e){i.warn(`error during finalization of ${pt(n)}`,e)(),t=e}return n.lifecycle=Ln.FINALIZED,i.log(ht,`finalizing ${pt(n)}`)(),t}_initSeer(){this.layers.forEach(n=>{yn(n),xn(n)})}_editSeer(n){"edit"===n.type&&"props"===n.valuePath[0]&&(vn(n.itemKey,n.valuePath.slice(1),n.value),this.updateLayers())}}class vt extends r.PointLight{constructor(n){super(n),this.projectedLight=new r.PointLight(n)}getProjectedLight({layer:n}){const t=n.context.viewport,{coordinateSystem:e,coordinateOrigin:l}=n.props,i=U(this.position,{viewport:t,coordinateSystem:e,coordinateOrigin:l,fromCoordinateSystem:t.isGeospatial?c.LNGLAT:c.IDENTITY,fromCoordinateOrigin:[0,0,0]});return this.projectedLight.position=i,this.projectedLight}}class mt extends vt{getProjectedLight({layer:n}){const t=n.context.viewport,{coordinateSystem:e,coordinateOrigin:l,modelMatrix:i}=n.props,{project_uCameraPosition:r}=w({viewport:t,modelMatrix:i,coordinateSystem:e,coordinateOrigin:l});return this.projectedLight.position=r,this.projectedLight}}const _t=Math.PI/180,bt=864e5,yt=2440588,xt=2451545,wt=23.4397*_t,Et=357.5291,Pt=.98560028,Ot=280.147,St=360.9856235;function At(n,t,e){const l=_t*-e,i=_t*t,r=function(n){return function(n){return n/bt-.5+yt}(n)-xt}(n),u=function(n){const t=function(n){const t=n,e=_t*(1.9148*Math.sin(t)+.02*Math.sin(2*t)+3e-4*Math.sin(3*t));return t+e+102.9372*_t+Math.PI}((e=n,_t*(Et+Pt*e)));var e;return{declination:Ct(t,0),rightAscension:Tt(t,0)}}(r),o=function(n,t){return _t*(Ot+St*n)-t}(r,l)-u.rightAscension;return{azimuth:Lt(o,i,u.declination),altitude:Mt(o,i,u.declination)}}function Tt(n,t){const e=n;return Math.atan2(Math.sin(e)*Math.cos(wt)-Math.tan(t)*Math.sin(wt),Math.cos(e))}function Ct(n,t){const e=n;return Math.asin(Math.sin(t)*Math.cos(wt)+Math.cos(t)*Math.sin(wt)*Math.sin(e))}function Lt(n,t,e){const l=n,i=t,r=e;return Math.atan2(Math.sin(l),Math.cos(l)*Math.sin(i)-Math.tan(r)*Math.cos(i))}function Mt(n,t,e){const l=n,i=t,r=e;return Math.asin(Math.sin(i)*Math.sin(r)+Math.cos(i)*Math.cos(r)*Math.cos(l))}class jt extends r.DirectionalLight{constructor({timestamp:n,...t}){super(t),this.timestamp=n}getProjectedLight({layer:n}){const{latitude:t,longitude:e}=n.context.viewport;return this.direction=function(n,t,e){const{azimuth:l,altitude:i}=At(n,t,e),r=l+Math.PI;return[-Math.sin(r),-Math.cos(r),-Math.sin(i)]}(this.timestamp,t,e),this}}function Rt(n,t){return n===t||Object.keys(n).every(e=>Array.isArray(n[e])&&Array.isArray(t[e])?Rt(n[e],t[e]):n[e]===t[e])}const It=/([0-9]+\.?[0-9]*)(%|px)/;function kt(n){switch(typeof n){case"number":return{position:n,relative:!1};case"string":const t=n.match(It);if(t&&t.length>=3){const n="%"===t[2],e=parseFloat(t[1]);return{position:n?e/100:e,relative:n}}default:throw new Error(`Could not parse position string ${n}`)}}function Ft(n,t){return n.relative?Math.round(n.position*t):n.position}class Nt{constructor(n={}){const{id:t=null,x:e=0,y:l=0,width:i="100%",height:r="100%",projectionMatrix:u=null,fovy:o=50,near:a=.1,far:s=1e3,modelMatrix:c=null,viewportInstance:h=null,type:f=ct}=n;p(!h||h instanceof ct),this.viewportInstance=h,this.id=t||this.constructor.displayName||"view",this.type=f,this.props=Object.assign({},n,{projectionMatrix:u,fovy:o,near:a,far:s,modelMatrix:c}),this._parseDimensions({x:e,y:l,width:i,height:r}),this.equals=this.equals.bind(this),Object.seal(this)}equals(n){if(this===n)return!0;if(this.viewportInstance)return n.viewportInstance&&this.viewportInstance.equals(n.viewportInstance);return Rt(this.props,n.props)}makeViewport({width:n,height:t,viewState:e}){if(this.viewportInstance)return this.viewportInstance;e=this.filterViewState(e);const l=this.getDimensions({width:n,height:t}),i=Object.assign({viewState:e},e,this.props,l);return this._getViewport(i)}getViewStateId(){switch(typeof this.props.viewState){case"string":return this.props.viewState;case"object":return this.props.viewState&&this.props.viewState.id;default:return this.id}}filterViewState(n){if(this.props.viewState&&"object"==typeof this.props.viewState){if(!this.props.viewState.id)return this.props.viewState;const t=Object.assign({},n);for(const n in this.props.viewState)"id"!==n&&(t[n]=this.props.viewState[n]);return t}return n}getDimensions({width:n,height:t}){return{x:Ft(this._x,n),y:Ft(this._y,t),width:Ft(this._width,n),height:Ft(this._height,t)}}_getControllerProps(n){let t=this.props.controller;return t?!0===t?n:("function"==typeof t&&(t={type:t}),Object.assign({},n,t)):null}_getViewport(n){const{type:t}=this;return new t(n)}_parseDimensions({x:n,y:t,width:e,height:l}){this._x=kt(n),this._y=kt(t),this._width=kt(e),this._height=kt(l)}}class Dt{constructor(n={}){this.views=[],this.width=100,this.height=100,this.viewState={},this.controllers={},this._viewports=[],this._viewportMap={},this._isUpdating=!1,this._needsRedraw="Initial render",this._needsUpdate=!0,this._eventManager=n.eventManager,this._eventCallbacks={onViewStateChange:n.onViewStateChange,onInteractiveStateChange:n.onInteractiveStateChange},Object.seal(this),this.setProps(n)}finalize(){for(const n in this.controllers)this.controllers[n]&&this.controllers[n].finalize();this.controllers={}}needsRedraw(n={clearRedrawFlags:!1}){const t=this._needsRedraw;return n.clearRedrawFlags&&(this._needsRedraw=!1),t}setNeedsUpdate(n){this._needsUpdate=this._needsUpdate||n,this._needsRedraw=this._needsRedraw||n}updateViewStates(n={}){if("time"in n)for(const t in this.controllers){const e=this.controllers[t];e&&e.updateTransition(n.time)}}getViewports(n){return n?this._viewports.filter(t=>t.containsPixel(n)):this._viewports}getViews(){const n={};return this.views.forEach(t=>{n[t.id]=t}),n}getView(n){return"string"==typeof n?this.views.find(t=>t.id===n):n}getViewState(n){const t=this.getView(n),e=t&&this.viewState[t.getViewStateId()]||this.viewState;return t?t.filterViewState(e):e}getViewport(n){return this._viewportMap[n]}project(n,t={topLeft:!0}){const e=this.getViewports();for(let l=e.length-1;l>=0;--l){const i=e[l];if(i.contains(n,t))return i.project(n,t)}return null}unproject(n,t){const e=this.getViewports();for(let l=e.length-1;l>=0;--l){const i=e[l];if(i.containsPixel(n,t))return i.unproject(n)}return null}setProps(n){"views"in n&&this._setViews(n.views),"viewState"in n&&this._setViewState(n.viewState),("width"in n||"height"in n)&&this._setSize(n.width,n.height),this._isUpdating||this._update()}_update(){this._isUpdating=!0,this._needsUpdate&&(this._needsUpdate=!1,this._rebuildViewports()),this._needsUpdate&&(this._needsUpdate=!1,this._rebuildViewports()),this._isUpdating=!1}_setSize(n,t){p(Number.isFinite(n)&&Number.isFinite(t)),n===this.width&&t===this.height||(this.width=n,this.height=t,this.setNeedsUpdate("Size changed"))}_setViews(n){n=Qn(n,{filter:Boolean}).map(n=>n instanceof ct?new Nt({viewportInstance:n}):n),this._diffViews(n,this.views)&&this.setNeedsUpdate("views changed"),this.views=n}_setViewState(n){if(n){!Rt(n,this.viewState)&&this.setNeedsUpdate("viewState changed"),this.viewState=n}else i.warn("setting null viewState")()}_onViewStateChange(n,t){t.viewId=n,this._eventCallbacks.onViewStateChange(t)}_createController(n){return new(0,n.type)(Object.assign({eventManager:this._eventManager,onViewStateChange:this._onViewStateChange.bind(this,n.id),onStateChange:this._eventCallbacks.onInteractiveStateChange},n))}_updateController(n,t,e,l){if(n.controller){const i=Object.assign({},n.controller,t,{id:n.id,x:e.x,y:e.y,width:e.width,height:e.height});return l?l.setProps(i):l=this._createController(i),l}return null}_rebuildViewports(){const{width:n,height:t,views:e}=this,l=this.controllers;this.controllers={},this._viewports=e.map(e=>{const i=this.getViewState(e),r=e.makeViewport({width:n,height:t,viewState:i});return this.controllers[e.id]=this._updateController(e,i,r,l[e.id]),r});for(const n in l)l[n]&&!this.controllers[n]&&l[n].finalize();this._buildViewportMap()}_buildViewportMap(){this._viewportMap={},this._viewports.forEach(n=>{n.id&&(this._viewportMap[n.id]=this._viewportMap[n.id]||n)})}_diffViews(n,t){return n.length!==t.length||n.some((e,l)=>!n[l].equals(t[l]))}}var Bt=e(12),Ut=e(2),zt=e(3),Vt=e(7),Gt=e(6),Wt=e(8),Ht=e(16),Xt=e(25),Yt=Object(Xt.a)(),Zt=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width,l=t.height,i=t.viewMatrix,r=void 0===i?Yt:i,u=t.projectionMatrix,o=void 0===u?Yt:u;Object(Ut.a)(this,n),this.width=e||1,this.height=l||1,this.scale=1,this.pixelsPerMeter=1,this.viewMatrix=r,this.projectionMatrix=o;var s=Object(Xt.a)();a.g(s,s,this.projectionMatrix),a.g(s,s,this.viewMatrix),this.viewProjectionMatrix=s;var c=Object(Xt.a)();a.n(c,c,[this.width/2,-this.height/2,1]),a.o(c,c,[1,-1,0]),a.g(c,c,this.viewProjectionMatrix);var h=a.e(Object(Xt.a)(),c);if(!h)throw new Error("Pixel project matrix not invertible");this.pixelProjectionMatrix=c,this.pixelUnprojectionMatrix=h,this.equals=this.equals.bind(this),this.project=this.project.bind(this),this.unproject=this.unproject.bind(this),this.projectPosition=this.projectPosition.bind(this),this.unprojectPosition=this.unprojectPosition.bind(this),this.projectFlat=this.projectFlat.bind(this),this.unprojectFlat=this.unprojectFlat.bind(this)}return Object(zt.a)(n,[{key:"equals",value:function(t){return t instanceof n&&(t.width===this.width&&t.height===this.height&&a.b(t.projectionMatrix,this.projectionMatrix)&&a.b(t.viewMatrix,this.viewMatrix))}},{key:"project",value:function(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).topLeft,e=void 0===t||t,l=this.projectPosition(n),i=Object(N.k)(l,this.pixelProjectionMatrix),r=Object(Bt.a)(i,2),u=r[0],o=r[1],a=e?o:this.height-o;return 2===n.length?[u,a]:[u,a,i[2]]}},{key:"unproject",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=t.topLeft,l=void 0===e||e,i=t.targetZ,r=Object(Bt.a)(n,3),u=r[0],o=r[1],a=r[2],s=l?o:this.height-o,c=i&&i*this.pixelsPerMeter,h=Object(N.h)([u,s,a],this.pixelUnprojectionMatrix,c),f=this.unprojectPosition(h),d=Object(Bt.a)(f,3),p=d[0],g=d[1],v=d[2];return Number.isFinite(a)?[p,g,v]:Number.isFinite(i)?[p,g,i]:[p,g]}},{key:"projectPosition",value:function(n){var t=this.projectFlat(n),e=Object(Bt.a)(t,2);return[e[0],e[1],(n[2]||0)*this.pixelsPerMeter]}},{key:"unprojectPosition",value:function(n){var t=this.unprojectFlat(n),e=Object(Bt.a)(t,2);return[e[0],e[1],(n[2]||0)/this.pixelsPerMeter]}},{key:"projectFlat",value:function(n){arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.scale;return n}},{key:"unprojectFlat",value:function(n){arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.scale;return n}}]),n}(),qt=e(22),$t=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},l=e.width,i=e.height,r=e.latitude,u=void 0===r?0:r,o=e.longitude,a=void 0===o?0:o,s=e.zoom,c=void 0===s?0:s,h=e.pitch,f=void 0===h?0:h,d=e.bearing,p=void 0===d?0:d,g=e.altitude,v=void 0===g?1.5:g,m=e.nearZMultiplier,_=e.farZMultiplier;Object(Ut.a)(this,t),l=l||1,i=i||1;var b=Object(N.l)(c);v=Math.max(.75,v);var y=Object(N.g)([a,u],b);y[2]=0;var x=Object(N.d)({width:l,height:i,pitch:f,bearing:p,altitude:v,nearZMultiplier:m||1/i,farZMultiplier:_||1.01}),w=Object(N.f)({height:i,center:y,pitch:f,bearing:p,altitude:v,flipY:!0});return(n=Object(Vt.a)(this,Object(Gt.a)(t).call(this,{width:l,height:i,viewMatrix:w,projectionMatrix:x}))).latitude=u,n.longitude=a,n.zoom=c,n.pitch=f,n.bearing=p,n.altitude=v,n.scale=b,n.center=y,n.pixelsPerMeter=Object(N.b)(Object(Ht.a)(Object(Ht.a)(n))).pixelsPerMeter[2],Object.freeze(Object(Ht.a)(Object(Ht.a)(n))),n}return Object(Wt.a)(t,n),Object(zt.a)(t,[{key:"projectFlat",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.scale;return Object(N.g)(n,t)}},{key:"unprojectFlat",value:function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.scale;return Object(N.j)(n,t)}},{key:"getMapCenterByLngLatPosition",value:function(n){var t=n.lngLat,e=n.pos,l=Object(N.h)(e,this.pixelUnprojectionMatrix),i=Object(N.g)(t,this.scale),r=qt.a([],i,qt.e([],l)),u=qt.a([],this.center,r);return Object(N.j)(u,this.scale)}},{key:"getLocationAtPoint",value:function(n){var t=n.lngLat,e=n.pos;return this.getMapCenterByLngLatPosition({lngLat:t,pos:e})}},{key:"fitBounds",value:function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=this.width,i=this.height,r=Qt(Object.assign({width:l,height:i,bounds:n},e));return new t({width:l,height:i,longitude:r.longitude,latitude:r.latitude,zoom:r.zoom})}}]),t}(Zt),Kt=e(36);function Qt(n){var t=n.width,e=n.height,l=n.bounds,i=n.padding,r=void 0===i?0:i,u=n.offset,o=void 0===u?[0,0]:u,a=Object(Bt.a)(l,2),s=Object(Bt.a)(a[0],2),c=s[0],h=s[1],f=Object(Bt.a)(a[1],2),d=f[0],p=f[1];if(Number.isFinite(r)){r={top:r,bottom:r,left:r,right:r}}else Object(Kt.a)(Number.isFinite(r.top)&&Number.isFinite(r.bottom)&&Number.isFinite(r.left)&&Number.isFinite(r.right));var g=new $t({width:t,height:e,longitude:0,latitude:0,zoom:0}),v=g.project([c,p]),m=g.project([d,h]),_=[Math.abs(m[0]-v[0]),Math.abs(m[1]-v[1])],b=[t-r.left-r.right-2*Math.abs(o[0]),e-r.top-r.bottom-2*Math.abs(o[1])];Object(Kt.a)(b[0]>0&&b[1]>0);var y=b[0]/_[0],x=b[1]/_[1],w=(r.right-r.left)/2/y,E=(r.bottom-r.top)/2/x,P=[(m[0]+v[0])/2+w,(m[1]+v[1])/2+E],O=g.unproject(P),S=g.zoom+Math.log2(Math.abs(Math.min(y,x)));return{longitude:O[0],latitude:O[1],zoom:S}}const Jt="Illegal argument to WebMercatorViewport";class ne extends ct{constructor(n={}){const{latitude:t=0,longitude:e=0,zoom:l=11,pitch:i=0,bearing:r=0,nearZMultiplier:u=.1,farZMultiplier:o=10,orthographic:a=!1}=n;let{width:s,height:c,altitude:h=1.5}=n;s=s||1,c=c||1,h=Math.max(.75,h);const{fov:f,aspect:d,focalDistance:p,near:g,far:v}=Object(N.e)({width:s,height:c,pitch:i,altitude:h,nearZMultiplier:u,farZMultiplier:o}),m=Object(N.f)({height:c,pitch:i,bearing:r,altitude:h}),_=n.position&&[n.position[0],n.position[1],0];super(Object.assign({},n,{width:s,height:c,viewMatrix:m,longitude:e,latitude:t,zoom:l,position:_,orthographic:a,fovyRadians:f,aspect:d,orthographicFocalDistance:p,near:g,far:v})),this.latitude=t,this.longitude=e,this.zoom=l,this.pitch=i,this.bearing=r,this.altitude=h,this.orthographic=a,this.metersToLngLatDelta=this.metersToLngLatDelta.bind(this),this.lngLatDeltaToMeters=this.lngLatDeltaToMeters.bind(this),this.addMetersToLngLat=this.addMetersToLngLat.bind(this),Object.freeze(this)}metersToLngLatDelta(n){const[t,e,l=0]=n;p(Number.isFinite(t)&&Number.isFinite(e)&&Number.isFinite(l),Jt);const{pixelsPerMeter:i,degreesPerPixel:r}=this.distanceScales,u=t*i[0]*r[0],o=e*i[1]*r[1];return 2===n.length?[u,o]:[u,o,l]}lngLatDeltaToMeters(n){const[t,e,l=0]=n;p(Number.isFinite(t)&&Number.isFinite(e)&&Number.isFinite(l),Jt);const{pixelsPerDegree:i,metersPerPixel:r}=this.distanceScales,u=t*i[0]*r[0],o=e*i[1]*r[1];return 2===n.length?[u,o]:[u,o,l]}addMetersToLngLat(n,t){return Object(N.a)(n,t)}getMapCenterByLngLatPosition({lngLat:n,pos:t}){const e=Object(N.h)(t,this.pixelUnprojectionMatrix),l=this.projectFlat(n),i=qt.a([],l,qt.e([],e)),r=qt.a([],this.center,i);return this.unprojectFlat(r)}getLocationAtPoint({lngLat:n,pos:t}){return this.getMapCenterByLngLatPosition({lngLat:n,pos:t})}fitBounds(n,t={}){const{width:e,height:l}=this,{longitude:i,latitude:r,zoom:u}=Qt(Object.assign({width:e,height:l,bounds:n},t));return new ne({width:e,height:l,longitude:i,latitude:r,zoom:u})}}ne.displayName="WebMercatorViewport";class te{constructor(n={}){Array.isArray(n)&&(n={compare:n,extract:n,required:n});const{compare:t,extract:e,required:l}=n;this._propsToCompare=t,this._propsToExtract=e,this._requiredProps=l}arePropsEqual(n,t){for(const e of this._propsToCompare||Object.keys(t))if(!Object(et.e)(n[e],t[e]))return!1;return!0}initializeProps(n,t){let e;if(this._propsToExtract){const l={},i={};for(const e of this._propsToExtract)l[e]=n[e],i[e]=t[e];e={start:l,end:i}}else e={start:n,end:t};return this._checkRequiredProps(e.start),this._checkRequiredProps(e.end),e}interpolateProps(n,t,e){p(!1,"interpolateProps is not implemented")}_checkRequiredProps(n){this._requiredProps&&this._requiredProps.forEach(t=>{const e=n[t];p(Number.isFinite(e)||Array.isArray(e),`${t} is required for transition`)})}}const ee=["longitude","latitude","zoom","bearing","pitch"];class le extends te{constructor(n=ee){super(n)}interpolateProps(n,t,e){const l={};for(const i in t)l[i]=Object(et.g)(n[i],t[i],e);return l}}const ie=()=>{},re={BREAK:1,SNAP_TO_END:2,IGNORE:3},ue={transitionDuration:0,transitionEasing:n=>n,transitionInterpolator:new le,transitionInterruption:re.BREAK,onTransitionStart:ie,onTransitionInterrupt:ie,onTransitionEnd:ie};class oe{constructor(n,t={}){p(n),this.ControllerState=n,this.props=Object.assign({},ue,t),this.propsInTransition=null,this.time=0,this.transition=new en,this.onViewStateChange=t.onViewStateChange,this._onTransitionUpdate=this._onTransitionUpdate.bind(this)}finalize(){}getViewportInTransition(){return this.propsInTransition}processViewStateChange(n){let t=!1;const e=this.props;if(n=Object.assign({},ue,n),this.props=n,this._shouldIgnoreViewportChange(e,n))return t;if(this._isTransitionEnabled(n)){const l=Object.assign({},e,this.transition.interruption===re.SNAP_TO_END?this.transition.endProps:this.propsInTransition||e);this._triggerTransition(l,n),t=!0}else this.transition.cancel();return t}updateTransition(n){this.time=n,this._updateTransition()}_isTransitionEnabled(n){return n.transitionDuration>0&&n.transitionInterpolator}_isUpdateDueToCurrentTransition(n){return!!this.transition.inProgress&&this.transition.interpolator.arePropsEqual(n,this.propsInTransition)}_shouldIgnoreViewportChange(n,t){return this.transition.inProgress?this.transition.interruption===re.IGNORE||this._isUpdateDueToCurrentTransition(t):!this._isTransitionEnabled(t)||t.transitionInterpolator.arePropsEqual(n,t)}_triggerTransition(n,t){p(this._isTransitionEnabled(t),"Transition is not enabled");const e=new this.ControllerState(n),l=new this.ControllerState(t).shortestPathFrom(e),i=t.transitionInterpolator.initializeProps(n,l);this.propsInTransition={},this.transition.start({duration:t.transitionDuration,easing:t.transitionEasing,interpolator:t.transitionInterpolator,interruption:t.transitionInterruption,startProps:i.start,endProps:i.end,onStart:t.onTransitionStart,onUpdate:this._onTransitionUpdate,onInterrupt:this._onTransitionEnd(t.onTransitionInterrupt),onEnd:this._onTransitionEnd(t.onTransitionEnd)}),this._updateTransition()}_updateTransition(){this.transition.update(this.time)}_onTransitionEnd(n){return t=>{this.propsInTransition=null,n(t)}}_onTransitionUpdate(n){const{interpolator:t,startProps:e,endProps:l,time:i}=n,r=t.interpolateProps(e,l,i);this.propsInTransition=new this.ControllerState(Object.assign({},this.props,r)).getViewportProps(),this.onViewStateChange&&this.onViewStateChange({viewState:this.propsInTransition,interactionState:{inTransition:!0}})}}oe.defaultProps=ue;const ae={transitionDuration:0},se=.01,ce={WHEEL:["wheel"],PAN:["panstart","panmove","panend"],PINCH:["pinchstart","pinchmove","pinchend"],DOUBLE_TAP:["doubletap"],KEYBOARD:["keydown"]};class he{constructor(n,t={}){p(n),this.ControllerState=n,this.controllerState=null,this.controllerStateProps=null,this.eventManager=null,this.transitionManager=new oe(n,t),this._events=null,this._state={isDragging:!1},this.events=[],this.onViewStateChange=null,this.onStateChange=null,this.invertPan=!1,this.handleEvent=this.handleEvent.bind(this),this.setProps(t)}finalize(){for(const n in this._events)this._events[n]&&this.eventManager.off(n,this.handleEvent);this.transitionManager.finalize()}handleEvent(n){const{ControllerState:t}=this;switch(this.controllerState=new t(Object.assign({},this.controllerStateProps,this._state)),n.type){case"panstart":return this._onPanStart(n);case"panmove":return this._onPan(n);case"panend":return this._onPanEnd(n);case"pinchstart":return this._onPinchStart(n);case"pinchmove":return this._onPinch(n);case"pinchend":return this._onPinchEnd(n);case"doubletap":return this._onDoubleTap(n);case"wheel":return this._onWheel(n);case"keydown":return this._onKeyDown(n);default:return!1}}getCenter(n){const{x:t,y:e}=this.controllerStateProps,{offsetCenter:l}=n;return[l.x-t,l.y-e]}isPointInBounds(n){const{width:t,height:e}=this.controllerStateProps;return n[0]>=0&&n[0]<=t&&n[1]>=0&&n[1]<=e}isFunctionKeyPressed(n){const{srcEvent:t}=n;return Boolean(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey)}isDragging(){return this._state.isDragging}setProps(n){"onViewportChange"in n&&i.removed("onViewportChange")(),"onViewStateChange"in n&&(this.onViewStateChange=n.onViewStateChange),"onStateChange"in n&&(this.onStateChange=n.onStateChange),this.controllerStateProps=n,"eventManager"in n&&this.eventManager!==n.eventManager&&(this.eventManager=n.eventManager,this._events={},this.toggleEvents(this.events,!0)),this.transitionManager.processViewStateChange(this.controllerStateProps);const{scrollZoom:t=!0,dragPan:e=!0,dragRotate:l=!0,doubleClickZoom:r=!0,touchZoom:u=!0,touchRotate:o=!1,keyboard:a=!0}=n,s=Boolean(this.onViewStateChange);this.toggleEvents(ce.WHEEL,s&&t),this.toggleEvents(ce.PAN,s&&(e||l)),this.toggleEvents(ce.PINCH,s&&(u||o)),this.toggleEvents(ce.DOUBLE_TAP,s&&r),this.toggleEvents(ce.KEYBOARD,s&&a),this.scrollZoom=t,this.dragPan=e,this.dragRotate=l,this.doubleClickZoom=r,this.touchZoom=u,this.touchRotate=o,this.keyboard=a}updateTransition(n){this.transitionManager.updateTransition(n)}toggleEvents(n,t){this.eventManager&&n.forEach(n=>{this._events[n]!==t&&(this._events[n]=t,t?this.eventManager.on(n,this.handleEvent):this.eventManager.off(n,this.handleEvent))})}setOptions(n){return this.setProps(n)}updateViewport(n,t={},e={}){const l=Object.assign({},n.getViewportProps(),t);if(this.controllerState!==n){const n=this.controllerState?this.controllerState.getViewportProps():null;this.onViewStateChange&&this.onViewStateChange({viewState:l,interactionState:e,oldViewState:n})}Object.assign(this._state,Object.assign({},n.getInteractiveState(),e)),this.onStateChange&&this.onStateChange(this._state)}_onPanStart(n){const t=this.getCenter(n);if(!this.isPointInBounds(t))return!1;const e=this.controllerState.panStart({pos:t}).rotateStart({pos:t});return this.updateViewport(e,ae,{isDragging:!0})}_onPan(n){let t=this.isFunctionKeyPressed(n)||n.rightButton;return(t=this.invertPan?!t:t)?this._onPanMove(n):this._onPanRotate(n)}_onPanEnd(n){const t=this.controllerState.panEnd().rotateEnd();return this.updateViewport(t,null,{isDragging:!1})}_onPanMove(n){if(!this.dragPan)return!1;const t=this.getCenter(n);if(!this.isDragging())return!1;const e=this.controllerState.pan({pos:t});return this.updateViewport(e,ae,{isDragging:!0})}_onPanRotate(n){if(!this.dragRotate)return!1;const{deltaX:t,deltaY:e}=n,{width:l,height:i}=this.controllerState.getViewportProps(),r=t/l,u=e/i,o=this.controllerState.rotate({deltaScaleX:r,deltaScaleY:u});return this.updateViewport(o,ae,{isDragging:!0})}_onWheel(n){if(!this.scrollZoom)return!1;n.preventDefault();const t=this.getCenter(n);if(!this.isPointInBounds(t))return!1;const{delta:e}=n;let l=2/(1+Math.exp(-Math.abs(e*se)));e<0&&0!==l&&(l=1/l);const i=this.controllerState.zoom({pos:t,scale:l});return this.updateViewport(i,ae)}_onPinchStart(n){const t=this.getCenter(n);if(!this.isPointInBounds(t))return!1;const e=this.controllerState.zoomStart({pos:t}).rotateStart({pos:t});return this._state.startPinchRotation=n.rotation,this.updateViewport(e,ae,{isDragging:!0})}_onPinch(n){if(!this.touchZoom&&!this.touchRotate)return!1;let t=this.controllerState;if(this.touchZoom){const{scale:e}=n,l=this.getCenter(n);t=t.zoom({pos:l,scale:e})}if(this.touchRotate){const{rotation:e}=n,{startPinchRotation:l}=this._state;t=t.rotate({deltaScaleX:-(e-l)/180})}return this.updateViewport(t,ae,{isDragging:!0})}_onPinchEnd(n){const t=this.controllerState.zoomEnd().rotateEnd();return this._state.startPinchRotation=0,this.updateViewport(t,null,{isDragging:!1})}_onDoubleTap(n){if(!this.doubleClickZoom)return!1;const t=this.getCenter(n);if(!this.isPointInBounds(t))return!1;const e=this.isFunctionKeyPressed(n),l=this.controllerState.zoom({pos:t,scale:e?.5:2});return this.updateViewport(l,this._getTransitionProps())}_onKeyDown(n){if(!this.keyboard)return!1;const t=this.isFunctionKeyPressed(n),{controllerState:e}=this;let l;switch(n.srcEvent.keyCode){case 189:l=t?e.zoomOut().zoomOut():e.zoomOut();break;case 187:l=t?e.zoomIn().zoomIn():e.zoomIn();break;case 37:l=t?e.rotateLeft():e.moveLeft();break;case 39:l=t?e.rotateRight():e.moveRight();break;case 38:l=t?e.rotateUp():e.moveUp();break;case 40:l=t?e.rotateDown():e.moveDown();break;default:return!1}return this.updateViewport(l,this._getTransitionProps())}_getTransitionProps(){return ae}}var fe=6371e3,de=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.phi,l=t.theta,i=t.radius,r=t.bearing,u=t.pitch,o=(t.altitude,t.radiusScale),a=void 0===o?fe:o;Object(Ut.a)(this,n),0===arguments.length?(this.phi=0,this.theta=0,this.radius=1):Number.isFinite(e)||Number.isFinite(l)?(this.phi=e||0,this.theta=l||0):(Number.isFinite(r)||Number.isFinite(u))&&(this.bearing=r||0,this.pitch=u||0),this.radius=i||1,this.radiusScale=a||1,this.check()}return Object(zt.a)(n,[{key:"toString",value:function(){return this.formatString(et.c)}},{key:"formatString",value:function(n){var t=n.printTypes,e=(n.printDegrees,et.f);return"".concat(t?"Spherical":"","[rho:").concat(e(this.radius),",theta:").concat(e(this.theta),",phi:").concat(e(this.phi),"]")}},{key:"equals",value:function(n){return Object(et.e)(this.radius,n.radius)&&Object(et.e)(this.theta,n.theta)&&Object(et.e)(this.phi,n.phi)}},{key:"exactEquals",value:function(n){return this.radius===n.radius&&this.theta===n.theta&&this.phi===n.phi}},{key:"set",value:function(n,t,e){return this.radius=n,this.phi=t,this.theta=e,this.check()}},{key:"clone",value:function(){return(new this.constructor).copy(this)}},{key:"copy",value:function(n){return this.radius=n.radius,this.phi=n.phi,this.theta=n.theta,this.check()}},{key:"fromLngLatZ",value:function(n){var t=Object(Bt.a)(n,3),e=t[0],l=t[1],i=t[2];this.radius=1+i/this.radiusScale,this.phi=Object(et.h)(l),this.theta=Object(et.h)(e)}},{key:"fromVector3",value:function(n){return this.radius=F.c(n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(n[0],n[1]),this.phi=Math.acos(Object(et.b)(n[2]/this.radius,-1,1))),this.check()}},{key:"toVector3",value:function(){return new it.a(0,0,this.radius).rotateX({radians:this.theta}).rotateZ({radians:this.phi})}},{key:"makeSafe",value:function(){this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi))}},{key:"check",value:function(){if(!(Number.isFinite(this.phi)&&Number.isFinite(this.theta)&&this.radius>0))throw new Error("SphericalCoordinates: some fields set to invalid numbers");return this}},{key:"bearing",get:function(){return 180-Object(et.d)(this.phi)},set:function(n){this.phi=Math.PI-Object(et.h)(n)}},{key:"pitch",get:function(){return Object(et.d)(this.theta)},set:function(n){this.theta=Object(et.h)(n)}},{key:"longitude",get:function(){return Object(et.d)(this.phi)}},{key:"latitude",get:function(){return Object(et.d)(this.theta)}},{key:"lng",get:function(){return Object(et.d)(this.phi)}},{key:"lat",get:function(){return Object(et.d)(this.theta)}},{key:"z",get:function(){return(this.radius-1)*this.radiusScale}}]),n}();const pe={position:[0,0,0],lookAt:[0,0,0],up:[0,0,1],rotationX:0,rotationY:0,fov:50,near:1,far:100};class ge{constructor(n){const{width:t,height:e,position:l=pe.position}=n;p(Number.isFinite(t),"`width` must be supplied"),p(Number.isFinite(e),"`height` must be supplied"),this._viewportProps=this._applyConstraints(Object.assign({},n,{position:new it.a(l)}))}getViewportProps(){return this._viewportProps}getDirection(){return new de({bearing:this._viewportProps.bearing,pitch:this._viewportProps.pitch}).toVector3().normalize()}getDirectionFromBearing(n){return new de({bearing:n,pitch:90}).toVector3().normalize()}shortestPathFrom(n){return this._viewportProps}_applyConstraints(n){return n}}var ve=85.05113,me=-85.05113;const _e=5,be=1.2,ye={transitionDuration:300,transitionEasing:n=>n,transitionInterpolator:new le,transitionInterruption:re.BREAK},xe={transitionDuration:0},we={minZoom:0,maxZoom:20,minPitch:0,maxPitch:60},Ee={pitch:0,bearing:0,altitude:1.5};class Pe extends ge{constructor({width:n,height:t,latitude:e,longitude:l,zoom:i,bearing:r=Ee.bearing,pitch:u=Ee.pitch,altitude:o=Ee.altitude,maxZoom:a=we.maxZoom,minZoom:s=we.minZoom,maxPitch:c=we.maxPitch,minPitch:h=we.minPitch,startPanLngLat:f,startZoomLngLat:d,startBearing:g,startPitch:v,startZoom:m}={}){p(Number.isFinite(l),"`longitude` must be supplied"),p(Number.isFinite(e),"`latitude` must be supplied"),p(Number.isFinite(i),"`zoom` must be supplied"),super({width:n,height:t,latitude:e,longitude:l,zoom:i,bearing:r,pitch:u,altitude:o,maxZoom:a,minZoom:s,maxPitch:c,minPitch:h}),this._interactiveState={startPanLngLat:f,startZoomLngLat:d,startBearing:g,startPitch:v,startZoom:m}}getViewportProps(){return this._viewportProps}getInteractiveState(){return this._interactiveState}panStart({pos:n}){return this._getUpdatedState({startPanLngLat:this._unproject(n)})}pan({pos:n,startPos:t}){const e=this._interactiveState.startPanLngLat||this._unproject(t);if(!e)return this;const[l,i]=this._calculateNewLngLat({startPanLngLat:e,pos:n});return this._getUpdatedState({longitude:l,latitude:i})}panEnd(){return this._getUpdatedState({startPanLngLat:null})}rotateStart({pos:n}){return this._getUpdatedState({startBearing:this._viewportProps.bearing,startPitch:this._viewportProps.pitch})}rotate({deltaScaleX:n=0,deltaScaleY:t=0}){const{startBearing:e,startPitch:l}=this._interactiveState;if(!Number.isFinite(e)||!Number.isFinite(l))return this;const{pitch:i,bearing:r}=this._calculateNewPitchAndBearing({deltaScaleX:n,deltaScaleY:t,startBearing:e,startPitch:l});return this._getUpdatedState({bearing:r,pitch:i})}rotateEnd(){return this._getUpdatedState({startBearing:null,startPitch:null})}zoomStart({pos:n}){return this._getUpdatedState({startZoomLngLat:this._unproject(n),startZoom:this._viewportProps.zoom})}zoom({pos:n,startPos:t,scale:e}){p(e>0,"`scale` must be a positive number");let{startZoom:l,startZoomLngLat:i}=this._interactiveState;Number.isFinite(l)||(l=this._viewportProps.zoom,i=this._unproject(t)||this._unproject(n)),p(i,"`startZoomLngLat` prop is required for zoom behavior to calculate where to position the map.");const r=this._calculateNewZoom({scale:e,startZoom:l}),u=new $t(Object.assign({},this._viewportProps,{zoom:r})),[o,a]=u.getLocationAtPoint({lngLat:i,pos:n});return this._getUpdatedState({zoom:r,longitude:o,latitude:a})}zoomEnd(){return this._getUpdatedState({startZoomLngLat:null,startZoom:null})}zoomIn(){return this._zoomFromCenter(2)}zoomOut(){return this._zoomFromCenter(.5)}moveLeft(){return this._panFromCenter([100,0])}moveRight(){return this._panFromCenter([-100,0])}moveUp(){return this._panFromCenter([0,100])}moveDown(){return this._panFromCenter([0,-100])}rotateLeft(){return this._getUpdatedState({bearing:this._viewportProps.bearing-15})}rotateRight(){return this._getUpdatedState({bearing:this._viewportProps.bearing+15})}rotateUp(){return this._getUpdatedState({pitch:this._viewportProps.pitch+10})}rotateDown(){return this._getUpdatedState({pitch:this._viewportProps.pitch-10})}shortestPathFrom(n){const t=n.getViewportProps(),e=Object.assign({},this._viewportProps),{bearing:l,longitude:i}=e;return Math.abs(l-t.bearing)>180&&(e.bearing=l<0?l+360:l-360),Math.abs(i-t.longitude)>180&&(e.longitude=i<0?i+360:i-360),e}_zoomFromCenter(n){const{width:t,height:e}=this._viewportProps;return this.zoom({pos:[t/2,e/2],scale:n})}_panFromCenter(n){const{width:t,height:e}=this._viewportProps;return this.pan({startPos:[t/2,e/2],pos:[t/2+n[0],e/2+n[1]]})}_getUpdatedState(n){return new Pe(Object.assign({},this._viewportProps,this._interactiveState,n))}_applyConstraints(n){const{maxZoom:t,minZoom:e,zoom:l}=n;n.zoom=Object(et.b)(l,e,t);const{maxPitch:i,minPitch:r,pitch:u}=n;return n.pitch=Object(et.b)(u,r,i),Object.assign(n,function(n){var t=n.width,e=n.height,l=n.longitude,i=n.latitude,r=n.zoom,u=n.pitch,o=void 0===u?0:u,a=n.bearing,s=void 0===a?0:a;(l<-180||l>180)&&(l=Object(Xt.c)(l+180,360)-180),(s<-180||s>180)&&(s=Object(Xt.c)(s+180,360)-180);var c=new $t({width:t,height:e,longitude:l,latitude:i,zoom:r}),h=c.project([l,ve])[1],f=c.project([l,me])[1],d=0;return f-h<e&&(r+=Math.log2(e/(f-h)),h=(c=new $t({width:t,height:e,longitude:l,latitude:i,zoom:r})).project([l,ve])[1],f=c.project([l,me])[1]),h>0?d=h:f<e&&(d=f-e),d&&(i=c.unproject([t/2,e/2+d])[1]),{width:t,height:e,longitude:l,latitude:i,zoom:r,pitch:o,bearing:s}}(n)),n}_unproject(n){const t=new $t(this._viewportProps);return n&&t.unproject(n)}_calculateNewLngLat({startPanLngLat:n,pos:t}){return new $t(this._viewportProps).getMapCenterByLngLatPosition({lngLat:n,pos:t})}_calculateNewZoom({scale:n,startZoom:t}){const{maxZoom:e,minZoom:l}=this._viewportProps,i=t+Math.log2(n);return Object(et.b)(i,l,e)}_calculateNewPitchAndBearing({deltaScaleX:n,deltaScaleY:t,startBearing:e,startPitch:l}){t=Object(et.b)(t,-1,1);const{minPitch:i,maxPitch:r}=this._viewportProps;let u=l;return t>0?u=l+t*(r-l):t<0&&(u=l-t*(i-l)),{pitch:u,bearing:e+180*n}}}class Oe extends he{constructor(n){super(Pe,n),this.invertPan=!0}_getTransitionProps(){return ye}_onPanRotate(n){if(!this.dragRotate)return!1;const{deltaX:t,deltaY:e}=n,[,l]=this.getCenter(n),i=l-e,{width:r,height:u}=this.controllerState.getViewportProps(),o=t/r;let a=0;e>0?Math.abs(u-i)>_e&&(a=e/(i-u)*be):e<0&&i>_e&&(a=1-l/i),a=Math.min(1,Math.max(-1,a));const s=this.controllerState.rotate({deltaScaleX:o,deltaScaleY:a});return this.updateViewport(s,xe,{isDragging:!0})}}class Se extends Nt{constructor(n){super(Object.assign({},n,{type:ne}))}get controller(){return this._getControllerProps({type:Oe})}}Se.displayName="MapView";class Ae{constructor(){this.effects=[],this._needsRedraw="Initial render",this.defaultLightingEffect=new k,this.needApplyDefaultLighting=!1}setProps(n){"effects"in n&&(n.effects.length===this.effects.length&&Rt(n.effects,this.effects)||(this.setEffects(n.effects),this._needsRedraw="effects changed")),this.checkLightingEffect()}needsRedraw(n={clearRedrawFlags:!1}){const t=this._needsRedraw;return n.clearRedrawFlags&&(this._needsRedraw=!1),t}getEffects(){let n=this.effects;return this.needApplyDefaultLighting&&(n=this.effects.slice()).push(this.defaultLightingEffect),n}setEffects(n=[]){this.effects=n}checkLightingEffect(){let n=!1;for(const t of this.effects)if(t instanceof k){n=!0;break}this.needApplyDefaultLighting=!n}}class Te{constructor(n,t={}){const{id:e="pass"}=t;this.id=e,this.gl=n,this.props={},Object.assign(this.props,t)}setProps(n){Object.assign(this.props,n)}render(){}}class Ce extends Te{render(n){return this.drawLayers(n)}drawLayers({layers:n,viewports:t,views:e,onViewportActive:l,deviceRect:i=null,parameters:r={},pass:u="draw",redrawReason:o="",clearCanvas:a=!0,effects:s,effectProps:c}){const h=this.gl;a&&this.clearCanvas(h);const f=[];return t.forEach((t,a)=>{const d=this.getViewportFromDescriptor(t),p=e&&e[d.id];l(d);const g=this.drawLayersInViewport(h,{layers:n,viewport:d,view:p,deviceRect:i,parameters:r,pass:u,redrawReason:o,effects:s,effectProps:c});f.push(g)}),f}drawLayersInViewport(n,{layers:t,viewport:e,view:l,deviceRect:i=null,parameters:u={},pass:o="draw",redrawReason:a="",effects:s,effectProps:c}){const h=this.getGLViewport(n,{viewport:e});if(l&&l.props.clear){const t=!0===l.props.clear?{color:!0,depth:!0}:l.props.clear;Object(r.withParameters)(n,{scissorTest:!0,scissor:h},()=>Object(r.clear)(n,t))}const f={totalCount:t.length,visibleCount:0,compositeCount:0,pickableCount:0};return Object(r.setParameters)(n,u||{}),t.forEach((t,l)=>{const i=this.shouldDrawLayer(t,e);i&&t.props.pickable&&f.pickableCount++,t.isComposite&&f.compositeCount++,i&&(f.visibleCount++,this.drawLayerInViewport({gl:n,layer:t,layerIndex:l,glViewport:h,parameters:u,effects:s,effectProps:c}))}),f}drawLayerInViewport({gl:n,layer:t,layerIndex:e,glViewport:l,parameters:i,effects:r,effectProps:u}){const o=this.getModuleParameters(t,r,u),a=Object.assign({},t.context.uniforms,{layerIndex:e}),s=this.getLayerParameters(t,e,l,i);t.drawLayer({moduleParameters:o,uniforms:a,parameters:s})}getViewportFromDescriptor(n){return n.viewport?n.viewport:n}shouldDrawLayer(n,t){const e=this.props.layerFilter;let l=!n.isComposite&&n.props.visible;return l&&e&&(l=e({layer:n,viewport:t,isPicking:!1})),l}getModuleParameters(n){return Object.assign(Object.create(n.props),{viewport:n.context.viewport,pickingActive:0,devicePixelRatio:this.props.pixelRatio})}getLayerParameters(n,t,e,l){const i=Object.assign({},n.props.parameters||{},l);return Object.assign(i,{viewport:e}),i}getGLViewport(n,{viewport:t}){const e=n.canvas?n.canvas.clientHeight||n.canvas.height:100,l=t,i=this.props.pixelRatio;return[l.x*i,(e-l.y-l.height)*i,l.width*i,l.height*i]}clearCanvas(n){const t=n.drawingBufferWidth,e=n.drawingBufferHeight;Object(r.withParameters)(n,{viewport:[0,0,t,e]},()=>{n.clear(V.a.COLOR_BUFFER_BIT|V.a.DEPTH_BUFFER_BIT)})}}class Le extends Ce{getModuleParameters(n,t,e){const l=super.getModuleParameters(n);Object.assign(l,this.getObjectHighlightParameters(n),e);for(const e of t)Object.assign(l,e.getParameters(n));return l}getObjectHighlightParameters(n){const{highlightedObjectIndex:t,highlightColor:e}=n.props,l={pickingHighlightColor:[e[0],e[1],e[2],e[3]||255]};return Number.isInteger(t)&&(l.pickingSelectedColor=t>=0?n.encodePickingColor(t):null),l}}class Me extends Ce{render(n){n.pickingFBO?this.drawPickingBuffer(n):super.render(n)}drawPickingBuffer({layers:n,viewports:t,onViewportActive:e,pickingFBO:l,effectProps:i,deviceRect:{x:u,y:o,width:a,height:s},redrawReason:c=""}){const h=this.gl;return Object(r.withParameters)(h,{framebuffer:l,scissorTest:!0,scissor:[u,o,a,s],clearColor:[0,0,0,0]},()=>{this.drawLayers({layers:n,viewports:t,onViewportActive:e,pass:"picking",redrawReason:c,effectProps:i,parameters:{blend:!0,blendFunc:[h.ONE,h.ZERO,h.CONSTANT_ALPHA,h.ZERO],blendEquation:h.FUNC_ADD,blendColor:[0,0,0,0],depthMask:!0,depthTest:!0,depthRange:[0,1],colorMask:[!0,!0,!0,!0]}})})}shouldDrawLayer(n,t){const e=this.props.layerFilter;let l=!n.isComposite&&n.props.visible&&n.props.pickable;return l&&e&&(l=e({layer:n,viewport:t,isPicking:!0})),l}getModuleParameters(n,t,e){const l=Object.assign(Object.create(n.props),{viewport:n.context.viewport,pickingActive:1,devicePixelRatio:this.props.pixelRatio});return Object.assign(l,e),l}getLayerParameters(n,t,e,l){const i=Object.assign({},n.props.parameters||{},l);return Object.assign(i,{viewport:e,blendColor:[0,0,0,(t+1)/255]}),i}}function je(n){return p("boolean"==typeof n,"Invalid useDevicePixels"),n&&"undefined"!=typeof window?window.devicePixelRatio:1}const Re=2;class Ie{constructor(n){this.gl=n,this.pixelRatio=null,this.layerFilter=null,this.drawPickingColors=!1,this.drawLayersPass=new Le(n),this.pickLayersPass=new Me(n),this.renderCount=0,this._needsRedraw="Initial render"}setProps(n){"useDevicePixels"in n&&(this.pixelRatio=je(n.useDevicePixels)),"layerFilter"in n&&this.layerFilter!==n.layerFilter&&(this.layerFilter=n.layerFilter,this._needsRedraw="layerFilter changed"),"drawPickingColors"in n&&this.drawPickingColors!==n.drawPickingColors&&(this.drawPickingColors=n.drawPickingColors,this._needsRedraw="drawPickingColors changed");const{pixelRatio:t,layerFilter:e}=this;this.drawLayersPass.setProps({pixelRatio:t,layerFilter:e}),this.pickLayersPass.setProps({pixelRatio:t,layerFilter:e})}renderLayers({layers:n,viewports:t,activateViewport:e,views:l,redrawReason:r="unknown reason",clearCanvas:u=!0,effects:o=[],pass:a,stats:s}){const c=this.drawPickingColors?this.pickLayersPass:this.drawLayersPass,h=this.prepareEffects(o),f=c.render({layers:n,viewports:t,views:l,onViewportActive:e,redrawReason:r,clearCanvas:u,effects:o,effectProps:h});this.renderCount++,i.priority>=Re&&f.forEach(n=>{this.logRenderStats({status:n,pass:a,redrawReason:r,stats:s})})}needsRedraw(n={clearRedrawFlags:!1}){const t=this._needsRedraw;return n.clearRedrawFlags&&(this._needsRedraw=!1),t}prepareEffects(n){const t={};for(const e of n)Object.assign(t,e.prepare());return t}logRenderStats({renderStats:n,pass:t,redrawReason:e,stats:l}){const{totalCount:r,visibleCount:u,compositeCount:o,pickableCount:a}=n,s=r-o-u;let c="";c+=`RENDER #${this.renderCount} ${u} (of ${r} layers) to ${t} because ${e} `,i.priority>Re&&(c+=`(${s} hidden, ${o} composite ${a} pickable)`),i.log(Re,c)(),l&&l.get("Redraw Layers").add(u)}}const ke={pickedColor:null,pickedLayer:null,pickedObjectIndex:-1};function Fe({pickedColors:n,layers:t,deviceX:e,deviceY:l,deviceRadius:r,deviceRect:u}){if(n){const{x:o,y:a,width:s,height:c}=u;let h=r*r,f=-1,d=0;for(let t=0;t<c;t++){const i=t+a-l,r=i*i;if(r>h)d+=4*s;else for(let t=0;t<s;t++){if(n[d+3]-1>=0){const n=t+o-e,l=n*n+r;l<=h&&(h=l,f=d)}d+=4}}if(f>=0){const e=n[f+3]-1,l=n.slice(f,f+4),r=t[e];if(r){const n=r.decodePickingColor(l);return{pickedColor:l,pickedLayer:r,pickedObjectIndex:n}}i.error("Picked non-existent layer. Is picking buffer corrupt?")()}}return ke}function Ne({pickInfo:n,lastPickedInfo:t,mode:e,layers:l,viewports:i,x:r,y:u,deviceX:o,deviceY:a,pixelRatio:s}){const{pickedColor:c,pickedLayer:h,pickedObjectIndex:f}=n,d=h?[h]:[];if("hover"===e){const n=t.index,e=t.layerId,i=h&&h.props.id;if(i!==e||f!==n){if(i!==e){const n=l.find(n=>n.props.id===e);n&&d.unshift(n)}t.layerId=i,t.index=f,t.info=null}}const p=function({viewports:n}){return n[0]}({viewports:i}),g=p&&p.unproject([r,u]),v={color:null,layer:null,index:-1,picked:!1,x:r,y:u,pixel:[r,u],coordinate:g,lngLat:g,devicePixel:[o,a],pixelRatio:s},m=new Map;return m.set(null,v),d.forEach(n=>{let l=Object.assign({},v);if(n===h&&(l.color=c,l.index=f,l.picked=!0),l=De({layer:n,info:l,mode:e}),n===h&&"hover"===e&&(t.info=l),l&&m.set(l.layer.id,l),"hover"===e){const t=n.props.autoHighlight&&h===n?c:null;n.setModuleParameters({pickingSelectedColor:t}),n.setNeedsRedraw()}}),m}function De({layer:n,info:t,mode:e}){for(;n&&t;){const l=t.layer||n;t.layer=n,t=n.pickLayer({info:t,mode:e,sourceLayer:l}),n=n.parent}return t}class Be{constructor(n){this.gl=n,this.pickingFBO=null,this.pickLayersPass=new Me(n),this.pixelRatio=null,this.layerFilter=null,this.pickingEvent=null,this.lastPickedInfo={index:-1,layerId:null,info:null}}setProps(n){"useDevicePixels"in n&&(this.pixelRatio=je(n.useDevicePixels)),"layerFilter"in n&&(this.layerFilter=n.layerFilter),this.pickLayersPass.setProps({pixelRatio:this.pixelRatio,layerFilter:this.layerFilter})}pickObject({x:n,y:t,mode:e,radius:l=0,layers:i,viewports:r,activateViewport:u,depth:o=1,event:a=null}){this.pickingEvent=a;const s=this.pickClosestObject({x:n,y:t,radius:l,layers:i,mode:e,depth:o,viewports:r,onViewportActive:u});return this.pickingEvent=null,s}pickObjects({x:n,y:t,width:e,height:l,layers:i,viewports:r,activateViewport:u}){return this.pickVisibleObjects({x:n,y:t,width:e,height:l,layers:i,mode:"pickObjects",viewports:r,onViewportActive:u})}getLastPickedObject({x:n,y:t,layers:e,viewports:l}){const i=this.lastPickedInfo.info,r=i&&i.layer&&i.layer.id,u=r?e.find(n=>n.id===r):null,o=l[0]&&l[0].unproject([n,t]),a={x:n,y:t,coordinate:o,lngLat:o,layer:u};return u?Object.assign({},i,a):Object.assign(a,{color:null,object:null,index:-1})}updatePickingBuffer(){const{gl:n}=this;return this.pickingFBO||(this.pickingFBO=new r.Framebuffer(n)),this.pickingFBO.resize({width:n.canvas.width,height:n.canvas.height}),this.pickingFBO}pickClosestObject({layers:n,viewports:t,x:e,y:l,radius:i,depth:r=1,mode:u,onViewportActive:o}){this.updatePickingBuffer();const a=this.pixelRatio,s=Math.round(e*a),c=Math.round(this.gl.canvas.height-l*a),h=Math.round(i*a),{width:f,height:d}=this.pickingFBO,p=this.getPickingRect({deviceX:s,deviceY:c,deviceRadius:h,deviceWidth:f,deviceHeight:d});let g;const v=[],m={};for(let i=0;i<r;i++){const f=Fe({pickedColors:p&&this.drawAndSamplePickingBuffer({layers:n,viewports:t,onViewportActive:o,deviceRect:p,redrawReason:u}),layers:n,deviceX:s,deviceY:c,deviceRadius:h,deviceRect:p});if(f.pickedColor&&i+1<r){const t=f.pickedColor[3]-1;m[t]||(m[t]=n[t].copyPickingColors()),n[t].clearPickingColor(f.pickedColor)}g=Ne({pickInfo:f,lastPickedInfo:this.lastPickedInfo,mode:u,layers:n,viewports:t,x:e,y:l,deviceX:s,deviceY:c,pixelRatio:a});const d=this.callLayerPickingCallbacks(g,u);if(d&&d.forEach(n=>v.push(n)),!f.pickedColor)break}return Object.keys(m).forEach(t=>n[t].restorePickingColors(m[t])),{result:v,emptyInfo:g&&g.get(null)}}pickVisibleObjects({layers:n,viewports:t,x:e,y:l,width:r,height:u,mode:o,onViewportActive:a}){this.updatePickingBuffer();const s=this.pixelRatio,c=Math.round(e*s),h=Math.round(this.gl.canvas.height-l*s),f=Math.round((e+r)*s),d=Math.round(this.gl.canvas.height-(l+u)*s),p={x:c,y:d,width:f-c,height:h-d},g=function({pickedColors:n,layers:t}){const e=new Map;if(n)for(let l=0;l<n.length;l+=4){const r=n[l+3]-1;if(r>=0){const u=n.slice(l,l+4),o=u.join(",");if(!e.has(o)){const n=t[r];n?e.set(o,{pickedColor:u,pickedLayer:n,pickedObjectIndex:n.decodePickingColor(u)}):i.error("Picked non-existent layer. Is picking buffer corrupt?")()}}}return Array.from(e.values())}({pickedColors:this.drawAndSamplePickingBuffer({layers:n,viewports:t,onViewportActive:a,deviceRect:p,redrawReason:o}),layers:n}),v=new Map;return g.forEach(n=>{let t={color:n.pickedColor,layer:null,index:n.pickedObjectIndex,picked:!0,x:e,y:l,width:r,height:u,pixelRatio:s};t=De({layer:n.pickedLayer,info:t,mode:o}),v.has(t.object)||v.set(t.object,t)}),Array.from(v.values())}drawAndSamplePickingBuffer({layers:n,viewports:t,onViewportActive:e,deviceRect:l,redrawReason:i}){if(p(l),p(Number.isFinite(l.width)&&l.width>0,"`width` must be > 0"),p(Number.isFinite(l.height)&&l.height>0,"`height` must be > 0"),n.filter(n=>n.isPickable()).length<1)return null;const u=this.pickingFBO;this.pickLayersPass.render({layers:n,viewports:t,onViewportActive:e,pickingFBO:u,deviceRect:l,redrawReason:i,effectProps:{lightSources:{}}});const{x:o,y:a,width:s,height:c}=l,h=new Uint8Array(s*c*4);return Object(r.readPixelsToArray)(u,{sourceX:o,sourceY:a,sourceWidth:s,sourceHeight:c,target:h}),h}getPickingRect({deviceX:n,deviceY:t,deviceRadius:e,deviceWidth:l,deviceHeight:i}){if(!(n>=0&&t>=0&&n<l&&t<i))return null;const r=Math.max(0,n-e),u=Math.max(0,t-e);return{x:r,y:u,width:Math.min(l,n+e)-r+1,height:Math.min(i,t+e)-u+1}}callLayerPickingCallbacks(n,t){const e=[],l=this.pickingEvent;return n.forEach(n=>{if(!n.layer)return;let i=!1;switch(t){case"hover":i=n.layer.onHover(n,l);break;case"query":break;default:throw new Error("unknown pick type")}i||e.push(n)}),e}}var Ue=1,ze=2,Ve=4,Ge={mousedown:Ue,mousemove:ze,mouseup:Ve};var We,He,Xe=null;"undefined"!=typeof document&&(Xe=e(105),We=Xe.PointerEventInput,He=We.prototype.handler,We.prototype.handler=function(n){var t=this.store;n.button>0&&(function(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return!0;return!1}(t,function(t){return t.pointerId===n.pointerId})||t.push(n)),He.call(this,n)},Xe.MouseInput.prototype.handler=function(n){var t=Ge[n.type];t&Ue&&n.button>=0&&(this.pressed=!0),t&ze&&0===n.which&&(t=Ve),this.pressed&&(t&Ve&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[n],changedPointers:[n],pointerType:"mouse",srcEvent:n}))});var Ye=Xe;var Ze=Ye?[[Ye.Rotate,{enable:!1}],[Ye.Pinch,{enable:!1}],[Ye.Swipe,{enable:!1}],[Ye.Pan,{threshold:0,enable:!1}],[Ye.Press,{enable:!1}],[Ye.Tap,{event:"doubletap",taps:2,enable:!1}],[Ye.Tap,{event:"anytap",enable:!1}],[Ye.Tap,{enable:!1}]]:null,qe={rotate:["pinch"],doubletap:["anytap"],anytap:["tap"]},$e={doubletap:["tap"]},Ke={pointerdown:"pointerdown",pointermove:"pointermove",pointerup:"pointerup",touchstart:"pointerdown",touchmove:"pointermove",touchend:"pointerup",mousedown:"pointerdown",mousemove:"pointermove",mouseup:"pointerup"},Qe=["keydown","keyup"],Je=["mousedown","mousemove","mouseup","mouseover","mouseout","mouseleave"],nl=["wheel","mousewheel","DOMMouseScroll"],tl={tap:"tap",anytap:"anytap",doubletap:"doubletap",press:"press",pinch:"pinch",pinchin:"pinch",pinchout:"pinch",pinchstart:"pinch",pinchmove:"pinch",pinchend:"pinch",pinchcancel:"pinch",rotate:"rotate",rotatestart:"rotate",rotatemove:"rotate",rotateend:"rotate",rotatecancel:"rotate",pan:"pan",panstart:"pan",panmove:"pan",panup:"pan",pandown:"pan",panleft:"pan",panright:"pan",panend:"pan",pancancel:"pan",swipe:"swipe",swipeleft:"swipe",swiperight:"swipe",swipeup:"swipe",swipedown:"swipe"},el={click:"tap",anyclick:"anytap",dblclick:"doubletap",mousedown:"pointerdown",mousemove:"pointermove",mouseup:"pointerup",mouseover:"pointerover",mouseout:"pointerout",mouseleave:"pointerleave"},ll=e(49),il=-1!==ll.b.indexOf("firefox"),rl=nl,ul=function(){function n(t,e){var l=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(Ut.a)(this,n),this.element=t,this.callback=e,this.options=Object.assign({enable:!0},i),this.events=rl.concat(i.events||[]),this.handleEvent=this.handleEvent.bind(this),this.events.forEach(function(n){return t.addEventListener(n,l.handleEvent,!!ll.a&&{passive:!1})})}return Object(zt.a)(n,[{key:"destroy",value:function(){var n=this;this.events.forEach(function(t){return n.element.removeEventListener(t,n.handleEvent)})}},{key:"enableEventType",value:function(n,t){"wheel"===n&&(this.options.enable=t)}},{key:"handleEvent",value:function(n){if(this.options.enable){var t=n.deltaY;ll.c.WheelEvent&&(il&&n.deltaMode===ll.c.WheelEvent.DOM_DELTA_PIXEL&&(t/=ll.c.devicePixelRatio),n.deltaMode===ll.c.WheelEvent.DOM_DELTA_LINE&&(t*=40));var e={x:n.clientX,y:n.clientY};0!==t&&t%4.000244140625==0&&(t=Math.floor(t/4.000244140625)),n.shiftKey&&t&&(t*=.25),this._onWheel(n,-t,e)}}},{key:"_onWheel",value:function(n,t,e){this.callback({type:"wheel",center:e,delta:t,srcEvent:n,pointerType:"mouse",target:n.target})}}]),n}(),ol=Je,al=function(){function n(t,e){var l=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(Ut.a)(this,n),this.element=t,this.callback=e,this.pressed=!1,this.options=Object.assign({enable:!0},i),this.enableMoveEvent=this.options.enable,this.enableLeaveEvent=this.options.enable,this.enableOutEvent=this.options.enable,this.enableOverEvent=this.options.enable,this.events=ol.concat(i.events||[]),this.handleEvent=this.handleEvent.bind(this),this.events.forEach(function(n){return t.addEventListener(n,l.handleEvent)})}return Object(zt.a)(n,[{key:"destroy",value:function(){var n=this;this.events.forEach(function(t){return n.element.removeEventListener(t,n.handleEvent)})}},{key:"enableEventType",value:function(n,t){"pointermove"===n&&(this.enableMoveEvent=t),"pointerover"===n&&(this.enableOverEvent=t),"pointerout"===n&&(this.enableOutEvent=t),"pointerleave"===n&&(this.enableLeaveEvent=t)}},{key:"handleEvent",value:function(n){this.handleOverEvent(n),this.handleOutEvent(n),this.handleLeaveEvent(n),this.handleMoveEvent(n)}},{key:"handleOverEvent",value:function(n){this.enableOverEvent&&"mouseover"===n.type&&this.callback({type:"pointerover",srcEvent:n,pointerType:"mouse",target:n.target})}},{key:"handleOutEvent",value:function(n){this.enableOutEvent&&"mouseout"===n.type&&this.callback({type:"pointerout",srcEvent:n,pointerType:"mouse",target:n.target})}},{key:"handleLeaveEvent",value:function(n){this.enableLeaveEvent&&"mouseleave"===n.type&&this.callback({type:"pointerleave",srcEvent:n,pointerType:"mouse",target:n.target})}},{key:"handleMoveEvent",value:function(n){if(this.enableMoveEvent)switch(n.type){case"mousedown":n.button>=0&&(this.pressed=!0);break;case"mousemove":0===n.which&&(this.pressed=!1),this.pressed||this.callback({type:"pointermove",srcEvent:n,pointerType:"mouse",target:n.target});break;case"mouseup":this.pressed=!1}}}]),n}(),sl=Qe,cl=function(){function n(t,e){var l=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(Ut.a)(this,n),this.element=t,this.callback=e,this.options=Object.assign({enable:!0},i),this.enableDownEvent=this.options.enable,this.enableUpEvent=this.options.enable,this.events=sl.concat(i.events||[]),this.handleEvent=this.handleEvent.bind(this),t.tabIndex=1,t.style.outline="none",this.events.forEach(function(n){return t.addEventListener(n,l.handleEvent)})}return Object(zt.a)(n,[{key:"destroy",value:function(){var n=this;this.events.forEach(function(t){return n.element.removeEventListener(t,n.handleEvent)})}},{key:"enableEventType",value:function(n,t){"keydown"===n&&(this.enableDownEvent=t),"keyup"===n&&(this.enableUpEvent=t)}},{key:"handleEvent",value:function(n){var t=n.target||n.srcElement;"INPUT"===t.tagName&&"text"===t.type||"TEXTAREA"===t.tagName||(this.enableDownEvent&&"keydown"===n.type&&this.callback({type:"keydown",srcEvent:n,key:n.key,target:n.target}),this.enableUpEvent&&"keyup"===n.type&&this.callback({type:"keyup",srcEvent:n,key:n.key,target:n.target}))}}]),n}(),hl=function(){function n(t,e){var l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(Ut.a)(this,n),this.element=t,this.callback=e,this.options=Object.assign({enable:!0},l),this.handleEvent=this.handleEvent.bind(this),t.addEventListener("contextmenu",this.handleEvent)}return Object(zt.a)(n,[{key:"destroy",value:function(){this.element.removeEventListener("contextmenu",this.handleEvent)}},{key:"enableEventType",value:function(n,t){"contextmenu"===n&&(this.options.enable=t)}},{key:"handleEvent",value:function(n){this.options.enable&&this.callback({type:"contextmenu",center:{x:n.clientX,y:n.clientY},srcEvent:n,pointerType:"mouse",target:n.target})}}]),n}(),fl=1,dl=2,pl=4,gl={pointerdown:fl,pointermove:dl,pointerup:pl,mousedown:fl,mousemove:dl,mouseup:pl},vl=1,ml=2,_l=3,bl=0,yl=1,xl=2,wl=1,El=2,Pl=4;var Ol=function(){function n(t){Object(Ut.a)(this,n),this.eventManager=t,this.handlers=[],this.handlersByElement=new Map,this.handleEvent=this.handleEvent.bind(this)}return Object(zt.a)(n,[{key:"isEmpty",value:function(){return 0===this.handlers.length}},{key:"add",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"root",l=this.handlers,i=this.handlersByElement;i.has(e)||i.set(e,[]);var r={type:n,handler:t,srcElement:e};l.push(r),i.get(e).push(r)}},{key:"remove",value:function(n,t){for(var e=this.handlers,l=this.handlersByElement,i=e.length-1;i>=0;i--){var r=e[i];if(r.type===n&&r.handler===t){e.splice(i,1);var u=l.get(r.srcElement);u.splice(u.indexOf(r),1),0===u.length&&l.delete(r.srcElement)}}}},{key:"handleEvent",value:function(n){if(!this.isEmpty()){for(var t=this._normalizeEvent(n),e=n.srcEvent.target;e&&e!==t.rootElement;){if(this._emit(t,e),t.handled)return;e=e.parentNode}this._emit(t,"root")}}},{key:"_emit",value:function(n,t){var e=this.handlersByElement.get(t);if(e)for(var l=!1,i=function(){n.handled=!0},r=function(){n.handled=!0,l=!0},u=0;u<e.length;u++){var o=e[u],a=o.type;if((0,o.handler)(Object.assign({},n,{type:a,stopPropagation:i,stopImmediatePropagation:r})),l)break}}},{key:"_normalizeEvent",value:function(n){var t=this.eventManager.element;return Object.assign({},n,function(n){var t=gl[n.srcEvent.type];if(!t)return null;var e=n.srcEvent,l=e.buttons,i=e.button,r=e.which,u=!1,o=!1,a=!1;return t===pl||t===dl&&!Number.isFinite(l)?(u=r===vl,o=r===ml,a=r===_l):t===dl?(u=Boolean(l&wl),o=Boolean(l&Pl),a=Boolean(l&El)):t===fl&&(u=i===bl,o=i===yl,a=i===xl),{leftButton:u,middleButton:o,rightButton:a}}(n),function(n,t){var e=n.srcEvent;if(!n.center&&!Number.isFinite(e.clientX))return null;var l=n.center||{x:e.clientX,y:e.clientY},i=t.getBoundingClientRect(),r=i.width/t.offsetWidth,u=i.height/t.offsetHeight;return{center:l,offsetCenter:{x:(l.x-i.left-t.clientLeft)/r,y:(l.y-i.top-t.clientTop)/u}}}(n,t),{handled:!1,rootElement:t})}}]),n}(),Sl={events:null,recognizers:null,Manager:Ye?Ye.Manager:function(n){var t={},e=function(){return t};return t.get=function(){return null},t.set=e,t.on=e,t.off=e,t.destroy=e,t.emit=e,t},touchAction:"none"},Al=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Object(Ut.a)(this,n),this.options=Object.assign({},Sl,e),this.events=new Map,this._onBasicInput=this._onBasicInput.bind(this),this._onOtherEvent=this._onOtherEvent.bind(this),this.setElement(t);var l=e.events;l&&this.on(l)}return Object(zt.a)(n,[{key:"setElement",value:function(n){var t=this;if(this.element&&this.destroy(),this.element=n,n){var e=this.options,l=e.Manager;this.manager=new l(n,{touchAction:e.touchAction,recognizers:e.recognizers||Ze}).on("hammer.input",this._onBasicInput),e.recognizers||Object.keys(qe).forEach(function(n){var e=t.manager.get(n);e&&qe[n].forEach(function(n){e.recognizeWith(n)})}),this.wheelInput=new ul(n,this._onOtherEvent,{enable:!1}),this.moveInput=new al(n,this._onOtherEvent,{enable:!1}),this.keyInput=new cl(n,this._onOtherEvent,{enable:!1}),this.contextmenuInput=new hl(n,this._onOtherEvent,{enable:!1});var i=!0,r=!1,u=void 0;try{for(var o,a=this.events[Symbol.iterator]();!(i=(o=a.next()).done);i=!0){var s=Object(Bt.a)(o.value,2),c=s[0],h=s[1];h.isEmpty()||(this._toggleRecognizer(h.recognizerName,!0),this.manager.on(c,h.handleEvent))}}catch(n){r=!0,u=n}finally{try{i||null==a.return||a.return()}finally{if(r)throw u}}}}},{key:"destroy",value:function(){this.element&&(this.wheelInput.destroy(),this.moveInput.destroy(),this.keyInput.destroy(),this.contextmenuInput.destroy(),this.manager.destroy(),this.wheelInput=null,this.moveInput=null,this.keyInput=null,this.contextmenuInput=null,this.manager=null,this.element=null)}},{key:"on",value:function(n,t,e){if("string"==typeof n)this._addEventHandler(n,t,e);else for(var l in e=t,n)this._addEventHandler(l,n[l],e)}},{key:"off",value:function(n,t){if("string"==typeof n)this._removeEventHandler(n,t);else for(var e in n)this._removeEventHandler(e,n[e])}},{key:"_toggleRecognizer",value:function(n,t){var e=this.manager;if(e){var l=e.get(n);if(l&&l.options.enable!==t){l.set({enable:t});var i=$e[n];i&&!this.options.recognizers&&i.forEach(function(i){var r=e.get(i);t?(r.requireFailure(n),l.dropRequireFailure(i)):r.dropRequireFailure(n)})}this.wheelInput.enableEventType(n,t),this.moveInput.enableEventType(n,t),this.keyInput.enableEventType(n,t),this.contextmenuInput.enableEventType(n,t)}}},{key:"_addEventHandler",value:function(n,t,e){var l=this.manager,i=this.events,r=el[n]||n,u=i.get(r);u||(u=new Ol(this),i.set(r,u),u.recognizerName=tl[r]||r,l&&l.on(r,u.handleEvent)),this._toggleRecognizer(u.recognizerName,!0),u.add(n,t,e)}},{key:"_removeEventHandler",value:function(n,t){var e=this.events,l=el[n]||n,i=e.get(l);if(i&&(i.remove(n,t),i.isEmpty())){var r=i.recognizerName,u=!1,o=!0,a=!1,s=void 0;try{for(var c,h=e.values()[Symbol.iterator]();!(o=(c=h.next()).done);o=!0){var f=c.value;if(f.recognizerName===r&&!f.isEmpty()){u=!0;break}}}catch(n){a=!0,s=n}finally{try{o||null==h.return||h.return()}finally{if(a)throw s}}u||this._toggleRecognizer(r,!1)}}},{key:"_onBasicInput",value:function(n){var t=n.srcEvent,e=Ke[t.type];e&&this.manager.emit(e,n)}},{key:"_onOtherEvent",value:function(n){this.manager.emit(n.type,n)}}]),n}();function Tl(){}const Cl={id:"deckgl-overlay",width:"100%",height:"100%",pickingRadius:0,layerFilter:null,glOptions:{},gl:null,layers:[],effects:[],views:null,controller:null,useDevicePixels:!0,_animate:!1,onWebGLInitialized:Tl,onResize:Tl,onViewStateChange:Tl,onBeforeRender:Tl,onAfterRender:Tl,onLoad:Tl,_onMetrics:null,getCursor:({isDragging:n})=>n?"grabbing":"grab",debug:!1,drawPickingColors:!1};class Ll{constructor(n){n=Object.assign({},Cl,n),this.width=0,this.height=0,this.viewManager=null,this.layerManager=null,this.effectManager=null,this.deckRenderer=null,this.deckPicker=null,this._needsRedraw=!0,this._pickRequest={},this.viewState=n.initialViewState||null,this.interactiveState={isDragging:!1},this._onEvent=this._onEvent.bind(this),this._onPointerDown=this._onPointerDown.bind(this),this._onPointerMove=this._onPointerMove.bind(this),this._onPointerLeave=this._onPointerLeave.bind(this),this._pickAndCallback=this._pickAndCallback.bind(this),this._onRendererInitialized=this._onRendererInitialized.bind(this),this._onRenderFrame=this._onRenderFrame.bind(this),this._onViewStateChange=this._onViewStateChange.bind(this),this._onInteractiveStateChange=this._onInteractiveStateChange.bind(this),n.gl||"undefined"!=typeof document&&(this.canvas=this._createCanvas(n)),this.animationLoop=this._createAnimationLoop(n),this.stats=new tt.a({id:"deck.gl"}),this.setProps(n),this.animationLoop.start()}finalize(){this.animationLoop.stop(),this.animationLoop=null,this.layerManager&&(this.layerManager.finalize(),this.layerManager=null),this.viewManager&&(this.viewManager.finalize(),this.viewManager=null),this.eventManager&&this.eventManager.destroy(),this.props.canvas||this.props.gl||!this.canvas||(this.canvas.parentElement.removeChild(this.canvas),this.canvas=null)}setProps(n){this.stats.get("setProps Time").timeStart(),"onLayerHover"in n&&i.removed("onLayerHover","onHover")(),"onLayerClick"in n&&i.removed("onLayerClick","onClick")(),n=Object.assign({},this.props,n),this.props=n,this._setCanvasSize(n);const t=Object.assign({},n,{views:this._getViews(n),width:this.width,height:this.height}),e=this._getViewState(n);e&&(t.viewState=e),this.viewManager&&this.viewManager.setProps(t),this.layerManager&&this.layerManager.setProps(t),this.effectManager&&this.effectManager.setProps(t),this.animationLoop&&this.animationLoop.setProps(t),this.deckRenderer&&this.deckRenderer.setProps(t),this.deckPicker&&this.deckPicker.setProps(t),this.stats.get("setProps Time").timeEnd()}needsRedraw(n={clearRedrawFlags:!1}){if(this.props._animate)return"Deck._animate";let t=this._needsRedraw;n.clearRedrawFlags&&(this._needsRedraw=!1);const e=this.viewManager.needsRedraw(n),l=this.layerManager.needsRedraw(n),i=this.effectManager.needsRedraw(n),r=this.deckRenderer.needsRedraw(n);return t=t||e||l||i||r}redraw(n){if(!this.layerManager)return;const t=n||this.needsRedraw({clearRedrawFlags:!0});t&&(this.stats.get("Redraw Count").incrementCount(),this.props._customRender?this.props._customRender(t):this._drawLayers(t))}getViews(){return this.viewManager.views}getViewports(n){return this.viewManager.getViewports(n)}pickObject({x:n,y:t,radius:e=0,layerIds:l=null}){this.stats.get("pickObject Time").timeStart();const i=this.layerManager.getLayers({layerIds:l}),r=this.layerManager.activateViewport,u=this.deckPicker.pickObject({x:n,y:t,radius:e,layers:i,viewports:this.getViewports({x:n,y:t}),activateViewport:r,mode:"query",depth:1}).result;return this.stats.get("pickObject Time").timeEnd(),u.length?u[0]:null}pickMultipleObjects({x:n,y:t,radius:e=0,layerIds:l=null,depth:i=10}){this.stats.get("pickMultipleObjects Time").timeStart();const r=this.layerManager.getLayers({layerIds:l}),u=this.layerManager.activateViewport,o=this.deckPicker.pickObject({x:n,y:t,radius:e,layers:r,viewports:this.getViewports({x:n,y:t}),activateViewport:u,mode:"query",depth:i}).result;return this.stats.get("pickMultipleObjects Time").timeEnd(),o}pickObjects({x:n,y:t,width:e=1,height:l=1,layerIds:i=null}){this.stats.get("pickObjects Time").timeStart();const r=this.layerManager.getLayers({layerIds:i}),u=this.layerManager.activateViewport,o=this.deckPicker.pickObjects({x:n,y:t,width:e,height:l,layers:r,viewports:this.getViewports({x:n,y:t,width:e,height:l}),activateViewport:u});return this.stats.get("pickObjects Time").timeEnd(),o}_createCanvas(n){let t=n.canvas;if("string"==typeof t&&p(t=document.getElementById(t)),!t){t=document.createElement("canvas"),(n.parent||document.body).appendChild(t)}const{id:e,style:l}=n;return t.id=e,Object.assign(t.style,l),t}_setCanvasSize(n){if(!this.canvas)return;let{width:t,height:e}=n;(t||0===t)&&(t=Number.isFinite(t)?`${t}px`:t,this.canvas.style.width=t),(e||0===e)&&(e=Number.isFinite(e)?`${e}px`:e,this.canvas.style.position="absolute",this.canvas.style.height=e)}_updateCanvasSize(){if(this._checkForCanvasSizeChange()){const{width:n,height:t}=this;this.viewManager.setProps({width:n,height:t}),this.props.onResize({width:this.width,height:this.height})}}_checkForCanvasSizeChange(){const{canvas:n}=this;if(!n)return!1;const t=n.clientWidth||n.width,e=n.clientHeight||n.height;return(t!==this.width||e!==this.height)&&(this.width=t,this.height=e,!0)}_createAnimationLoop(n){const{width:t,height:e,gl:l,glOptions:i,debug:u,useDevicePixels:o,autoResizeDrawingBuffer:a}=n;return new r.AnimationLoop({width:t,height:e,useDevicePixels:o,autoResizeDrawingBuffer:a,gl:l,onCreateContext:n=>Object(r.createGLContext)(Object.assign({},i,n,{canvas:this.canvas,debug:u})),onInitialize:this._onRendererInitialized,onRender:this._onRenderFrame,onBeforeRender:n.onBeforeRender,onAfterRender:n.onAfterRender})}_getViewState(n){return n.viewState||this.viewState}_getViews(n){let t=n.views||[new Se({id:"default-view"})];return(t=Array.isArray(t)?t:[t]).length&&n.controller&&(t[0].props.controller=n.controller),t}_requestPick({event:n,callback:t,mode:e,immediate:l}){const{_pickRequest:i}=this;if("pointerleave"===n.type)i.x=-1,i.y=-1,i.radius=0;else{const t=n.offsetCenter;if(!t)return;i.x=t.x,i.y=t.y,i.radius=this.props.pickingRadius}i.callback=t,i.event=n,i.mode=e,l&&this._pickAndCallback()}_pickAndCallback(){const{_pickRequest:n}=this;if(n.mode){const{result:t,emptyInfo:e}=this.deckPicker.pickObject(Object.assign({layers:this.layerManager.getLayers(),viewports:this.getViewports(n),activateViewport:this.layerManager.activateViewport,depth:1},n));if(n.callback){const l=t.find(n=>n.index>=0)||e;n.callback(l,n.event)}n.mode=null}}_updateCursor(){this.canvas&&(this.canvas.style.cursor=this.props.getCursor(this.interactiveState))}_updateAnimationProps(n){this.layerManager.context.animationProps=n}_setGLContext(n){if(this.layerManager)return;this.canvas||(this.canvas=n.canvas,Object(r.trackContextState)(n,{enable:!0,copyState:!0})),Object(r.setParameters)(n,{blend:!0,blendFunc:[V.a.SRC_ALPHA,V.a.ONE_MINUS_SRC_ALPHA,V.a.ONE,V.a.ONE_MINUS_SRC_ALPHA],polygonOffsetFill:!0,depthTest:!0,depthFunc:V.a.LEQUAL}),this.props.onWebGLInitialized(n),this.eventManager=new Al(n.canvas,{events:{pointerdown:this._onPointerDown,pointermove:this._onPointerMove,pointerleave:this._onPointerLeave}});for(const n in h)this.eventManager.on(n,this._onEvent);this.viewManager=new Dt({eventManager:this.eventManager,onViewStateChange:this._onViewStateChange,onInteractiveStateChange:this._onInteractiveStateChange,views:this._getViews(this.props),viewState:this._getViewState(this.props),width:this.width,height:this.height}),p(this.viewManager);const t=this.viewManager.getViewports()[0];this.layerManager=new gt(n,{deck:this,stats:this.stats,viewport:t}),this.effectManager=new Ae,this.deckRenderer=new Ie(n),this.deckPicker=new Be(n),this.setProps(this.props),this._updateCanvasSize(),this.props.onLoad()}_drawLayers(n,t){const{gl:e}=this.layerManager.context;Object(r.setParameters)(e,this.props.parameters),this.props.onBeforeRender({gl:e});const l=this.layerManager.getLayers(),i=this.layerManager.activateViewport;this.deckRenderer.renderLayers(Object.assign({layers:l,viewports:this.viewManager.getViewports(),activateViewport:i,views:this.viewManager.getViews(),pass:"screen",redrawReason:n,effects:this.effectManager.getEffects()},t)),this.props.onAfterRender({gl:e})}_onRendererInitialized({gl:n}){this._setGLContext(n)}_onRenderFrame(n){if(this.stats.get("frameRate").timeEnd(),this.stats.get("frameRate").timeStart(),n.tick%60==0){const n={};this.stats.forEach(t=>{n[t.name]={time:t.time||0,count:t.count||0,average:t.getAverageTime()||0,hz:t.getHz()||0}}),this.stats.reset(),i.table(3,n)(),this.props._onMetrics&&this.props._onMetrics(n)}this._updateCanvasSize(),this._updateCursor(),this.layerManager.updateLayers(n),this._updateAnimationProps(n),this._pickAndCallback(),this.redraw(!1),this.viewManager&&this.viewManager.updateViewStates(n)}_onViewStateChange(n){const t=this.props.onViewStateChange(n)||n.viewState;this.viewState&&(this.viewState[n.viewId]=t,this.viewManager.setProps({viewState:t}))}_onInteractiveStateChange({isDragging:n=!1}){n!==this.interactiveState.isDragging&&(this.interactiveState.isDragging=n)}_onEvent(n){const t=h[n.type],e=n.offsetCenter;if(!t||!e)return;const l=this.layerManager.getLayers(),i=this.deckPicker.getLastPickedObject({x:e.x,y:e.y,layers:l,viewports:this.getViewports(e)}),{layer:r}=i,u=r&&(r[t.handler]||r.props[t.handler]),o=this.props[t.handler];let a=!1;u&&(a=u.call(r,i,n)),!a&&o&&o(i,n)}_onPointerDown(n){this._requestPick({callback:null,event:n,mode:"hover",immediate:!0})}_onPointerMove(n){n.leftButton||n.rightButton||this._requestPick({callback:this.props.onHover,event:n,mode:"hover"})}_onPointerLeave(n){this._requestPick({callback:this.props.onHover,event:n,mode:"hover"})}}Ll.getPropTypes=function(n){return{id:n.string,width:n.oneOfType([n.number,n.string]),height:n.oneOfType([n.number,n.string]),layers:n.oneOfType([n.object,n.array]),layerFilter:n.func,views:n.oneOfType([n.object,n.array]),viewState:n.object,effects:n.arrayOf(n.instanceOf(j)),controller:n.oneOfType([n.func,n.bool,n.object]),gl:n.object,glOptions:n.object,parameters:n.object,pickingRadius:n.number,useDevicePixels:n.bool,onWebGLInitialized:n.func,onResize:n.func,onViewStateChange:n.func,onBeforeRender:n.func,onAfterRender:n.func,onLoad:n.func,debug:n.bool,drawPickingColors:n.bool,_animate:n.bool}},Ll.defaultProps=Cl;const Ml=1,jl=2;function Rl(n,t){return Number.isFinite(n)?n:t}class Il extends ge{constructor({width:n,height:t,position:e,bearing:l,pitch:i,longitude:r,latitude:u,zoom:o,syncBearing:a=!0,bounds:s,startPanEventPosition:c,startPanPosition:h,startRotateCenter:f,startRotateViewport:d,startZoomPos:p,startZoom:g}){super({width:n,height:t,position:e,bearing:l,pitch:i,longitude:r,latitude:u,zoom:o}),this._interactiveState={startPanEventPosition:c,startPanPosition:h,startRotateCenter:f,startRotateViewport:d,startZoomPos:p,startZoom:g}}getInteractiveState(){return this._interactiveState}panStart({pos:n}){const{translationX:t,translationY:e}=this._viewportProps;return this._getUpdatedState({startPanPosition:[t,e],startPanEventPosition:n})}pan({pos:n,startPos:t}){const e=this._interactiveState.startPanEventPosition||t;if(!e)return this;let[l,i]=this._interactiveState.startPanPosition||[];l=Rl(l,this._viewportProps.translationX),i=Rl(i,this._viewportProps.translationY);const r=n[0]-e[0],u=n[1]-e[1];return this._getUpdatedState({translationX:l+r,translationY:i-u})}panEnd(){return this._getUpdatedState({startPanPosition:null,startPanPos:null})}rotateStart({pos:n}){return this._getUpdatedState({startRotateCenter:this._viewportProps.position,startRotateViewport:this._viewportProps})}rotate({deltaScaleX:n,deltaScaleY:t}){if(!this._interactiveState.startRotateCenter)return this;const{bearing:e,pitch:l}=this._viewportProps;return this._getUpdatedState({bearing:e+10*n,pitch:l-10*t})}rotateEnd(){return this._getUpdatedState({startRotateCenter:null,startRotateViewport:null})}zoomStart({pos:n}){return this._getUpdatedState({startZoomPos:n,startZoom:this._viewportProps.zoom})}zoom({pos:n,startPos:t,scale:e}){const{zoom:l,minZoom:i,maxZoom:r,width:u,height:o,translationX:a,translationY:s}=this._viewportProps,c=this._interactiveState.startZoomPos||t||n,h=Object(et.b)(l*e,i,r);n[0],c[0],n[1],c[1],c[0],c[1];return h/l<1?this.moveBackward():this.moveForward()}zoomEnd(){return this._getUpdatedState({startZoomPos:null,startZoom:null})}moveLeft(){const{bearing:n}=this._viewportProps,t=n-jl;return this._getUpdatedState({bearing:t})}moveRight(){const{bearing:n}=this._viewportProps,t=n+jl;return this._getUpdatedState({bearing:t})}moveForward(){const{position:n}=this._viewportProps,t=this.getDirection(),e=new it.a(t).normalize().scale(Ml);return this._getUpdatedState({position:new it.a(n).add(e)})}moveBackward(){const{position:n}=this._viewportProps,t=this.getDirection(),e=new it.a(t).normalize().scale(-Ml);return this._getUpdatedState({position:new it.a(n).add(e)})}moveUp(){const{position:n}=this._viewportProps;return this._getUpdatedState({position:new it.a(n).add([0,0,1])})}moveDown(){const{position:n}=this._viewportProps,t=n[2]>=1?[0,0,-1]:[0,0,0];return this._getUpdatedState({position:new it.a(n).add(t)})}zoomIn(){return this._getUpdatedState({zoom:this._viewportProps.zoom+.2})}zoomOut(){return this._getUpdatedState({zoom:this._viewportProps.zoom-.2})}_getUpdatedState(n){return new Il(Object.assign({},this._viewportProps,this._interactiveState,n))}}class kl extends he{constructor(n){super(Il,n)}}class Fl extends Nt{get controller(){return this._getControllerProps({type:kl})}_getViewport(n){const{modelMatrix:t=null,bearing:e,up:l=[0,0,1]}=n.viewState,i=function({bearing:n,pitch:t}){return new de({bearing:n,pitch:t}).toVector3().normalize()}({bearing:e,pitch:89}),r=t?t.transformDirection(i):i,u=(new lt.a).lookAt({eye:[0,0,0],center:r,up:l});return new ct(Object.assign({},n,{zoom:null,viewMatrix:u}))}}Fl.displayName="FirstPersonView";class Nl extends Nt{_getViewport(n){const{bearing:t,pitch:e,position:l,up:i,zoom:r}=n.viewState,u=50*r,o=function({bearing:n,pitch:t}){return new de({bearing:n,pitch:t}).toVector3().normalize()}({bearing:t,pitch:e}).scale(-u).multiply(new it.a(1,1,-1)),a=(new lt.a).multiplyRight((new lt.a).lookAt({eye:o,center:l,up:i}));return new ct(Object.assign({},n,{id:this.id,zoom:null,viewMatrix:a}))}}Nl.displayName="ThirdPersonView";var Dl=e(79);const Bl=50,Ul={orbitAxis:"Z",rotationX:0,rotationOrbit:0,fovy:50,zoom:0,target:[0,0,0],minZoom:-1/0,maxZoom:1/0},zl={transitionDuration:300,transitionEasing:n=>n,transitionInterpolator:new le(["target","zoom","rotationX","rotationOrbit"]),transitionInterruption:re.BREAK},Vl=n=>Math.pow(2,n);class Gl extends ge{constructor({ViewportType:n,width:t,height:e,orbitAxis:l=Ul.orbitAxis,rotationX:i=Ul.rotationX,rotationOrbit:r=Ul.rotationOrbit,target:u=Ul.target,zoom:o=Ul.zoom,fovy:a=Ul.fovy,minZoom:s=Ul.minZoom,maxZoom:c=Ul.maxZoom,startPanPosition:h,startTarget:f,startRotationX:d,startRotationOrbit:p,startZoomPosition:g,startZoom:v}){super({width:t,height:e,orbitAxis:l,rotationX:i,rotationOrbit:r,target:u,fovy:a,zoom:o,minZoom:s,maxZoom:c}),this._interactiveState={startPanPosition:h,startTarget:f,startRotationX:d,startRotationOrbit:p,startZoomPosition:g,startZoom:v},this.ViewportType=n}getViewportProps(){return this._viewportProps}getInteractiveState(){return this._interactiveState}panStart({pos:n}){const{target:t}=this._viewportProps;return this._getUpdatedState({startPanPosition:n,startTarget:t})}pan({pos:n,startPos:t}){const{startPanPosition:e,startTarget:l}=this._interactiveState,i=new Dl.a(n).subtract(e);return this._getUpdatedState({target:this._calculateNewTarget({startTarget:l,pixelOffset:i})})}panEnd(){return this._getUpdatedState({startPanPosition:null,startTarget:null})}rotateStart({pos:n}){return this._getUpdatedState({startRotationX:this._viewportProps.rotationX,startRotationOrbit:this._viewportProps.rotationOrbit})}rotate({deltaScaleX:n,deltaScaleY:t}){const{startRotationX:e,startRotationOrbit:l}=this._interactiveState;if(!Number.isFinite(e)||!Number.isFinite(l))return this;const i=Object(et.b)(e+180*t,-89.999,89.999),r=(l+180*n)%360;return this._getUpdatedState({rotationX:i,rotationOrbit:r,isRotating:!0})}rotateEnd(){return this._getUpdatedState({startRotationX:null,startRotationOrbit:null})}shortestPathFrom(n){return Object.assign({},this._viewportProps)}zoomStart({pos:n}){return this._getUpdatedState({startZoomPosition:n,startTarget:this._viewportProps.target,startZoom:this._viewportProps.zoom})}zoom({pos:n,startPos:t,scale:e}){const{zoom:l,width:i,height:r,target:u}=this._viewportProps;let{startZoom:o,startZoomPosition:a,startTarget:s}=this._interactiveState;Number.isFinite(o)||(o=l,s=u,a=t||n);const c=this._calculateNewZoom({scale:e,startZoom:o}),h=Vl(o),f=Vl(c),d=(i/2-a[0])*(f/h-1),p=(r/2-a[1])*(f/h-1);return this._getUpdatedState({zoom:c,target:this._calculateNewTarget({startTarget:s,zoom:c,pixelOffset:[d,p]})})}zoomEnd(){return this._getUpdatedState({startZoomPosition:null,startTarget:null,startZoom:null})}zoomIn(){return this._getUpdatedState({zoom:this._calculateNewZoom({scale:2})})}zoomOut(){return this._getUpdatedState({zoom:this._calculateNewZoom({scale:.5})})}moveLeft(){const n=[-Bl,0];return this._getUpdatedState({target:this._calculateNewTarget({pixelOffset:n})})}moveRight(){const n=[Bl,0];return this._getUpdatedState({target:this._calculateNewTarget({pixelOffset:n})})}moveUp(){const n=[0,-Bl];return this._getUpdatedState({target:this._calculateNewTarget({pixelOffset:n})})}moveDown(){const n=[0,Bl];return this._getUpdatedState({target:this._calculateNewTarget({pixelOffset:n})})}rotateLeft(){return this._getUpdatedState({rotationOrbit:this._viewportProps.rotationOrbit-15})}rotateRight(){return this._getUpdatedState({rotationOrbit:this._viewportProps.rotationOrbit+15})}rotateUp(){return this._getUpdatedState({rotationX:this._viewportProps.rotationX-10})}rotateDown(){return this._getUpdatedState({rotationX:this._viewportProps.rotationX+10})}_calculateNewZoom({scale:n,startZoom:t}){const{maxZoom:e,minZoom:l}=this._viewportProps;Number.isFinite(t)||(t=this._viewportProps.zoom);const i=t+Math.log2(n);return Object(et.b)(i,l,e)}_calculateNewTarget({startTarget:n,zoom:t,pixelOffset:e}){const l=Object.assign({},this._viewportProps);Number.isFinite(t)&&(l.zoom=t),n&&(l.target=n);const i=new this.ViewportType(l),r=i.project(l.target);return i.unproject([r[0]-e[0],r[1]-e[1],r[2]])}_getUpdatedState(n){return new Gl(Object.assign({},this._viewportProps,this._interactiveState,n))}_applyConstraints(n){const{maxZoom:t,minZoom:e,zoom:l}=n;return n.zoom=l>t?t:l,n.zoom=l<e?e:l,n}}class Wl extends he{constructor(n){super(Gl,n)}_getTransitionProps(){return zl}}const Hl=Math.PI/180;function Xl({height:n,fovy:t,orbitAxis:e,rotationX:l,rotationOrbit:i,zoom:r}){const u=.5/Math.tan(t*Hl/2),o=(new lt.a).lookAt({eye:[0,0,u]});o.rotateX(l*Hl),"Z"===e?o.rotateZ(i*Hl):o.rotateY(i*Hl);const a=1/(n||1);return o.scale([a,a,a]),o}class Yl extends ct{constructor(n){const{id:t,x:e,y:l,width:i,height:r,fovy:u=50,near:o,far:a,orbitAxis:s="Z",target:c=[0,0,0],rotationX:h=0,rotationOrbit:f=0,zoom:d=0}=n;super({id:t,viewMatrix:Xl({height:r,fovy:u,orbitAxis:s,rotationX:h,rotationOrbit:f,zoom:d}),fovy:u,near:o,far:a,x:e,y:l,position:c,width:i,height:r,zoom:d})}}class Zl extends Nt{get controller(){return this._getControllerProps({type:Wl,ViewportType:Yl})}_getViewport({x:n,y:t,width:e,height:l,viewState:i}){return new Yl(Object.assign({id:this.id,x:n,y:t,width:e,height:l},this.props,i))}}Zl.displayName="OrbitView";const ql=Math.PI/180;class $l extends Nt{_getViewport(n){const{x:t,y:e,width:l,height:i,viewState:r}=n,{eye:u,lookAt:o=[0,0,0],up:s=[0,1,0]}=r,c=n.fovy||r.fovy||75,h=n.near||r.near||1,f=n.far||r.far||100,d=Number.isFinite(r.aspect)?r.aspect:l/i,p=c*ql;return new ct({id:this.id,x:t,y:e,width:l,height:i,viewMatrix:a.f([],u,o,s),projectionMatrix:a.i([],p,d,h,f)})}}$l.displayName="PerspectiveView";const Kl={transitionDuration:300,transitionEasing:n=>n,transitionInterpolator:new le(["target","zoom"]),transitionInterruption:re.BREAK};class Ql extends he{constructor(n){super(Gl,n),this.invertPan=!0}_onPanRotate(n){return!1}_getTransitionProps(){return Kl}}const Jl=(new lt.a).lookAt({eye:[0,0,1]});function ni({width:n,height:t,near:e,far:l}){return n=n||1,t=t||1,(new lt.a).ortho({left:-n/2,right:n/2,bottom:t/2,top:-t/2,near:e,far:l})}class ti extends ct{constructor({id:n,x:t,y:e,width:l,height:i,near:r=.1,far:u=1e3,zoom:o=0,target:a=[0,0,0]}){return new ct({id:n,x:t,y:e,width:l,height:i,position:a,viewMatrix:Jl,projectionMatrix:ni({width:l,height:i,near:r,far:u}),zoom:o})}}class ei extends Nt{get controller(){return this._getControllerProps({type:Ql,ViewportType:ti})}_getViewport({x:n,y:t,width:e,height:l,viewState:i}){return new ti(Object.assign({id:this.id,x:n,y:t,width:e,height:l},this.props,i))}}ei.displayName="OrthographicView";var li=.01,ii=["longitude","latitude","zoom"];const ri=["bearing","pitch"];class ui extends te{constructor(){super({compare:["longitude","latitude","zoom","bearing","pitch"],extract:["width","height","longitude","latitude","zoom","bearing","pitch"],required:["width","height","latitude","longitude","zoom"]})}interpolateProps(n,t,e){const l=function(n,t,e){var l={},i=n.zoom,r=[n.longitude,n.latitude],u=Object(N.l)(i),o=t.zoom,a=[t.longitude,t.latitude],s=Object(N.l)(o-i),c=Object(N.g)(r,u),h=Object(N.g)(a,u),f=qt.g([],h,c),d=Math.max(n.width,n.height),p=d/s,g=qt.c(f);if(Math.abs(g)<li){for(var v=0;v<ii.length;v++){var m=ii[v],_=n[m],b=t[m];l[m]=Object(Xt.b)(_,b,e)}return l}var y=1.414*1.414,x=(p*p-d*d+y*y*g*g)/(2*d*y*g),w=(p*p-d*d-y*y*g*g)/(2*p*y*g),E=Math.log(Math.sqrt(x*x+1)-x),P=e*((Math.log(Math.sqrt(w*w+1)-w)-E)/1.414),O=Math.cosh(E)/Math.cosh(E+1.414*P),S=d*((Math.cosh(E)*Math.tanh(E+1.414*P)-Math.sinh(E))/y)/g,A=1/O,T=i+Object(N.i)(A),C=qt.f([],f,S);qt.a(C,C,c),qt.f(C,C,A);var L=Object(N.j)(C,Object(N.l)(T));return l.longitude=L[0],l.latitude=L[1],l.zoom=T,l}(n,t,e);for(const i of ri)l[i]=Object(et.g)(n[i]||0,t[i]||0,e);return l}}class oi{constructor({overAlloc:n=1}={}){this.overAlloc=n}allocate(n,t,{size:e,type:l,copy:i=!1}){const r=t*e;if(n&&r<=n.length)return n;const u=Math.max(Math.ceil(r*this.overAlloc),1),o=this._allocate(l,u);return n&&i&&o.set(n),this._release(n),o}_allocate(n=Float32Array,t){return new n(t)}_release(n){}}e.d(t,"experimental",function(){return ai}),e.d(t,"COORDINATE_SYSTEM",function(){return c}),e.d(t,"LightingEffect",function(){return k}),e.d(t,"PointLight",function(){return vt}),e.d(t,"DirectionalLight",function(){return M}),e.d(t,"_CameraLight",function(){return mt}),e.d(t,"_SunLight",function(){return jt}),e.d(t,"Deck",function(){return Ll}),e.d(t,"LayerManager",function(){return gt}),e.d(t,"AttributeManager",function(){return hn}),e.d(t,"Layer",function(){return Kn}),e.d(t,"CompositeLayer",function(){return nt}),e.d(t,"DeckRenderer",function(){return Ie}),e.d(t,"Viewport",function(){return ct}),e.d(t,"WebMercatorViewport",function(){return ne}),e.d(t,"project",function(){return P}),e.d(t,"project64",function(){return T}),e.d(t,"View",function(){return Nt}),e.d(t,"MapView",function(){return Se}),e.d(t,"FirstPersonView",function(){return Fl}),e.d(t,"ThirdPersonView",function(){return Nl}),e.d(t,"OrbitView",function(){return Zl}),e.d(t,"PerspectiveView",function(){return $l}),e.d(t,"OrthographicView",function(){return ei}),e.d(t,"Controller",function(){return he}),e.d(t,"MapController",function(){return Oe}),e.d(t,"_FirstPersonController",function(){return kl}),e.d(t,"_OrbitController",function(){return Wl}),e.d(t,"_OrthographicController",function(){return Ql}),e.d(t,"Effect",function(){return j}),e.d(t,"TRANSITION_EVENTS",function(){return re}),e.d(t,"LinearInterpolator",function(){return le}),e.d(t,"FlyToInterpolator",function(){return ui}),e.d(t,"log",function(){return i}),e.d(t,"createIterable",function(){return H}),e.d(t,"AmbientLight",function(){return r.AmbientLight});const ai={Tesselator:class{constructor(n={}){const{attributes:t={}}=n;this.typedArrayManager=new oi,this.indexLayout=null,this.bufferLayout=null,this.vertexCount=0,this.instanceCount=0,this.attributes={},this._attributeDefs=t,this.updateGeometry(n),Object.seal(this)}updateGeometry({data:n,getGeometry:t,positionFormat:e,fp64:l}){this.data=n,this.getGeometry=t,this.fp64=l,this.positionSize="XY"===e?2:3,this._rebuildGeometry()}updatePartialGeometry({start:n,count:t,objects:e}){}updateGeometryAttributes(n,t,e){throw new Error("Not implemented")}getGeometrySize(n){throw new Error("Not implemented")}_forEachGeometry(n){const{data:t,getGeometry:e}=this,{iterable:l,objectInfo:i}=H(t);for(const t of l)i.index++,n(e(t,i),i.index)}_updateAttribute({target:n,size:t,getValue:e}){const{data:l,bufferLayout:i}=this;let r=0;const{iterable:u,objectInfo:o}=H(l);for(const l of u){o.index++;const u=e(l,o),a=i[o.index];Jn({target:n,source:u,start:r,count:a}),r+=a*t}return n}_rebuildGeometry(){if(!this.data||!this.getGeometry)return;const n=[],t=[];let e=0;this._forEachGeometry((n,l)=>{const i=this.getGeometrySize(n);e+=i,t[l]=i});const{attributes:l,_attributeDefs:i,typedArrayManager:r,fp64:u}=this;for(const n in i){const t=i[n];t.fp64Only&&!u||(l[n]=r.allocate(l[n],e,t))}this.indexLayout=n,this.bufferLayout=t,this.instanceCount=e;const o={vertexStart:0,indexStart:0};this._forEachGeometry((e,l)=>{const i=t[l];o.geometryIndex=l,o.geometrySize=i,this.updateGeometryAttributes(e,o),o.vertexStart+=i,o.indexStart+=n[l]||0}),this.vertexCount=o.indexStart}},flattenVertices:function n(t,{result:e=[],dimensions:l=3}={}){let i=-1,r=0;for(;++i<t.length;){const u=t[i];Array.isArray(u)||ArrayBuffer.isView(u)?n(u,{result:e,dimensions:l}):r<l&&(e.push(u),r++)}return r>0&&r<l&&e.push(0),e},fillArray:Jn,count:Cn,memoize:d}},function(n,t){n.exports={DEPTH_BUFFER_BIT:256,STENCIL_BUFFER_BIT:1024,COLOR_BUFFER_BIT:16384,POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,ZERO:0,ONE:1,SRC_COLOR:768,ONE_MINUS_SRC_COLOR:769,SRC_ALPHA:770,ONE_MINUS_SRC_ALPHA:771,DST_ALPHA:772,ONE_MINUS_DST_ALPHA:773,DST_COLOR:774,ONE_MINUS_DST_COLOR:775,SRC_ALPHA_SATURATE:776,CONSTANT_COLOR:32769,ONE_MINUS_CONSTANT_COLOR:32770,CONSTANT_ALPHA:32771,ONE_MINUS_CONSTANT_ALPHA:32772,FUNC_ADD:32774,FUNC_SUBTRACT:32778,FUNC_REVERSE_SUBTRACT:32779,BLEND_EQUATION:32777,BLEND_EQUATION_RGB:32777,BLEND_EQUATION_ALPHA:34877,BLEND_DST_RGB:32968,BLEND_SRC_RGB:32969,BLEND_DST_ALPHA:32970,BLEND_SRC_ALPHA:32971,BLEND_COLOR:32773,ARRAY_BUFFER_BINDING:34964,ELEMENT_ARRAY_BUFFER_BINDING:34965,LINE_WIDTH:2849,ALIASED_POINT_SIZE_RANGE:33901,ALIASED_LINE_WIDTH_RANGE:33902,CULL_FACE_MODE:2885,FRONT_FACE:2886,DEPTH_RANGE:2928,DEPTH_WRITEMASK:2930,DEPTH_CLEAR_VALUE:2931,DEPTH_FUNC:2932,STENCIL_CLEAR_VALUE:2961,STENCIL_FUNC:2962,STENCIL_FAIL:2964,STENCIL_PASS_DEPTH_FAIL:2965,STENCIL_PASS_DEPTH_PASS:2966,STENCIL_REF:2967,STENCIL_VALUE_MASK:2963,STENCIL_WRITEMASK:2968,STENCIL_BACK_FUNC:34816,STENCIL_BACK_FAIL:34817,STENCIL_BACK_PASS_DEPTH_FAIL:34818,STENCIL_BACK_PASS_DEPTH_PASS:34819,STENCIL_BACK_REF:36003,STENCIL_BACK_VALUE_MASK:36004,STENCIL_BACK_WRITEMASK:36005,VIEWPORT:2978,SCISSOR_BOX:3088,COLOR_CLEAR_VALUE:3106,COLOR_WRITEMASK:3107,UNPACK_ALIGNMENT:3317,PACK_ALIGNMENT:3333,MAX_TEXTURE_SIZE:3379,MAX_VIEWPORT_DIMS:3386,SUBPIXEL_BITS:3408,RED_BITS:3410,GREEN_BITS:3411,BLUE_BITS:3412,ALPHA_BITS:3413,DEPTH_BITS:3414,STENCIL_BITS:3415,POLYGON_OFFSET_UNITS:10752,POLYGON_OFFSET_FACTOR:32824,TEXTURE_BINDING_2D:32873,SAMPLE_BUFFERS:32936,SAMPLES:32937,SAMPLE_COVERAGE_VALUE:32938,SAMPLE_COVERAGE_INVERT:32939,COMPRESSED_TEXTURE_FORMATS:34467,VENDOR:7936,RENDERER:7937,VERSION:7938,IMPLEMENTATION_COLOR_READ_TYPE:35738,IMPLEMENTATION_COLOR_READ_FORMAT:35739,BROWSER_DEFAULT_WEBGL:37444,STATIC_DRAW:35044,STREAM_DRAW:35040,DYNAMIC_DRAW:35048,ARRAY_BUFFER:34962,ELEMENT_ARRAY_BUFFER:34963,BUFFER_SIZE:34660,BUFFER_USAGE:34661,CURRENT_VERTEX_ATTRIB:34342,VERTEX_ATTRIB_ARRAY_ENABLED:34338,VERTEX_ATTRIB_ARRAY_SIZE:34339,VERTEX_ATTRIB_ARRAY_STRIDE:34340,VERTEX_ATTRIB_ARRAY_TYPE:34341,VERTEX_ATTRIB_ARRAY_NORMALIZED:34922,VERTEX_ATTRIB_ARRAY_POINTER:34373,VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:34975,CULL_FACE:2884,FRONT:1028,BACK:1029,FRONT_AND_BACK:1032,BLEND:3042,DEPTH_TEST:2929,DITHER:3024,POLYGON_OFFSET_FILL:32823,SAMPLE_ALPHA_TO_COVERAGE:32926,SAMPLE_COVERAGE:32928,SCISSOR_TEST:3089,STENCIL_TEST:2960,NO_ERROR:0,INVALID_ENUM:1280,INVALID_VALUE:1281,INVALID_OPERATION:1282,OUT_OF_MEMORY:1285,CONTEXT_LOST_WEBGL:37442,CW:2304,CCW:2305,DONT_CARE:4352,FASTEST:4353,NICEST:4354,GENERATE_MIPMAP_HINT:33170,BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,INT:5124,UNSIGNED_INT:5125,FLOAT:5126,DEPTH_COMPONENT:6402,ALPHA:6406,RGB:6407,RGBA:6408,LUMINANCE:6409,LUMINANCE_ALPHA:6410,UNSIGNED_SHORT_4_4_4_4:32819,UNSIGNED_SHORT_5_5_5_1:32820,UNSIGNED_SHORT_5_6_5:33635,FRAGMENT_SHADER:35632,VERTEX_SHADER:35633,COMPILE_STATUS:35713,DELETE_STATUS:35712,LINK_STATUS:35714,VALIDATE_STATUS:35715,ATTACHED_SHADERS:35717,ACTIVE_ATTRIBUTES:35721,ACTIVE_UNIFORMS:35718,MAX_VERTEX_ATTRIBS:34921,MAX_VERTEX_UNIFORM_VECTORS:36347,MAX_VARYING_VECTORS:36348,MAX_COMBINED_TEXTURE_IMAGE_UNITS:35661,MAX_VERTEX_TEXTURE_IMAGE_UNITS:35660,MAX_TEXTURE_IMAGE_UNITS:34930,MAX_FRAGMENT_UNIFORM_VECTORS:36349,SHADER_TYPE:35663,SHADING_LANGUAGE_VERSION:35724,CURRENT_PROGRAM:35725,NEVER:512,ALWAYS:519,LESS:513,EQUAL:514,LEQUAL:515,GREATER:516,GEQUAL:518,NOTEQUAL:517,KEEP:7680,REPLACE:7681,INCR:7682,DECR:7683,INVERT:5386,INCR_WRAP:34055,DECR_WRAP:34056,NEAREST:9728,LINEAR:9729,NEAREST_MIPMAP_NEAREST:9984,LINEAR_MIPMAP_NEAREST:9985,NEAREST_MIPMAP_LINEAR:9986,LINEAR_MIPMAP_LINEAR:9987,TEXTURE_MAG_FILTER:10240,TEXTURE_MIN_FILTER:10241,TEXTURE_WRAP_S:10242,TEXTURE_WRAP_T:10243,TEXTURE_2D:3553,TEXTURE:5890,TEXTURE_CUBE_MAP:34067,TEXTURE_BINDING_CUBE_MAP:34068,TEXTURE_CUBE_MAP_POSITIVE_X:34069,TEXTURE_CUBE_MAP_NEGATIVE_X:34070,TEXTURE_CUBE_MAP_POSITIVE_Y:34071,TEXTURE_CUBE_MAP_NEGATIVE_Y:34072,TEXTURE_CUBE_MAP_POSITIVE_Z:34073,TEXTURE_CUBE_MAP_NEGATIVE_Z:34074,MAX_CUBE_MAP_TEXTURE_SIZE:34076,TEXTURE0:33984,ACTIVE_TEXTURE:34016,REPEAT:10497,CLAMP_TO_EDGE:33071,MIRRORED_REPEAT:33648,TEXTURE_WIDTH:4096,TEXTURE_HEIGHT:4097,FLOAT_VEC2:35664,FLOAT_VEC3:35665,FLOAT_VEC4:35666,INT_VEC2:35667,INT_VEC3:35668,INT_VEC4:35669,BOOL:35670,BOOL_VEC2:35671,BOOL_VEC3:35672,BOOL_VEC4:35673,FLOAT_MAT2:35674,FLOAT_MAT3:35675,FLOAT_MAT4:35676,SAMPLER_2D:35678,SAMPLER_CUBE:35680,LOW_FLOAT:36336,MEDIUM_FLOAT:36337,HIGH_FLOAT:36338,LOW_INT:36339,MEDIUM_INT:36340,HIGH_INT:36341,FRAMEBUFFER:36160,RENDERBUFFER:36161,RGBA4:32854,RGB5_A1:32855,RGB565:36194,DEPTH_COMPONENT16:33189,STENCIL_INDEX:6401,STENCIL_INDEX8:36168,DEPTH_STENCIL:34041,RENDERBUFFER_WIDTH:36162,RENDERBUFFER_HEIGHT:36163,RENDERBUFFER_INTERNAL_FORMAT:36164,RENDERBUFFER_RED_SIZE:36176,RENDERBUFFER_GREEN_SIZE:36177,RENDERBUFFER_BLUE_SIZE:36178,RENDERBUFFER_ALPHA_SIZE:36179,RENDERBUFFER_DEPTH_SIZE:36180,RENDERBUFFER_STENCIL_SIZE:36181,FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:36048,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:36049,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:36050,FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:36051,COLOR_ATTACHMENT0:36064,DEPTH_ATTACHMENT:36096,STENCIL_ATTACHMENT:36128,DEPTH_STENCIL_ATTACHMENT:33306,NONE:0,FRAMEBUFFER_COMPLETE:36053,FRAMEBUFFER_INCOMPLETE_ATTACHMENT:36054,FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:36055,FRAMEBUFFER_INCOMPLETE_DIMENSIONS:36057,FRAMEBUFFER_UNSUPPORTED:36061,FRAMEBUFFER_BINDING:36006,RENDERBUFFER_BINDING:36007,READ_FRAMEBUFFER:36008,DRAW_FRAMEBUFFER:36009,MAX_RENDERBUFFER_SIZE:34024,INVALID_FRAMEBUFFER_OPERATION:1286,UNPACK_FLIP_Y_WEBGL:37440,UNPACK_PREMULTIPLY_ALPHA_WEBGL:37441,UNPACK_COLORSPACE_CONVERSION_WEBGL:37443,READ_BUFFER:3074,UNPACK_ROW_LENGTH:3314,UNPACK_SKIP_ROWS:3315,UNPACK_SKIP_PIXELS:3316,PACK_ROW_LENGTH:3330,PACK_SKIP_ROWS:3331,PACK_SKIP_PIXELS:3332,TEXTURE_BINDING_3D:32874,UNPACK_SKIP_IMAGES:32877,UNPACK_IMAGE_HEIGHT:32878,MAX_3D_TEXTURE_SIZE:32883,MAX_ELEMENTS_VERTICES:33e3,MAX_ELEMENTS_INDICES:33001,MAX_TEXTURE_LOD_BIAS:34045,MAX_FRAGMENT_UNIFORM_COMPONENTS:35657,MAX_VERTEX_UNIFORM_COMPONENTS:35658,MAX_ARRAY_TEXTURE_LAYERS:35071,MIN_PROGRAM_TEXEL_OFFSET:35076,MAX_PROGRAM_TEXEL_OFFSET:35077,MAX_VARYING_COMPONENTS:35659,FRAGMENT_SHADER_DERIVATIVE_HINT:35723,RASTERIZER_DISCARD:35977,VERTEX_ARRAY_BINDING:34229,MAX_VERTEX_OUTPUT_COMPONENTS:37154,MAX_FRAGMENT_INPUT_COMPONENTS:37157,MAX_SERVER_WAIT_TIMEOUT:37137,MAX_ELEMENT_INDEX:36203,RED:6403,RGB8:32849,RGBA8:32856,RGB10_A2:32857,TEXTURE_3D:32879,TEXTURE_WRAP_R:32882,TEXTURE_MIN_LOD:33082,TEXTURE_MAX_LOD:33083,TEXTURE_BASE_LEVEL:33084,TEXTURE_MAX_LEVEL:33085,TEXTURE_COMPARE_MODE:34892,TEXTURE_COMPARE_FUNC:34893,SRGB:35904,SRGB8:35905,SRGB8_ALPHA8:35907,COMPARE_REF_TO_TEXTURE:34894,RGBA32F:34836,RGB32F:34837,RGBA16F:34842,RGB16F:34843,TEXTURE_2D_ARRAY:35866,TEXTURE_BINDING_2D_ARRAY:35869,R11F_G11F_B10F:35898,RGB9_E5:35901,RGBA32UI:36208,RGB32UI:36209,RGBA16UI:36214,RGB16UI:36215,RGBA8UI:36220,RGB8UI:36221,RGBA32I:36226,RGB32I:36227,RGBA16I:36232,RGB16I:36233,RGBA8I:36238,RGB8I:36239,RED_INTEGER:36244,RGB_INTEGER:36248,RGBA_INTEGER:36249,R8:33321,RG8:33323,R16F:33325,R32F:33326,RG16F:33327,RG32F:33328,R8I:33329,R8UI:33330,R16I:33331,R16UI:33332,R32I:33333,R32UI:33334,RG8I:33335,RG8UI:33336,RG16I:33337,RG16UI:33338,RG32I:33339,RG32UI:33340,R8_SNORM:36756,RG8_SNORM:36757,RGB8_SNORM:36758,RGBA8_SNORM:36759,RGB10_A2UI:36975,TEXTURE_IMMUTABLE_FORMAT:37167,TEXTURE_IMMUTABLE_LEVELS:33503,UNSIGNED_INT_2_10_10_10_REV:33640,UNSIGNED_INT_10F_11F_11F_REV:35899,UNSIGNED_INT_5_9_9_9_REV:35902,FLOAT_32_UNSIGNED_INT_24_8_REV:36269,UNSIGNED_INT_24_8:34042,HALF_FLOAT:5131,RG:33319,RG_INTEGER:33320,INT_2_10_10_10_REV:36255,CURRENT_QUERY:34917,QUERY_RESULT:34918,QUERY_RESULT_AVAILABLE:34919,ANY_SAMPLES_PASSED:35887,ANY_SAMPLES_PASSED_CONSERVATIVE:36202,MAX_DRAW_BUFFERS:34852,DRAW_BUFFER0:34853,DRAW_BUFFER1:34854,DRAW_BUFFER2:34855,DRAW_BUFFER3:34856,DRAW_BUFFER4:34857,DRAW_BUFFER5:34858,DRAW_BUFFER6:34859,DRAW_BUFFER7:34860,DRAW_BUFFER8:34861,DRAW_BUFFER9:34862,DRAW_BUFFER10:34863,DRAW_BUFFER11:34864,DRAW_BUFFER12:34865,DRAW_BUFFER13:34866,DRAW_BUFFER14:34867,DRAW_BUFFER15:34868,MAX_COLOR_ATTACHMENTS:36063,COLOR_ATTACHMENT1:36065,COLOR_ATTACHMENT2:36066,COLOR_ATTACHMENT3:36067,COLOR_ATTACHMENT4:36068,COLOR_ATTACHMENT5:36069,COLOR_ATTACHMENT6:36070,COLOR_ATTACHMENT7:36071,COLOR_ATTACHMENT8:36072,COLOR_ATTACHMENT9:36073,COLOR_ATTACHMENT10:36074,COLOR_ATTACHMENT11:36075,COLOR_ATTACHMENT12:36076,COLOR_ATTACHMENT13:36077,COLOR_ATTACHMENT14:36078,COLOR_ATTACHMENT15:36079,SAMPLER_3D:35679,SAMPLER_2D_SHADOW:35682,SAMPLER_2D_ARRAY:36289,SAMPLER_2D_ARRAY_SHADOW:36292,SAMPLER_CUBE_SHADOW:36293,INT_SAMPLER_2D:36298,INT_SAMPLER_3D:36299,INT_SAMPLER_CUBE:36300,INT_SAMPLER_2D_ARRAY:36303,UNSIGNED_INT_SAMPLER_2D:36306,UNSIGNED_INT_SAMPLER_3D:36307,UNSIGNED_INT_SAMPLER_CUBE:36308,UNSIGNED_INT_SAMPLER_2D_ARRAY:36311,MAX_SAMPLES:36183,SAMPLER_BINDING:35097,PIXEL_PACK_BUFFER:35051,PIXEL_UNPACK_BUFFER:35052,PIXEL_PACK_BUFFER_BINDING:35053,PIXEL_UNPACK_BUFFER_BINDING:35055,COPY_READ_BUFFER:36662,COPY_WRITE_BUFFER:36663,COPY_READ_BUFFER_BINDING:36662,COPY_WRITE_BUFFER_BINDING:36663,FLOAT_MAT2x3:35685,FLOAT_MAT2x4:35686,FLOAT_MAT3x2:35687,FLOAT_MAT3x4:35688,FLOAT_MAT4x2:35689,FLOAT_MAT4x3:35690,UNSIGNED_INT_VEC2:36294,UNSIGNED_INT_VEC3:36295,UNSIGNED_INT_VEC4:36296,UNSIGNED_NORMALIZED:35863,SIGNED_NORMALIZED:36764,VERTEX_ATTRIB_ARRAY_INTEGER:35069,VERTEX_ATTRIB_ARRAY_DIVISOR:35070,TRANSFORM_FEEDBACK_BUFFER_MODE:35967,MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS:35968,TRANSFORM_FEEDBACK_VARYINGS:35971,TRANSFORM_FEEDBACK_BUFFER_START:35972,TRANSFORM_FEEDBACK_BUFFER_SIZE:35973,TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN:35976,MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS:35978,MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS:35979,INTERLEAVED_ATTRIBS:35980,SEPARATE_ATTRIBS:35981,TRANSFORM_FEEDBACK_BUFFER:35982,TRANSFORM_FEEDBACK_BUFFER_BINDING:35983,TRANSFORM_FEEDBACK:36386,TRANSFORM_FEEDBACK_PAUSED:36387,TRANSFORM_FEEDBACK_ACTIVE:36388,TRANSFORM_FEEDBACK_BINDING:36389,FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING:33296,FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE:33297,FRAMEBUFFER_ATTACHMENT_RED_SIZE:33298,FRAMEBUFFER_ATTACHMENT_GREEN_SIZE:33299,FRAMEBUFFER_ATTACHMENT_BLUE_SIZE:33300,FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE:33301,FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE:33302,FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE:33303,FRAMEBUFFER_DEFAULT:33304,DEPTH24_STENCIL8:35056,DRAW_FRAMEBUFFER_BINDING:36006,READ_FRAMEBUFFER_BINDING:36010,RENDERBUFFER_SAMPLES:36011,FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER:36052,FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:36182,UNIFORM_BUFFER:35345,UNIFORM_BUFFER_BINDING:35368,UNIFORM_BUFFER_START:35369,UNIFORM_BUFFER_SIZE:35370,MAX_VERTEX_UNIFORM_BLOCKS:35371,MAX_FRAGMENT_UNIFORM_BLOCKS:35373,MAX_COMBINED_UNIFORM_BLOCKS:35374,MAX_UNIFORM_BUFFER_BINDINGS:35375,MAX_UNIFORM_BLOCK_SIZE:35376,MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS:35377,MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS:35379,UNIFORM_BUFFER_OFFSET_ALIGNMENT:35380,ACTIVE_UNIFORM_BLOCKS:35382,UNIFORM_TYPE:35383,UNIFORM_SIZE:35384,UNIFORM_BLOCK_INDEX:35386,UNIFORM_OFFSET:35387,UNIFORM_ARRAY_STRIDE:35388,UNIFORM_MATRIX_STRIDE:35389,UNIFORM_IS_ROW_MAJOR:35390,UNIFORM_BLOCK_BINDING:35391,UNIFORM_BLOCK_DATA_SIZE:35392,UNIFORM_BLOCK_ACTIVE_UNIFORMS:35394,UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES:35395,UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER:35396,UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER:35398,OBJECT_TYPE:37138,SYNC_CONDITION:37139,SYNC_STATUS:37140,SYNC_FLAGS:37141,SYNC_FENCE:37142,SYNC_GPU_COMMANDS_COMPLETE:37143,UNSIGNALED:37144,SIGNALED:37145,ALREADY_SIGNALED:37146,TIMEOUT_EXPIRED:37147,CONDITION_SATISFIED:37148,WAIT_FAILED:37149,SYNC_FLUSH_COMMANDS_BIT:1,COLOR:6144,DEPTH:6145,STENCIL:6146,MIN:32775,MAX:32776,DEPTH_COMPONENT24:33190,STREAM_READ:35041,STREAM_COPY:35042,STATIC_READ:35045,STATIC_COPY:35046,DYNAMIC_READ:35049,DYNAMIC_COPY:35050,DEPTH_COMPONENT32F:36012,DEPTH32F_STENCIL8:36013,INVALID_INDEX:4294967295,TIMEOUT_IGNORED:-1,MAX_CLIENT_WAIT_TIMEOUT_WEBGL:37447,VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE:35070,UNMASKED_VENDOR_WEBGL:37445,UNMASKED_RENDERER_WEBGL:37446,MAX_TEXTURE_MAX_ANISOTROPY_EXT:34047,TEXTURE_MAX_ANISOTROPY_EXT:34046,COMPRESSED_RGB_S3TC_DXT1_EXT:33776,COMPRESSED_RGBA_S3TC_DXT1_EXT:33777,COMPRESSED_RGBA_S3TC_DXT3_EXT:33778,COMPRESSED_RGBA_S3TC_DXT5_EXT:33779,COMPRESSED_R11_EAC:37488,COMPRESSED_SIGNED_R11_EAC:37489,COMPRESSED_RG11_EAC:37490,COMPRESSED_SIGNED_RG11_EAC:37491,COMPRESSED_RGB8_ETC2:37492,COMPRESSED_RGBA8_ETC2_EAC:37493,COMPRESSED_SRGB8_ETC2:37494,COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:37495,COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:37496,COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:37497,COMPRESSED_RGB_PVRTC_4BPPV1_IMG:35840,COMPRESSED_RGBA_PVRTC_4BPPV1_IMG:35842,COMPRESSED_RGB_PVRTC_2BPPV1_IMG:35841,COMPRESSED_RGBA_PVRTC_2BPPV1_IMG:35843,COMPRESSED_RGB_ETC1_WEBGL:36196,COMPRESSED_RGB_ATC_WEBGL:35986,COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL:35986,COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL:34798,UNSIGNED_INT_24_8_WEBGL:34042,HALF_FLOAT_OES:36193,RGBA32F_EXT:34836,RGB32F_EXT:34837,FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT:33297,UNSIGNED_NORMALIZED_EXT:35863,MIN_EXT:32775,MAX_EXT:32776,SRGB_EXT:35904,SRGB_ALPHA_EXT:35906,SRGB8_ALPHA8_EXT:35907,FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT:33296,FRAGMENT_SHADER_DERIVATIVE_HINT_OES:35723,COLOR_ATTACHMENT0_WEBGL:36064,COLOR_ATTACHMENT1_WEBGL:36065,COLOR_ATTACHMENT2_WEBGL:36066,COLOR_ATTACHMENT3_WEBGL:36067,COLOR_ATTACHMENT4_WEBGL:36068,COLOR_ATTACHMENT5_WEBGL:36069,COLOR_ATTACHMENT6_WEBGL:36070,COLOR_ATTACHMENT7_WEBGL:36071,COLOR_ATTACHMENT8_WEBGL:36072,COLOR_ATTACHMENT9_WEBGL:36073,COLOR_ATTACHMENT10_WEBGL:36074,COLOR_ATTACHMENT11_WEBGL:36075,COLOR_ATTACHMENT12_WEBGL:36076,COLOR_ATTACHMENT13_WEBGL:36077,COLOR_ATTACHMENT14_WEBGL:36078,COLOR_ATTACHMENT15_WEBGL:36079,DRAW_BUFFER0_WEBGL:34853,DRAW_BUFFER1_WEBGL:34854,DRAW_BUFFER2_WEBGL:34855,DRAW_BUFFER3_WEBGL:34856,DRAW_BUFFER4_WEBGL:34857,DRAW_BUFFER5_WEBGL:34858,DRAW_BUFFER6_WEBGL:34859,DRAW_BUFFER7_WEBGL:34860,DRAW_BUFFER8_WEBGL:34861,DRAW_BUFFER9_WEBGL:34862,DRAW_BUFFER10_WEBGL:34863,DRAW_BUFFER11_WEBGL:34864,DRAW_BUFFER12_WEBGL:34865,DRAW_BUFFER13_WEBGL:34866,DRAW_BUFFER14_WEBGL:34867,DRAW_BUFFER15_WEBGL:34868,MAX_COLOR_ATTACHMENTS_WEBGL:36063,MAX_DRAW_BUFFERS_WEBGL:34852,VERTEX_ARRAY_BINDING_OES:34229,QUERY_COUNTER_BITS_EXT:34916,CURRENT_QUERY_EXT:34917,QUERY_RESULT_EXT:34918,QUERY_RESULT_AVAILABLE_EXT:34919,TIME_ELAPSED_EXT:35007,TIMESTAMP_EXT:36392,GPU_DISJOINT_EXT:36795}},function(n,t,e){"use strict";function l(n){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";e.d(t,"a",function(){return r});var l=e(17),i=e(16);function r(n,t){return!t||"object"!==Object(l.a)(t)&&"function"!=typeof t?Object(i.a)(n):t}},function(n,t,e){"use strict";e.d(t,"a",function(){return i});var l=e(73);function i(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),t&&Object(l.a)(n,t)}},function(n,t,e){n.exports=e(112)},function(n,t,e){"use strict";e.d(t,"b",function(){return l}),e.d(t,"a",function(){return i}),e.d(t,"c",function(){return r});var l=1e-6,i="undefined"!=typeof Float32Array?Float32Array:Array,r=Math.random;Math.PI},function(n,t,e){"use strict";e.d(t,"p",function(){return i}),e.d(t,"e",function(){return r}),e.d(t,"a",function(){return u}),e.d(t,"g",function(){return o}),e.d(t,"o",function(){return a}),e.d(t,"n",function(){return s}),e.d(t,"j",function(){return c}),e.d(t,"k",function(){return h}),e.d(t,"l",function(){return f}),e.d(t,"m",function(){return d}),e.d(t,"c",function(){return p}),e.d(t,"d",function(){return g}),e.d(t,"i",function(){return v}),e.d(t,"h",function(){return m}),e.d(t,"f",function(){return _}),e.d(t,"b",function(){return b});var l=e(10);function i(n,t){if(n===t){var e=t[1],l=t[2],i=t[3],r=t[6],u=t[7],o=t[11];n[1]=t[4],n[2]=t[8],n[3]=t[12],n[4]=e,n[6]=t[9],n[7]=t[13],n[8]=l,n[9]=r,n[11]=t[14],n[12]=i,n[13]=u,n[14]=o}else n[0]=t[0],n[1]=t[4],n[2]=t[8],n[3]=t[12],n[4]=t[1],n[5]=t[5],n[6]=t[9],n[7]=t[13],n[8]=t[2],n[9]=t[6],n[10]=t[10],n[11]=t[14],n[12]=t[3],n[13]=t[7],n[14]=t[11],n[15]=t[15];return n}function r(n,t){var e=t[0],l=t[1],i=t[2],r=t[3],u=t[4],o=t[5],a=t[6],s=t[7],c=t[8],h=t[9],f=t[10],d=t[11],p=t[12],g=t[13],v=t[14],m=t[15],_=e*o-l*u,b=e*a-i*u,y=e*s-r*u,x=l*a-i*o,w=l*s-r*o,E=i*s-r*a,P=c*g-h*p,O=c*v-f*p,S=c*m-d*p,A=h*v-f*g,T=h*m-d*g,C=f*m-d*v,L=_*C-b*T+y*A+x*S-w*O+E*P;return L?(L=1/L,n[0]=(o*C-a*T+s*A)*L,n[1]=(i*T-l*C-r*A)*L,n[2]=(g*E-v*w+m*x)*L,n[3]=(f*w-h*E-d*x)*L,n[4]=(a*S-u*C-s*O)*L,n[5]=(e*C-i*S+r*O)*L,n[6]=(v*y-p*E-m*b)*L,n[7]=(c*E-f*y+d*b)*L,n[8]=(u*T-o*S+s*P)*L,n[9]=(l*S-e*T-r*P)*L,n[10]=(p*w-g*y+m*_)*L,n[11]=(h*y-c*w-d*_)*L,n[12]=(o*O-u*A-a*P)*L,n[13]=(e*A-l*O+i*P)*L,n[14]=(g*b-p*x-v*_)*L,n[15]=(c*x-h*b+f*_)*L,n):null}function u(n){var t=n[0],e=n[1],l=n[2],i=n[3],r=n[4],u=n[5],o=n[6],a=n[7],s=n[8],c=n[9],h=n[10],f=n[11],d=n[12],p=n[13],g=n[14],v=n[15];return(t*u-e*r)*(h*v-f*g)-(t*o-l*r)*(c*v-f*p)+(t*a-i*r)*(c*g-h*p)+(e*o-l*u)*(s*v-f*d)-(e*a-i*u)*(s*g-h*d)+(l*a-i*o)*(s*p-c*d)}function o(n,t,e){var l=t[0],i=t[1],r=t[2],u=t[3],o=t[4],a=t[5],s=t[6],c=t[7],h=t[8],f=t[9],d=t[10],p=t[11],g=t[12],v=t[13],m=t[14],_=t[15],b=e[0],y=e[1],x=e[2],w=e[3];return n[0]=b*l+y*o+x*h+w*g,n[1]=b*i+y*a+x*f+w*v,n[2]=b*r+y*s+x*d+w*m,n[3]=b*u+y*c+x*p+w*_,b=e[4],y=e[5],x=e[6],w=e[7],n[4]=b*l+y*o+x*h+w*g,n[5]=b*i+y*a+x*f+w*v,n[6]=b*r+y*s+x*d+w*m,n[7]=b*u+y*c+x*p+w*_,b=e[8],y=e[9],x=e[10],w=e[11],n[8]=b*l+y*o+x*h+w*g,n[9]=b*i+y*a+x*f+w*v,n[10]=b*r+y*s+x*d+w*m,n[11]=b*u+y*c+x*p+w*_,b=e[12],y=e[13],x=e[14],w=e[15],n[12]=b*l+y*o+x*h+w*g,n[13]=b*i+y*a+x*f+w*v,n[14]=b*r+y*s+x*d+w*m,n[15]=b*u+y*c+x*p+w*_,n}function a(n,t,e){var l,i,r,u,o,a,s,c,h,f,d,p,g=e[0],v=e[1],m=e[2];return t===n?(n[12]=t[0]*g+t[4]*v+t[8]*m+t[12],n[13]=t[1]*g+t[5]*v+t[9]*m+t[13],n[14]=t[2]*g+t[6]*v+t[10]*m+t[14],n[15]=t[3]*g+t[7]*v+t[11]*m+t[15]):(l=t[0],i=t[1],r=t[2],u=t[3],o=t[4],a=t[5],s=t[6],c=t[7],h=t[8],f=t[9],d=t[10],p=t[11],n[0]=l,n[1]=i,n[2]=r,n[3]=u,n[4]=o,n[5]=a,n[6]=s,n[7]=c,n[8]=h,n[9]=f,n[10]=d,n[11]=p,n[12]=l*g+o*v+h*m+t[12],n[13]=i*g+a*v+f*m+t[13],n[14]=r*g+s*v+d*m+t[14],n[15]=u*g+c*v+p*m+t[15]),n}function s(n,t,e){var l=e[0],i=e[1],r=e[2];return n[0]=t[0]*l,n[1]=t[1]*l,n[2]=t[2]*l,n[3]=t[3]*l,n[4]=t[4]*i,n[5]=t[5]*i,n[6]=t[6]*i,n[7]=t[7]*i,n[8]=t[8]*r,n[9]=t[9]*r,n[10]=t[10]*r,n[11]=t[11]*r,n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function c(n,t,e,i){var r,u,o,a,s,c,h,f,d,p,g,v,m,_,b,y,x,w,E,P,O,S,A,T,C=i[0],L=i[1],M=i[2],j=Math.sqrt(C*C+L*L+M*M);return j<l.b?null:(C*=j=1/j,L*=j,M*=j,r=Math.sin(e),o=1-(u=Math.cos(e)),a=t[0],s=t[1],c=t[2],h=t[3],f=t[4],d=t[5],p=t[6],g=t[7],v=t[8],m=t[9],_=t[10],b=t[11],y=C*C*o+u,x=L*C*o+M*r,w=M*C*o-L*r,E=C*L*o-M*r,P=L*L*o+u,O=M*L*o+C*r,S=C*M*o+L*r,A=L*M*o-C*r,T=M*M*o+u,n[0]=a*y+f*x+v*w,n[1]=s*y+d*x+m*w,n[2]=c*y+p*x+_*w,n[3]=h*y+g*x+b*w,n[4]=a*E+f*P+v*O,n[5]=s*E+d*P+m*O,n[6]=c*E+p*P+_*O,n[7]=h*E+g*P+b*O,n[8]=a*S+f*A+v*T,n[9]=s*S+d*A+m*T,n[10]=c*S+p*A+_*T,n[11]=h*S+g*A+b*T,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n)}function h(n,t,e){var l=Math.sin(e),i=Math.cos(e),r=t[4],u=t[5],o=t[6],a=t[7],s=t[8],c=t[9],h=t[10],f=t[11];return t!==n&&(n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[4]=r*i+s*l,n[5]=u*i+c*l,n[6]=o*i+h*l,n[7]=a*i+f*l,n[8]=s*i-r*l,n[9]=c*i-u*l,n[10]=h*i-o*l,n[11]=f*i-a*l,n}function f(n,t,e){var l=Math.sin(e),i=Math.cos(e),r=t[0],u=t[1],o=t[2],a=t[3],s=t[8],c=t[9],h=t[10],f=t[11];return t!==n&&(n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[0]=r*i-s*l,n[1]=u*i-c*l,n[2]=o*i-h*l,n[3]=a*i-f*l,n[8]=r*l+s*i,n[9]=u*l+c*i,n[10]=o*l+h*i,n[11]=a*l+f*i,n}function d(n,t,e){var l=Math.sin(e),i=Math.cos(e),r=t[0],u=t[1],o=t[2],a=t[3],s=t[4],c=t[5],h=t[6],f=t[7];return t!==n&&(n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[0]=r*i+s*l,n[1]=u*i+c*l,n[2]=o*i+h*l,n[3]=a*i+f*l,n[4]=s*i-r*l,n[5]=c*i-u*l,n[6]=h*i-o*l,n[7]=f*i-a*l,n}function p(n,t){var e=t[0],l=t[1],i=t[2],r=t[3],u=e+e,o=l+l,a=i+i,s=e*u,c=l*u,h=l*o,f=i*u,d=i*o,p=i*a,g=r*u,v=r*o,m=r*a;return n[0]=1-h-p,n[1]=c+m,n[2]=f-v,n[3]=0,n[4]=c-m,n[5]=1-s-p,n[6]=d+g,n[7]=0,n[8]=f+v,n[9]=d-g,n[10]=1-s-h,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function g(n,t,e,l,i,r,u){var o=1/(e-t),a=1/(i-l),s=1/(r-u);return n[0]=2*r*o,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2*r*a,n[6]=0,n[7]=0,n[8]=(e+t)*o,n[9]=(i+l)*a,n[10]=(u+r)*s,n[11]=-1,n[12]=0,n[13]=0,n[14]=u*r*2*s,n[15]=0,n}function v(n,t,e,l,i){var r,u=1/Math.tan(t/2);return n[0]=u/e,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=u,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[11]=-1,n[12]=0,n[13]=0,n[15]=0,null!=i&&i!==1/0?(r=1/(l-i),n[10]=(i+l)*r,n[14]=2*i*l*r):(n[10]=-1,n[14]=-2*l),n}function m(n,t,e,l,i,r,u){var o=1/(t-e),a=1/(l-i),s=1/(r-u);return n[0]=-2*o,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=-2*a,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=2*s,n[11]=0,n[12]=(t+e)*o,n[13]=(i+l)*a,n[14]=(u+r)*s,n[15]=1,n}function _(n,t,e,i){var r,u,o,a,s,c,h,f,d,p,g=t[0],v=t[1],m=t[2],_=i[0],b=i[1],y=i[2],x=e[0],w=e[1],E=e[2];return Math.abs(g-x)<l.b&&Math.abs(v-w)<l.b&&Math.abs(m-E)<l.b?function(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}(n):(h=g-x,f=v-w,d=m-E,r=b*(d*=p=1/Math.sqrt(h*h+f*f+d*d))-y*(f*=p),u=y*(h*=p)-_*d,o=_*f-b*h,(p=Math.sqrt(r*r+u*u+o*o))?(r*=p=1/p,u*=p,o*=p):(r=0,u=0,o=0),a=f*o-d*u,s=d*r-h*o,c=h*u-f*r,(p=Math.sqrt(a*a+s*s+c*c))?(a*=p=1/p,s*=p,c*=p):(a=0,s=0,c=0),n[0]=r,n[1]=a,n[2]=h,n[3]=0,n[4]=u,n[5]=s,n[6]=f,n[7]=0,n[8]=o,n[9]=c,n[10]=d,n[11]=0,n[12]=-(r*g+u*v+o*m),n[13]=-(a*g+s*v+c*m),n[14]=-(h*g+f*v+d*m),n[15]=1,n)}function b(n,t){var e=n[0],i=n[1],r=n[2],u=n[3],o=n[4],a=n[5],s=n[6],c=n[7],h=n[8],f=n[9],d=n[10],p=n[11],g=n[12],v=n[13],m=n[14],_=n[15],b=t[0],y=t[1],x=t[2],w=t[3],E=t[4],P=t[5],O=t[6],S=t[7],A=t[8],T=t[9],C=t[10],L=t[11],M=t[12],j=t[13],R=t[14],I=t[15];return Math.abs(e-b)<=l.b*Math.max(1,Math.abs(e),Math.abs(b))&&Math.abs(i-y)<=l.b*Math.max(1,Math.abs(i),Math.abs(y))&&Math.abs(r-x)<=l.b*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(u-w)<=l.b*Math.max(1,Math.abs(u),Math.abs(w))&&Math.abs(o-E)<=l.b*Math.max(1,Math.abs(o),Math.abs(E))&&Math.abs(a-P)<=l.b*Math.max(1,Math.abs(a),Math.abs(P))&&Math.abs(s-O)<=l.b*Math.max(1,Math.abs(s),Math.abs(O))&&Math.abs(c-S)<=l.b*Math.max(1,Math.abs(c),Math.abs(S))&&Math.abs(h-A)<=l.b*Math.max(1,Math.abs(h),Math.abs(A))&&Math.abs(f-T)<=l.b*Math.max(1,Math.abs(f),Math.abs(T))&&Math.abs(d-C)<=l.b*Math.max(1,Math.abs(d),Math.abs(C))&&Math.abs(p-L)<=l.b*Math.max(1,Math.abs(p),Math.abs(L))&&Math.abs(g-M)<=l.b*Math.max(1,Math.abs(g),Math.abs(M))&&Math.abs(v-j)<=l.b*Math.max(1,Math.abs(v),Math.abs(j))&&Math.abs(m-R)<=l.b*Math.max(1,Math.abs(m),Math.abs(R))&&Math.abs(_-I)<=l.b*Math.max(1,Math.abs(_),Math.abs(I))}},function(n,t,e){"use strict";function l(n,t){return function(n){if(Array.isArray(n))return n}(n)||function(n,t){var e=[],l=!0,i=!1,r=void 0;try{for(var u,o=n[Symbol.iterator]();!(l=(u=o.next()).done)&&(e.push(u.value),!t||e.length!==t);l=!0);}catch(n){i=!0,r=n}finally{try{l||null==o.return||o.return()}finally{if(i)throw r}}return e}(n,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";e.d(t,"c",function(){return l}),e.d(t,"a",function(){return i}),e.d(t,"f",function(){return u}),e.d(t,"h",function(){return s}),e.d(t,"d",function(){return c}),e.d(t,"b",function(){return h}),e.d(t,"g",function(){return f}),e.d(t,"e",function(){return d});var l={};function i(n){if(!Number.isFinite(n))throw new Error("Invalid number ".concat(n));return n}function r(n){return Math.round(n/l.EPSILON)*l.EPSILON}function u(n){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).precision,e=void 0===t?l.precision||4:t;return n=r(n),parseFloat(n.toPrecision(e))}function o(n){return Array.isArray(n)||ArrayBuffer.isView(n)&&void 0!==n.length}function a(n,t){if(o(n)){for(var e=(i=n).clone?i.clone():new Array(i),l=0;l<e.length;++l)e[l]=t(e[l],l,e);return e}var i;return t(n)}function s(n){return a(n,function(n){return n/180*Math.PI})}function c(n){return a(n,function(n){return 180*n/Math.PI})}function h(n,t,e){return a(n,function(n){return Math.max(t,Math.min(e,n))})}function f(n,t,e){return o(n)?n.map(function(n,l){return f(n,t[l],e)}):e*t+(1-e)*n}function d(n,t){if(o(n)&&o(t)){if(n===t)return!0;if(n.length!==t.length)return!1;for(var e=0;e<n.length;++e)if(!d(n[e],t[e]))return!1;return!0}return Math.abs(n-t)<=l.EPSILON*Math.max(1,Math.abs(n),Math.abs(t))}l.EPSILON=1e-12,l.debug=!0,l.precision=4,l.printTypes=!1,l.printDegrees=!1,l.printRowMajor=!0},function(n,t,e){"use strict";function l(n){return function(n){if(Array.isArray(n)){for(var t=0,e=new Array(n.length);t<n.length;t++)e[t]=n[t];return e}}(n)||function(n){if(Symbol.iterator in Object(n)||"[object Arguments]"===Object.prototype.toString.call(n))return Array.from(n)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";function l(n,t,e,l,i,r,u){try{var o=n[r](u),a=o.value}catch(n){return void e(n)}o.done?t(a):Promise.resolve(a).then(l,i)}function i(n){return function(){var t=this,e=arguments;return new Promise(function(i,r){var u=n.apply(t,e);function o(n){l(u,i,r,o,a,"next",n)}function a(n){l(u,i,r,o,a,"throw",n)}o(void 0)})}}e.d(t,"a",function(){return i})},function(n,t,e){"use strict";function l(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";function l(n){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function i(n){return(i="function"==typeof Symbol&&"symbol"===l(Symbol.iterator)?function(n){return l(n)}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":l(n)})(n)}e.d(t,"a",function(){return i})},function(n,t,e){n.exports=e(107)()},function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},i="undefined"!=typeof window&&window.addEventListener,r=new Map,u=function(){return i&&window.__SEER_INITIALIZED__},o=function(n,t){var e=r.get(n),l=Date.now();return!!(e&&l-e<t)||(r.set(n,l),!1)},a=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i&&u()){var e=new Set,r=JSON.stringify(t,function(n){return function(t,e){if(!e||"object"!==(void 0===e?"undefined":l(e))||!n.has(e))return n.add(e),Object.prototype.toString.call(e).slice(8,-1).includes("Array")?Array.prototype.slice.call(e,0,20):e}}(e));try{window.postMessage({type:n,payload:r,source:"seer-agent"},"*")}catch(n){if(o("seer-log",2e3))return;console.log(n)}}},s=new Map,c=function(n){if(n&&n.data&&"seer-core"===n.data.source){var t=n.data,e=t.type,l=t.payload,i=s.get(e);i&&i.forEach(function(n){return n(l)})}},h=function(){i&&!window.__SEER_LISTENER__&&(window.addEventListener("message",c),window.__SEER_LISTENER__=!0)};t.default={send:a,throttle:o,isReady:u,list:function(n,t){return a("LIST",{key:n,data:t})},listItem:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return a("LIST_ITEM",{key:n,itemKey:t,data:e})},updateItem:function(n,t,e,l){return a("UPDATE_ITEM",{key:n,itemKey:t,path:e,data:l})},multiUpdate:function(n,t,e){return a("MULTI_UPDATE_ITEM",{key:n,itemKey:t,array:e})},deleteItem:function(n,t){return a("DELETE_ITEM",{key:n,itemKey:t})},addLog:function(n,t,e){return a("ADD_LOG",{key:n,itemKey:t,msg:e})},listeners:s,listenFor:function(n,t){if(i){if(!n||!t)throw new Error("Please provide a type and callback");s.has(n)||s.set(n,[]),window.__SEER_LISTENER__||h(),s.get(n).push(t)}},removeListener:function(n){s.forEach(function(t,e){s.set(e,t.filter(function(t){return t!==n}))})},init:h,clean:function(){i&&window.__SEER_LISTENER__&&(window.removeEventListener("message",c),delete window.__SEER_LISTENER__)}}},function(n,t,e){"use strict";(function(n){e.d(t,"c",function(){return i}),e.d(t,"d",function(){return r}),e.d(t,"b",function(){return u}),e.d(t,"a",function(){return o});var l={self:"undefined"!=typeof self&&self,window:"undefined"!=typeof window&&window,global:void 0!==n&&n,document:"undefined"!=typeof document&&document},i=l.self||l.window||l.global,r=l.window||l.self||l.global,u=l.global||l.self||l.window,o=l.document||{}}).call(this,e(33))},function(n,t,e){"use strict";e.d(t,"l",function(){return v}),e.d(t,"i",function(){return m}),e.d(t,"g",function(){return _}),e.d(t,"j",function(){return b}),e.d(t,"c",function(){return y}),e.d(t,"b",function(){return x}),e.d(t,"a",function(){return w}),e.d(t,"f",function(){return E}),e.d(t,"e",function(){return P}),e.d(t,"d",function(){return O}),e.d(t,"k",function(){return S}),e.d(t,"h",function(){return A});var l=e(12),i=e(25),r=e(11),u=e(22),o=e(27),a=e(36),s=Math.PI,c=s/4,h=s/180,f=180/s,d=512,p=4003e4,g=1.5;function v(n){return Math.pow(2,n)}function m(n){return Math.log2(n)}function _(n,t){var e=Object(l.a)(n,2),i=e[0],r=e[1];Object(a.a)(Number.isFinite(i)&&Number.isFinite(t)),Object(a.a)(Number.isFinite(r)&&r>=-90&&r<=90,"invalid latitude");var u=r*h;return[(t*=d)*(i*h+s)/(2*s),t*(s-Math.log(Math.tan(c+.5*u)))/(2*s)]}function b(n,t){var e=Object(l.a)(n,2),i=e[0],r=e[1],u=i/(t*=d)*(2*s)-s,o=2*(Math.atan(Math.exp(s-r/t*(2*s)))-c);return[u*f,o*f]}function y(n){var t=n.latitude;Object(a.a)(Number.isFinite(t));var e=Math.cos(t*h);return m(p*e)-9}function x(n){var t=n.latitude,e=n.longitude,l=n.zoom,i=n.scale,r=n.highPrecision,u=void 0!==r&&r;i=void 0!==i?i:v(l),Object(a.a)(Number.isFinite(t)&&Number.isFinite(e)&&Number.isFinite(i));var o={},s=d*i,c=Math.cos(t*h),f=s/360,g=f/c,m=s/p/c;if(o.pixelsPerMeter=[m,-m,m],o.metersPerPixel=[1/m,-1/m,1/m],o.pixelsPerDegree=[f,-g,m],o.degreesPerPixel=[1/f,-1/g,1/m],u){var _=h*Math.tan(t*h)/c,b=f*_/2,y=s/p*_,x=y/g*m;o.pixelsPerDegree2=[0,-b,y],o.pixelsPerMeter2=[x,0,x]}return o}function w(n,t){var e=Object(l.a)(n,3),i=e[0],r=e[1],u=e[2],o=Object(l.a)(t,3),a=o[0],s=o[1],c=o[2],h=x({longitude:i,latitude:r,scale:1,highPrecision:!0}),f=h.pixelsPerMeter,d=h.pixelsPerMeter2,p=_(n,1);p[0]+=a*(f[0]+d[0]*s),p[1]+=s*(f[1]+d[1]*s);var g=b(p,1),v=(u||0)+(c||0);return Number.isFinite(u)||Number.isFinite(c)?[g[0],g[1],v]:g}function E(n){var t=n.height,e=n.pitch,l=n.bearing,u=n.altitude,a=n.center,s=void 0===a?null:a,c=n.flipY,f=void 0!==c&&c,d=Object(i.a)();return r.o(d,d,[0,0,-u]),r.n(d,d,[1,1,1/t]),r.k(d,d,-e*h),r.m(d,d,l*h),f&&r.n(d,d,[1,-1,1]),s&&r.o(d,d,o.d([],s)),d}function P(n){var t=n.width,e=n.height,l=n.altitude,i=void 0===l?g:l,r=n.pitch,u=void 0===r?0:r,o=n.nearZMultiplier,a=void 0===o?1:o,s=n.farZMultiplier,c=void 0===s?1:s,f=u*h,d=Math.atan(.5/i),p=Math.sin(d)*i/Math.sin(Math.PI/2-f-d),v=Math.cos(Math.PI/2-f)*p+i;return{fov:2*Math.atan(e/2/i),aspect:t/e,focalDistance:i,near:a,far:v*c}}function O(n){var t=n.width,e=n.height,l=n.pitch,i=P({width:t,height:e,altitude:n.altitude,pitch:l,nearZMultiplier:n.nearZMultiplier,farZMultiplier:n.farZMultiplier}),u=i.fov,o=i.aspect,a=i.near,s=i.far;return r.i([],u,o,a,s)}function S(n,t){var e=Object(l.a)(n,3),r=e[0],u=e[1],o=e[2],s=void 0===o?0:o;return Object(a.a)(Number.isFinite(r)&&Number.isFinite(u)&&Number.isFinite(s)),Object(i.d)(t,[r,u,s,1])}function A(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=Object(l.a)(n,3),o=r[0],s=r[1],c=r[2];if(Object(a.a)(Number.isFinite(o)&&Number.isFinite(s),"invalid pixel coordinate"),Number.isFinite(c))return Object(i.d)(t,[o,s,c,1]);var h=Object(i.d)(t,[o,s,0,1]),f=Object(i.d)(t,[o,s,1,1]),d=h[2],p=f[2],g=d===p?0:((e||0)-d)/(p-d);return u.d([],h,f,g)}},function(n,t,e){"use strict";e.d(t,"a",function(){return i}),e.d(t,"f",function(){return r}),e.d(t,"c",function(){return u}),e.d(t,"e",function(){return o}),e.d(t,"b",function(){return a}),e.d(t,"d",function(){return s}),e.d(t,"h",function(){return c}),e.d(t,"g",function(){return d});var l=e(10);function i(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n}function r(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n}function u(n){var t=n[0],e=n[1];return Math.sqrt(t*t+e*e)}function o(n,t){return n[0]=-t[0],n[1]=-t[1],n}function a(n,t,e){var l=t[0]*e[1]-t[1]*e[0];return n[0]=n[1]=0,n[2]=l,n}function s(n,t,e,l){var i=t[0],r=t[1];return n[0]=i+l*(e[0]-i),n[1]=r+l*(e[1]-r),n}function c(n,t,e){var l=t[0],i=t[1];return n[0]=e[0]*l+e[4]*i+e[12],n[1]=e[1]*l+e[5]*i+e[13],n}var h,f,d=function(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n};h=new l.a(2),l.a!=Float32Array&&(h[0]=0,h[1]=0),f=h},,function(n,t,e){"use strict";(function(n,l){e.d(t,"b",function(){return u}),e.d(t,"a",function(){return o});var i=e(17),r={self:"undefined"!=typeof self&&self,window:"undefined"!=typeof window&&window,global:void 0!==n&&n,document:"undefined"!=typeof document&&document,process:"object"===(void 0===l?"undefined":Object(i.a)(l))&&l},u=r.window||r.self||r.global,o=r.process||{};console}).call(this,e(33),e(42))},function(n,t,e){"use strict";e.d(t,"a",function(){return i}),e.d(t,"d",function(){return r}),e.d(t,"c",function(){return u}),e.d(t,"b",function(){return o});var l=e(26);function i(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}function r(n,t){var e=l.c([],t,n);return l.b(e,e,1/e[3]),e}function u(n,t){var e=n%t;return e<0?t+e:e}function o(n,t,e){return e*t+(1-e)*n}},function(n,t,e){"use strict";e.d(t,"a",function(){return i}),e.d(t,"b",function(){return r}),e.d(t,"c",function(){return u});var l=e(10);function i(n,t,e){return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n[2]=t[2]*e[2],n[3]=t[3]*e[3],n}function r(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n}function u(n,t,e){var l=t[0],i=t[1],r=t[2],u=t[3];return n[0]=e[0]*l+e[4]*i+e[8]*r+e[12]*u,n[1]=e[1]*l+e[5]*i+e[9]*r+e[13]*u,n[2]=e[2]*l+e[6]*i+e[10]*r+e[14]*u,n[3]=e[3]*l+e[7]*i+e[11]*r+e[15]*u,n}var o,a;o=new l.a(4),l.a!=Float32Array&&(o[0]=0,o[1]=0,o[2]=0,o[3]=0),a=o},function(n,t,e){"use strict";e.d(t,"c",function(){return i}),e.d(t,"d",function(){return u}),e.d(t,"b",function(){return a}),e.d(t,"i",function(){return s}),e.d(t,"e",function(){return c}),e.d(t,"f",function(){return h}),e.d(t,"g",function(){return f}),e.d(t,"a",function(){return d}),e.d(t,"h",function(){return v});var l=e(10);function i(n){var t=n[0],e=n[1],l=n[2];return Math.sqrt(t*t+e*e+l*l)}function r(n,t,e){var i=new l.a(3);return i[0]=n,i[1]=t,i[2]=e,i}function u(n,t){return n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],n}function o(n,t){var e=t[0],l=t[1],i=t[2],r=e*e+l*l+i*i;return r>0&&(r=1/Math.sqrt(r)),n[0]=t[0]*r,n[1]=t[1]*r,n[2]=t[2]*r,n}function a(n,t,e){var l=t[0],i=t[1],r=t[2],u=e[0],o=e[1],a=e[2];return n[0]=i*a-r*o,n[1]=r*u-l*a,n[2]=l*o-i*u,n}function s(n,t,e){var l=t[0],i=t[1],r=t[2],u=e[3]*l+e[7]*i+e[11]*r+e[15];return u=u||1,n[0]=(e[0]*l+e[4]*i+e[8]*r+e[12])/u,n[1]=(e[1]*l+e[5]*i+e[9]*r+e[13])/u,n[2]=(e[2]*l+e[6]*i+e[10]*r+e[14])/u,n}function c(n,t,e,l){var i=[],r=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],r[0]=i[0],r[1]=i[1]*Math.cos(l)-i[2]*Math.sin(l),r[2]=i[1]*Math.sin(l)+i[2]*Math.cos(l),n[0]=r[0]+e[0],n[1]=r[1]+e[1],n[2]=r[2]+e[2],n}function h(n,t,e,l){var i=[],r=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],r[0]=i[2]*Math.sin(l)+i[0]*Math.cos(l),r[1]=i[1],r[2]=i[2]*Math.cos(l)-i[0]*Math.sin(l),n[0]=r[0]+e[0],n[1]=r[1]+e[1],n[2]=r[2]+e[2],n}function f(n,t,e,l){var i=[],r=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],r[0]=i[0]*Math.cos(l)-i[1]*Math.sin(l),r[1]=i[0]*Math.sin(l)+i[1]*Math.cos(l),r[2]=i[2],n[0]=r[0]+e[0],n[1]=r[1]+e[1],n[2]=r[2]+e[2],n}function d(n,t){var e=r(n[0],n[1],n[2]),l=r(t[0],t[1],t[2]);o(e,e),o(l,l);var i=function(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}(e,l);return i>1?0:i<-1?Math.PI:Math.acos(i)}var p,g,v=function(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n};p=new l.a(3),l.a!=Float32Array&&(p[0]=0,p[1]=0,p[2]=0),g=p},function(n,t,e){n.exports=e(103)},function(n,t,e){"use strict";e.d(t,"b",function(){return s}),e.d(t,"d",function(){return d}),e.d(t,"a",function(){return p}),e.d(t,"c",function(){return v});var l,i,r,u=e(14),o=e(0),a=e(30),s=(l={},Object(o.a)(l,3042,!1),Object(o.a)(l,32773,new Float32Array([0,0,0,0])),Object(o.a)(l,32777,32774),Object(o.a)(l,34877,32774),Object(o.a)(l,32969,1),Object(o.a)(l,32968,0),Object(o.a)(l,32971,1),Object(o.a)(l,32970,0),Object(o.a)(l,3106,new Float32Array([0,0,0,0])),Object(o.a)(l,3107,[!0,!0,!0,!0]),Object(o.a)(l,2884,!1),Object(o.a)(l,2885,1029),Object(o.a)(l,2929,!1),Object(o.a)(l,2931,1),Object(o.a)(l,2932,513),Object(o.a)(l,2928,new Float32Array([0,1])),Object(o.a)(l,2930,!0),Object(o.a)(l,3024,!0),Object(o.a)(l,36006,null),Object(o.a)(l,2886,2305),Object(o.a)(l,33170,4352),Object(o.a)(l,2849,1),Object(o.a)(l,32823,!1),Object(o.a)(l,32824,0),Object(o.a)(l,10752,0),Object(o.a)(l,32938,1),Object(o.a)(l,32939,!1),Object(o.a)(l,3089,!1),Object(o.a)(l,3088,new Int32Array([0,0,1024,1024])),Object(o.a)(l,2960,!1),Object(o.a)(l,2961,0),Object(o.a)(l,2968,4294967295),Object(o.a)(l,36005,4294967295),Object(o.a)(l,2962,519),Object(o.a)(l,2967,0),Object(o.a)(l,2963,4294967295),Object(o.a)(l,34816,519),Object(o.a)(l,36003,0),Object(o.a)(l,36004,4294967295),Object(o.a)(l,2964,7680),Object(o.a)(l,2965,7680),Object(o.a)(l,2966,7680),Object(o.a)(l,34817,7680),Object(o.a)(l,34818,7680),Object(o.a)(l,34819,7680),Object(o.a)(l,2978,new Int32Array([0,0,1024,1024])),Object(o.a)(l,3333,4),Object(o.a)(l,3317,4),Object(o.a)(l,37440,!1),Object(o.a)(l,37441,!1),Object(o.a)(l,37443,37444),Object(o.a)(l,35723,4352),Object(o.a)(l,36010,null),Object(o.a)(l,35977,!1),Object(o.a)(l,3330,0),Object(o.a)(l,3332,0),Object(o.a)(l,3331,0),Object(o.a)(l,3314,0),Object(o.a)(l,32878,0),Object(o.a)(l,3316,0),Object(o.a)(l,3315,0),Object(o.a)(l,32877,0),l),c=function(n,t,e){return t?n.enable(e):n.disable(e)},h=function(n,t,e){return n.hint(e,t)},f=function(n,t,e){return n.pixelStorei(e,t)},d=(i={},Object(o.a)(i,3042,c),Object(o.a)(i,32773,function(n,t){return n.blendColor.apply(n,Object(u.a)(t))}),Object(o.a)(i,32777,"blendEquation"),Object(o.a)(i,34877,"blendEquation"),Object(o.a)(i,32969,"blendFunc"),Object(o.a)(i,32968,"blendFunc"),Object(o.a)(i,32971,"blendFunc"),Object(o.a)(i,32970,"blendFunc"),Object(o.a)(i,3106,function(n,t){return n.clearColor.apply(n,Object(u.a)(t))}),Object(o.a)(i,3107,function(n,t){return n.colorMask.apply(n,Object(u.a)(t))}),Object(o.a)(i,2884,c),Object(o.a)(i,2885,function(n,t){return n.cullFace(t)}),Object(o.a)(i,2929,c),Object(o.a)(i,2931,function(n,t){return n.clearDepth(t)}),Object(o.a)(i,2932,function(n,t){return n.depthFunc(t)}),Object(o.a)(i,2928,function(n,t){return n.depthRange.apply(n,Object(u.a)(t))}),Object(o.a)(i,2930,function(n,t){return n.depthMask(t)}),Object(o.a)(i,3024,c),Object(o.a)(i,35723,h),Object(o.a)(i,36006,function(n,t){var e=Object(a.c)(n)?36009:36160;return n.bindFramebuffer(e,t)}),Object(o.a)(i,2886,function(n,t){return n.frontFace(t)}),Object(o.a)(i,33170,h),Object(o.a)(i,2849,function(n,t){return n.lineWidth(t)}),Object(o.a)(i,32823,c),Object(o.a)(i,32824,"polygonOffset"),Object(o.a)(i,10752,"polygonOffset"),Object(o.a)(i,35977,c),Object(o.a)(i,32938,"sampleCoverage"),Object(o.a)(i,32939,"sampleCoverage"),Object(o.a)(i,3089,c),Object(o.a)(i,3088,function(n,t){return n.scissor.apply(n,Object(u.a)(t))}),Object(o.a)(i,2960,c),Object(o.a)(i,2961,function(n,t){return n.clearStencil(t)}),Object(o.a)(i,2968,function(n,t){return n.stencilMaskSeparate(1028,t)}),Object(o.a)(i,36005,function(n,t){return n.stencilMaskSeparate(1029,t)}),Object(o.a)(i,2962,"stencilFuncFront"),Object(o.a)(i,2967,"stencilFuncFront"),Object(o.a)(i,2963,"stencilFuncFront"),Object(o.a)(i,34816,"stencilFuncBack"),Object(o.a)(i,36003,"stencilFuncBack"),Object(o.a)(i,36004,"stencilFuncBack"),Object(o.a)(i,2964,"stencilOpFront"),Object(o.a)(i,2965,"stencilOpFront"),Object(o.a)(i,2966,"stencilOpFront"),Object(o.a)(i,34817,"stencilOpBack"),Object(o.a)(i,34818,"stencilOpBack"),Object(o.a)(i,34819,"stencilOpBack"),Object(o.a)(i,2978,function(n,t){return n.viewport.apply(n,Object(u.a)(t))}),Object(o.a)(i,3333,f),Object(o.a)(i,3317,f),Object(o.a)(i,37440,f),Object(o.a)(i,37441,f),Object(o.a)(i,37443,f),Object(o.a)(i,3330,f),Object(o.a)(i,3332,f),Object(o.a)(i,3331,f),Object(o.a)(i,36010,function(n,t){return n.bindFramebuffer(36008,t)}),Object(o.a)(i,3314,f),Object(o.a)(i,32878,f),Object(o.a)(i,3316,f),Object(o.a)(i,3315,f),Object(o.a)(i,32877,f),i),p={blendEquation:function(n,t){return n.blendEquationSeparate(t[32777],t[34877])},blendFunc:function(n,t){return n.blendFuncSeparate(t[32969],t[32968],t[32971],t[32970])},polygonOffset:function(n,t){return n.polygonOffset(t[32824],t[10752])},sampleCoverage:function(n,t){return n.sampleCoverage(t[32938],t[32939])},stencilFuncFront:function(n,t){return n.stencilFuncSeparate(1028,t[2962],t[2967],t[2963])},stencilFuncBack:function(n,t){return n.stencilFuncSeparate(1029,t[34816],t[36003],t[36004])},stencilOpFront:function(n,t){return n.stencilOpSeparate(1028,t[2964],t[2965],t[2966])},stencilOpBack:function(n,t){return n.stencilOpSeparate(1029,t[34817],t[34818],t[34819])}},g=function(n,t){return n.isEnabled(t)},v=(r={},Object(o.a)(r,3042,g),Object(o.a)(r,2884,g),Object(o.a)(r,2929,g),Object(o.a)(r,3024,g),Object(o.a)(r,32823,g),Object(o.a)(r,32926,g),Object(o.a)(r,32928,g),Object(o.a)(r,3089,g),Object(o.a)(r,2960,g),Object(o.a)(r,35977,g),r)},function(n,t,e){"use strict";function l(n,t){if(!n)throw new Error(t||"luma.gl: assertion failed.")}e(68);function i(n){for(var t in n)return!1;return!0}function r(n){return Boolean(n&&2===n._version)}e.d(t,"a",function(){return l}),e.d(t,"c",function(){return r}),e.d(t,"b",function(){return i})},function(n,t,e){"use strict";e.d(t,"e",function(){return u}),e.d(t,"f",function(){return o}),e.d(t,"b",function(){return a}),e.d(t,"c",function(){return s}),e.d(t,"d",function(){return c}),e.d(t,"a",function(){return h});var l=e(29),i=e(68),r=e(30);function u(n,t,e){var i=l.c[t],u=i?i(n,Number(t)):n.getParameter(Number(t)),o=l.d[t];return Object(r.a)("function"==typeof o),o(n,e,Number(t)),u}function o(n,t){var e={};for(var i in t){var r=Number(i),u=l.d[i];u&&("string"==typeof u?e[u]=!0:u(n,t[i],r))}var o=n.state&&n.state.cache;if(o){var a=Object.assign({},o,t);for(var s in e){(0,l.a[s])(n,a)}}}function a(n,t){var e=l.c[t];return e?e(n,Number(t)):n.getParameter(Number(t))}function s(n,t){t=t||l.b;var e=Array.isArray(t)?t:Object.keys(t),i={},r=!0,u=!1,o=void 0;try{for(var s,c=e[Symbol.iterator]();!(r=(s=c.next()).done);r=!0){var h=s.value;i[h]=a(n,h)}}catch(n){u=!0,o=n}finally{try{r||null==c.return||c.return()}finally{if(u)throw o}}return i}function c(n){o(n,Object.assign({},l.b,{}))}function h(n){var t=s(l.b),e={};for(var r in l.b)Object(i.a)(t[r],l.b[r])||(e[r]=t[r]);return e}},function(n,t,e){"use strict";function l(n,t){if(!n)throw new Error(t||"loader assertion failed.")}e.d(t,"a",function(){return l})},function(n,t){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(n){"object"==typeof window&&(e=window)}n.exports=e},function(n,t,e){"use strict";e.r(t);var l=e(86),i=e(5),r=e.n(i),u=e(4),o=e(1),a=e(122),s="\n#define SHADER_NAME bitmap-layer-vertex-shader\n\nattribute vec2 texCoords;\nattribute vec3 positions;\nattribute vec2 positions64xyLow;\nattribute vec3 instancePickingColors;\n\nvarying vec2 vTexCoord;\n\nvoid main(void) {\n  gl_Position = project_position_to_clipspace(positions, positions64xyLow, vec3(0.0));\n \n  vTexCoord = texCoords;\n \n  picking_setPickingColor(instancePickingColors);\n}\n",c="\n#define SHADER_NAME bitmap-layer-fragment-shader\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D bitmapTexture;\n\nvarying vec2 vTexCoord;\n\nuniform float desaturate;\nuniform vec4 transparentColor;\nuniform vec3 tintColor;\nuniform float opacity;\n\n// apply desaturation\nvec3 color_desaturate(vec3 color) {\n  float luminance = (color.r + color.g + color.b) * 0.333333333;\n  return mix(color, vec3(luminance), desaturate);\n}\n\n// apply tint\nvec3 color_tint(vec3 color) {\n  return color * tintColor / 255.0;\n}\n\n// blend with background color\nvec4 apply_opacity(vec3 color, float alpha) {\n  return mix(transparentColor / 255.0, vec4(color, 1.0), alpha);\n}\n\nvoid main(void) {\n  vec4 bitmapColor = texture2D(bitmapTexture, vTexCoord);\n\n  gl_FragColor = apply_opacity(color_tint(color_desaturate(bitmapColor.rgb)), bitmapColor.a * opacity);\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";const{fp64LowPart:h}=o.fp64,f={[r.a.TEXTURE_MIN_FILTER]:r.a.LINEAR_MIPMAP_LINEAR,[r.a.TEXTURE_MAG_FILTER]:r.a.LINEAR,[r.a.TEXTURE_WRAP_S]:r.a.CLAMP_TO_EDGE,[r.a.TEXTURE_WRAP_T]:r.a.CLAMP_TO_EDGE};class d extends u.Layer{getShaders(){const n=this.use64bitProjection()?"project64":"project32";return{vs:s,fs:c,modules:[n,"picking"]}}initializeState(){const n=[-1,-1,0,-1,1,0,1,1,0,1,-1,0];this.getAttributeManager().add({positions:{size:3,update:this.calculatePositions,value:new Float32Array(n)},positions64xyLow:{size:3,update:this.calculatePositions64xyLow,value:new Float32Array(n)}}),this.setState({numInstances:1})}updateState({props:n,oldProps:t,changeFlags:e}){if(n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}n.image!==t.image&&this.loadTexture();const l=this.getAttributeManager();n.bounds!==t.bounds&&(this.setState({positions:this._getPositionsFromBounds(n.bounds)}),l.invalidate("positions"),l.invalidate("positions64xyLow"))}_getPositionsFromBounds(n){const t=new Array(12);if(Number.isFinite(n[0]))t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[0],t[4]=n[3],t[5]=0,t[6]=n[2],t[7]=n[3],t[8]=0,t[9]=n[2],t[10]=n[1],t[11]=0;else for(let e=0;e<n.length;e++)t[3*e+0]=n[e][0],t[3*e+1]=n[e][1],t[3*e+2]=n[e][2]||0;return t}_getModel(n){return n?new o.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,shaderCache:this.context.shaderCache,geometry:new o.Geometry({drawMode:r.a.TRIANGLE_FAN,vertexCount:4,attributes:{texCoords:new Float32Array([0,0,0,1,1,1,1,0])}}),isInstanced:!1})):null}draw({uniforms:n}){const{bitmapTexture:t,model:e}=this.state,{desaturate:l,transparentColor:i,tintColor:r}=this.props;t&&e&&e.setUniforms(Object.assign({},n,{bitmapTexture:t,desaturate:l,transparentColor:i,tintColor:r})).draw()}loadTexture(){const{gl:n}=this.context,{image:t}=this.props;"string"==typeof t?Object(a.a)(t).then(t=>{this.setState({bitmapTexture:new o.Texture2D(n,{data:t,parameters:f})})}):t instanceof o.Texture2D?this.setState({bitmapTexture:t}):(t instanceof Image||t instanceof HTMLCanvasElement)&&this.setState({bitmapTexture:new o.Texture2D(n,{data:t,parameters:f})})}calculatePositions({value:n}){const{positions:t}=this.state;n.set(t)}calculatePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(4));const{value:e}=n;e.set(this.state.positions.map(h))}}d.layerName="BitmapLayer",d.defaultProps={image:null,bounds:{type:"array",value:[1,0,0,1],compare:!0},fp64:!1,desaturate:{type:"number",min:0,max:1,value:0},transparentColor:{type:"color",value:[0,0,0,0]},tintColor:{type:"color",value:[255,255,255]}};var p='#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  vec2 iconSize = instanceIconFrames.zw;\n  // convert size in meters to pixels, then scaled and clamp\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale), \n    sizeMinPixels, sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in "pixel" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n\n  if (billboard)  {\n    pixelOffset.y *= -1.0;\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, vec3(0.0)); \n    gl_Position.xy += project_pixel_size_to_clipspace(pixelOffset);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, offset_common); \n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vTextureCoords.y = 1.0 - vTextureCoords.y;\n\n  vColor = instanceColors / 255.;\n\n  vColorMode = instanceColorModes;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n',g="#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\n\nconst float MIN_ALPHA = 0.05;\n\nvoid main(void) {\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < MIN_ALPHA) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";const v=1024,m=4,_=()=>{},b={[r.a.TEXTURE_MIN_FILTER]:r.a.LINEAR_MIPMAP_LINEAR,[r.a.TEXTURE_MAG_FILTER]:r.a.LINEAR};function y(n,t,e,l){const{naturalWidth:i,naturalHeight:r}=t;return e===i&&l===r?t:(n.canvas.height=l,n.canvas.width=e,n.clearRect(0,0,n.canvas.width,n.canvas.height),n.drawImage(t,0,0,i,r,0,0,e,l),n.canvas)}function x(n){return n&&(n.id||n.url)}function w(n,t,e){for(let l=0;l<t.length;l++){const{icon:i,xOffset:r}=t[l];n[x(i)]=Object.assign({},i,{x:r,y:e})}}class E{constructor(n,{onUpdate:t=_}){this.gl=n,this.onUpdate=t,this._getIcon=null,this._texture=null,this._mapping={},this._autoPacking=!1,this._xOffset=0,this._yOffset=0,this._buffer=m,this._canvasWidth=v,this._canvasHeight=0,this._canvas=null}getTexture(){return this._texture}getIconMapping(n,t){const e=this._getIcon(n,t),l=this._autoPacking?x(e):e;return this._mapping[l]||{}}setProps({autoPacking:n,iconAtlas:t,iconMapping:e,data:l,getIcon:i}){void 0!==n&&(this._autoPacking=n),i&&(this._getIcon=i),e&&(this._mapping=e),t&&this._updateIconAtlas(t),this._autoPacking&&(l||i)&&"undefined"!=typeof document&&(this._canvas=this._canvas||document.createElement("canvas"),this._updateAutoPacking(l))}_updateIconAtlas(n){n instanceof o.Texture2D?(n.setParameters(b),this._texture=n,this.onUpdate()):"string"==typeof n&&Object(a.a)(n).then(n=>{this._texture=new o.Texture2D(this.gl,{data:n,parameters:b}),this.onUpdate()})}_updateAutoPacking(n){const t=Object.values(function(n,t,e){if(!n||!t)return null;e=e||{};const l={},{iterable:i,objectInfo:r}=Object(u.createIterable)(n);for(const n of i){r.index++;const i=t(n,r),u=x(i);if(!i)throw new Error("Icon is missing.");if(!i.url)throw new Error("Icon url is missing.");l[u]||e[u]&&i.url===e[u].url||(l[u]=i)}return l}(n,this._getIcon,this._mapping)||{});if(t.length>0){const{mapping:n,xOffset:e,yOffset:l,canvasHeight:i}=function({icons:n,buffer:t,mapping:e={},xOffset:l=0,yOffset:i=0,canvasWidth:r}){let u=0,o=[];for(let a=0;a<n.length;a++){const s=n[a];if(!e[x(s)]){const{height:n,width:a}=s;l+a+t>r&&(w(e,o,i),l=0,i=u+i+t,u=0,o=[]),o.push({icon:s,xOffset:l}),l=l+a+t,u=Math.max(u,n)}}return o.length>0&&w(e,o,i),{mapping:e,xOffset:l,yOffset:i,canvasWidth:r,canvasHeight:(a=u+i+t,Math.pow(2,Math.ceil(Math.log2(a))))};var a}({icons:t,buffer:this._buffer,canvasWidth:this._canvasWidth,mapping:this._mapping,xOffset:this._xOffset,yOffset:this._yOffset});this._mapping=n,this._xOffset=e,this._yOffset=l,this._canvasHeight=i,this._texture||(this._texture=new o.Texture2D(this.gl,{width:this._canvasWidth,height:this._canvasHeight,parameters:b})),this._texture.height!==this._canvasHeight&&function(n,t,e){const l=n.width,i=n.height,r=Object(o.readPixelsToBuffer)(n,{});n.resize({width:t,height:e}),n.setSubImageData({data:r,x:0,y:e-i,width:l,height:i,parameters:b}),n.generateMipmap(),r.delete()}(this._texture,this._canvasWidth,this._canvasHeight),this.onUpdate(),this._loadIcons(t)}}_loadIcons(n){const t=this._canvas.getContext("2d"),e=this._texture.height;for(const l of n)Object(a.a)(l.url).then(n=>{const i=x(l),{x:u,y:o,width:a,height:s}=this._mapping[i],c=y(t,n,a,s);this._texture.setSubImageData({data:c,x:u,y:e-o-s,width:a,height:s,parameters:Object.assign({},b,{[r.a.UNPACK_FLIP_Y_WEBGL]:!0})}),this._texture.generateMipmap(),this.onUpdate()})}}const{fp64LowPart:P}=o.fp64,O=[0,0,0,255],S={iconAtlas:null,iconMapping:{type:"object",value:{},async:!0},sizeScale:{type:"number",value:1,min:0},fp64:!1,billboard:!0,sizeUnits:"pixels",sizeMinPixels:{type:"number",min:0,value:0},sizeMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},getPosition:{type:"accessor",value:n=>n.position},getIcon:{type:"accessor",value:n=>n.icon},getColor:{type:"accessor",value:O},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0}};class A extends u.Layer{getShaders(){const n=this.use64bitProjection()?"project64":"project32";return{vs:p,fs:g,modules:[n,"picking"]}}initializeState(){this.state={iconManager:new E(this.context.gl,{onUpdate:()=>this._onUpdate()})},this.getAttributeManager().addInstanced({instancePositions:{size:3,transition:!0,accessor:"getPosition"},instancePositions64xyLow:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceOffsets:{size:2,accessor:"getIcon",update:this.calculateInstanceOffsets},instanceIconFrames:{size:4,accessor:"getIcon",update:this.calculateInstanceIconFrames},instanceColorModes:{size:1,type:r.a.UNSIGNED_BYTE,accessor:"getIcon",update:this.calculateInstanceColorMode},instanceColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getColor",defaultValue:O},instanceAngles:{size:1,transition:!0,accessor:"getAngle",defaultValue:0}})}updateState({oldProps:n,props:t,changeFlags:e}){super.updateState({props:t,oldProps:n,changeFlags:e});const l=this.getAttributeManager(),{iconManager:i}=this.state,{iconAtlas:r,iconMapping:u,data:o,getIcon:a}=t;let s=!1;if(r?(n.iconAtlas!==t.iconAtlas&&i.setProps({iconAtlas:r,autoPacking:!1}),n.iconMapping!==t.iconMapping&&(i.setProps({iconMapping:u}),s=!0)):i.setProps({autoPacking:!0}),(e.dataChanged||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getIcon))&&(i.setProps({data:o,getIcon:a}),s=!0),s&&(l.invalidate("instanceOffsets"),l.invalidate("instanceIconFrames"),l.invalidate("instanceColorModes")),t.fp64!==n.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),l.invalidateAll()}}draw({uniforms:n}){const{sizeScale:t,sizeMinPixels:e,sizeMaxPixels:l,sizeUnits:i,billboard:r}=this.props,{iconManager:u}=this.state,{viewport:o}=this.context,a=u.getTexture();a&&this.state.model.setUniforms(Object.assign({},n,{iconsTexture:a,iconsTextureDim:[a.width,a.height],sizeScale:t*("pixels"===i?o.distanceScales.metersPerPixel[2]:1),sizeMinPixels:e,sizeMaxPixels:l,billboard:r})).draw()}_getModel(n){return new o.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new o.Geometry({drawMode:r.a.TRIANGLE_FAN,attributes:{positions:new Float32Array([-1,-1,0,-1,1,0,1,1,0,1,-1,0])}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}_onUpdate(){this.setNeedsRedraw()}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:l}=this.props,{value:i}=n;let r=0;const{iterable:o,objectInfo:a}=Object(u.createIterable)(e);for(const n of o){a.index++;const t=l(n,a);i[r++]=P(t[0]),i[r++]=P(t[1])}}calculateInstanceOffsets(n){const{data:t}=this.props,{iconManager:e}=this.state,{value:l}=n;let i=0;const{iterable:r,objectInfo:o}=Object(u.createIterable)(t);for(const n of r){o.index++;const t=e.getIconMapping(n,o);l[i++]=t.width/2-t.anchorX||0,l[i++]=t.height/2-t.anchorY||0}}calculateInstanceColorMode(n){const{data:t}=this.props,{iconManager:e}=this.state,{value:l}=n;let i=0;const{iterable:r,objectInfo:o}=Object(u.createIterable)(t);for(const n of r){o.index++;const t=e.getIconMapping(n,o).mask;l[i++]=t?1:0}}calculateInstanceIconFrames(n){const{data:t}=this.props,{iconManager:e}=this.state,{value:l}=n;let i=0;const{iterable:r,objectInfo:o}=Object(u.createIterable)(t);for(const n of r){o.index++;const t=e.getIconMapping(n,o);l[i++]=t.x||0,l[i++]=t.y||0,l[i++]=t.width||0,l[i++]=t.height||0}}}A.layerName="IconLayer",A.defaultProps=S;var T=e(87),C="#define SHADER_NAME point-cloud-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceNormals;\nattribute vec4 instanceColors;\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusPixels;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n\n  // Find the center of the point and add the current vertex\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, vec3(0.), position_commonspace);\n  gl_Position.xy += project_pixel_size_to_clipspace(positions.xy * radiusPixels);\n\n  // Apply lighting\n  vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project_uCameraPosition, position_commonspace.xyz, project_normal(instanceNormals));\n\n  // Apply opacity to instance color, or return instance picking color\n  vColor = vec4(lightColor, instanceColors.a * opacity) / 255.0;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",L="#define SHADER_NAME point-cloud-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 unitPosition;\n\nvoid main(void) {\n\n  float distToCenter = length(unitPosition);\n\n  if (distToCenter > 1.0) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";const{fp64LowPart:M}=o.fp64,j=[0,0,0,255],R=[0,0,1],I=new o.PhongMaterial,k={sizeUnits:"pixels",pointSize:{type:"number",min:0,value:10},fp64:!1,getPosition:{type:"accessor",value:n=>n.position},getNormal:{type:"accessor",value:R},getColor:{type:"accessor",value:j},material:I,radiusPixels:{deprecatedFor:"pointSize"}};class F extends u.Layer{getShaders(n){const t=this.use64bitProjection()?"project64":"project32";return{vs:C,fs:L,modules:[t,"gouraud-lighting","picking"]}}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,transition:!0,accessor:"getPosition"},instancePositions64xyLow:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceNormals:{size:3,transition:!0,accessor:"getNormal",defaultValue:R},instanceColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getColor",defaultValue:j}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}}draw({uniforms:n}){const{viewport:t}=this.context,{pointSize:e,sizeUnits:l}=this.props,i="meters"===l?t.distanceScales.pixelsPerMeter[2]:1;this.state.model.setUniforms(Object.assign({},n,{radiusPixels:e*i})).draw()}_getModel(n){const t=[];for(let n=0;n<3;n++){const e=n/3*Math.PI*2;t.push(2*Math.cos(e),2*Math.sin(e),0)}return new o.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new o.Geometry({drawMode:r.a.TRIANGLES,attributes:{positions:new Float32Array(t)}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:l}=this.props,{value:i}=n;let r=0;const{iterable:o,objectInfo:a}=Object(u.createIterable)(e);for(const n of o){a.index++;const t=l(n,a);i[r++]=M(t[0]),i[r++]=M(t[1])}}}F.layerName="PointCloudLayer",F.defaultProps=k;var N=e(70),D=e(69),B=e(84),U=e(46),z=e(85),V=e(88),G='#define SHADER_NAME multi-icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\n\n// the following three attributes are for the multi-icon layer\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec2 iconsTextureDim;\nuniform float gamma;\nuniform float opacity;\nuniform bool billboard;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying float vGamma;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  vec2 iconSize = instanceIconFrames.zw;\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in "pixel" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  \n  if (billboard)  {\n    pixelOffset.y *= -1.0;\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, vec3(0.0)); \n    gl_Position.xy += project_pixel_size_to_clipspace(pixelOffset);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, offset_common); \n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vTextureCoords.y = 1.0 - vTextureCoords.y;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n  picking_setPickingColor(instancePickingColors);\n\n  vGamma = gamma / (sizeScale * iconSize.y);\n}\n',W="#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform sampler2D iconsTexture;\nuniform float buffer;\nuniform bool sdf;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying float vGamma;\n\nconst float MIN_ALPHA = 0.05;\n\nvoid main(void) {\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n  \n  float alpha = texColor.a;\n  // if enable sdf (signed distance fields)\n  if (sdf) {\n    float distance = texture2D(iconsTexture, vTextureCoords).a;\n    alpha = smoothstep(buffer - vGamma, buffer + vGamma, distance);\n  }\n\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = alpha * vColor.a;\n\n  if (a < MIN_ALPHA) {\n    discard;\n  }\n\n  gl_FragColor = vec4(vColor.rgb, a);\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";const H=.2,X=.75;class Y extends A{getShaders(){return Object.assign({},super.getShaders(),{vs:G,fs:W})}initializeState(){super.initializeState(),this.getAttributeManager().addInstanced({instancePixelOffset:{size:2,transition:!0,accessor:"getPixelOffset"}})}updateState(n){super.updateState(n);const{changeFlags:t}=n;t.updateTriggersChanged&&(t.updateTriggersChanged.getAnchorX||t.updateTriggersChanged.getAnchorY)&&this.getAttributeManager().invalidate("instanceOffsets")}draw({uniforms:n}){const{sdf:t}=this.props;super.draw({uniforms:Object.assign({},n,{buffer:X,gamma:H,sdf:Boolean(t)})})}calculateInstanceOffsets(n){const{data:t,iconMapping:e,getIcon:l,getAnchorX:i,getAnchorY:r,getLengthOfQueue:u,getShiftInQueue:o}=this.props,{value:a}=n;let s=0;for(const n of t){const t=e[l(n)]||{},c=u(n),h=o(n);a[s++]=(i(n)-1)*c/2+t.width/2+h||0,a[s++]=t.height/2*r(n)||0}}calculateInstancePickingColors(n){const{data:t,getPickingIndex:e}=this.props,{value:l}=n;let i=0;const r=[];for(const n of t){const t=e(n);this.encodePickingColor(t,r),l[i++]=r[0],l[i++]=r[1],l[i++]=r[2]}}}Y.layerName="MultiIconLayer",Y.defaultProps={getShiftInQueue:{type:"accessor",value:n=>n.shift||0},getLengthOfQueue:{type:"accessor",value:n=>n.len||1},getAnchorX:{type:"accessor",value:n=>n.anchorX||0},getAnchorY:{type:"accessor",value:n=>n.anchorY||0},getPixelOffset:{type:"accessor",value:[0,0]},getPickingIndex:{type:"accessor",value:n=>n.objectIndex}};var Z=e(95),q=e.n(Z);const $=function(){const n=[];for(let t=32;t<128;t++)n.push(String.fromCharCode(t));return n}(),K="Monaco, monospace",Q="normal",J=64,nn=2,tn=.25,en=3,ln=10242,rn=10243,un=33071,on=1024,an=.9,sn=1.2,cn=new class{constructor(n=5){this.limit=n,this.clear()}clear(){this._cache={},this._order=[]}get(n){const t=this._cache[n];return t&&(this._deleteOrder(n),this._appendOrder(n)),t}set(n,t){this._cache[n]?(this.delete(n),this._cache[n]=t,this._appendOrder(n)):(Object.keys(this._cache).length===this.limit&&this.delete(this._order[0]),this._cache[n]=t,this._appendOrder(n))}delete(n){this._cache[n]&&(this._deleteCache(n),this._deleteOrder(n))}_deleteCache(n){delete this._cache[n]}_deleteOrder(n){const t=this._order.findIndex(t=>t===n);t>=0&&this._order.splice(t,1)}_appendOrder(n){this._order.push(n)}}(3),hn=["fontFamily","fontWeight","characterSet","fontSize","sdf","buffer","cutoff","radius"];function fn(n,t){for(let e=0;e<n.length;e++)t.data[4*e+3]=n[e]}function dn(n,t,e,l){n.font=`${l} ${e}px ${t}`,n.fillStyle="#000",n.textBaseline="baseline",n.textAlign="left"}class pn{constructor(n){this.gl=n,this.props={fontFamily:K,fontWeight:Q,characterSet:$,fontSize:J,buffer:nn,sdf:!1,cutoff:tn,radius:en},this._key=null,this._texture=new o.Texture2D(this.gl)}get texture(){return this._texture}get mapping(){const n=cn.get(this._key);return n&&n.mapping}get scale(){return sn}setProps(n={}){hn.forEach(t=>{t in n&&(this.props[t]=n[t])});const t=this._key;this._key=this._getKey();const e=function(n,t){const e=cn.get(n);if(!e)return t;const l=[],i=e.mapping;let r=Object.keys(i);r=new Set(r);let u=t;return u instanceof Array&&(u=new Set(u)),u.forEach(n=>{r.has(n)||l.push(n)}),l}(this._key,this.props.characterSet),l=cn.get(this._key);if(l&&0===e.length)return void(this._key!==t&&this._updateTexture(l));const i=this._generateFontAtlas(this._key,e,l);this._updateTexture(i),cn.set(this._key,i)}_updateTexture({data:n,width:t,height:e}){this._texture.width===t&&this._texture.height===e||this._texture.resize({width:t,height:e}),this._texture.setImageData({data:n,width:t,height:e,parameters:{[ln]:un,[rn]:un,[r.a.UNPACK_FLIP_Y_WEBGL]:!0}}),this._texture.generateMipmap()}_generateFontAtlas(n,t,e){const{fontFamily:l,fontWeight:i,fontSize:r,buffer:u,sdf:o,radius:a,cutoff:s}=this.props;let c=e&&e.data;c||((c=document.createElement("canvas")).width=on);const h=c.getContext("2d");dn(h,l,r,i);const{mapping:f,canvasHeight:d,xOffset:p,yOffset:g}=function({characterSet:n,getFontWidth:t,fontHeight:e,buffer:l,maxCanvasWidth:i,mapping:r={},xOffset:u=0,yOffset:o=0}){let a=0,s=u;Array.from(n).forEach((n,u)=>{if(!r[n]){const c=t(n,u);s+c+2*l>i&&(s=0,a++),r[n]={x:s+l,y:o+a*(e+2*l)+l,width:c,height:e,mask:!0},s+=c+2*l}});const c=e+2*l;return{mapping:r,xOffset:s,yOffset:o+a*c,canvasHeight:(h=o+(a+1)*c,Math.pow(2,Math.ceil(Math.log2(h))))};var h}(Object.assign({getFontWidth:n=>h.measureText(n).width,fontHeight:r*sn,buffer:u,characterSet:t,maxCanvasWidth:on},e&&{mapping:e.mapping,xOffset:e.xOffset,yOffset:e.yOffset}));if(c.height!==d){const n=h.getImageData(0,0,c.width,c.height);c.height=d,h.putImageData(n,0,0)}if(dn(h,l,r,i),o){const n=new q.a(r,u,a,s,l,i),e=h.getImageData(0,0,n.size,n.size);for(const l of t)fn(n.draw(l),e),h.putImageData(e,f[l].x-u,f[l].y-u)}else for(const n of t)h.fillText(n,f[n].x,f[n].y+r*an);return{xOffset:p,yOffset:g,mapping:f,data:c,width:c.width,height:c.height}}_getKey(){const{gl:n,fontFamily:t,fontWeight:e,fontSize:l,buffer:i,sdf:r,radius:u,cutoff:o}=this.props;return r?`${n} ${t} ${e} ${l} ${i} ${u} ${o}`:`${n} ${t} ${e} ${l} ${i}`}}const gn={fontSize:J,buffer:nn,sdf:!1,radius:en,cutoff:tn},vn={start:1,middle:0,end:-1},mn={top:1,center:0,bottom:-1},_n=32,bn=["fontSize","buffer","sdf","radius","cutoff"],yn={fp64:!1,billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,characterSet:$,fontFamily:K,fontWeight:Q,fontSettings:{},getText:{type:"accessor",value:n=>n.text},getPosition:{type:"accessor",value:n=>n.position},getColor:{type:"accessor",value:[0,0,0,255]},getSize:{type:"accessor",value:32},getAngle:{type:"accessor",value:0},getTextAnchor:{type:"accessor",value:"middle"},getAlignmentBaseline:{type:"accessor",value:"center"},getPixelOffset:{type:"accessor",value:[0,0]}};class xn extends u.CompositeLayer{initializeState(){this.state={fontAtlasManager:new pn(this.context.gl)}}updateState({props:n,oldProps:t,changeFlags:e}){const l=this.fontChanged(t,n);l&&this.updateFontAtlas({oldProps:t,props:n}),(e.dataChanged||l||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getText))&&this.transformStringToLetters()}updateFontAtlas({oldProps:n,props:t}){const{characterSet:e,fontSettings:l,fontFamily:i,fontWeight:r}=t,u=this.state.fontAtlasManager;u.setProps(Object.assign({},gn,l,{characterSet:e,fontFamily:i,fontWeight:r}));const{scale:o,texture:a,mapping:s}=u;this.setState({scale:o,iconAtlas:a,iconMapping:s}),this.setNeedsRedraw(!0)}fontChanged(n,t){if(n.fontFamily!==t.fontFamily||n.characterSet!==t.characterSet||n.fontWeight!==t.fontWeight)return!0;if(n.fontSettings===t.fontSettings)return!1;const e=n.fontSettings||{},l=t.fontSettings||{};return bn.some(n=>e[n]!==l[n])}getPickingInfo({info:n}){return Object.assign(n,{object:n.index>=0?this.props.data[n.index]:null})}transformStringToLetters(){const{data:n,getText:t}=this.props,{iconMapping:e}=this.state,l=[],{iterable:i,objectInfo:r}=Object(u.createIterable)(n);for(const n of i){r.index++;const i=t(n,r);if(i){const t=Array.from(i),o=[0];let a=0;t.forEach((t,s)=>{const c={text:t,index:s,offsets:o,len:i.length,object:n,objectIndex:r.index},h=e[t];h?a+=h.width:(u.log.warn(`Missing character: ${t}`)(),a+=_n),o.push(a),l.push(c)})}}this.setState({data:l})}getLetterOffset(n){return n.offsets[n.index]}getTextLength(n){return n.offsets[n.offsets.length-1]}_getAccessor(n){return"function"==typeof n?t=>n(t.object):n}getAnchorXFromTextAnchor(n){return t=>{const e="function"==typeof n?n(t.object):n;if(!vn.hasOwnProperty(e))throw new Error(`Invalid text anchor parameter: ${e}`);return vn[e]}}getAnchorYFromAlignmentBaseline(n){return t=>{const e="function"==typeof n?n(t.object):n;if(!mn.hasOwnProperty(e))throw new Error(`Invalid alignment baseline parameter: ${e}`);return mn[e]}}renderLayers(){const{data:n,scale:t,iconAtlas:e,iconMapping:l}=this.state,{getPosition:i,getColor:r,getSize:u,getAngle:o,getTextAnchor:a,getAlignmentBaseline:s,getPixelOffset:c,fp64:h,billboard:f,sdf:d,sizeScale:p,sizeUnits:g,sizeMinPixels:v,sizeMaxPixels:m,transitions:_,updateTriggers:b}=this.props;return new(this.getSubLayerClass("characters",Y))({sdf:d,iconAtlas:e,iconMapping:l,getPosition:n=>i(n.object),getColor:this._getAccessor(r),getSize:this._getAccessor(u),getAngle:this._getAccessor(o),getAnchorX:this.getAnchorXFromTextAnchor(a),getAnchorY:this.getAnchorYFromAlignmentBaseline(s),getPixelOffset:this._getAccessor(c),fp64:h,billboard:f,sizeScale:p*t,sizeUnits:g,sizeMinPixels:v*t,sizeMaxPixels:m*t,transitions:_&&{getPosition:_.getPosition,getAngle:_.getAngle,getColor:_.getColor,getSize:_.getSize,getPixelOffset:b.getPixelOffset}},this.getSubLayerProps({id:"characters",updateTriggers:{getPosition:b.getPosition,getAngle:b.getAngle,getColor:b.getColor,getSize:b.getSize,getPixelOffset:b.getPixelOffset,getAnchorX:b.getTextAnchor,getAnchorY:b.getAlignmentBaseline}}),{data:n,getIcon:n=>n.text,getShiftInQueue:n=>this.getLetterOffset(n),getLengthOfQueue:n=>this.getTextLength(n)})}}xn.layerName="TextLayer",xn.defaultProps=yn;var wn=e(51);e.d(t,"ArcLayer",function(){return l.a}),e.d(t,"BitmapLayer",function(){return d}),e.d(t,"IconLayer",function(){return A}),e.d(t,"LineLayer",function(){return T.a}),e.d(t,"PointCloudLayer",function(){return F}),e.d(t,"ScatterplotLayer",function(){return N.a}),e.d(t,"ColumnLayer",function(){return D.a}),e.d(t,"GridCellLayer",function(){return B.a}),e.d(t,"PathLayer",function(){return U.a}),e.d(t,"PolygonLayer",function(){return z.a}),e.d(t,"GeoJsonLayer",function(){return V.a}),e.d(t,"TextLayer",function(){return xn}),e.d(t,"SolidPolygonLayer",function(){return wn.a}),e.d(t,"_MultiIconLayer",function(){return Y})},function(n,t,e){"use strict";e.d(t,"a",function(){return r});var l=e(40),i=e(24);function r(){var n;if(l.b&&i.b.performance)n=i.b.performance.now();else if(i.a.hrtime){var t=i.a.hrtime();n=1e3*t[0]+t[1]/1e6}else n=Date.now();return n}},function(n,t,e){"use strict";function l(n,t){if(!n)throw new Error(t||"viewport-mercator-project: assertion failed.")}e.d(t,"a",function(){return l})},function(t,e){t.exports=n},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return d}),e.d(t,"c",function(){return p}),e.d(t,"b",function(){return g});var l=e(2),i=e(3),r=e(78),u=e(29),o=e(31),a=e(30),s=function(n,t){var e=Array.isArray(n)||ArrayBuffer.isView(n),l=Array.isArray(t)||ArrayBuffer.isView(t);if(e&&l&&n.length===t.length){for(var i=0;i<n.length;++i)if(n[i]!==t[i])return!1;return!0}return n===t};function c(n,t){var e=n[t].bind(n);n[t]=function(){var t=arguments.length<=0?void 0:arguments[0];return t in n.state.cache||(n.state.cache[t]=e.apply(void 0,arguments)),n.state.enable?n.state.cache[t]:e.apply(void 0,arguments)},Object.defineProperty(n[t],"name",{value:"".concat(t,"-from-cache"),configurable:!1})}function h(n,t,e){var l=n[t].bind(n);n[t]=function(){for(var i=arguments.length,r=new Array(i),u=0;u<i;u++)r[u]=arguments[u];var o,a=e.apply(void 0,[n.state._updateCache].concat(r)),s=a.valueChanged,c=a.oldValue;s&&((o=n.state).log.apply(o,["gl.".concat(t)].concat(r)),l.apply(void 0,r));return c},Object.defineProperty(n[t],"name",{value:"".concat(t,"-to-cache"),configurable:!1})}var f=function(){function n(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=e.copyState,r=void 0!==i&&i,a=e.log,s=void 0===a?function(){}:a;Object(l.a)(this,n),this.gl=t,this.stateStack=[],this.enable=!0,this.cache=r?Object(o.c)(t):Object.assign({},u.b),this.log=s,this._updateCache=this._updateCache.bind(this),Object.seal(this)}return Object(i.a)(n,[{key:"push",value:function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.stateStack.push({})}},{key:"pop",value:function(){Object(a.a)(this.stateStack.length>0);var n=this.stateStack[this.stateStack.length-1];Object(o.f)(this.gl,n,this.cache),this.stateStack.pop()}},{key:"_updateCache",value:function(n){var t,e=!1,l=this.stateStack.length>0&&this.stateStack[this.stateStack.length-1];for(var i in n)Object(a.a)(void 0!==i),s(n[i],this.cache[i])||(e=!0,t=this.cache[i],!l||i in l||(l[i]=this.cache[i]),this.cache[i]=n[i]);return{valueChanged:e,oldValue:t}}}]),n}();function d(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=e.enable,i=void 0===l||l,u=e.copyState;if(Object(a.a)(void 0!==u),!t.state){var o=void 0!==n?n:window;for(var s in o.polyfillContext&&o.polyfillContext(t),t.state=new f(t,{copyState:u,enable:i}),r.a){h(t,s,r.a[s])}c(t,"getParameter"),c(t,"isEnabled")}return t.state.enable=i,t}function p(n){n.state||d(n,{copyState:!1}),n.state.push()}function g(n){Object(a.a)(n.state),n.state.pop()}}).call(this,e(33))},function(n,t,e){"use strict";function l(n,t,e,l,i,r,u){try{var o=n[r](u),a=o.value}catch(n){return void e(n)}o.done?t(a):Promise.resolve(a).then(l,i)}function i(n){return function(){var t=this,e=arguments;return new Promise(function(i,r){var u=n.apply(t,e);function o(n){l(u,i,r,o,a,"next",n)}function a(n){l(u,i,r,o,a,"throw",n)}o(void 0)})}}e.d(t,"a",function(){return i})},function(n,t,e){"use strict";e.d(t,"a",function(){return i}),e.d(t,"b",function(){return r});var l=e(71),i="7.0.3",r=Object(l.a)()},function(n,t,e){"use strict";function l(n,t){if(!n)throw new Error(t||"webgl2-polyfill: assertion failed.")}e.d(t,"a",function(){return l})},function(n,t){var e,l,i=n.exports={};function r(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function o(n){if(e===setTimeout)return setTimeout(n,0);if((e===r||!e)&&setTimeout)return e=setTimeout,setTimeout(n,0);try{return e(n,0)}catch(t){try{return e.call(null,n,0)}catch(t){return e.call(this,n,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:r}catch(n){e=r}try{l="function"==typeof clearTimeout?clearTimeout:u}catch(n){l=u}}();var a,s=[],c=!1,h=-1;function f(){c&&a&&(c=!1,a.length?s=a.concat(s):h=-1,s.length&&d())}function d(){if(!c){var n=o(f);c=!0;for(var t=s.length;t;){for(a=s,s=[];++h<t;)a&&a[h].run();h=-1,t=s.length}a=null,c=!1,function(n){if(l===clearTimeout)return clearTimeout(n);if((l===u||!l)&&clearTimeout)return l=clearTimeout,clearTimeout(n);try{l(n)}catch(t){try{return l.call(null,n)}catch(t){return l.call(this,n)}}}(n)}}function p(n,t){this.fun=n,this.array=t}function g(){}i.nextTick=function(n){var t=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)t[e-1]=arguments[e];s.push(new p(n,t)),1!==s.length||c||o(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(n){return[]},i.binding=function(n){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(n){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(n,t,e){"use strict";(function(n){var l=e(17),i=e(89),r=!("object"===(void 0===n?"undefined":Object(l.a)(n))&&"[object process]"===String(n)&&!n.browser)||i.a;t.a=r}).call(this,e(42))},function(n,t){},,function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1);const{Tesselator:o}=l.experimental,{fp64LowPart:a}=u.fp64;class s extends o{constructor({data:n,getGeometry:t,positionFormat:e,fp64:l}){super({data:n,getGeometry:t,fp64:l,positionFormat:e,attributes:{startPositions:{size:3},endPositions:{size:3},leftDeltas:{size:3},rightDeltas:{size:3},startEndPositions64XyLow:{size:4,fp64Only:!0}}})}get(n,t,e){if(this.attributes[n])return this.attributes[n];switch(n){case"strokeWidths":return this._updateAttribute({target:t,size:1,getValue:(n,t)=>(t.target[0]=e(n,t),t.target)});case"dashArrays":return this._updateAttribute({target:t,size:2,getValue:e});case"colors":return this._updateAttribute({target:t,size:4,getValue:(n,t)=>{const l=e(n,t);if(4===l.length)return l;const i=t.target;return i[0]=l[0],i[1]=l[1],i[2]=l[2],i[3]=255,i}});case"pickingColors":return this._updateAttribute({target:t,size:3,getValue:(n,{index:t,target:l})=>e(t,l)});default:return null}}getGeometrySize(n){return Math.max(0,this.getPathLength(n)-1)}updateGeometryAttributes(n,t){const{attributes:{startPositions:e,endPositions:l,leftDeltas:i,rightDeltas:r,startEndPositions64XyLow:u},fp64:o}=this,s=t.geometrySize+1;if(s<2)return;const c=this.isClosed(n);let h,f=this.getPointOnPath(n,0),d=this.getPointOnPath(n,1),p=c?this.getPointOnPath(n,s-2):f;for(let g=t.vertexStart,v=1;v<s;g++,v++)h=v+1<s?this.getPointOnPath(n,v+1):c?this.getPointOnPath(n,1):d,e[3*g]=f[0],e[3*g+1]=f[1],e[3*g+2]=f[2]||0,l[3*g]=d[0],l[3*g+1]=d[1],l[3*g+2]=d[2]||0,i[3*g]=f[0]-p[0],i[3*g+1]=f[1]-p[1],i[3*g+2]=f[2]-p[2]||0,r[3*g]=h[0]-d[0],r[3*g+1]=h[1]-d[1],r[3*g+2]=h[2]-d[2]||0,o&&(u[4*g]=a(f[0]),u[4*g+1]=a(f[1]),u[4*g+2]=a(d[0]),u[4*g+3]=a(d[1])),p=f,f=d,d=h}getPathLength(n){return Number.isFinite(n[0])?n.length/this.positionSize:n.length}getPointOnPath(n,t){if(Number.isFinite(n[0])){const{positionSize:e}=this;return[n[t*e],n[t*e+1],3===e?n[t*e+2]:0]}return n[t]}isClosed(n){const t=this.getPathLength(n),e=this.getPointOnPath(n,0),l=this.getPointOnPath(n,t-1);return e[0]===l[0]&&e[1]===l[1]&&e[2]===l[2]}}var c="#define SHADER_NAME path-layer-vertex-shader-64\n\nattribute vec3 positions;\n\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec4 instanceStartEndPositions64xyLow;\nattribute vec3 instanceLeftDeltas;\nattribute vec3 instanceRightDeltas;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec2 instanceDashArrays;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 lineJoin(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  float relativePosition, bool isEnd, bool isJoint,\n  float width\n) {\n  vec2 deltaA = currPoint.xy - prevPoint.xy;\n  vec2 deltaB = nextPoint.xy - currPoint.xy;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  // when two points are closer than PIXEL_EPSILON in pixels,\n  // assume they are the same point to avoid precision issue\n  lenA = lenA / width > EPSILON ? lenA : 0.0;\n  lenB = lenB / width > EPSILON ? lenB : 0.0;\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = vec2(dirA + dirB);\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // width offset from current position\n  vec2 perp = isEnd ? perpA : perpB;\n  float L = isEnd ? lenA : lenB;\n\n  // cap super sharp angles\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\n\n  float offsetScale = 1.0 / max(sinHalfA, EPSILON);\n\n  float cornerPosition = isJoint ?\n    0.0 :\n    flipIfTrue(turnsRight == (relativePosition > 0.0));\n\n  // do not bevel if line segment is too short\n  cornerPosition *=\n    float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) / width * cosHalfA);\n\n  // trim if inside corner extends further than the line segment\n  if (cornerPosition < 0.0) {\n    offsetScale = min(offsetScale, L / width / max(cosHalfA, EPSILON));\n  }\n\n  vMiterLength = cornerPosition >= 0.0 ?\n    mix(offsetScale, 0.0, cornerPosition) :\n    offsetScale * cornerPosition;\n  vMiterLength -= sinHalfA * jointType;\n\n  float offsetDirection = mix(\n    positions.y,\n    mix(\n      flipIfTrue(turnsRight),\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\n      cornerPosition\n    ),\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\n\n  // special treatment for start cap and end cap\n  // TODO - This has an issue. len is always positive because it is length.\n  // Step returns zero if -lenA<0, so practically this is a comparison of\n  // lenA with zero, with lots of problems because of the -lenA. Can we use EPSILON?\n  bool isStartCap = step(0.0, -lenA) > 0.5;\n  bool isEndCap = step(0.0, -lenB) > 0.5;\n  bool isCap = isStartCap || isEndCap;\n\n  // 0: center, 1: side\n  cornerPosition = isCap ? (1.0 - positions.z) : 0.;\n\n  // start of path: use next - curr\n  if (isStartCap) {\n    offsetVec = mix(dirB, perpB, cornerPosition);\n  }\n\n  // end of path: use curr - prev\n  if (isEndCap) {\n    offsetVec = mix(dirA, perpA, cornerPosition);\n  }\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetScale = mix(4.0 * jointType, 1.0, cornerPosition);\n    vMiterLength = 1.0 - cornerPosition;\n    offsetDirection = mix(flipIfTrue(isStartCap), positions.y, cornerPosition);\n  }\n\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\n\n  // Generate variables for dash calculation\n  vDashArray = instanceDashArrays;\n  vPathLength = L / width;\n  // vec2 offsetFromStartOfPath = isEnd ? vCornerOffset + deltaA / width : vCornerOffset;\n  vec2 offsetFromStartOfPath = vCornerOffset;\n  if (isEnd) {\n    offsetFromStartOfPath += deltaA / width;\n  }\n  vec2 dir = isEnd ? dirA : dirB;\n  vPathPosition = vec2(\n    positions.y + positions.z * offsetDirection,\n    dot(offsetFromStartOfPath, dir)\n  );\n\n  return currPoint + vec3(vCornerOffset * width, 0.0);\n}\n\n// calculate line join positions\n// extract params from attributes and uniforms\nvec3 lineJoin(vec3 prevPoint, vec3 currPoint, vec3 nextPoint) {\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n\n  float relativePosition = positions.y;\n  bool isEnd = positions.x > EPSILON;\n  bool isJoint = positions.z > EPSILON;\n\n  float widthPixels = clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0;\n\n  return lineJoin(\n    prevPoint, currPoint, nextPoint,\n    relativePosition, isEnd, isJoint,\n    project_pixel_size(widthPixels)\n  );\n}\n\nvoid main() {\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = instanceStartPositions;\n  vec2 prevPosition64xyLow = instanceStartEndPositions64xyLow.xy;\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    // In auto offset mode, add delta to low part of the positions for better precision\n    prevPosition64xyLow += mix(-instanceLeftDeltas, vec3(0.0), isEnd).xy;\n  } else {\n    prevPosition += mix(-instanceLeftDeltas, vec3(0.0), isEnd);\n  }\n  prevPosition = project_position(prevPosition, prevPosition64xyLow);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec2 currPosition64xyLow = mix(instanceStartEndPositions64xyLow.xy, instanceStartEndPositions64xyLow.zw, isEnd);\n  currPosition = project_position(currPosition, currPosition64xyLow);\n\n  vec3 nextPosition = instanceEndPositions;\n  vec2 nextPosition64xyLow = instanceStartEndPositions64xyLow.zw;\n  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_AUTO_OFFSET) {\n    // In auto offset mode, add delta to low part of the positions for better precision\n    nextPosition64xyLow += mix(vec3(0.0), instanceRightDeltas, isEnd).xy;\n  } else {\n    nextPosition += mix(vec3(0.0), instanceRightDeltas, isEnd);\n  }\n  nextPosition = project_position(nextPosition, nextPosition64xyLow);\n\n  vec3 pos = lineJoin(prevPosition, currPosition, nextPosition);\n\n  gl_Position = project_common_position_to_clipspace(vec4(pos, 1.0));\n}\n",h="\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec4 instanceStartEndPositions64xyLow;\nattribute vec3 instanceLeftDeltas;\nattribute vec3 instanceRightDeltas;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec2 instanceDashArrays;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float miterLimit;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\nconst float EPSILON = 0.001;\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\nvec3 lineJoin(vec2 prevPoint64[2], vec2 currPoint64[2], vec2 nextPoint64[2]) {\n\n  float widthPixels = clamp(project_size_to_pixel(instanceStrokeWidths * widthScale),\n    widthMinPixels, widthMaxPixels) / 2.0;\n  float width = project_pixel_size(widthPixels);\n\n  vec2 deltaA64[2];\n  vec2 deltaB64[2];\n\n  vec2_sub_fp64(currPoint64, prevPoint64, deltaA64);\n  vec2_sub_fp64(nextPoint64, currPoint64, deltaB64);\n\n  vec2 lengthA64 = vec2_length_fp64(deltaA64);\n  vec2 lengthB64 = vec2_length_fp64(deltaB64);\n\n  vec2 deltaA = vec2(deltaA64[0].x, deltaA64[1].x);\n  vec2 deltaB = vec2(deltaB64[0].x, deltaB64[1].x);\n\n  float lenA = lengthA64.x;\n  float lenB = lengthB64.x;\n\n  vec2 offsetVec;\n  float offsetScale;\n  float offsetDirection;\n\n  // when two points are closer than PIXEL_EPSILON in pixels,\n  // assume they are the same point to avoid precision issue\n  lenA = lenA / width > EPSILON ? lenA : 0.0;\n  lenB = lenB / width > EPSILON ? lenB : 0.0;\n  vec2 dirA = lenA > 0. ? deltaA / lenA : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? deltaB / lenB : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = vec2(dirA + dirB);\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // width offset from current position\n  vec2 perp = mix(perpB, perpA, positions.x);\n  float L = mix(lenB, lenA, positions.x);\n\n  // cap super sharp angles\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n  bool turnsRight = dirA.x * dirB.y > dirA.y * dirB.x;\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = mix(\n    flipIfTrue(turnsRight == (positions.y > 0.0)),\n    0.0,\n    positions.z\n  );\n\n  offsetScale = 1.0 / max(sinHalfA, EPSILON);\n\n  // do not bevel if line segment is too short\n  cornerPosition *= float(cornerPosition <= 0.0 || sinHalfA < min(lenA, lenB) / width * cosHalfA);\n  // trim if inside corner extends further than the line segment\n  offsetScale = mix(\n    offsetScale,\n    min(offsetScale, L / width / max(cosHalfA, EPSILON)),\n    float(cornerPosition < 0.0)\n  );\n\n  vMiterLength = mix(\n    offsetScale * cornerPosition,\n    mix(offsetScale, 0.0, cornerPosition),\n    step(0.0, cornerPosition)\n  ) - sinHalfA * jointType;\n  offsetDirection = mix(\n    positions.y,\n    mix(\n      flipIfTrue(turnsRight),\n      positions.y * flipIfTrue(turnsRight == (positions.x == 1.)),\n      cornerPosition\n    ),\n    step(0.0, cornerPosition)\n  );\n  offsetVec = mix(miterVec, -tangent, step(0.5, cornerPosition));\n  offsetScale = mix(offsetScale, 1.0 / max(cosHalfA, 0.001), step(0.5, cornerPosition));\n\n  // special treatment for start cap and end cap\n  // using a small number as the limit for determining if the lenA or lenB is 0\n  float isStartCap = step(lenA, 1.0e-5);\n  float isEndCap = step(lenB, 1.0e-5);\n  float isCap = max(isStartCap, isEndCap);\n\n  // 0: center, 1: side\n  cornerPosition = isCap * (1.0 - positions.z);\n\n  // start of path: use next - curr\n  offsetVec = mix(offsetVec, mix(dirB, perpB, cornerPosition), isStartCap);\n  // end of path: use curr - prev\n  offsetVec = mix(offsetVec, mix(dirA, perpA, cornerPosition), isEndCap);\n\n  // extend out a triangle to envelope the round cap\n  offsetScale = mix(\n    offsetScale,\n    mix(4.0 * jointType, 1.0, cornerPosition),\n    isCap\n  );\n  vMiterLength = mix(vMiterLength, 1.0 - cornerPosition, isCap);\n\n  offsetDirection = mix(\n    offsetDirection,\n    mix(flipIfTrue(isStartCap > 0.), positions.y, cornerPosition),\n    isCap\n  );\n\n  vCornerOffset = offsetVec * offsetDirection * offsetScale;\n\n  // Generate variables for dash calculation\n  vDashArray = instanceDashArrays;\n  vPathLength = L / width;\n  float isEnd = positions.x;\n  vec2 offsetFromStartOfPath = mix(vCornerOffset, vCornerOffset + deltaA / width, isEnd);\n  vec2 dir = mix(dirB, dirA, isEnd);\n  vPathPosition = vec2(\n    positions.y + positions.z * offsetDirection,\n    dot(offsetFromStartOfPath, dir)\n  );\n\n  return vec3(vCornerOffset * width, 0.0);\n}\n\nvoid main() {\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  float isEnd = positions.x;\n\n  // Calculate current position 64bit\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec2 currPosition64xyLow = mix(instanceStartEndPositions64xyLow.xy, instanceStartEndPositions64xyLow.zw, isEnd);\n  vec2 projected_curr_position[2];\n  project_position_fp64(currPosition.xy, currPosition64xyLow, projected_curr_position);\n  float projected_curr_position_z = project_size(currPosition.z);\n\n  // Calculate previous position\n\n  vec3 prevPosition = mix(-instanceLeftDeltas, vec3(0.0), isEnd) + instanceStartPositions;\n\n  // Calculate prev position 64bit\n\n  vec2 projected_prev_position[2];\n  project_position_fp64(prevPosition.xy, instanceStartEndPositions64xyLow.xy, projected_prev_position);\n\n  // Calculate next positions\n  vec3 nextPosition = mix(vec3(0.0), instanceRightDeltas, isEnd) + instanceEndPositions;\n\n  // Calculate next position 64bit\n\n  vec2 projected_next_position[2];\n  project_position_fp64(nextPosition.xy, instanceStartEndPositions64xyLow.zw, projected_next_position);\n\n  vec3 pos = lineJoin(projected_prev_position, projected_curr_position, projected_next_position);\n  vec2 vertex_pos_modelspace[4];\n\n  vertex_pos_modelspace[0] = sum_fp64(vec2(pos.x, 0.0), projected_curr_position[0]);\n  vertex_pos_modelspace[1] = sum_fp64(vec2(pos.y, 0.0), projected_curr_position[1]);\n  vertex_pos_modelspace[2] = vec2(pos.z + projected_curr_position_z, 0.0);\n  vertex_pos_modelspace[3] = vec2(1.0, 0.0);\n\n  gl_Position = project_common_position_to_clipspace_fp64(vertex_pos_modelspace);\n}\n",f="#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float jointType;\nuniform float miterLimit;\nuniform float alignMode;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vDashArray;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\n\n// mod doesn't work correctly for negative numbers\nfloat mod2(float a, float b) {\n  return a - floor(a / b) * b;\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n\n// if given position is in the gap part of the dashed line\n// dashArray.x: solid stroke length, relative to width\n// dashArray.y: gap length, relative to width\n// alignMode:\n// 0 - no adjustment\n// o----     ----     ----     ---- o----     -o----     ----     o\n// 1 - stretch to fit, draw half dash at each end for nicer joints\n// o--    ----    ----    ----    --o--      --o--     ----     --o\nbool dash_isFragInGap() {\n  float solidLength = vDashArray.x;\n  float gapLength = vDashArray.y;\n\n  float unitLength = solidLength + gapLength;\n\n  if (unitLength == 0.0) {\n    return false;\n  }\n\n  unitLength = mix(\n    unitLength,\n    vPathLength / round(vPathLength / unitLength),\n    alignMode\n  );\n\n  float offset = alignMode * solidLength / 2.0;\n\n  return gapLength > 0.0 &&\n    vPathPosition.y >= 0.0 &&\n    vPathPosition.y <= vPathLength &&\n    mod2(vPathPosition.y + offset, unitLength) > solidLength;\n}\n\nvoid main(void) {\n  // if joint is rounded, test distance from the corner\n  if (jointType > 0.0 && vMiterLength > 0.0 && length(vCornerOffset) > 1.0) {\n    // Enable to debug joints\n    // gl_FragColor = vec4(0., 1., 0., 1.);\n    // return;\n    discard;\n  }\n  if (jointType == 0.0 && vMiterLength > miterLimit) {\n    // Enable to debug joints\n    // gl_FragColor = vec4(0., 0., 1., 1.);\n    // return;\n    discard;\n  }\n  if (vColor.a == 0.0 || dash_isFragInGap()) {\n    // Enable to debug joints\n    // gl_FragColor = vec4(0., 1., 1., 1.);\n    // return;\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return v});const d=[0,0,0,255],p={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},rounded:!1,miterLimit:{type:"number",min:0,value:4},fp64:!1,dashJustified:!1,getPath:{type:"accessor",value:n=>n.path},getColor:{type:"accessor",value:d},getWidth:{type:"accessor",value:1},getDashArray:{type:"accessor",value:[0,0]}},g={enter:(n,t)=>t.length?t.subarray(t.length-n.length):n};class v extends l.Layer{getShaders(){return this.use64bitProjection()?{vs:h,fs:f,modules:["project64","picking"]}:{vs:c,fs:f,modules:["picking"]}}initializeState(){this.getAttributeManager().addInstanced({instanceStartPositions:{size:3,transition:g,accessor:"getPath",update:this.calculateStartPositions,noAlloc:!0},instanceEndPositions:{size:3,transition:g,accessor:"getPath",update:this.calculateEndPositions,noAlloc:!0},instanceStartEndPositions64xyLow:{size:4,update:this.calculateInstanceStartEndPositions64xyLow,noAlloc:!0},instanceLeftDeltas:{size:3,update:this.calculateLeftDeltas,noAlloc:!0},instanceRightDeltas:{size:3,update:this.calculateRightDeltas,noAlloc:!0},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:g,update:this.calculateStrokeWidths,defaultValue:1},instanceDashArrays:{size:2,accessor:"getDashArray",update:this.calculateDashArrays},instanceColors:{size:4,type:r.a.UNSIGNED_BYTE,accessor:"getColor",transition:g,update:this.calculateColors,defaultValue:d},instancePickingColors:{size:3,type:r.a.UNSIGNED_BYTE,update:this.calculatePickingColors}}),this.setState({pathTesselator:new s({})})}updateState({oldProps:n,props:t,changeFlags:e}){super.updateState({props:t,oldProps:n,changeFlags:e});const l=this.getAttributeManager();if((e.dataChanged||t.fp64!==n.fp64||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPath))&&(this.state.pathTesselator.updateGeometry({data:t.data,getGeometry:t.getPath,positionFormat:t.positionFormat,fp64:this.use64bitPositions()}),this.setState({numInstances:this.state.pathTesselator.instanceCount}),l.invalidateAll()),t.fp64!==n.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),l.invalidateAll()}}draw({uniforms:n}){const{viewport:t}=this.context,{rounded:e,miterLimit:l,widthUnits:i,widthScale:r,widthMinPixels:u,widthMaxPixels:o,dashJustified:a}=this.props,s="pixels"===i?t.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},n,{jointType:Number(e),alignMode:Number(a),widthScale:r*s,miterLimit:l,widthMinPixels:u,widthMaxPixels:o})).draw()}_getModel(n){return new u.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new u.Geometry({drawMode:r.a.TRIANGLES,attributes:{indices:new Uint16Array([0,2,1,1,2,4,1,4,3,3,4,5]),positions:new Float32Array([0,0,1,0,-1,0,0,1,0,1,-1,0,1,1,0,1,0,1])}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}calculateStartPositions(n){const{pathTesselator:t}=this.state;n.bufferLayout=t.bufferLayout,n.value=t.get("startPositions")}calculateEndPositions(n){const{pathTesselator:t}=this.state;n.bufferLayout=t.bufferLayout,n.value=t.get("endPositions")}calculateInstanceStartEndPositions64xyLow(n){const t=this.use64bitPositions();n.constant=!t,n.value=t?this.state.pathTesselator.get("startEndPositions64XyLow"):new Float32Array(4)}calculateLeftDeltas(n){const{pathTesselator:t}=this.state;n.value=t.get("leftDeltas")}calculateRightDeltas(n){const{pathTesselator:t}=this.state;n.value=t.get("rightDeltas")}calculateStrokeWidths(n){const{getWidth:t}=this.props,{pathTesselator:e}=this.state;n.bufferLayout=e.bufferLayout,n.value=e.get("strokeWidths",n.value,t)}calculateDashArrays(n){const{getDashArray:t}=this.props,{pathTesselator:e}=this.state;n.value=e.get("dashArrays",n.value,t)}calculateColors(n){const{getColor:t}=this.props,{pathTesselator:e}=this.state;n.bufferLayout=e.bufferLayout,n.value=e.get("colors",n.value,t)}calculatePickingColors(n){const{pathTesselator:t}=this.state;n.value=t.get("pickingColors",n.value,this.encodePickingColor)}clearPickingColor(n){const t=this.decodePickingColor(n),{bufferLayout:e}=this.state.pathTesselator,l=e[t];let i=0;for(let n=0;n<t;n++)i+=e[n];const{instancePickingColors:r}=this.getAttributeManager().attributes,{value:u}=r,o=i+l;u.fill(0,3*i,3*o),r.update({value:u})}}v.layerName="PathLayer",v.defaultProps=p},function(n,t,e){"use strict";function l(n){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function i(n){return(i="function"==typeof Symbol&&"symbol"===l(Symbol.iterator)?function(n){return l(n)}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":l(n)})(n)}e.d(t,"a",function(){return i})},function(n,t,e){"use strict";(function(n,l){e.d(t,"a",function(){return i});"object"!=typeof n||"[object process]"!==String(n)||n.browser,"undefined"!=typeof window&&window;const i=void 0!==l?l:window;"undefined"!=typeof document&&document}).call(this,e(42),e(33))},function(n,t,e){"use strict";(function(n){e.d(t,"b",function(){return l}),e.d(t,"c",function(){return i}),e.d(t,"a",function(){return r});var l="undefined"!=typeof navigator?navigator.userAgent.toLowerCase():"",i="undefined"!=typeof window?window:n,r=(void 0!==n||window,"undefined"!=typeof document&&document,!1);try{var u={get passive(){r=!0}};i.addEventListener("test",u,u),i.removeEventListener("test",u,u)}catch(n){}}).call(this,e(33))},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return l});"undefined"!=typeof window&&window,void 0!==n||window;const l="undefined"!=typeof document?document:{}}).call(this,e(33))},function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1),o=e(54);const{Tesselator:a}=l.experimental,{fp64LowPart:s}=u.fp64;class c extends a{constructor({data:n,getGeometry:t,fp64:e,positionFormat:l,IndexType:i=Uint32Array}){super({data:n,getGeometry:t,fp64:e,positionFormat:l,attributes:{positions:{size:3},positions64xyLow:{size:2,fp64Only:!0},vertexValid:{type:Uint8ClampedArray,size:1},indices:{type:i,size:1}}})}get(n,t,e){if("indices"===n)return this.attributes.indices.subarray(0,this.vertexCount);if(this.attributes[n])return this.attributes[n];switch(n){case"elevations":return this._updateAttribute({target:t,size:1,getValue:(n,t)=>(t.target[0]=e(n,t),t.target)});case"colors":return this._updateAttribute({target:t,size:4,getValue:(n,t)=>{const l=e(n,t);if(4===l.length)return l;const i=t.target;return i[0]=l[0],i[1]=l[1],i[2]=l[2],i[3]=255,i}});case"pickingColors":return this._updateAttribute({target:t,size:3,getValue:(n,{index:t,target:l})=>e(t,l)});default:return null}}getGeometrySize(n){return o.b(n,this.positionSize)}updateGeometryAttributes(n,t){n=o.c(n,this.positionSize,t.geometrySize),this._updateIndices(n,t),this._updatePositions(n,t)}_updateIndices(n,{geometryIndex:t,vertexStart:e,indexStart:l}){const{attributes:i,indexLayout:r,typedArrayManager:u}=this;let a=i.indices,s=a.length,c=l;const h=o.a(n,this.positionSize);s<c+h.length&&(s=2*(c+h.length),a=u.allocate(a,s,{type:a.constructor,size:1,copy:!0}));for(let n=0;n<h.length;n++)a[c++]=h[n]+e;r[t]=h.length,i.indices=a}_updatePositions(n,{vertexStart:t,geometrySize:e}){const{attributes:{positions:l,positions64xyLow:i,vertexValid:r},fp64:u,positionSize:o}=this;let a=t;const{positions:c,holeIndices:h}=n;for(let n=0;n<e;n++){const t=c[n*o],e=c[n*o+1],h=o>2?c[n*o+2]:0;l[3*a]=t,l[3*a+1]=e,l[3*a+2]=h,u&&(i[2*a]=s(t),i[2*a+1]=s(e)),r[a]=1,a++}if(h)for(let n=0;n<h.length;n++)r[t+h[n]/o-1]=0;r[t+e-1]=0}}var h="\nattribute vec2 vertexPositions;\nattribute float vertexValid;\n\nuniform bool extruded;\nuniform bool isWireframe;\nuniform float elevationScale;\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nstruct PolygonProps {\n  vec4 fillColors;\n  vec4 lineColors;\n  vec3 positions;\n  vec3 nextPositions;\n  vec3 pickingColors;\n  vec2 positions64xyLow;\n  vec2 nextPositions64xyLow;\n  float elevations;\n};\n\nvoid calculatePosition(PolygonProps props) {\n  vec3 pos;\n  vec2 pos64xyLow;\n  vec3 normal;\n  vec4 colors = isWireframe ? props.lineColors : props.fillColors;\n\n#ifdef IS_SIDE_VERTEX\n  pos = mix(props.positions, props.nextPositions, vertexPositions.x);\n  pos64xyLow = mix(props.positions64xyLow, props.nextPositions64xyLow, vertexPositions.x);\n  isValid = vertexValid;\n#else\n  pos = props.positions;\n  pos64xyLow = props.positions64xyLow;\n  isValid = 1.0;\n#endif\n\n  if (extruded) {\n    pos.z += props.elevations * vertexPositions.y;\n  }\n  pos.z *= elevationScale;\n\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(pos, pos64xyLow, vec3(0.), position_commonspace);\n\n  if (extruded) {\n#ifdef IS_SIDE_VERTEX\n    normal = vec3(props.positions.y - props.nextPositions.y, props.nextPositions.x - props.positions.x, 0.0);\n    normal = project_normal(normal);\n#else\n    normal = vec3(0.0, 0.0, 1.0);\n#endif\n\n    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, position_commonspace.xyz, normal);\n    vColor = vec4(lightColor, colors.a * opacity) / 255.0;\n  } else {\n    vColor = vec4(colors.rgb, colors.a * opacity) / 255.0;\n  }\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(props.pickingColors);\n}\n",f=`#define SHADER_NAME solid-polygon-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec2 positions64xyLow;\nattribute float elevations;\nattribute vec4 fillColors;\nattribute vec4 lineColors;\nattribute vec3 pickingColors;\n\n${h}\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = positions;\n  props.positions64xyLow = positions64xyLow;\n  props.elevations = elevations;\n  props.fillColors = fillColors;\n  props.lineColors = lineColors;\n  props.pickingColors = pickingColors;\n\n  calculatePosition(props);\n}\n`,d=`#define SHADER_NAME solid-polygon-layer-vertex-shader-side\n#define IS_SIDE_VERTEX\n\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute vec3 nextPositions;\nattribute vec2 nextPositions64xyLow;\nattribute float instanceElevations;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\n${h}\n\nvoid main(void) {\n  PolygonProps props;\n\n  props.positions = instancePositions;\n  props.positions64xyLow = instancePositions64xyLow;\n  props.elevations = instanceElevations;\n  props.fillColors = instanceFillColors;\n  props.lineColors = instanceLineColors;\n  props.pickingColors = instancePickingColors;\n  props.nextPositions = nextPositions;\n  props.nextPositions64xyLow = nextPositions64xyLow;\n\n  calculatePosition(props);\n}\n`,p="#define SHADER_NAME solid-polygon-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid < 0.5) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return b});const g=[0,0,0,255],v=new u.PhongMaterial,m={filled:!0,extruded:!1,wireframe:!1,fp64:!1,elevationScale:{type:"number",min:0,value:1},getPolygon:{type:"accessor",value:n=>n.polygon},getElevation:{type:"accessor",value:1e3},getFillColor:{type:"accessor",value:g},getLineColor:{type:"accessor",value:g},material:v},_={enter:(n,t)=>t.length?t.subarray(t.length-n.length):n};class b extends l.Layer{getShaders(n){const t=this.use64bitProjection()?"project64":"project32";return{vs:n,fs:p,modules:[t,"gouraud-lighting","picking"]}}initializeState(){const{gl:n}=this.context;this.setState({numInstances:0,polygonTesselator:new c({IndexType:!n||Object(u.hasFeature)(n,u.FEATURES.ELEMENT_INDEX_UINT32)?Uint32Array:Uint16Array})});const t=this.getAttributeManager();t.remove(["instancePickingColors"]),t.add({indices:{size:1,isIndexed:!0,update:this.calculateIndices,noAlloc:!0},positions:{size:3,transition:_,accessor:"getPolygon",update:this.calculatePositions,shaderAttributes:{positions:{offset:0,divisor:0},instancePositions:{offset:0,divisor:1},nextPositions:{offset:12,divisor:1}}},positions64xyLow:{size:2,update:this.calculatePositionsLow,shaderAttributes:{positions64xyLow:{offset:0,divisor:0},instancePositions64xyLow:{offset:0,divisor:1},nextPositions64xyLow:{offset:8,divisor:1}}},vertexValid:{size:1,divisor:1,type:r.a.UNSIGNED_BYTE,update:this.calculateVertexValid,noAlloc:!0},elevations:{size:1,transition:_,accessor:"getElevation",update:this.calculateElevations,shaderAttributes:{elevations:{divisor:0},instanceElevations:{divisor:1}}},fillColors:{alias:"colors",size:4,type:r.a.UNSIGNED_BYTE,transition:_,accessor:"getFillColor",update:this.calculateFillColors,defaultValue:g,shaderAttributes:{fillColors:{divisor:0},instanceFillColors:{divisor:1}}},lineColors:{alias:"colors",size:4,type:r.a.UNSIGNED_BYTE,transition:_,accessor:"getLineColor",update:this.calculateLineColors,defaultValue:g,shaderAttributes:{lineColors:{divisor:0},instanceLineColors:{divisor:1}}},pickingColors:{size:3,type:r.a.UNSIGNED_BYTE,update:this.calculatePickingColors,shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}draw({uniforms:n}){const{extruded:t,filled:e,wireframe:l,elevationScale:i}=this.props,{topModel:u,sideModel:o,polygonTesselator:a}=this.state,s=Object.assign({},n,{extruded:Boolean(t),elevationScale:i});o&&(o.setInstanceCount(a.instanceCount-1),o.setUniforms(s),l&&(o.setDrawMode(r.a.LINE_STRIP),o.setUniforms({isWireframe:!0}).draw()),e&&(o.setDrawMode(r.a.TRIANGLE_FAN),o.setUniforms({isWireframe:!1}).draw())),u&&(u.setVertexCount(a.get("indices").length),u.setUniforms(s).draw())}updateState(n){super.updateState(n),this.updateGeometry(n);const{props:t,oldProps:e}=n,l=this.getAttributeManager();(t.fp64!==e.fp64||t.filled!==e.filled||t.extruded!==e.extruded)&&(this.state.models&&this.state.models.forEach(n=>n.delete()),this.setState(this._getModels(this.context.gl)),l.invalidateAll())}updateGeometry({props:n,oldProps:t,changeFlags:e}){if(e.dataChanged||n.fp64!==t.fp64||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPolygon)){const{polygonTesselator:t}=this.state;t.updateGeometry({data:n.data,getGeometry:n.getPolygon,positionFormat:n.positionFormat,fp64:this.use64bitPositions()}),this.setState({numInstances:t.instanceCount}),this.getAttributeManager().invalidateAll()}}_getModels(n){const{id:t,filled:e,extruded:l}=this.props;let i,o;return e&&(i=new u.Model(n,Object.assign({},this.getShaders(f),{id:`${t}-top`,drawMode:r.a.TRIANGLES,attributes:{vertexPositions:new Float32Array([0,1])},uniforms:{isWireframe:!1,isSideVertex:!1},vertexCount:0,isIndexed:!0,shaderCache:this.context.shaderCache}))),l&&((o=new u.Model(n,Object.assign({},this.getShaders(d),{id:`${t}-side`,geometry:new u.Geometry({drawMode:r.a.LINES,vertexCount:4,attributes:{vertexPositions:{size:2,value:new Float32Array([1,1,0,1,0,0,1,0])}}}),instanceCount:0,isInstanced:1,shaderCache:this.context.shaderCache}))).userData.excludeAttributes={indices:!0}),{models:[o,i].filter(Boolean),topModel:i,sideModel:o}}calculateIndices(n){const{polygonTesselator:t}=this.state;n.bufferLayout=t.indexLayout,n.value=t.get("indices")}calculatePositions(n){const{polygonTesselator:t}=this.state;n.bufferLayout=t.bufferLayout,n.value=t.get("positions")}calculatePositionsLow(n){const t=this.use64bitPositions();n.constant=!t,n.value=t?this.state.polygonTesselator.get("positions64xyLow"):new Float32Array(2)}calculateVertexValid(n){n.value=this.state.polygonTesselator.get("vertexValid")}calculateElevations(n){const{polygonTesselator:t}=this.state;n.bufferLayout=t.bufferLayout;const{extruded:e,getElevation:l}=this.props;e?(n.constant=!1,n.value=t.get("elevations",n.value,l)):(n.constant=!0,n.value=new Float32Array(1))}calculateFillColors(n){const{polygonTesselator:t}=this.state;n.bufferLayout=t.bufferLayout,n.value=t.get("colors",n.value,this.props.getFillColor)}calculateLineColors(n){const{polygonTesselator:t}=this.state;n.bufferLayout=t.bufferLayout,n.value=t.get("colors",n.value,this.props.getLineColor)}calculatePickingColors(n){const{polygonTesselator:t}=this.state;n.value=t.get("pickingColors",n.value,this.encodePickingColor)}clearPickingColor(n){const t=this.decodePickingColor(n),{bufferLayout:e}=this.state.polygonTesselator,l=e[t];let i=0;for(let n=0;n<t;n++)i+=e[n];const{pickingColors:r}=this.getAttributeManager().attributes,{value:u}=r,o=i+l;u.fill(0,3*i,3*o),r.update({value:u})}}b.layerName="SolidPolygonLayer",b.defaultProps=m},function(n,t,e){"use strict";e.d(t,"a",function(){return h});var l=e(2),i=e(3),r=e(7),u=e(6),o=e(8),a=e(74),s=e(13),c=function(n,t){if(!n)throw new Error(t)},h=function(n){function t(){return Object(l.a)(this,t),Object(r.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(o.a)(t,n),Object(i.a)(t,[{key:"len",value:function(){return Math.sqrt(this.lengthSquared())}},{key:"magnitude",value:function(){return Math.sqrt(this.lengthSquared())}},{key:"lengthSquared",value:function(){for(var n=0,t=0;t<this.ELEMENTS;++t)n+=this[t]*this[t];return n}},{key:"distance",value:function(n){return Math.sqrt(this.distanceSquared(n))}},{key:"distanceSquared",value:function(n){for(var t=0,e=0;e<this.ELEMENTS;++e){var l=this[e]-n[e];t+=l*l}return Object(s.a)(t)}},{key:"dot",value:function(n){for(var t=0,e=0;e<this.ELEMENTS;++e)t+=this[e]*n[e];return Object(s.a)(t)}},{key:"normalize",value:function(){var n=this.magnitude();if(0!==n)for(var t=0;t<this.ELEMENTS;++t)this[t]/=n;return this.check()}},{key:"add",value:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];for(var l=0;l<t.length;l++)for(var i=t[l],r=0;r<this.ELEMENTS;++r)this[r]+=i[r];return this.check()}},{key:"subtract",value:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];for(var l=0;l<t.length;l++)for(var i=t[l],r=0;r<this.ELEMENTS;++r)this[r]-=i[r];return this.check()}},{key:"multiply",value:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];for(var l=0;l<t.length;l++)for(var i=t[l],r=0;r<this.ELEMENTS;++r)this[r]*=i[r];return this.check()}},{key:"divide",value:function(){for(var n=arguments.length,t=new Array(n),e=0;e<n;e++)t[e]=arguments[e];for(var l=0;l<t.length;l++)for(var i=t[l],r=0;r<this.ELEMENTS;++r)this[r]/=i[r];return this.check()}},{key:"scale",value:function(n){if(Array.isArray(n))return this.multiply(n);for(var t=0;t<this.ELEMENTS;++t)this[t]*=n;return this.check()}},{key:"scaleAndAdd",value:function(n,t){for(var e=0;e<this.ELEMENTS;++e)this[e]=this[e]*t+n[e];return this.check()}},{key:"lengthSq",value:function(){return this.lengthSquared()}},{key:"distanceTo",value:function(n){return this.distance(n)}},{key:"distanceToSquared",value:function(n){return this.distanceSquared(n)}},{key:"getComponent",value:function(n){return c(n>=0&&n<this.ELEMENTS,"index is out of range"),Object(s.a)(this[n])}},{key:"setComponent",value:function(n,t){return c(n>=0&&n<this.ELEMENTS,"index is out of range"),this[n]=t,this.check()}},{key:"addVectors",value:function(n,t){return this.copy(n).add(t)}},{key:"subVectors",value:function(n,t){return this.copy(n).subtract(t)}},{key:"multiplyVectors",value:function(n,t){return this.copy(n).multiply(t)}},{key:"addScaledVector",value:function(n,t){return this.add(new this.constructor(n).multiplyScalar(t))}},{key:"x",get:function(){return this[0]},set:function(n){return this[0]=Object(s.a)(n)}},{key:"y",get:function(){return this[1]},set:function(n){return this[1]=Object(s.a)(n)}}]),t}(a.a)},function(n,t,e){"undefined"==typeof TextDecoder?n.exports=e(113):n.exports={TextEncoder:TextEncoder,TextDecoder:TextDecoder}},function(n,t,e){"use strict";e.d(t,"b",function(){return d}),e.d(t,"c",function(){return p}),e.d(t,"a",function(){return g});var l=e(94),i=e.n(l);function r(n){if(n=n&&n.positions||n,!Array.isArray(n)&&!ArrayBuffer.isView(n))throw new Error("invalid polygon")}function u(n){return n.length>=1&&n[0].length>=2&&Number.isFinite(n[0][0])}function o(n){const t=n[0],e=n[n.length-1];return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function a(n,t,e,l){for(let i=0;i<t;i++)if(n[e+i]!==n[l-t+i])return!1;return!0}function s(n,t,e,l){let i=t;const r=e.length;for(let t=0;t<r;t++)for(let r=0;r<l;r++)n[i++]=e[t][r]||0;if(!o(e))for(let t=0;t<l;t++)n[i++]=e[0][t]||0;return i}function c(n,t,e,l,i=0,r){const u=(r=r||e.length)-i;if(u<=0)return t;let o=t;for(let t=0;t<u;t++)n[o++]=e[i+t];if(!a(e,l,i,r))for(let t=0;t<l;t++)n[o++]=e[i+t];return o}function h(n){return(o(n)?0:1)+n.length}function f(n,t,e=0,l){return e>=(l=l||n.length)?0:(a(n,t,e,l)?0:1)+(l-e)/t}function d(n,t){if(r(n),n.positions){const{positions:e,holeIndices:l}=n;if(l){let e=0;for(let i=0;i<=l.length;i++)e+=f(n.positions,t,l[i-1],l[i]);return e}n=e}if(Number.isFinite(n[0]))return f(n,t);if(!u(n)){let t=0;for(const e of n)t+=h(e);return t}return h(n)}function p(n,t,e){r(n),e=e||d(n,t);const l=new Float64Array(e*t),i=[];if(n.positions){const{positions:e,holeIndices:r}=n;if(r){let n=0;for(let u=0;u<=r.length;u++)n=c(l,n,e,t,r[u-1],r[u]),i.push(n);return i.pop(),{positions:l,holeIndices:i}}n=e}if(Number.isFinite(n[0]))return c(l,0,n,t),{positions:l,holeIndices:null};if(!u(n)){let e=0;for(const r of n)e=s(l,e,r,t),i.push(e);return i.pop(),{positions:l,holeIndices:i}}return s(l,0,n,t),{positions:l,holeIndices:null}}function g(n,t){let e=null;return n.holeIndices&&(e=n.holeIndices.map(n=>n/t)),i()(n.positions,e,t)}},function(n,t,e){"use strict";(function(n,l){e.d(t,"a",function(){return r});var i=e(47),r="object"!==(void 0===n?"undefined":Object(i.a)(n))||"[object process]"!==String(n)||n.browser;"undefined"!=typeof self&&self,"undefined"!=typeof window&&window,"undefined"!=typeof document&&document}).call(this,e(42),e(33))},function(n,t,e){"use strict";function l(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{},i=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(e).filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.forEach(function(t){l(n,t,e[t])})}return n}e.d(t,"a",function(){return i})},function(n,e){n.exports=t},function(n,t,e){"use strict";var l,i,r=e(0),u=e(41),o=function(n){return s(n)?void 0:0},a=(l={},Object(r.a)(l,3074,function(n){return s(n)?void 0:36064}),Object(r.a)(l,35723,function(n){return s(n)?void 0:4352}),Object(r.a)(l,35977,o),Object(r.a)(l,32937,o),Object(r.a)(l,36795,function(n,t){var e=s(n)?n.getExtension("EXT_disjoint_timer_query_webgl2"):n.getExtension("EXT_disjoint_timer_query");return e&&e.GPU_DISJOINT_EXT?t(e.GPU_DISJOINT_EXT):0}),Object(r.a)(l,37445,function(n,t){var e=n.getExtension("WEBGL_debug_renderer_info");return t(e&&e.UNMASKED_VENDOR_WEBGL||7936)}),Object(r.a)(l,37446,function(n,t){var e=n.getExtension("WEBGL_debug_renderer_info");return t(e&&e.UNMASKED_RENDERER_WEBGL||7937)}),Object(r.a)(l,34047,function(n,t){var e=n.luma.extensions.EXT_texture_filter_anisotropic;return e?t(e.MAX_TEXTURE_MAX_ANISOTROPY_EXT):1}),Object(r.a)(l,32883,o),Object(r.a)(l,35071,o),Object(r.a)(l,37447,o),Object(r.a)(l,36063,function(n,t){if(!s(n)){var e=n.getExtension("WEBGL_draw_buffers");return e?t(e.MAX_COLOR_ATTACHMENTS_WEBGL):0}}),Object(r.a)(l,35379,o),Object(r.a)(l,35374,o),Object(r.a)(l,35377,o),Object(r.a)(l,34852,function(n){if(!s(n)){var t=n.getExtension("WEBGL_draw_buffers");return t?t.MAX_DRAW_BUFFERS_WEBGL:0}}),Object(r.a)(l,36203,function(n){return n.getExtension("OES_element_index")?2147483647:65535}),Object(r.a)(l,33001,function(n){return n.getExtension("OES_element_index")?16777216:65535}),Object(r.a)(l,33e3,function(n){return 16777216}),Object(r.a)(l,37157,o),Object(r.a)(l,35373,o),Object(r.a)(l,35657,o),Object(r.a)(l,36183,o),Object(r.a)(l,37137,o),Object(r.a)(l,34045,o),Object(r.a)(l,35978,o),Object(r.a)(l,35979,o),Object(r.a)(l,35968,o),Object(r.a)(l,35376,o),Object(r.a)(l,35375,o),Object(r.a)(l,35659,o),Object(r.a)(l,37154,o),Object(r.a)(l,35371,o),Object(r.a)(l,35658,o),Object(r.a)(l,35076,o),Object(r.a)(l,35077,o),Object(r.a)(l,35380,o),l);function s(n){return Boolean(n&&2===n._version)}e.d(t,"b",function(){return h}),e.d(t,"a",function(){return f});function c(n){return Boolean(n&&2===n._version)}var h=(i={},Object(r.a)(i,"OES_vertex_array_object",{meta:{suffix:"OES"},createVertexArray:function(){Object(u.a)(!1,"VertexArray requires WebGL2 or OES_vertex_array_object extension")},deleteVertexArray:function(){},bindVertexArray:function(){},isVertexArray:function(){return!1}}),Object(r.a)(i,"ANGLE_instanced_arrays",{meta:{suffix:"ANGLE"},vertexAttribDivisor:function(n,t){Object(u.a)(0===t,"WebGL instanced rendering not supported")},drawElementsInstanced:function(){},drawArraysInstanced:function(){}}),Object(r.a)(i,"WEBGL_draw_buffers",{meta:{suffix:"WEBGL"},drawBuffers:function(){Object(u.a)(!1)}}),Object(r.a)(i,"EXT_disjoint_timer_query",{meta:{suffix:"EXT"},createQuery:function(){Object(u.a)(!1)},deleteQuery:function(){Object(u.a)(!1)},beginQuery:function(){Object(u.a)(!1)},endQuery:function(){},getQuery:function(n,t){return this.getQueryObject(n,t)},getQueryParameter:function(n,t){return this.getQueryObject(n,t)},getQueryObject:function(){}}),i),f={readBuffer:function(n,t,e){c(n)&&t(e)},getVertexAttrib:function(n,t,e,l){var i,r=function(n,t){return{webgl2:c(n),ext:n.getExtension(t)}}(n,"ANGLE_instanced_arrays"),u=r.webgl2,o=r.ext;switch(l){case 35069:i=!!u&&void 0;break;case 35070:i=u||o?void 0:0}return void 0!==i?i:t(e,l)},getProgramParameter:function(n,t,e,l){if(!c(n))switch(l){case 35967:return 35981;case 35971:case 35382:return 0}return t(e,l)},getInternalformatParameter:function(n,t,e,l,i){if(!c(n))switch(i){case 32937:return new Int32Array([0])}return n.getInternalformatParameter(e,l,i)},getTexParameter:function(n,t,e,l){switch(l){case 34046:var i=n.luma.extensions.EXT_texture_filter_anisotropic;l=i&&i.TEXTURE_MAX_ANISOTROPY_EXT||34046}return t(e,l)},getParameter:function(n,t,e){var l=a[e],i="function"==typeof l?l(n,t,e):l;return void 0!==i?i:t(e)},hint:function(n,t,e,l){return t(e,l)}}},,function(n,t,e){"use strict";(function(n){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var l=e(109),i=e(110),r=e(111);function u(){return a.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function o(n,t){if(u()<t)throw new RangeError("Invalid typed array length");return a.TYPED_ARRAY_SUPPORT?(n=new Uint8Array(t)).__proto__=a.prototype:(null===n&&(n=new a(t)),n.length=t),n}function a(n,t,e){if(!(a.TYPED_ARRAY_SUPPORT||this instanceof a))return new a(n,t,e);if("number"==typeof n){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return h(this,n)}return s(this,n,t,e)}function s(n,t,e,l){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(n,t,e,l){if(t.byteLength,e<0||t.byteLength<e)throw new RangeError("'offset' is out of bounds");if(t.byteLength<e+(l||0))throw new RangeError("'length' is out of bounds");t=void 0===e&&void 0===l?new Uint8Array(t):void 0===l?new Uint8Array(t,e):new Uint8Array(t,e,l);a.TYPED_ARRAY_SUPPORT?(n=t).__proto__=a.prototype:n=f(n,t);return n}(n,t,e,l):"string"==typeof t?function(n,t,e){"string"==typeof e&&""!==e||(e="utf8");if(!a.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var l=0|p(t,e),i=(n=o(n,l)).write(t,e);i!==l&&(n=n.slice(0,i));return n}(n,t,e):function(n,t){if(a.isBuffer(t)){var e=0|d(t.length);return 0===(n=o(n,e)).length?n:(t.copy(n,0,0,e),n)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(l=t.length)!=l?o(n,0):f(n,t);if("Buffer"===t.type&&r(t.data))return f(n,t.data)}var l;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(n,t)}function c(n){if("number"!=typeof n)throw new TypeError('"size" argument must be a number');if(n<0)throw new RangeError('"size" argument must not be negative')}function h(n,t){if(c(t),n=o(n,t<0?0:0|d(t)),!a.TYPED_ARRAY_SUPPORT)for(var e=0;e<t;++e)n[e]=0;return n}function f(n,t){var e=t.length<0?0:0|d(t.length);n=o(n,e);for(var l=0;l<e;l+=1)n[l]=255&t[l];return n}function d(n){if(n>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|n}function p(n,t){if(a.isBuffer(n))return n.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(n)||n instanceof ArrayBuffer))return n.byteLength;"string"!=typeof n&&(n=""+n);var e=n.length;if(0===e)return 0;for(var l=!1;;)switch(t){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return U(n).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return z(n).length;default:if(l)return U(n).length;t=(""+t).toLowerCase(),l=!0}}function g(n,t,e){var l=n[t];n[t]=n[e],n[e]=l}function v(n,t,e,l,i){if(0===n.length)return-1;if("string"==typeof e?(l=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=i?0:n.length-1),e<0&&(e=n.length+e),e>=n.length){if(i)return-1;e=n.length-1}else if(e<0){if(!i)return-1;e=0}if("string"==typeof t&&(t=a.from(t,l)),a.isBuffer(t))return 0===t.length?-1:m(n,t,e,l,i);if("number"==typeof t)return t&=255,a.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(n,t,e):Uint8Array.prototype.lastIndexOf.call(n,t,e):m(n,[t],e,l,i);throw new TypeError("val must be string, number or Buffer")}function m(n,t,e,l,i){var r,u=1,o=n.length,a=t.length;if(void 0!==l&&("ucs2"===(l=String(l).toLowerCase())||"ucs-2"===l||"utf16le"===l||"utf-16le"===l)){if(n.length<2||t.length<2)return-1;u=2,o/=2,a/=2,e/=2}function s(n,t){return 1===u?n[t]:n.readUInt16BE(t*u)}if(i){var c=-1;for(r=e;r<o;r++)if(s(n,r)===s(t,-1===c?0:r-c)){if(-1===c&&(c=r),r-c+1===a)return c*u}else-1!==c&&(r-=r-c),c=-1}else for(e+a>o&&(e=o-a),r=e;r>=0;r--){for(var h=!0,f=0;f<a;f++)if(s(n,r+f)!==s(t,f)){h=!1;break}if(h)return r}return-1}function _(n,t,e,l){e=Number(e)||0;var i=n.length-e;l?(l=Number(l))>i&&(l=i):l=i;var r=t.length;if(r%2!=0)throw new TypeError("Invalid hex string");l>r/2&&(l=r/2);for(var u=0;u<l;++u){var o=parseInt(t.substr(2*u,2),16);if(isNaN(o))return u;n[e+u]=o}return u}function b(n,t,e,l){return V(U(t,n.length-e),n,e,l)}function y(n,t,e,l){return V(function(n){for(var t=[],e=0;e<n.length;++e)t.push(255&n.charCodeAt(e));return t}(t),n,e,l)}function x(n,t,e,l){return y(n,t,e,l)}function w(n,t,e,l){return V(z(t),n,e,l)}function E(n,t,e,l){return V(function(n,t){for(var e,l,i,r=[],u=0;u<n.length&&!((t-=2)<0);++u)e=n.charCodeAt(u),l=e>>8,i=e%256,r.push(i),r.push(l);return r}(t,n.length-e),n,e,l)}function P(n,t,e){return 0===t&&e===n.length?l.fromByteArray(n):l.fromByteArray(n.slice(t,e))}function O(n,t,e){e=Math.min(n.length,e);for(var l=[],i=t;i<e;){var r,u,o,a,s=n[i],c=null,h=s>239?4:s>223?3:s>191?2:1;if(i+h<=e)switch(h){case 1:s<128&&(c=s);break;case 2:128==(192&(r=n[i+1]))&&(a=(31&s)<<6|63&r)>127&&(c=a);break;case 3:r=n[i+1],u=n[i+2],128==(192&r)&&128==(192&u)&&(a=(15&s)<<12|(63&r)<<6|63&u)>2047&&(a<55296||a>57343)&&(c=a);break;case 4:r=n[i+1],u=n[i+2],o=n[i+3],128==(192&r)&&128==(192&u)&&128==(192&o)&&(a=(15&s)<<18|(63&r)<<12|(63&u)<<6|63&o)>65535&&a<1114112&&(c=a)}null===c?(c=65533,h=1):c>65535&&(c-=65536,l.push(c>>>10&1023|55296),c=56320|1023&c),l.push(c),i+=h}return function(n){var t=n.length;if(t<=S)return String.fromCharCode.apply(String,n);var e="",l=0;for(;l<t;)e+=String.fromCharCode.apply(String,n.slice(l,l+=S));return e}(l)}t.Buffer=a,t.SlowBuffer=function(n){+n!=n&&(n=0);return a.alloc(+n)},t.INSPECT_MAX_BYTES=50,a.TYPED_ARRAY_SUPPORT=void 0!==n.TYPED_ARRAY_SUPPORT?n.TYPED_ARRAY_SUPPORT:function(){try{var n=new Uint8Array(1);return n.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===n.foo()&&"function"==typeof n.subarray&&0===n.subarray(1,1).byteLength}catch(n){return!1}}(),t.kMaxLength=u(),a.poolSize=8192,a._augment=function(n){return n.__proto__=a.prototype,n},a.from=function(n,t,e){return s(null,n,t,e)},a.TYPED_ARRAY_SUPPORT&&(a.prototype.__proto__=Uint8Array.prototype,a.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&a[Symbol.species]===a&&Object.defineProperty(a,Symbol.species,{value:null,configurable:!0})),a.alloc=function(n,t,e){return function(n,t,e,l){return c(t),t<=0?o(n,t):void 0!==e?"string"==typeof l?o(n,t).fill(e,l):o(n,t).fill(e):o(n,t)}(null,n,t,e)},a.allocUnsafe=function(n){return h(null,n)},a.allocUnsafeSlow=function(n){return h(null,n)},a.isBuffer=function(n){return!(null==n||!n._isBuffer)},a.compare=function(n,t){if(!a.isBuffer(n)||!a.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(n===t)return 0;for(var e=n.length,l=t.length,i=0,r=Math.min(e,l);i<r;++i)if(n[i]!==t[i]){e=n[i],l=t[i];break}return e<l?-1:l<e?1:0},a.isEncoding=function(n){switch(String(n).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},a.concat=function(n,t){if(!r(n))throw new TypeError('"list" argument must be an Array of Buffers');if(0===n.length)return a.alloc(0);var e;if(void 0===t)for(t=0,e=0;e<n.length;++e)t+=n[e].length;var l=a.allocUnsafe(t),i=0;for(e=0;e<n.length;++e){var u=n[e];if(!a.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(l,i),i+=u.length}return l},a.byteLength=p,a.prototype._isBuffer=!0,a.prototype.swap16=function(){var n=this.length;if(n%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<n;t+=2)g(this,t,t+1);return this},a.prototype.swap32=function(){var n=this.length;if(n%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<n;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},a.prototype.swap64=function(){var n=this.length;if(n%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<n;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},a.prototype.toString=function(){var n=0|this.length;return 0===n?"":0===arguments.length?O(this,0,n):function(n,t,e){var l=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if((e>>>=0)<=(t>>>=0))return"";for(n||(n="utf8");;)switch(n){case"hex":return C(this,t,e);case"utf8":case"utf-8":return O(this,t,e);case"ascii":return A(this,t,e);case"latin1":case"binary":return T(this,t,e);case"base64":return P(this,t,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return L(this,t,e);default:if(l)throw new TypeError("Unknown encoding: "+n);n=(n+"").toLowerCase(),l=!0}}.apply(this,arguments)},a.prototype.equals=function(n){if(!a.isBuffer(n))throw new TypeError("Argument must be a Buffer");return this===n||0===a.compare(this,n)},a.prototype.inspect=function(){var n="",e=t.INSPECT_MAX_BYTES;return this.length>0&&(n=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(n+=" ... ")),"<Buffer "+n+">"},a.prototype.compare=function(n,t,e,l,i){if(!a.isBuffer(n))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===e&&(e=n?n.length:0),void 0===l&&(l=0),void 0===i&&(i=this.length),t<0||e>n.length||l<0||i>this.length)throw new RangeError("out of range index");if(l>=i&&t>=e)return 0;if(l>=i)return-1;if(t>=e)return 1;if(this===n)return 0;for(var r=(i>>>=0)-(l>>>=0),u=(e>>>=0)-(t>>>=0),o=Math.min(r,u),s=this.slice(l,i),c=n.slice(t,e),h=0;h<o;++h)if(s[h]!==c[h]){r=s[h],u=c[h];break}return r<u?-1:u<r?1:0},a.prototype.includes=function(n,t,e){return-1!==this.indexOf(n,t,e)},a.prototype.indexOf=function(n,t,e){return v(this,n,t,e,!0)},a.prototype.lastIndexOf=function(n,t,e){return v(this,n,t,e,!1)},a.prototype.write=function(n,t,e,l){if(void 0===t)l="utf8",e=this.length,t=0;else if(void 0===e&&"string"==typeof t)l=t,e=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(e)?(e|=0,void 0===l&&(l="utf8")):(l=e,e=void 0)}var i=this.length-t;if((void 0===e||e>i)&&(e=i),n.length>0&&(e<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");l||(l="utf8");for(var r=!1;;)switch(l){case"hex":return _(this,n,t,e);case"utf8":case"utf-8":return b(this,n,t,e);case"ascii":return y(this,n,t,e);case"latin1":case"binary":return x(this,n,t,e);case"base64":return w(this,n,t,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,n,t,e);default:if(r)throw new TypeError("Unknown encoding: "+l);l=(""+l).toLowerCase(),r=!0}},a.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function A(n,t,e){var l="";e=Math.min(n.length,e);for(var i=t;i<e;++i)l+=String.fromCharCode(127&n[i]);return l}function T(n,t,e){var l="";e=Math.min(n.length,e);for(var i=t;i<e;++i)l+=String.fromCharCode(n[i]);return l}function C(n,t,e){var l=n.length;(!t||t<0)&&(t=0),(!e||e<0||e>l)&&(e=l);for(var i="",r=t;r<e;++r)i+=B(n[r]);return i}function L(n,t,e){for(var l=n.slice(t,e),i="",r=0;r<l.length;r+=2)i+=String.fromCharCode(l[r]+256*l[r+1]);return i}function M(n,t,e){if(n%1!=0||n<0)throw new RangeError("offset is not uint");if(n+t>e)throw new RangeError("Trying to access beyond buffer length")}function j(n,t,e,l,i,r){if(!a.isBuffer(n))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<r)throw new RangeError('"value" argument is out of bounds');if(e+l>n.length)throw new RangeError("Index out of range")}function R(n,t,e,l){t<0&&(t=65535+t+1);for(var i=0,r=Math.min(n.length-e,2);i<r;++i)n[e+i]=(t&255<<8*(l?i:1-i))>>>8*(l?i:1-i)}function I(n,t,e,l){t<0&&(t=4294967295+t+1);for(var i=0,r=Math.min(n.length-e,4);i<r;++i)n[e+i]=t>>>8*(l?i:3-i)&255}function k(n,t,e,l,i,r){if(e+l>n.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function F(n,t,e,l,r){return r||k(n,0,e,4),i.write(n,t,e,l,23,4),e+4}function N(n,t,e,l,r){return r||k(n,0,e,8),i.write(n,t,e,l,52,8),e+8}a.prototype.slice=function(n,t){var e,l=this.length;if((n=~~n)<0?(n+=l)<0&&(n=0):n>l&&(n=l),(t=void 0===t?l:~~t)<0?(t+=l)<0&&(t=0):t>l&&(t=l),t<n&&(t=n),a.TYPED_ARRAY_SUPPORT)(e=this.subarray(n,t)).__proto__=a.prototype;else{var i=t-n;e=new a(i,void 0);for(var r=0;r<i;++r)e[r]=this[r+n]}return e},a.prototype.readUIntLE=function(n,t,e){n|=0,t|=0,e||M(n,t,this.length);for(var l=this[n],i=1,r=0;++r<t&&(i*=256);)l+=this[n+r]*i;return l},a.prototype.readUIntBE=function(n,t,e){n|=0,t|=0,e||M(n,t,this.length);for(var l=this[n+--t],i=1;t>0&&(i*=256);)l+=this[n+--t]*i;return l},a.prototype.readUInt8=function(n,t){return t||M(n,1,this.length),this[n]},a.prototype.readUInt16LE=function(n,t){return t||M(n,2,this.length),this[n]|this[n+1]<<8},a.prototype.readUInt16BE=function(n,t){return t||M(n,2,this.length),this[n]<<8|this[n+1]},a.prototype.readUInt32LE=function(n,t){return t||M(n,4,this.length),(this[n]|this[n+1]<<8|this[n+2]<<16)+16777216*this[n+3]},a.prototype.readUInt32BE=function(n,t){return t||M(n,4,this.length),16777216*this[n]+(this[n+1]<<16|this[n+2]<<8|this[n+3])},a.prototype.readIntLE=function(n,t,e){n|=0,t|=0,e||M(n,t,this.length);for(var l=this[n],i=1,r=0;++r<t&&(i*=256);)l+=this[n+r]*i;return l>=(i*=128)&&(l-=Math.pow(2,8*t)),l},a.prototype.readIntBE=function(n,t,e){n|=0,t|=0,e||M(n,t,this.length);for(var l=t,i=1,r=this[n+--l];l>0&&(i*=256);)r+=this[n+--l]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},a.prototype.readInt8=function(n,t){return t||M(n,1,this.length),128&this[n]?-1*(255-this[n]+1):this[n]},a.prototype.readInt16LE=function(n,t){t||M(n,2,this.length);var e=this[n]|this[n+1]<<8;return 32768&e?4294901760|e:e},a.prototype.readInt16BE=function(n,t){t||M(n,2,this.length);var e=this[n+1]|this[n]<<8;return 32768&e?4294901760|e:e},a.prototype.readInt32LE=function(n,t){return t||M(n,4,this.length),this[n]|this[n+1]<<8|this[n+2]<<16|this[n+3]<<24},a.prototype.readInt32BE=function(n,t){return t||M(n,4,this.length),this[n]<<24|this[n+1]<<16|this[n+2]<<8|this[n+3]},a.prototype.readFloatLE=function(n,t){return t||M(n,4,this.length),i.read(this,n,!0,23,4)},a.prototype.readFloatBE=function(n,t){return t||M(n,4,this.length),i.read(this,n,!1,23,4)},a.prototype.readDoubleLE=function(n,t){return t||M(n,8,this.length),i.read(this,n,!0,52,8)},a.prototype.readDoubleBE=function(n,t){return t||M(n,8,this.length),i.read(this,n,!1,52,8)},a.prototype.writeUIntLE=function(n,t,e,l){(n=+n,t|=0,e|=0,l)||j(this,n,t,e,Math.pow(2,8*e)-1,0);var i=1,r=0;for(this[t]=255&n;++r<e&&(i*=256);)this[t+r]=n/i&255;return t+e},a.prototype.writeUIntBE=function(n,t,e,l){(n=+n,t|=0,e|=0,l)||j(this,n,t,e,Math.pow(2,8*e)-1,0);var i=e-1,r=1;for(this[t+i]=255&n;--i>=0&&(r*=256);)this[t+i]=n/r&255;return t+e},a.prototype.writeUInt8=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,1,255,0),a.TYPED_ARRAY_SUPPORT||(n=Math.floor(n)),this[t]=255&n,t+1},a.prototype.writeUInt16LE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=255&n,this[t+1]=n>>>8):R(this,n,t,!0),t+2},a.prototype.writeUInt16BE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,2,65535,0),a.TYPED_ARRAY_SUPPORT?(this[t]=n>>>8,this[t+1]=255&n):R(this,n,t,!1),t+2},a.prototype.writeUInt32LE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t+3]=n>>>24,this[t+2]=n>>>16,this[t+1]=n>>>8,this[t]=255&n):I(this,n,t,!0),t+4},a.prototype.writeUInt32BE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,4,4294967295,0),a.TYPED_ARRAY_SUPPORT?(this[t]=n>>>24,this[t+1]=n>>>16,this[t+2]=n>>>8,this[t+3]=255&n):I(this,n,t,!1),t+4},a.prototype.writeIntLE=function(n,t,e,l){if(n=+n,t|=0,!l){var i=Math.pow(2,8*e-1);j(this,n,t,e,i-1,-i)}var r=0,u=1,o=0;for(this[t]=255&n;++r<e&&(u*=256);)n<0&&0===o&&0!==this[t+r-1]&&(o=1),this[t+r]=(n/u>>0)-o&255;return t+e},a.prototype.writeIntBE=function(n,t,e,l){if(n=+n,t|=0,!l){var i=Math.pow(2,8*e-1);j(this,n,t,e,i-1,-i)}var r=e-1,u=1,o=0;for(this[t+r]=255&n;--r>=0&&(u*=256);)n<0&&0===o&&0!==this[t+r+1]&&(o=1),this[t+r]=(n/u>>0)-o&255;return t+e},a.prototype.writeInt8=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,1,127,-128),a.TYPED_ARRAY_SUPPORT||(n=Math.floor(n)),n<0&&(n=255+n+1),this[t]=255&n,t+1},a.prototype.writeInt16LE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=255&n,this[t+1]=n>>>8):R(this,n,t,!0),t+2},a.prototype.writeInt16BE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,2,32767,-32768),a.TYPED_ARRAY_SUPPORT?(this[t]=n>>>8,this[t+1]=255&n):R(this,n,t,!1),t+2},a.prototype.writeInt32LE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,4,2147483647,-2147483648),a.TYPED_ARRAY_SUPPORT?(this[t]=255&n,this[t+1]=n>>>8,this[t+2]=n>>>16,this[t+3]=n>>>24):I(this,n,t,!0),t+4},a.prototype.writeInt32BE=function(n,t,e){return n=+n,t|=0,e||j(this,n,t,4,2147483647,-2147483648),n<0&&(n=4294967295+n+1),a.TYPED_ARRAY_SUPPORT?(this[t]=n>>>24,this[t+1]=n>>>16,this[t+2]=n>>>8,this[t+3]=255&n):I(this,n,t,!1),t+4},a.prototype.writeFloatLE=function(n,t,e){return F(this,n,t,!0,e)},a.prototype.writeFloatBE=function(n,t,e){return F(this,n,t,!1,e)},a.prototype.writeDoubleLE=function(n,t,e){return N(this,n,t,!0,e)},a.prototype.writeDoubleBE=function(n,t,e){return N(this,n,t,!1,e)},a.prototype.copy=function(n,t,e,l){if(e||(e=0),l||0===l||(l=this.length),t>=n.length&&(t=n.length),t||(t=0),l>0&&l<e&&(l=e),l===e)return 0;if(0===n.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(l<0)throw new RangeError("sourceEnd out of bounds");l>this.length&&(l=this.length),n.length-t<l-e&&(l=n.length-t+e);var i,r=l-e;if(this===n&&e<t&&t<l)for(i=r-1;i>=0;--i)n[i+t]=this[i+e];else if(r<1e3||!a.TYPED_ARRAY_SUPPORT)for(i=0;i<r;++i)n[i+t]=this[i+e];else Uint8Array.prototype.set.call(n,this.subarray(e,e+r),t);return r},a.prototype.fill=function(n,t,e,l){if("string"==typeof n){if("string"==typeof t?(l=t,t=0,e=this.length):"string"==typeof e&&(l=e,e=this.length),1===n.length){var i=n.charCodeAt(0);i<256&&(n=i)}if(void 0!==l&&"string"!=typeof l)throw new TypeError("encoding must be a string");if("string"==typeof l&&!a.isEncoding(l))throw new TypeError("Unknown encoding: "+l)}else"number"==typeof n&&(n&=255);if(t<0||this.length<t||this.length<e)throw new RangeError("Out of range index");if(e<=t)return this;var r;if(t>>>=0,e=void 0===e?this.length:e>>>0,n||(n=0),"number"==typeof n)for(r=t;r<e;++r)this[r]=n;else{var u=a.isBuffer(n)?n:U(new a(n,l).toString()),o=u.length;for(r=0;r<e-t;++r)this[r+t]=u[r%o]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function B(n){return n<16?"0"+n.toString(16):n.toString(16)}function U(n,t){var e;t=t||1/0;for(var l=n.length,i=null,r=[],u=0;u<l;++u){if((e=n.charCodeAt(u))>55295&&e<57344){if(!i){if(e>56319){(t-=3)>-1&&r.push(239,191,189);continue}if(u+1===l){(t-=3)>-1&&r.push(239,191,189);continue}i=e;continue}if(e<56320){(t-=3)>-1&&r.push(239,191,189),i=e;continue}e=65536+(i-55296<<10|e-56320)}else i&&(t-=3)>-1&&r.push(239,191,189);if(i=null,e<128){if((t-=1)<0)break;r.push(e)}else if(e<2048){if((t-=2)<0)break;r.push(e>>6|192,63&e|128)}else if(e<65536){if((t-=3)<0)break;r.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;r.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return r}function z(n){return l.toByteArray(function(n){if((n=function(n){return n.trim?n.trim():n.replace(/^\s+|\s+$/g,"")}(n).replace(D,"")).length<2)return"";for(;n.length%4!=0;)n+="=";return n}(n))}function V(n,t,e,l){for(var i=0;i<l&&!(i+e>=t.length||i>=n.length);++i)t[i+e]=n[i];return i}}).call(this,e(33))},function(n,t,e){"use strict";e.d(t,"a",function(){return f});var l=e(2),i=e(3),r=e(7),u=e(6),o=e(8),a=e(52),s=e(13),c=e(27),h=[0,0,0],f=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return Object(l.a)(this,t),n=Object(r.a)(this,Object(u.a)(t).call(this)),Array.isArray(e)&&1===arguments.length?n.copy(e):n.set(e,i,o),n}return Object(o.a)(t,n),Object(i.a)(t,[{key:"angle",value:function(n){return c.a(this,n)}},{key:"cross",value:function(n){return c.b(this,this,n),this.check()}},{key:"rotateX",value:function(n){var t=n.radians,e=n.origin,l=void 0===e?h:e;return c.e(this,this,l,t),this.check()}},{key:"rotateY",value:function(n){var t=n.radians,e=n.origin,l=void 0===e?h:e;return c.f(this,this,l,t),this.check()}},{key:"rotateZ",value:function(n){var t=n.radians,e=n.origin,l=void 0===e?h:e;return c.g(this,this,l,t),this.check()}},{key:"operation",value:function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),l=1;l<t;l++)e[l-1]=arguments[l];return n.apply(void 0,[this,this].concat(e)),this.check()}},{key:"ELEMENTS",get:function(){return 3}},{key:"z",get:function(){return this[2]},set:function(n){return this[2]=Object(s.a)(n)}}]),t}(a.a)},function(n,t,e){"use strict";function l(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";function l(n,t){for(var e=0;e<t.length;e++){var l=t[e];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(n,l.key,l)}}function i(n,t,e){return t&&l(n.prototype,t),e&&l(n,e),n}e.d(t,"a",function(){return i})},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return o});var l=e(32),i=e(53),r=function(n){return n&&n instanceof ArrayBuffer},u=function(t){return t&&t instanceof n};function o(n){if(r(n))return n;if(u(n))return new Uint8Array(n).buffer;if(ArrayBuffer.isView(n))return n.buffer;if("string"==typeof n){var t=n;return(new i.TextEncoder).encode(t).buffer}return Object(l.a)(!1)}}).call(this,e(60).Buffer)},function(n,t,e){"use strict";var l=e(15),i=e(9),r=e.n(i);function u(n){this.wrapped=n}function o(n){return new u(n)}function a(n){var t,e;function l(t,e){try{var r=n[t](e),o=r.value,a=o instanceof u;Promise.resolve(a?o.wrapped:o).then(function(n){a?l("next",n):i(r.done?"return":"normal",n)},function(n){l("throw",n)})}catch(n){i("throw",n)}}function i(n,i){switch(n){case"return":t.resolve({value:i,done:!0});break;case"throw":t.reject(i);break;default:t.resolve({value:i,done:!1})}(t=t.next)?l(t.key,t.arg):e=null}this._invoke=function(n,i){return new Promise(function(r,u){var o={key:n,arg:i,resolve:r,reject:u,next:null};e?e=e.next=o:(t=e=o,l(n,i))})},"function"!=typeof n.return&&(this.return=void 0)}function s(n){return function(){return new a(n.apply(this,arguments))}}"function"==typeof Symbol&&Symbol.asyncIterator&&(a.prototype[Symbol.asyncIterator]=function(){return this}),a.prototype.next=function(n){return this._invoke("next",n)},a.prototype.throw=function(n){return this._invoke("throw",n)},a.prototype.return=function(n){return this._invoke("return",n)};var c=e(55);function h(n){return"function"==typeof n[Symbol.asyncIterator]?n:"function"==typeof n.getIterator?n.getIterator():c.a?function(n){return f.apply(this,arguments)}(n):function(n){return d.apply(this,arguments)}(n)}function f(){return(f=s(r.a.mark(function n(t){var e,l,i,u;return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:e=t.getReader(),n.prev=1;case 2:return n.next=5,o(e.read());case 5:if(l=n.sent,i=l.done,u=l.value,!i){n.next=10;break}return n.abrupt("return");case 10:return n.next=12,u;case 12:n.next=2;break;case 14:return n.prev=14,e.releaseLock(),n.finish(14);case 17:case"end":return n.stop()}},n,null,[[1,,14,17]])}))).apply(this,arguments)}function d(){return(d=s(r.a.mark(function n(t){var e;return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,o(t);case 2:t=n.sent;case 3:if(null===(e=t.read())){n.next=9;break}return n.next=8,e;case 8:return n.abrupt("continue",3);case 9:if(!t._readableState.ended){n.next=11;break}return n.abrupt("return");case 11:return n.next=13,o(p(t));case 13:n.next=3;break;case 15:case"end":return n.stop()}},n)}))).apply(this,arguments)}function p(n){return g.apply(this,arguments)}function g(){return(g=Object(l.a)(r.a.mark(function n(t){return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",new Promise(function(n){t.once("readable",n)}));case 1:case"end":return n.stop()}},n)}))).apply(this,arguments)}function v(n){var t=new ArrayBuffer,e="";return new Promise(function(l,i){n.data(function(n){var l,i,r,u,o;"string"==typeof n?e+=n:(i=n,r=(l=t)instanceof ArrayBuffer?new Uint8Array(l):l,u=i instanceof ArrayBuffer?new Uint8Array(i):i,(o=new Uint8Array(r.byteLength+u.byteLength)).set(r,0),o.set(u,r.byteLength),t=o)}),n.on("error",function(n){return i(n)}),n.on("end",function(){n.complete?l(t||e):i("The connection was terminated while the message was still being sent")})})}e.d(t,"b",function(){return h}),e.d(t,"a",function(){return v})},,function(n,t,e){"use strict";(function(n){var t=e(41),l=e(58);function i(n,e){var i=e.extension,r=e.target,u=e.target2,o=l.b[i];Object(t.a)(o);for(var a=o.meta,s=(void 0===a?{}:a).suffix,c=void 0===s?"":s,h=n.getExtension(i),f=function(){var t=p[d],e="".concat(t).concat(c),l=null;"meta"===t||"function"==typeof n[t]||(h&&"function"==typeof h[e]?l=function(){return h[e].apply(h,arguments)}:"function"==typeof o[t]&&(l=o[t].bind(r))),l&&(r[t]=l,u[t]=l)},d=0,p=Object.keys(o);d<p.length;d++)f()}(void 0!==n?n:window).polyfillContext=function(n){return n.luma=n.luma||{},function(n){n.luma.extensions={};var t=n.getSupportedExtensions()||[],e=!0,l=!1,i=void 0;try{for(var r,u=t[Symbol.iterator]();!(e=(r=u.next()).done);e=!0){var o=r.value;n.luma[o]=n.getExtension(o)}}catch(n){l=!0,i=n}finally{try{e||null==u.return||u.return()}finally{if(l)throw i}}}(n),n.luma.polyfilled||(function(n,t){var e=!0,l=!1,r=void 0;try{for(var u,o=Object.getOwnPropertyNames(t)[Symbol.iterator]();!(e=(u=o.next()).done);e=!0){var a=u.value;"overrides"!==a&&i(n,{extension:a,target:n.luma,target2:n})}}catch(n){l=!0,r=n}finally{try{e||null==o.return||o.return()}finally{if(l)throw r}}}(n,l.b),function(n,t){var e=t.target,i=t.target2;Object.keys(l.a).forEach(function(t){if("function"==typeof l.a[t]){var r=n[t]?n[t].bind(n):function(){},u=l.a[t].bind(null,n,r);e[t]=u,i[t]=u}})}(n,{target:n.luma,target2:n}),n.luma.polyfilled=!0),n}}).call(this,e(33))},function(n,t,e){"use strict";function l(n,t){if(n===t)return!0;var e=Array.isArray(n)||ArrayBuffer.isView(n),l=Array.isArray(t)||ArrayBuffer.isView(t);if(e&&l&&n.length===t.length){for(var i=0;i<n.length;++i)if(n[i]!==t[i])return!1;return!0}return!1}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1),o="\n#define SHADER_NAME column-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 normals;\n\nattribute vec3 instancePositions;\nattribute float instanceElevations;\nattribute vec2 instancePositions64xyLow;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\n// Custom uniforms\nuniform float opacity;\nuniform float radius;\nuniform float angle;\nuniform vec2 offset;\nuniform bool extruded;\nuniform float coverage;\nuniform float elevationScale;\n\n// Result\nvarying vec4 vColor;\n\nvoid main(void) {\n\n  // rotate primitive position and normal\n  mat2 rotationMatrix = mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n\n  // calculate elevation, if 3d not enabled set to 0\n  // cylindar gemoetry height are between -1.0 to 1.0, transform it to between 0, 1\n  float elevation = 0.0;\n\n  if (extruded) {\n    elevation = instanceElevations * (positions.z + 1.0) / 2.0 * elevationScale;\n  }\n\n  // if ahpha == 0.0 or z < 0.0, do not render element\n  float shouldRender = float(instanceColors.a > 0.0 && instanceElevations >= 0.0);\n  float dotRadius = radius * coverage * shouldRender;\n\n  // project center of column\n  vec3 centroidPosition = vec3(instancePositions.xy, instancePositions.z + elevation);\n  vec2 centroidPosition64xyLow = instancePositions64xyLow;\n  vec3 pos = vec3(project_size(rotationMatrix * positions.xy + offset) * dotRadius, 0.);\n\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64xyLow, pos, position_commonspace);\n\n  // Light calculations\n  // Worldspace is the linear space after Mercator projection\n\n  vec3 normals_commonspace = project_normal(vec3(rotationMatrix * normals.xy, normals.z));\n\n  if (extruded) {\n    vec3 lightColor = lighting_getLightColor(instanceColors.rgb, project_uCameraPosition, position_commonspace.xyz, normals_commonspace);\n    vColor = vec4(lightColor, instanceColors.a * opacity) / 255.0;\n  } else {\n    vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.0;\n  }\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",a="#define SHADER_NAME column-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return d});const{fp64LowPart:s}=u.fp64,c=new u.PhongMaterial,h=[255,0,255,255],f={diskResolution:{type:"number",min:4,value:20},vertices:null,radius:{type:"number",min:0,value:1e3},angle:{type:"number",value:0},offset:{type:"array",value:[0,0]},coverage:{type:"number",min:0,max:1,value:1},elevationScale:{type:"number",min:0,value:1},extruded:!0,fp64:!1,getPosition:{type:"accessor",value:n=>n.position},getColor:{type:"accessor",value:h},getElevation:{type:"accessor",value:1e3},material:c};class d extends l.Layer{getShaders(){const n=this.use64bitProjection()?"project64":"project32";return{vs:o,fs:a,modules:[n,"gouraud-lighting","picking"]}}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,transition:!0,accessor:"getPosition"},instanceElevations:{size:1,transition:!0,accessor:"getElevation"},instancePositions64xyLow:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getColor",defaultValue:h}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64||n.diskResolution!==t.diskResolution){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}n.vertices!==t.vertices&&this._updateVertices(n.vertices)}getGeometry(n){return new u.CylinderGeometry({radius:1,topCap:!1,bottomCap:!0,height:2,verticalAxis:"z",nradial:n,nvertical:1})}_getModel(n){return new u.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:this.getGeometry(this.props.diskResolution),isInstanced:!0,shaderCache:this.context.shaderCache}))}_updateVertices(n){if(!n)return;const{diskResolution:t}=this.props;l.log.assert(n.length>=t);const{model:e}=this.state,i=this.getGeometry(this.props.diskResolution),r=i.attributes.POSITION;let u=0;for(let e=0;e<3;e++)for(let e=0;e<=t;e++){const t=n[e]||n[0];r.value[u++]=t[0],r.value[u++]=t[1],u++}e.setProps({geometry:i})}draw({uniforms:n}){const{elevationScale:t,extruded:e,offset:l,coverage:i,radius:r,angle:u}=this.props;this.state.model.setUniforms(Object.assign({},n,{radius:r,angle:u/180*Math.PI,offset:l,extruded:e,coverage:i,elevationScale:t})).draw()}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:i}=this.props,{value:r}=n;let u=0;const{iterable:o,objectInfo:a}=Object(l.createIterable)(e);for(const n of o){a.index++;const t=i(n,a);r[u++]=s(t[0]),r[u++]=s(t[1])}}}d.layerName="ColumnLayer",d.defaultProps=f},function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1),o="#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xyLow;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\n\nvoid main(void) {\n  // Multiply out radius and clamp to limits\n  float outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = positions.xy;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  vec3 offset = positions * project_pixel_size(outerRadiusPixels);\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xyLow, offset);\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity) / 255.;\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity) / 255.;\n  \n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",a="#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\n\nvoid main(void) {\n\n  float distToCenter = length(unitPosition);\n\n  if (distToCenter > 1.0) {\n    discard;\n  } \n  if (distToCenter > innerUnitRadius) {\n    gl_FragColor = vLineColor;\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return f});const{fp64LowPart:s}=u.fp64,c=[0,0,0,255],h={radiusScale:{type:"number",min:0,value:1},radiusMinPixels:{type:"number",min:0,value:0},radiusMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},lineWidthUnits:"meters",lineWidthScale:{type:"number",min:0,value:1},lineWidthMinPixels:{type:"number",min:0,value:0},lineWidthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},stroked:!1,fp64:!1,filled:!0,getPosition:{type:"accessor",value:n=>n.position},getRadius:{type:"accessor",value:1},getFillColor:{type:"accessor",value:c},getLineColor:{type:"accessor",value:c},getLineWidth:{type:"accessor",value:1},strokeWidth:{deprecatedFor:"getLineWidth"},outline:{deprecatedFor:"stroked"},getColor:{deprecatedFor:["getFillColor","getLineColor"]}};class f extends l.Layer{getShaders(n){const t=this.use64bitProjection()?"project64":"project32";return{vs:o,fs:a,modules:[t,"picking"]}}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,transition:!0,accessor:"getPosition"},instancePositions64xyLow:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceRadius:{size:1,transition:!0,accessor:"getRadius",defaultValue:1},instanceFillColors:{size:4,transition:!0,type:r.a.UNSIGNED_BYTE,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:4,transition:!0,type:r.a.UNSIGNED_BYTE,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}}draw({uniforms:n}){const{viewport:t}=this.context,{radiusScale:e,radiusMinPixels:l,radiusMaxPixels:i,stroked:r,filled:u,lineWidthUnits:o,lineWidthScale:a,lineWidthMinPixels:s,lineWidthMaxPixels:c}=this.props,h="pixels"===o?t.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},n,{stroked:r?1:0,filled:u,radiusScale:e,radiusMinPixels:l,radiusMaxPixels:i,lineWidthScale:a*h,lineWidthMinPixels:s,lineWidthMaxPixels:c})).draw()}_getModel(n){return new u.Model(n,Object.assign(this.getShaders(),{id:this.props.id,geometry:new u.Geometry({drawMode:r.a.TRIANGLE_FAN,vertexCount:4,attributes:{positions:{size:3,value:new Float32Array([-1,-1,0,-1,1,0,1,1,0,1,-1,0])}}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:i}=this.props,{value:r}=n;let u=0;const{iterable:o,objectInfo:a}=Object(l.createIterable)(e);for(const n of o){a.index++;const t=i(n,a);r[u++]=s(t[0]),r[u++]=s(t[1])}}}f.layerName="ScatterplotLayer",f.defaultProps=h},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return r});var l=e(17),i=e(72);function r(){return!("object"===(void 0===n?"undefined":Object(l.a)(n))&&"[object process]"===String(n)&&!n.browser)||Object(i.a)()}}).call(this,e(42))},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return i});var l=e(17);function i(t){if("undefined"!=typeof window&&"object"===Object(l.a)(window.process)&&"renderer"===window.process.type)return!0;if(void 0!==n&&"object"===Object(l.a)(n.versions)&&Boolean(n.versions.electron))return!0;var e="object"===("undefined"==typeof navigator?"undefined":Object(l.a)(navigator))&&"string"==typeof navigator.userAgent&&navigator.userAgent,i=t||e;return!!(i&&i.indexOf("Electron")>=0)}}).call(this,e(42))},function(n,t,e){"use strict";function l(n,t){return(l=Object.setPrototypeOf||function(n,t){return n.__proto__=t,n})(n,t)}e.d(t,"a",function(){return l})},function(n,t,e){"use strict";e.d(t,"a",function(){return s});var l=e(2),i=e(3),r=e(7),u=e(6),o=e(8),a=e(13);var s=function(n){function t(){return Object(l.a)(this,t),Object(r.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(o.a)(t,n),Object(i.a)(t,[{key:"clone",value:function(){return(new this.constructor).copy(this).check()}},{key:"copy",value:function(n){for(var t=0;t<this.ELEMENTS;++t)this[t]=n[t];return this.check()}},{key:"set",value:function(){for(var n=0;n<this.ELEMENTS;++n)this[n]=(n<0||arguments.length<=n?void 0:arguments[n])||0;return this.check()}},{key:"fromArray",value:function(n){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=0;e<this.ELEMENTS;++e)this[e]=n[e+t];return this.check()}},{key:"toString",value:function(){return this.formatString(a.c)}},{key:"formatString",value:function(n){for(var t="",e=0;e<this.ELEMENTS;++e)t+=(e>0?", ":"")+Object(a.f)(this[e],n);return"".concat(n.printTypes?this.constructor.name:"","[").concat(t,"]")}},{key:"toArray",value:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=0;e<this.ELEMENTS;++e)n[t+e]=this[e];return n}},{key:"toFloat32Array",value:function(){return new Float32Array(this)}},{key:"equals",value:function(n){if(!n||this.length!==n.length)return!1;for(var t=0;t<this.ELEMENTS;++t)if(!Object(a.e)(this[t],n[t]))return!1;return!0}},{key:"exactEquals",value:function(n){if(!n||this.length!==n.length)return!1;for(var t=0;t<this.ELEMENTS;++t)if(this[t]!==n[t])return!1;return!0}},{key:"negate",value:function(){for(var n=0;n<this.ELEMENTS;++n)this[n]=-this[n];return this.check()}},{key:"inverse",value:function(){for(var n=0;n<this.ELEMENTS;++n)this[n]=1/this[n];return this.check()}},{key:"lerp",value:function(n,t,e){void 0===e&&(e=t,t=n,n=this);for(var l=0;l<this.ELEMENTS;++l){var i=n[l];this[l]=i+e*(t[l]-i)}return this.check()}},{key:"min",value:function(n){for(var t=0;t<this.ELEMENTS;++t)this[t]=Math.min(n[t],this[t]);return this.check()}},{key:"max",value:function(n){for(var t=0;t<this.ELEMENTS;++t)this[t]=Math.max(n[t],this[t]);return this.check()}},{key:"clamp",value:function(n,t){for(var e=0;e<this.ELEMENTS;++e)this[e]=Math.min(Math.max(this[e],n[e]),t[e]);return this.check()}},{key:"validate",value:function(){for(var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this,t=n&&n.length===this.ELEMENTS,e=0;e<this.ELEMENTS;++e)t=t&&Number.isFinite(n[e]);return t}},{key:"check",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this;if(a.c.debug&&!this.validate(n))throw new Error("math.gl: ".concat(this.constructor.name," some fields set to invalid numbers'"));return this}},{key:"sub",value:function(n){return this.subtract(n)}},{key:"setScalar",value:function(n){for(var t=0;t<this.ELEMENTS;++t)this[t]=n;return this.check()}},{key:"addScalar",value:function(n){for(var t=0;t<this.ELEMENTS;++t)this[t]+=n;return this.check()}},{key:"subScalar",value:function(n){return this.addScalar(-n)}},{key:"multiplyScalar",value:function(n){return this.scale(n)}},{key:"divideScalar",value:function(n){return this.scale(1/n)}},{key:"clampScalar",value:function(n,t){for(var e=0;e<this.ELEMENTS;++e)this[e]=Math.min(Math.max(this[e],n),t);return this.check()}}]),t}(function(n){function t(){var t=Reflect.construct(n,Array.from(arguments));return Object.setPrototypeOf(t,Object.getPrototypeOf(this)),t}return t.prototype=Object.create(n.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf?Object.setPrototypeOf(t,n):t.__proto__=n,t}(Array))},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return h});var l=e(28),i=e.n(l),r=e(39),u=e(91),o=e.n(u),a=e(92),s=e.n(a),c=e(93);function h(n,t){return f.apply(this,arguments)}function f(){return(f=Object(r.a)(i.a.mark(function t(e,l){var r,u,a,h,f;return i.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=s.a.promisify(o.a),u=Object(c.a)(e),a=u.mimeType,h=e instanceof n?e:n.from(e),t.next=5,r(h,a);case 5:return f=t.sent,t.abrupt("return",{width:f.shape[0],height:f.shape[1],data:f.data});case 7:case"end":return t.stop()}},t)}))).apply(this,arguments)}}).call(this,e(60).Buffer)},function(n,t,e){"use strict";(function(n){e.d(t,"b",function(){return A}),e.d(t,"c",function(){return C}),e.d(t,"a",function(){return j});var l=e(56),i=e(9),r=e.n(i),u=e(15),o=e(62),a=e(63),s=e(44),c=e.n(s),h=e(81),f=e.n(h),d=e(82),p=e.n(d),g=e(96),v=e.n(g),m=e(64),_=e(53),b=e(65),y=e(77),x={dataType:"arrayBuffer"},w=Boolean(c.a&&c.a.readFile),E=function(n){return n.startsWith("data:")},P=function(n){return n.startsWith("http:")||n.startsWith("https:")},O=function(){function n(t){Object(o.a)(this,n),this.reponse=t}return Object(a.a)(n,[{key:"get",value:function(n){if(this.response.httpResponse)return this.response.httpResponse.getHeaders()[n];switch(n){case"Content-Length":return this._getContentLength()}}},{key:"_getContentLength",value:function(){return this._contentLength}}]),n}(),S=function(){function n(t,e){Object(o.a)(this,n),this.url=t,this.options=e,this.bodyUsed=!1,this._headers=null}return Object(a.a)(n,[{key:"arrayBuffer",value:function(){var n=Object(u.a)(r.a.mark(function n(){return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return this.bodyUsed=!0,n.abrupt("return",L(this.url,this.options));case 2:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"text",value:function(){var n=Object(u.a)(r.a.mark(function n(){var t,e;return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.arrayBuffer();case 2:return t=n.sent,e=new _.TextDecoder,n.abrupt("return",e.decode(t));case 5:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"json",value:function(){var n=Object(u.a)(r.a.mark(function n(){var t;return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.text();case 2:return t=n.sent,n.abrupt("return",JSON.parse(t));case 4:case"end":return n.stop()}},n,this)}));return function(){return n.apply(this,arguments)}}()},{key:"_getHeaders",value:function(){return P(this.url)?new O(this):E(this.url)?{"Content-Length":this.url.length}:P(this.repsonse.url)?{}:{"Content-Length":c.a.statSync(this.response.url).size}}},{key:"headers",get:function(){this._headers=this._headers||this._getHeaders()}},{key:"body",get:function(){var n=this.url,t=this.options;return this.bodyUsed=!0,j(n,t)}}]),n}();function A(n,t){return T.apply(this,arguments)}function T(){return(T=Object(u.a)(r.a.mark(function n(t,e){return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",new S(t,e));case 1:case"end":return n.stop()}},n)}))).apply(this,arguments)}function C(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(e=I(e),E(t))return Object(y.a)(t);if(!w)return null;var l=c.a.readFileSync(t,e,function(){});return l instanceof n?Object(m.a)(l):l}function L(n){return M.apply(this,arguments)}function M(){return(M=Object(u.a)(r.a.mark(function t(e){var i,u,o,a=arguments;return r.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(i=I(i=a.length>1&&void 0!==a[1]?a[1]:{}),!E(e)){t.next=4;break}return t.abrupt("return",Promise.resolve(Object(y.a)(e)));case 4:if(!P(e)){t.next=6;break}return t.abrupt("return",new Promise(function(n,t){i=Object(l.a)({},new URL(e),i),(e.startsWith("https:")?p.a.request:f.a.request)(e,function(e){return Object(b.a)(e).then(n,t)})}));case 6:return u=v.a.promisify(c.a.readFile),t.next=9,u(e,i);case 9:return o=t.sent,t.abrupt("return",o instanceof n?Object(m.a)(o):o);case 11:case"end":return t.stop()}},t)}))).apply(this,arguments)}function j(n,t){return R.apply(this,arguments)}function R(){return(R=Object(u.a)(r.a.mark(function n(t,e){return r.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!E(t)){n.next=2;break}return n.abrupt("return",Object(y.a)(t));case 2:if(P(t)){n.next=4;break}return n.abrupt("return",c.a.createReadStream(t,e));case 4:return n.abrupt("return",new Promise(function(n,i){e=Object(l.a)({},new URL(t),e),(t.startsWith("https:")?p.a.request:f.a.request)(t,function(t){return n(t)})}));case 5:case"end":return n.stop()}},n)}))).apply(this,arguments)}function I(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(n=Object.assign({},x,n)).responseType=n.responseType||n.dataType,c.a&&(n.encoding=n.encoding||("text"===n.dataType?"utf8":null)),n}}).call(this,e(60).Buffer)},function(n,t,e){"use strict";(function(n){function l(t){var e,l,i=t.indexOf(",");return";base64"===t.slice(i-7,i)?(e=new n(t.slice(i+1),"base64"),l=t.slice(5,i-7).trim()):(e=new n(decodeURIComponent(t.slice(i+1))),l=t.slice(5,i).trim()),l?";"===l[0]&&(l="text/plain".concat(l)):l="text/plain;charset=US-ASCII",{buffer:e,mimeType:l}}e.d(t,"a",function(){return l})}).call(this,e(60).Buffer)},function(n,t,e){"use strict";var l=e(0);t.a={enable:function(n,t){return n(Object(l.a)({},t,!0))},disable:function(n,t){return n(Object(l.a)({},t,!1))},pixelStorei:function(n,t,e){return n(Object(l.a)({},t,e))},hint:function(n,t,e){return n(Object(l.a)({},t,e))},bindFramebuffer:function(n,t,e){var i;switch(t){case 36160:return n((i={},Object(l.a)(i,36006,e),Object(l.a)(i,36010,e),i));case 36009:return n(Object(l.a)({},36006,e));case 36008:return n(Object(l.a)({},36010,e));default:return null}},blendColor:function(n,t,e,i,r){return n(Object(l.a)({},32773,new Float32Array([t,e,i,r])))},blendEquation:function(n,t){var e;return n((e={},Object(l.a)(e,32777,t),Object(l.a)(e,34877,t),e))},blendEquationSeparate:function(n,t,e){var i;return n((i={},Object(l.a)(i,32777,t),Object(l.a)(i,34877,e),i))},blendFunc:function(n,t,e){var i;return n((i={},Object(l.a)(i,32969,t),Object(l.a)(i,32968,e),Object(l.a)(i,32971,t),Object(l.a)(i,32970,e),i))},blendFuncSeparate:function(n,t,e,i,r){var u;return n((u={},Object(l.a)(u,32969,t),Object(l.a)(u,32968,e),Object(l.a)(u,32971,i),Object(l.a)(u,32970,r),u))},clearColor:function(n,t,e,i,r){return n(Object(l.a)({},3106,new Float32Array([t,e,i,r])))},clearDepth:function(n,t){return n(Object(l.a)({},2931,t))},clearStencil:function(n,t){return n(Object(l.a)({},2961,t))},colorMask:function(n,t,e,i,r){return n(Object(l.a)({},3107,[t,e,i,r]))},cullFace:function(n,t){return n(Object(l.a)({},2885,t))},depthFunc:function(n,t){return n(Object(l.a)({},2932,t))},depthRange:function(n,t,e){return n(Object(l.a)({},2928,new Float32Array([t,e])))},depthMask:function(n,t){return n(Object(l.a)({},2930,t))},frontFace:function(n,t){return n(Object(l.a)({},2886,t))},lineWidth:function(n,t){return n(Object(l.a)({},2849,t))},polygonOffset:function(n,t,e){var i;return n((i={},Object(l.a)(i,32824,t),Object(l.a)(i,10752,e),i))},sampleCoverage:function(n,t,e){var i;return n((i={},Object(l.a)(i,32938,t),Object(l.a)(i,32939,e),i))},scissor:function(n,t,e,i,r){return n(Object(l.a)({},3088,new Int32Array([t,e,i,r])))},stencilMask:function(n,t){var e;return n((e={},Object(l.a)(e,2968,t),Object(l.a)(e,36005,t),e))},stencilMaskSeparate:function(n,t,e){return n(Object(l.a)({},1028===t?2968:36005,e))},stencilFunc:function(n,t,e,i){var r;return n((r={},Object(l.a)(r,2962,t),Object(l.a)(r,2967,e),Object(l.a)(r,2963,i),Object(l.a)(r,34816,t),Object(l.a)(r,36003,e),Object(l.a)(r,36004,i),r))},stencilFuncSeparate:function(n,t,e,i,r){var u;return n((u={},Object(l.a)(u,1028===t?2962:34816,e),Object(l.a)(u,1028===t?2967:36003,i),Object(l.a)(u,1028===t?2963:36004,r),u))},stencilOp:function(n,t,e,i){var r;return n((r={},Object(l.a)(r,2964,t),Object(l.a)(r,2965,e),Object(l.a)(r,2966,i),Object(l.a)(r,34817,t),Object(l.a)(r,34818,e),Object(l.a)(r,34819,i),r))},stencilOpSeparate:function(n,t,e,i,r){var u;return n((u={},Object(l.a)(u,1028===t?2964:34817,e),Object(l.a)(u,1028===t?2965:34818,i),Object(l.a)(u,1028===t?2966:34819,r),u))},viewport:function(n,t,e,i,r){return n(Object(l.a)({},2978,new Int32Array([t,e,i,r])))}}},function(n,t,e){"use strict";e.d(t,"a",function(){return c});var l=e(2),i=e(3),r=e(7),u=e(6),o=e(8),a=e(52),s=e(22),c=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return Object(l.a)(this,t),n=Object(r.a)(this,Object(u.a)(t).call(this)),Array.isArray(e)&&1===arguments.length?n.copy(e):n.set(e,i),n}return Object(o.a)(t,n),Object(i.a)(t,[{key:"cross",value:function(n){return s.b(this,this,n),this.check()}},{key:"horizontalAngle",value:function(){return Math.atan2(this.y,this.x)}},{key:"verticalAngle",value:function(){return Math.atan2(this.x,this.y)}},{key:"operation",value:function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),l=1;l<t;l++)e[l-1]=arguments[l];return n.apply(void 0,[this,this].concat(e)),this.check()}},{key:"ELEMENTS",get:function(){return 2}}]),t}(a.a)},function(n,t,e){"use strict";(function(n){function l(t){return n.isBuffer(t)?new Uint8Array(t).buffer:t}e.d(t,"a",function(){return l})}).call(this,e(60).Buffer)},function(n,t){},function(n,t){},,function(n,t,e){"use strict";e.d(t,"a",function(){return r});var l=e(1),i=e(69);class r extends i.a{getGeometry(n){return new l.CubeGeometry}draw({uniforms:n}){const{elevationScale:t,extruded:e,offset:l,coverage:i,cellSize:r,angle:u}=this.props;this.state.model.setUniforms(Object.assign({},n,{radius:r/2,angle:u,offset:l,extruded:e,coverage:i,elevationScale:t})).draw()}}r.layerName="GridCellLayer",r.defaultProps={cellSize:{type:"number",min:0,value:1e3},offset:{type:"array",min:0,value:[1,1]}}},function(n,t,e){"use strict";e.d(t,"a",function(){return c});var l=e(1),i=e(4),r=e(51),u=e(46),o=e(54);const a=new l.PhongMaterial,s={stroked:!0,filled:!0,extruded:!1,elevationScale:1,wireframe:!1,lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,lineJointRounded:!1,lineMiterLimit:4,lineDashJustified:!1,fp64:!1,getPolygon:{type:"accessor",value:n=>n.polygon},getFillColor:{type:"accessor",value:[0,0,0,255]},getLineColor:{type:"accessor",value:[0,0,0,255]},getLineWidth:{type:"accessor",value:1},getLineDashArray:{type:"accessor",value:[0,0]},getElevation:{type:"accessor",value:1e3},material:a};class c extends i.CompositeLayer{initializeState(){this.state={paths:[]}}updateState({oldProps:n,props:t,changeFlags:e}){(e.dataChanged||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPolygon))&&(this.state.paths=this._getPaths(t))}getPickingInfo({info:n}){return Object.assign(n,{object:n.object&&n.object.object||n.object})}_getPaths({data:n,getPolygon:t,positionFormat:e}){const l=[],r="XY"===e?2:3,{iterable:u,objectInfo:a}=Object(i.createIterable)(n);for(const n of u){a.index++;const{positions:e,holeIndices:i}=o.c(t(n,a),r);if(i)for(let t=0;t<=i.length;t++){const r=e.subarray(i[t-1]||0,i[t]||e.length);l.push({path:r,object:n})}else l.push({path:e,object:n})}return l}_getAccessor(n){return"function"==typeof n?t=>n(t.object):n}renderLayers(){const{data:n,stroked:t,filled:e,extruded:l,wireframe:i,elevationScale:o,transitions:a}=this.props,{lineWidthUnits:s,lineWidthScale:c,lineWidthMinPixels:h,lineWidthMaxPixels:f,lineJointRounded:d,lineMiterLimit:p,lineDashJustified:g,fp64:v}=this.props,{getFillColor:m,getLineColor:_,getLineWidth:b,getLineDashArray:y,getElevation:x,getPolygon:w,updateTriggers:E,material:P}=this.props,{paths:O}=this.state,S=this.getSubLayerClass("fill",r.a),A=this.getSubLayerClass("stroke",u.a),T=this.shouldRenderSubLayer("fill",O)&&new S({extruded:l,elevationScale:o,fp64:v,filled:e,wireframe:i,getElevation:x,getFillColor:m,getLineColor:_,material:P,transitions:a},this.getSubLayerProps({id:"fill",updateTriggers:{getPolygon:E.getPolygon,getElevation:E.getElevation,getFillColor:E.getFillColor,getLineColor:E.getLineColor}}),{data:n,getPolygon:w});return[!l&&T,!l&&t&&this.shouldRenderSubLayer("stroke",O)&&new A({fp64:v,widthUnits:s,widthScale:c,widthMinPixels:h,widthMaxPixels:f,rounded:d,miterLimit:p,dashJustified:g,transitions:a&&{getWidth:a.getLineWidth,getColor:a.getLineColor,getPath:a.getPolygon},getColor:this._getAccessor(_),getWidth:this._getAccessor(b),getDashArray:this._getAccessor(y)},this.getSubLayerProps({id:"stroke",updateTriggers:{getWidth:E.getLineWidth,getColor:E.getLineColor,getDashArray:E.getLineDashArray}}),{data:O,getPath:n=>n.path}),l&&T]}}c.layerName="PolygonLayer",c.defaultProps=s},function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1),o="#define SHADER_NAME arc-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\nattribute vec4 instancePositions;\nattribute vec4 instancePositions64Low;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\nattribute float instanceHeights;\nattribute float instanceTilts;\n\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\n\nvarying vec4 vColor;\n\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\n\n  vec2 x = mix(source, target, ratio);\n  vec2 center = mix(source, target, 0.5);\n\n  float dSourceCenter = distance(source, center);\n  float dXCenter = distance(x, center);\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  vec2 offset_screenspace = dir_screenspace * offset_direction * width / 2.0;\n  vec2 offset_clipspace = project_pixel_size_to_clipspace(offset_screenspace);\n\n  return offset_clipspace;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\n  float vertexHeight = sqrt(max(0.0, paraboloid(source, target, segmentRatio))) * instanceHeights;\n\n  float tiltAngle = radians(instanceTilts);\n  vec2 tiltDirection = normalize(target - source);\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * vertexHeight * sin(tiltAngle);\n\n  return vec3(\n    mix(source, target, segmentRatio) + tilt,\n    vertexHeight * cos(tiltAngle)\n  );\n}\n\nvoid main(void) {\n  vec2 source = project_position(vec3(instancePositions.xy, 0.0), instancePositions64Low.xy).xy;\n  vec2 target = project_position(vec3(instancePositions.zw, 0.0), instancePositions64Low.zw).xy;\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\n\n  vec3 currPos = getPos(source, target, segmentRatio);\n  vec3 nextPos = getPos(source, target, nextSegmentRatio);\n  vec4 curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\n  vec4 next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels);\n  gl_Position = curr + vec4(offset, 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio) / 255.;\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",a="#define SHADER_NAME arc-layer-vertex-shader-64\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\n\nattribute vec4 instancePositions;\nattribute vec4 instancePositions64Low;\n\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\n\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\n\nvarying vec4 vColor;\n\nvec2 paraboloid_fp64(vec2 source[2], vec2 target[2], float ratio) {\n\n  vec2 x[2];\n  vec2_mix_fp64(source, target, ratio, x);\n  vec2 center[2];\n  vec2_mix_fp64(source, target, 0.5, center);\n\n  vec2 dSourceCenter = vec2_distance_fp64(source, center);\n  vec2 dXCenter = vec2_distance_fp64(x, center);\n  return mul_fp64(sum_fp64(dSourceCenter, dXCenter), sub_fp64(dSourceCenter, dXCenter));\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  vec2 offset_screenspace = dir_screenspace * offset_direction * width / 2.0;\n  vec2 offset_clipspace = project_pixel_size_to_clipspace(offset_screenspace);\n\n  return offset_clipspace;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvoid get_pos_fp64(vec2 source[2], vec2 target[2], float segmentRatio, out vec2 position[4]) {\n\n  vec2 vertex_height = paraboloid_fp64(source, target, segmentRatio);\n\n  vec2 position_temp[2];\n\n  vec2_mix_fp64(source, target, segmentRatio, position_temp);\n\n  position[0] = position_temp[0];\n  position[1] = position_temp[1];\n\n  if (vertex_height.x < 0.0 || (vertex_height.x == 0.0 && vertex_height.y <= 0.0)) {\n    vertex_height = vec2(0.0, 0.0);\n  }\n\n  position[2] = sqrt_fp64(vertex_height);\n  position[3] = vec2(1.0, 0.0);\n}\n\nvoid main(void) {\n  vec2 projected_source_coord[2];\n  vec2 projected_target_coord[2];\n\n  project_position_fp64(instancePositions.xy, instancePositions64Low.xy, projected_source_coord);\n  project_position_fp64(instancePositions.zw, instancePositions64Low.zw, projected_target_coord);\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\n\n  vec2 curr_pos_modelspace[4];\n\n  get_pos_fp64(projected_source_coord, projected_target_coord, segmentRatio,\n    curr_pos_modelspace);\n\n  vec2 next_pos_modelspace[4];\n\n  get_pos_fp64(projected_source_coord, projected_target_coord, nextSegmentRatio,\n    next_pos_modelspace);\n\n  vec4 curr_pos_clipspace = project_common_position_to_clipspace_fp64(curr_pos_modelspace);\n  vec4 next_pos_clipspace = project_common_position_to_clipspace_fp64(next_pos_modelspace);\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale),\n    widthMinPixels, widthMaxPixels\n  );\n\n  vec2 offset = getExtrusionOffset(next_pos_clipspace.xy - curr_pos_clipspace.xy, positions.y, widthPixels);\n\n  gl_Position = curr_pos_clipspace + vec4(offset, 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio) / 255.;\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",s="#define SHADER_NAME arc-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return d});const{fp64LowPart:c}=u.fp64,h=[0,0,0,255],f={fp64:!1,getSourcePosition:{type:"accessor",value:n=>n.sourcePosition},getTargetPosition:{type:"accessor",value:n=>n.targetPosition},getSourceColor:{type:"accessor",value:h},getTargetColor:{type:"accessor",value:h},getWidth:{type:"accessor",value:1},getHeight:{type:"accessor",value:1},getTilt:{type:"accessor",value:0},widthUnits:"pixels",widthScale:{type:"number",value:1,min:0},widthMinPixels:{type:"number",value:0,min:0},widthMaxPixels:{type:"number",value:Number.MAX_SAFE_INTEGER,min:0},getStrokeWidth:{deprecatedFor:"getWidth"}};class d extends l.Layer{getShaders(){return this.use64bitProjection()?{vs:a,fs:s,modules:["project64","picking"]}:{vs:o,fs:s,modules:["picking"]}}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:4,transition:!0,accessor:["getSourcePosition","getTargetPosition"],update:this.calculateInstancePositions},instancePositions64Low:{size:4,accessor:["getSourcePosition","getTargetPosition"],update:this.calculateInstancePositions64Low},instanceSourceColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getSourceColor",defaultValue:h},instanceTargetColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getTargetColor",defaultValue:h},instanceWidths:{size:1,transition:!0,accessor:"getWidth",defaultValue:1},instanceHeights:{size:1,transition:!0,accessor:"getHeight",defaultValue:1},instanceTilts:{size:1,transition:!0,accessor:"getTilt",defaultValue:0}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}}draw({uniforms:n}){const{viewport:t}=this.context,{widthUnits:e,widthScale:l,widthMinPixels:i,widthMaxPixels:r}=this.props,u="pixels"===e?t.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},n,{widthScale:l*u,widthMinPixels:i,widthMaxPixels:r})).draw()}_getModel(n){let t=[];for(let n=0;n<50;n++)t=t.concat([n,-1,0,n,1,0]);const e=new u.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new u.Geometry({drawMode:r.a.TRIANGLE_STRIP,attributes:{positions:new Float32Array(t)}}),isInstanced:!0,shaderCache:this.context.shaderCache}));return e.setUniforms({numSegments:50}),e}calculateInstancePositions(n){const{data:t,getSourcePosition:e,getTargetPosition:i}=this.props,{value:r}=n;let u=0;const{iterable:o,objectInfo:a}=Object(l.createIterable)(t);for(const n of o){a.index++;const t=e(n,a),l=i(n,a);r[u++]=t[0],r[u++]=t[1],r[u++]=l[0],r[u++]=l[1]}}calculateInstancePositions64Low(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(4));const{data:e,getSourcePosition:i,getTargetPosition:r}=this.props,{value:u}=n;let o=0;const{iterable:a,objectInfo:s}=Object(l.createIterable)(e);for(const n of a){s.index++;const t=i(n,s),e=r(n,s);u[o++]=c(t[0]),u[o++]=c(t[1]),u[o++]=c(e[0]),u[o++]=c(e[1])}}}d.layerName="ArcLayer",d.defaultProps=f},function(n,t,e){"use strict";var l=e(4),i=e(5),r=e.n(i),u=e(1),o="#define SHADER_NAME line-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceTargetPositions;\nattribute vec4 instanceSourceTargetPositions64xyLow;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\n\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\n\nvarying vec4 vColor;\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  vec2 offset_screenspace = dir_screenspace * offset_direction * width / 2.0;\n  vec2 offset_clipspace = project_pixel_size_to_clipspace(offset_screenspace);\n\n  return offset_clipspace;\n}\n\nvoid main(void) {\n  // Position\n  vec4 source = project_position_to_clipspace(instanceSourcePositions, instanceSourceTargetPositions64xyLow.xy, vec3(0.));\n  vec4 target = project_position_to_clipspace(instanceTargetPositions, instanceSourceTargetPositions64xyLow.zw, vec3(0.));\n\n  // Multiply out width and clamp to limits\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale),\n    widthMinPixels, widthMaxPixels\n  );\n  \n  // linear interpolation of source & target to pick right coord\n  float segmentIndex = positions.x;\n  vec4 p = mix(source, target, segmentIndex);\n\n  // extrude\n  vec2 offset = getExtrusionOffset(target.xy - source.xy, positions.y, widthPixels);\n  gl_Position = p + vec4(offset, 0.0, 0.0);\n\n  // Color\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity) / 255.;\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n",a="#define SHADER_NAME line-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_FragColor = vColor;\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";e.d(t,"a",function(){return h});const{fp64LowPart:s}=u.fp64,c={fp64:!1,getSourcePosition:{type:"accessor",value:n=>n.sourcePosition},getTargetPosition:{type:"accessor",value:n=>n.targetPosition},getColor:{type:"accessor",value:[0,0,0,255]},getWidth:{type:"accessor",value:1},widthUnits:"pixels",widthScale:{type:"number",value:1,min:0},widthMinPixels:{type:"number",value:0,min:0},widthMaxPixels:{type:"number",value:Number.MAX_SAFE_INTEGER,min:0},getStrokeWidth:{deprecatedFor:"getWidth"}};class h extends l.Layer{getShaders(){const n=this.use64bitProjection()?"project64":"project32";return{vs:o,fs:a,modules:[n,"picking"]}}initializeState(){this.getAttributeManager().addInstanced({instanceSourcePositions:{size:3,transition:!0,accessor:"getSourcePosition"},instanceTargetPositions:{size:3,transition:!0,accessor:"getTargetPosition"},instanceSourceTargetPositions64xyLow:{size:4,accessor:["getSourcePosition","getTargetPosition"],update:this.calculateInstanceSourceTargetPositions64xyLow},instanceColors:{size:4,type:r.a.UNSIGNED_BYTE,transition:!0,accessor:"getColor",defaultValue:[0,0,0,255]},instanceWidths:{size:1,transition:!0,accessor:"getWidth",defaultValue:1}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete(),this.setState({model:this._getModel(n)}),this.getAttributeManager().invalidateAll()}}draw({uniforms:n}){const{viewport:t}=this.context,{widthUnits:e,widthScale:l,widthMinPixels:i,widthMaxPixels:r}=this.props,u="pixels"===e?t.distanceScales.metersPerPixel[2]:1;this.state.model.setUniforms(Object.assign({},n,{widthScale:l*u,widthMinPixels:i,widthMaxPixels:r})).draw()}_getModel(n){return new u.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new u.Geometry({drawMode:r.a.TRIANGLE_STRIP,attributes:{positions:new Float32Array([0,-1,0,0,1,0,1,-1,0,1,1,0])}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}calculateInstanceSourceTargetPositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(4));const{data:e,getSourcePosition:i,getTargetPosition:r}=this.props,{value:u}=n;let o=0;const{iterable:a,objectInfo:c}=Object(l.createIterable)(e);for(const n of a){c.index++;const t=i(n,c),e=r(n,c);u[o++]=s(t[0]),u[o++]=s(t[1]),u[o++]=s(e[0]),u[o++]=s(e[1])}}}h.layerName="LineLayer",h.defaultProps=c},function(n,t,e){"use strict";var l=e(4),i=e(70),r=e(46),u=e(1),o=e(51);function a(n,t){if(!n)throw new Error(`deck.gl: ${t}`)}function s(n,t,e){const{type:l,coordinates:i}=n,{pointFeatures:r,lineFeatures:u,polygonFeatures:o,polygonOutlineFeatures:s}=t;switch(function(n,t){let e=h[n];a(e,`Unknown GeoJSON type ${n}`);for(;t&&--e>0;)t=t[0];a(t&&Number.isFinite(t[0]),`${n} coordinates are malformed`)}(l,i),l){case"Point":r.push({geometry:n,sourceFeature:e});break;case"MultiPoint":i.forEach(n=>{r.push({geometry:{type:"Point",coordinates:n},sourceFeature:e})});break;case"LineString":u.push({geometry:n,sourceFeature:e});break;case"MultiLineString":i.forEach(n=>{u.push({geometry:{type:"LineString",coordinates:n},sourceFeature:e})});break;case"Polygon":o.push({geometry:n,sourceFeature:e}),i.forEach(n=>{s.push({geometry:{type:"LineString",coordinates:n},sourceFeature:e})});break;case"MultiPolygon":i.forEach(n=>{o.push({geometry:{type:"Polygon",coordinates:n},sourceFeature:e}),n.forEach(n=>{s.push({geometry:{type:"LineString",coordinates:n},sourceFeature:e})})})}}function c(n){return n.sourceFeature.feature}const h={Point:1,MultiPoint:2,LineString:2,MultiLineString:3,Polygon:3,MultiPolygon:4};e.d(t,"a",function(){return v});const f=new u.PhongMaterial,d={stroked:!0,filled:!0,extruded:!1,wireframe:!1,lineWidthUnits:"meters",lineWidthScale:1,lineWidthMinPixels:0,lineWidthMaxPixels:Number.MAX_SAFE_INTEGER,lineJointRounded:!1,lineMiterLimit:4,elevationScale:1,pointRadiusScale:1,pointRadiusMinPixels:0,pointRadiusMaxPixels:Number.MAX_SAFE_INTEGER,lineDashJustified:!1,fp64:!1,getLineColor:{type:"accessor",value:[0,0,0,255]},getFillColor:{type:"accessor",value:[0,0,0,255]},getRadius:{type:"accessor",value:1},getLineWidth:{type:"accessor",value:1},getLineDashArray:{type:"accessor",value:[0,0]},getElevation:{type:"accessor",value:1e3},material:f};function p(n){return n.geometry.coordinates}function g(n){return"function"!=typeof n?n:t=>n(c(t))}class v extends l.CompositeLayer{initializeState(){this.state={features:{}}}updateState({oldProps:n,props:t,changeFlags:e}){if(e.dataChanged){const{data:n}=t,e=function(n){if(Array.isArray(n))return n;switch(a(n.type,"GeoJSON does not have type"),n.type){case"Feature":return[n];case"FeatureCollection":return a(Array.isArray(n.features),"GeoJSON does not have features array"),n.features;default:return[{geometry:n}]}}(n);this.state.features=function(n){const t={pointFeatures:[],lineFeatures:[],polygonFeatures:[],polygonOutlineFeatures:[]};for(let e=0;e<n.length;e++){const l=n[e];a(l&&l.geometry,"GeoJSON does not have geometry");const{geometry:i}=l,r={feature:l,index:e};if("GeometryCollection"===i.type){a(Array.isArray(i.geometries),"GeoJSON does not have geometries array");const{geometries:n}=i;for(let e=0;e<n.length;e++)s(n[e],t,r)}else s(i,t,r)}return t}(e)}}getPickingInfo({info:n,sourceLayer:t}){return Object.assign(n,{object:n.object?c(n.object):n.object,index:n.object?(e=n.object,e.sourceFeature.index):n.index});var e}renderLayers(){const{features:n}=this.state,{pointFeatures:t,lineFeatures:e,polygonFeatures:l,polygonOutlineFeatures:u}=n,{stroked:a,filled:s,extruded:c,wireframe:h,material:f,transitions:d}=this.props,{lineWidthUnits:v,lineWidthScale:m,lineWidthMinPixels:_,lineWidthMaxPixels:b,lineJointRounded:y,lineMiterLimit:x,pointRadiusScale:w,pointRadiusMinPixels:E,pointRadiusMaxPixels:P,elevationScale:O,lineDashJustified:S,fp64:A}=this.props,{getLineColor:T,getFillColor:C,getRadius:L,getLineWidth:M,getLineDashArray:j,getElevation:R,updateTriggers:I}=this.props,k=this.getSubLayerClass("polygons-fill",o.a),F=this.getSubLayerClass("polygons-stroke",r.a),N=this.getSubLayerClass("line-strings",r.a),D=this.getSubLayerClass("points",i.a),B=this.shouldRenderSubLayer("polygons-fill",l)&&new k({fp64:A,extruded:c,elevationScale:O,filled:s,wireframe:h,material:f,getElevation:g(R),getFillColor:g(C),getLineColor:g(T),transitions:d&&{getPolygon:d.geometry,getElevation:d.getElevation,getFillColor:d.getFillColor,getLineColor:d.getLineColor}},this.getSubLayerProps({id:"polygons-fill",updateTriggers:{getElevation:I.getElevation,getFillColor:I.getFillColor,getLineColor:I.getLineColor}}),{data:l,getPolygon:p});return[!c&&B,!c&&a&&this.shouldRenderSubLayer("polygons-stroke",u)&&new F({fp64:A,widthUnits:v,widthScale:m,widthMinPixels:_,widthMaxPixels:b,rounded:y,miterLimit:x,dashJustified:S,getColor:g(T),getWidth:g(M),getDashArray:g(j),transitions:d&&{getPath:d.geometry,getColor:d.getLineColor,getWidth:d.getLineWidth}},this.getSubLayerProps({id:"polygons-stroke",updateTriggers:{getColor:I.getLineColor,getWidth:I.getLineWidth,getDashArray:I.getLineDashArray}}),{data:u,getPath:p}),this.shouldRenderSubLayer("linestrings",e)&&new N({fp64:A,widthUnits:v,widthScale:m,widthMinPixels:_,widthMaxPixels:b,rounded:y,miterLimit:x,dashJustified:S,getColor:g(T),getWidth:g(M),getDashArray:g(j),transitions:d&&{getPath:d.geometry,getColor:d.getLineColor,getWidth:d.getLineWidth}},this.getSubLayerProps({id:"line-strings",updateTriggers:{getColor:I.getLineColor,getWidth:I.getLineWidth,getDashArray:I.getLineDashArray}}),{data:e,getPath:p}),this.shouldRenderSubLayer("points",t)&&new D({fp64:A,stroked:a,filled:s,radiusScale:w,radiusMinPixels:E,radiusMaxPixels:P,lineWidthUnits:v,lineWidthScale:m,lineWidthMinPixels:_,lineWidthMaxPixels:b,getFillColor:g(C),getLineColor:g(T),getRadius:g(L),getLineWidth:g(M),transitions:d&&{getPosition:d.geometry,getFillColor:d.getFillColor,getLineColor:d.getLineColor,getRadius:d.getRadius,getLineWidth:d.getLineWidth}},this.getSubLayerProps({id:"points",updateTriggers:{getFillColor:I.getFillColor,getLineColor:I.getLineColor,getRadius:I.getRadius,getLineWidth:I.getLineWidth}}),{data:t,getPosition:p}),c&&B]}}v.layerName="GeoJsonLayer",v.defaultProps=d},function(n,t,e){"use strict";(function(n){var l=e(17);t.a="undefined"!=typeof window&&"object"===Object(l.a)(window.process)&&"renderer"===window.process.type||!(void 0===n||"object"!==Object(l.a)(n.versions)||!Boolean(n.versions.electron))||"object"===("undefined"==typeof navigator?"undefined":Object(l.a)(navigator))&&"string"==typeof navigator.userAgent&&navigator.userAgent.indexOf("Electron")>=0}).call(this,e(42))},function(n,t,e){"use strict";(function(n){e.d(t,"a",function(){return c});var l=e(0),i=e(18),r=e.n(i),u=e(50);const o={container:r.a.object,gl:r.a.object,mapboxApiAccessToken:r.a.string,attributionControl:r.a.bool,preserveDrawingBuffer:r.a.bool,reuseMaps:r.a.bool,transformRequest:r.a.func,mapOptions:r.a.object,mapStyle:r.a.oneOfType([r.a.string,r.a.object]),visible:r.a.bool,asyncRender:r.a.bool,onLoad:r.a.func,onError:r.a.func,width:r.a.number,height:r.a.number,viewState:r.a.object,longitude:r.a.number,latitude:r.a.number,zoom:r.a.number,bearing:r.a.number,pitch:r.a.number,altitude:r.a.number},a={container:u.a.body,mapboxApiAccessToken:function(){let t=null;if("undefined"!=typeof window&&window.location){const n=window.location.search.match(/access_token=([^&\/]*)/);t=n&&n[1]}t||void 0===n||(t=t||n.env.MapboxAccessToken||n.env.REACT_APP_MAPBOX_ACCESS_TOKEN);return t||"no-token"}(),preserveDrawingBuffer:!1,attributionControl:!0,reuseMaps:!1,mapOptions:{},mapStyle:"mapbox://styles/mapbox/light-v8",visible:!0,asyncRender:!1,onLoad:function(){},onError:function(n){n&&console.error(n.error)},width:0,height:0,longitude:0,latitude:0,zoom:0,bearing:0,pitch:0};function s(n,t="component"){n.debug&&r.a.checkPropTypes(o,n,"prop",t)}class c{constructor(n){if(Object(l.a)(this,"mapboxgl",void 0),Object(l.a)(this,"props",a),Object(l.a)(this,"_map",null),Object(l.a)(this,"width",0),Object(l.a)(this,"height",0),Object(l.a)(this,"_fireLoadEvent",()=>{this.props.onLoad({type:"load",target:this._map})}),!n.mapboxgl)throw new Error("Mapbox not available");this.mapboxgl=n.mapboxgl,c.initialized||(c.initialized=!0,this._checkStyleSheet(this.mapboxgl.version)),this._initialize(n)}finalize(){return this._destroy(),this}setProps(n){return this._update(this.props,n),this}resize(){return this._map.resize(),this}redraw(){const n=this._map;n.style&&(n._frame&&(n._frame.cancel(),n._frame=null),n._render())}getMap(){return this._map}_reuse(n){this._map=c.savedMap;const t=this._map.getContainer(),e=n.container;for(e.classList.add("mapboxgl-map");t.childNodes.length>0;)e.appendChild(t.childNodes[0]);this._map._container=e,c.savedMap=null,n.mapStyle&&this._map.setStyle(n.mapStyle,{diff:!0}),this._map.isStyleLoaded()?this._fireLoadEvent():this._map.once("styledata",this._fireLoadEvent)}_create(n){if(n.reuseMaps&&c.savedMap)this._reuse(n);else{if(n.gl){const t=HTMLCanvasElement.prototype.getContext;HTMLCanvasElement.prototype.getContext=(()=>(HTMLCanvasElement.prototype.getContext=t,n.gl))}const t={container:n.container,center:[0,0],zoom:8,pitch:0,bearing:0,maxZoom:24,style:n.mapStyle,interactive:!1,trackResize:!1,attributionControl:n.attributionControl,preserveDrawingBuffer:n.preserveDrawingBuffer};n.transformRequest&&(t.transformRequest=n.transformRequest),this._map=new this.mapboxgl.Map(Object.assign({},t,n.mapOptions)),this._map.once("load",n.onLoad),this._map.on("error",n.onError)}return this}_destroy(){this._map&&(c.savedMap?this._map.remove():(c.savedMap=this._map,this._map.off("load",this.props.onLoad),this._map.off("error",this.props.onError),this._map.off("styledata",this._fireLoadEvent)),this._map=null)}_initialize(n){s(n=Object.assign({},a,n),"Mapbox"),this.mapboxgl.accessToken=n.mapboxApiAccessToken||a.mapboxApiAccessToken,this._create(n);const t=n.container;Object.defineProperty(t,"offsetWidth",{get:()=>this.width}),Object.defineProperty(t,"clientWidth",{get:()=>this.width}),Object.defineProperty(t,"offsetHeight",{get:()=>this.height}),Object.defineProperty(t,"clientHeight",{get:()=>this.height});const e=this._map.getCanvas();e&&(e.style.outline="none"),this._updateMapViewport({},n),this._updateMapSize({},n),this.props=n}_update(n,t){if(!this._map)return;s(t=Object.assign({},this.props,t),"Mapbox");const e=this._updateMapViewport(n,t),l=this._updateMapSize(n,t);t.asyncRender||!e&&!l||this.redraw(),this.props=t}_updateMapSize(n,t){const e=n.width!==t.width||n.height!==t.height;return e&&(this.width=t.width,this.height=t.height,this.resize()),e}_updateMapViewport(n,t){const e=this._getViewState(n),l=this._getViewState(t),i=l.latitude!==e.latitude||l.longitude!==e.longitude||l.zoom!==e.zoom||l.pitch!==e.pitch||l.bearing!==e.bearing||l.altitude!==e.altitude;return i&&(this._map.jumpTo(this._viewStateToMapboxProps(l)),l.altitude!==e.altitude&&(this._map.transform.altitude=l.altitude)),i}_getViewState(n){const t=n.viewState||n,e=t.longitude,l=t.latitude,i=t.zoom,r=t.pitch,u=void 0===r?0:r,o=t.bearing,a=void 0===o?0:o,s=t.altitude;return{longitude:e,latitude:l,zoom:i,pitch:u,bearing:a,altitude:void 0===s?1.5:s}}_checkStyleSheet(n="0.47.0"){if(void 0!==u.a)try{const t=u.a.createElement("div");if(t.className="mapboxgl-map",t.style.display="none",u.a.body.append(t),!("static"!==window.getComputedStyle(t).position)){const t=u.a.createElement("link");t.setAttribute("rel","stylesheet"),t.setAttribute("type","text/css"),t.setAttribute("href",`https://api.tiles.mapbox.com/mapbox-gl-js/v${n}/mapbox-gl.css`),u.a.head.append(t)}}catch(n){}}_viewStateToMapboxProps(n){return{center:[n.longitude,n.latitude],zoom:n.zoom,bearing:n.bearing,pitch:n.pitch}}}Object(l.a)(c,"initialized",!1),Object(l.a)(c,"propTypes",o),Object(l.a)(c,"defaultProps",a),Object(l.a)(c,"savedMap",null)}).call(this,e(42))},function(n,t){},function(n,t){},function(n,t,e){"use strict";e.d(t,"a",function(){return s});var l=e(12),i=e(80),r=!1,u=!0,o=new Map([["image/png",function(n){var t=h(n);if(t.byteLength<24||2303741511!==t.getUint32(0,r))return null;return{width:t.getUint32(16,r),height:t.getUint32(20,r)}}],["image/jpeg",function(n){var t=h(n);if(t.byteLength<2||65496!==t.getUint16(0,r))return null;var e=function(){for(var n=new Set([65499,65476,65484,65501,65534]),t=65504;t<65520;++t)n.add(t);var e=new Set([65472,65473,65474,65475,65477,65478,65479,65481,65482,65483,65485,65486,65487,65502]);return{tableMarkers:n,sofMarkers:e}}(),l=e.tableMarkers,i=e.sofMarkers,u=2;for(;u<t.byteLength;){var o=t.getUint16(u,r);if(i.has(o))return{height:t.getUint16(u+5,r),width:t.getUint16(u+7,r)};if(!l.has(o))return null;u+=2,u+=t.getUint16(u,r)}return null}],["image/gif",function(n){var t=h(n);if(t.byteLength<10||1195984440!==t.getUint32(0,r))return null;return{width:t.getUint16(6,u),height:t.getUint16(8,u)}}],["image/bmp",function(n){var t=h(n);if(16973!==t.getUint16(0,r))return null;return{width:t.getUint32(18,u),height:t.getUint32(22,u)}}]]),a="Invalid MIME type. Supported MIME types are: ".concat(Array.from(o.keys()).join(", "));function s(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(t){var e=o.get(t);if(!e)throw new Error(a);var l=e(n);if(!l)throw new Error("invalid image data for type: ".concat(t));return l}var i=c(n,t);if(!i)throw new Error(a);return i}function c(n,t){var e=!0,i=!1,r=void 0;try{for(var u,a=o.entries()[Symbol.iterator]();!(e=(u=a.next()).done);e=!0){var s=Object(l.a)(u.value,2),c=s[0],h=(0,s[1])(n);if(h)return h.mimeType=c,h}}catch(n){i=!0,r=n}finally{try{e||null==a.return||a.return()}finally{if(i)throw r}}return null}function h(n){if(i.a&&(n=Object(i.a)(n)),n instanceof ArrayBuffer||ArrayBuffer.isView(n))return new DataView(n.buffer||n);throw new Error("toDataView")}},function(n,t,e){"use strict";function l(n,t,e){e=e||2;var l,o,a,s,c,d,g,v=t&&t.length,m=v?t[0]*e:n.length,_=i(n,0,m,e,!0),b=[];if(!_)return b;if(v&&(_=function(n,t,e,l){var u,o,a,s,c,d=[];for(u=0,o=t.length;u<o;u++)a=t[u]*l,s=u<o-1?t[u+1]*l:n.length,(c=i(n,a,s,l,!1))===c.next&&(c.steiner=!0),d.push(p(c));for(d.sort(h),u=0;u<d.length;u++)f(d[u],e),e=r(e,e.next);return e}(n,t,_,e)),n.length>80*e){l=a=n[0],o=s=n[1];for(var y=e;y<m;y+=e)(c=n[y])<l&&(l=c),(d=n[y+1])<o&&(o=d),c>a&&(a=c),d>s&&(s=d);g=0!==(g=Math.max(a-l,s-o))?1/g:0}return u(_,b,e,l,o,g),b}function i(n,t,e,l,i){var r,u;if(i===O(n,t,e,l)>0)for(r=t;r<e;r+=l)u=w(r,n[r],n[r+1],u);else for(r=e-l;r>=t;r-=l)u=w(r,n[r],n[r+1],u);return u&&_(u,u.next)&&(E(u),u=u.next),u}function r(n,t){if(!n)return n;t||(t=n);var e,l=n;do{if(e=!1,l.steiner||!_(l,l.next)&&0!==m(l.prev,l,l.next))l=l.next;else{if(E(l),(l=t=l.prev)===l.next)break;e=!0}}while(e||l!==t);return t}function u(n,t,e,l,i,h,f){if(n){!f&&h&&function(n,t,e,l){var i=n;do{null===i.z&&(i.z=d(i.x,i.y,t,e,l)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==n);i.prevZ.nextZ=null,i.prevZ=null,function(n){var t,e,l,i,r,u,o,a,s=1;do{for(e=n,n=null,r=null,u=0;e;){for(u++,l=e,o=0,t=0;t<s&&(o++,l=l.nextZ);t++);for(a=s;o>0||a>0&&l;)0!==o&&(0===a||!l||e.z<=l.z)?(i=e,e=e.nextZ,o--):(i=l,l=l.nextZ,a--),r?r.nextZ=i:n=i,i.prevZ=r,r=i;e=l}r.nextZ=null,s*=2}while(u>1)}(i)}(n,l,i,h);for(var p,g,v=n;n.prev!==n.next;)if(p=n.prev,g=n.next,h?a(n,l,i,h):o(n))t.push(p.i/e),t.push(n.i/e),t.push(g.i/e),E(n),n=g.next,v=g.next;else if((n=g)===v){f?1===f?u(n=s(n,t,e),t,e,l,i,h,2):2===f&&c(n,t,e,l,i,h):u(r(n),t,e,l,i,h,1);break}}}function o(n){var t=n.prev,e=n,l=n.next;if(m(t,e,l)>=0)return!1;for(var i=n.next.next;i!==n.prev;){if(g(t.x,t.y,e.x,e.y,l.x,l.y,i.x,i.y)&&m(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function a(n,t,e,l){var i=n.prev,r=n,u=n.next;if(m(i,r,u)>=0)return!1;for(var o=i.x<r.x?i.x<u.x?i.x:u.x:r.x<u.x?r.x:u.x,a=i.y<r.y?i.y<u.y?i.y:u.y:r.y<u.y?r.y:u.y,s=i.x>r.x?i.x>u.x?i.x:u.x:r.x>u.x?r.x:u.x,c=i.y>r.y?i.y>u.y?i.y:u.y:r.y>u.y?r.y:u.y,h=d(o,a,t,e,l),f=d(s,c,t,e,l),p=n.prevZ,v=n.nextZ;p&&p.z>=h&&v&&v.z<=f;){if(p!==n.prev&&p!==n.next&&g(i.x,i.y,r.x,r.y,u.x,u.y,p.x,p.y)&&m(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,v!==n.prev&&v!==n.next&&g(i.x,i.y,r.x,r.y,u.x,u.y,v.x,v.y)&&m(v.prev,v,v.next)>=0)return!1;v=v.nextZ}for(;p&&p.z>=h;){if(p!==n.prev&&p!==n.next&&g(i.x,i.y,r.x,r.y,u.x,u.y,p.x,p.y)&&m(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;v&&v.z<=f;){if(v!==n.prev&&v!==n.next&&g(i.x,i.y,r.x,r.y,u.x,u.y,v.x,v.y)&&m(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function s(n,t,e){var l=n;do{var i=l.prev,r=l.next.next;!_(i,r)&&b(i,l,l.next,r)&&y(i,r)&&y(r,i)&&(t.push(i.i/e),t.push(l.i/e),t.push(r.i/e),E(l),E(l.next),l=n=r),l=l.next}while(l!==n);return l}function c(n,t,e,l,i,o){var a=n;do{for(var s=a.next.next;s!==a.prev;){if(a.i!==s.i&&v(a,s)){var c=x(a,s);return a=r(a,a.next),c=r(c,c.next),u(a,t,e,l,i,o),void u(c,t,e,l,i,o)}s=s.next}a=a.next}while(a!==n)}function h(n,t){return n.x-t.x}function f(n,t){if(t=function(n,t){var e,l=t,i=n.x,r=n.y,u=-1/0;do{if(r<=l.y&&r>=l.next.y&&l.next.y!==l.y){var o=l.x+(r-l.y)*(l.next.x-l.x)/(l.next.y-l.y);if(o<=i&&o>u){if(u=o,o===i){if(r===l.y)return l;if(r===l.next.y)return l.next}e=l.x<l.next.x?l:l.next}}l=l.next}while(l!==t);if(!e)return null;if(i===u)return e.prev;var a,s=e,c=e.x,h=e.y,f=1/0;l=e.next;for(;l!==s;)i>=l.x&&l.x>=c&&i!==l.x&&g(r<h?i:u,r,c,h,r<h?u:i,r,l.x,l.y)&&((a=Math.abs(r-l.y)/(i-l.x))<f||a===f&&l.x>e.x)&&y(l,n)&&(e=l,f=a),l=l.next;return e}(n,t)){var e=x(t,n);r(e,e.next)}}function d(n,t,e,l,i){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-e)*i)|n<<8))|n<<4))|n<<2))|n<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-l)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function p(n){var t=n,e=n;do{t.x<e.x&&(e=t),t=t.next}while(t!==n);return e}function g(n,t,e,l,i,r,u,o){return(i-u)*(t-o)-(n-u)*(r-o)>=0&&(n-u)*(l-o)-(e-u)*(t-o)>=0&&(e-u)*(r-o)-(i-u)*(l-o)>=0}function v(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!function(n,t){var e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&b(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}(n,t)&&y(n,t)&&y(t,n)&&function(n,t){var e=n,l=!1,i=(n.x+t.x)/2,r=(n.y+t.y)/2;do{e.y>r!=e.next.y>r&&e.next.y!==e.y&&i<(e.next.x-e.x)*(r-e.y)/(e.next.y-e.y)+e.x&&(l=!l),e=e.next}while(e!==n);return l}(n,t)}function m(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function _(n,t){return n.x===t.x&&n.y===t.y}function b(n,t,e,l){return!!(_(n,t)&&_(e,l)||_(n,l)&&_(e,t))||m(n,t,e)>0!=m(n,t,l)>0&&m(e,l,n)>0!=m(e,l,t)>0}function y(n,t){return m(n.prev,n,n.next)<0?m(n,t,n.next)>=0&&m(n,n.prev,t)>=0:m(n,t,n.prev)<0||m(n,n.next,t)<0}function x(n,t){var e=new P(n.i,n.x,n.y),l=new P(t.i,t.x,t.y),i=n.next,r=t.prev;return n.next=t,t.prev=n,e.next=i,i.prev=e,l.next=e,e.prev=l,r.next=l,l.prev=r,l}function w(n,t,e,l){var i=new P(n,t,e);return l?(i.next=l.next,i.prev=l,l.next.prev=i,l.next=i):(i.prev=i,i.next=i),i}function E(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function P(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function O(n,t,e,l){for(var i=0,r=t,u=e-l;r<e;r+=l)i+=(n[u]-n[r])*(n[r+1]+n[u+1]),u=r;return i}n.exports=l,n.exports.default=l,l.deviation=function(n,t,e,l){var i=t&&t.length,r=i?t[0]*e:n.length,u=Math.abs(O(n,0,r,e));if(i)for(var o=0,a=t.length;o<a;o++){var s=t[o]*e,c=o<a-1?t[o+1]*e:n.length;u-=Math.abs(O(n,s,c,e))}var h=0;for(o=0;o<l.length;o+=3){var f=l[o]*e,d=l[o+1]*e,p=l[o+2]*e;h+=Math.abs((n[f]-n[p])*(n[d+1]-n[f+1])-(n[f]-n[d])*(n[p+1]-n[f+1]))}return 0===u&&0===h?0:Math.abs((h-u)/u)},l.flatten=function(n){for(var t=n[0][0].length,e={vertices:[],holes:[],dimensions:t},l=0,i=0;i<n.length;i++){for(var r=0;r<n[i].length;r++)for(var u=0;u<t;u++)e.vertices.push(n[i][r][u]);i>0&&(l+=n[i-1].length,e.holes.push(l))}return e}},function(n,t,e){"use strict";n.exports=i;var l=1e20;function i(n,t,e,l,i,r){this.fontSize=n||24,this.buffer=void 0===t?3:t,this.cutoff=l||.25,this.fontFamily=i||"sans-serif",this.fontWeight=r||"normal",this.radius=e||8;var u=this.size=this.fontSize+2*this.buffer;this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=u,this.ctx=this.canvas.getContext("2d"),this.ctx.font=this.fontWeight+" "+this.fontSize+"px "+this.fontFamily,this.ctx.textBaseline="middle",this.ctx.fillStyle="black",this.gridOuter=new Float64Array(u*u),this.gridInner=new Float64Array(u*u),this.f=new Float64Array(u),this.d=new Float64Array(u),this.z=new Float64Array(u+1),this.v=new Int16Array(u),this.middle=Math.round(u/2*(navigator.userAgent.indexOf("Gecko/")>=0?1.2:1))}function r(n,t,e,l,i,r,o){for(var a=0;a<t;a++){for(var s=0;s<e;s++)l[s]=n[s*t+a];for(u(l,i,r,o,e),s=0;s<e;s++)n[s*t+a]=i[s]}for(s=0;s<e;s++){for(a=0;a<t;a++)l[a]=n[s*t+a];for(u(l,i,r,o,t),a=0;a<t;a++)n[s*t+a]=Math.sqrt(i[a])}}function u(n,t,e,i,r){e[0]=0,i[0]=-l,i[1]=+l;for(var u=1,o=0;u<r;u++){for(var a=(n[u]+u*u-(n[e[o]]+e[o]*e[o]))/(2*u-2*e[o]);a<=i[o];)o--,a=(n[u]+u*u-(n[e[o]]+e[o]*e[o]))/(2*u-2*e[o]);e[++o]=u,i[o]=a,i[o+1]=+l}for(u=0,o=0;u<r;u++){for(;i[o+1]<u;)o++;t[u]=(u-e[o])*(u-e[o])+n[e[o]]}}i.prototype.draw=function(n){this.ctx.clearRect(0,0,this.size,this.size),this.ctx.fillText(n,this.buffer,this.middle);for(var t=this.ctx.getImageData(0,0,this.size,this.size),e=new Uint8ClampedArray(this.size*this.size),i=0;i<this.size*this.size;i++){var u=t.data[4*i+3]/255;this.gridOuter[i]=1===u?0:0===u?l:Math.pow(Math.max(0,.5-u),2),this.gridInner[i]=1===u?l:0===u?0:Math.pow(Math.max(0,u-.5),2)}for(r(this.gridOuter,this.size,this.size,this.f,this.d,this.v,this.z),r(this.gridInner,this.size,this.size,this.f,this.d,this.v,this.z),i=0;i<this.size*this.size;i++){var o=this.gridOuter[i]-this.gridInner[i];e[i]=Math.max(0,Math.min(255,Math.round(255-255*(o/this.radius+this.cutoff))))}return e}},function(n,t){},function(n,t,e){const l=e(99);Object.assign(l,e(34),e(116),e(118),e(120),e(117),e(121),e(119)),n.exports=l},,function(n,t,e){(function(t){const l=e(1),i=e(4),r=e(106).default,u="undefined"==typeof window?t:window;u.deck=u.deck||{},u.luma=u.luma||{},Object.assign(u.deck,i,{DeckGL:r}),Object.assign(u.luma,l),n.exports=u.deck}).call(this,e(33))},function(n,t){},function(n,t){},function(n,t){},function(n,t,e){var l=function(){return this||"object"==typeof self&&self}()||Function("return this")(),i=l.regeneratorRuntime&&Object.getOwnPropertyNames(l).indexOf("regeneratorRuntime")>=0,r=i&&l.regeneratorRuntime;if(l.regeneratorRuntime=void 0,n.exports=e(104),i)l.regeneratorRuntime=r;else try{delete l.regeneratorRuntime}catch(n){l.regeneratorRuntime=void 0}},function(n,t){!function(t){"use strict";var e,l=Object.prototype,i=l.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},u=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag",s="object"==typeof n,c=t.regeneratorRuntime;if(c)s&&(n.exports=c);else{(c=t.regeneratorRuntime=s?n.exports:{}).wrap=y;var h="suspendedStart",f="suspendedYield",d="executing",p="completed",g={},v={};v[u]=function(){return this};var m=Object.getPrototypeOf,_=m&&m(m(M([])));_&&_!==l&&i.call(_,u)&&(v=_);var b=P.prototype=w.prototype=Object.create(v);E.prototype=b.constructor=P,P.constructor=E,P[a]=E.displayName="GeneratorFunction",c.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===E||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,P):(n.__proto__=P,a in n||(n[a]="GeneratorFunction")),n.prototype=Object.create(b),n},c.awrap=function(n){return{__await:n}},O(S.prototype),S.prototype[o]=function(){return this},c.AsyncIterator=S,c.async=function(n,t,e,l){var i=new S(y(n,t,e,l));return c.isGeneratorFunction(t)?i:i.next().then(function(n){return n.done?n.value:i.next()})},O(b),b[a]="Generator",b[u]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var l=t.pop();if(l in n)return e.value=l,e.done=!1,e}return e.done=!0,e}},c.values=M,L.prototype={constructor:L,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(C),!n)for(var t in this)"t"===t.charAt(0)&&i.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=e)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function l(l,i){return o.type="throw",o.arg=n,t.next=l,i&&(t.method="next",t.arg=e),!!i}for(var r=this.tryEntries.length-1;r>=0;--r){var u=this.tryEntries[r],o=u.completion;if("root"===u.tryLoc)return l("end");if(u.tryLoc<=this.prev){var a=i.call(u,"catchLoc"),s=i.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return l(u.catchLoc,!0);if(this.prev<u.finallyLoc)return l(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return l(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return l(u.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var l=this.tryEntries[e];if(l.tryLoc<=this.prev&&i.call(l,"finallyLoc")&&this.prev<l.finallyLoc){var r=l;break}}r&&("break"===n||"continue"===n)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var u=r?r.completion:{};return u.type=n,u.arg=t,r?(this.method="next",this.next=r.finallyLoc,g):this.complete(u)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),g},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),C(e),g}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var l=e.completion;if("throw"===l.type){var i=l.arg;C(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,l){return this.delegate={iterator:M(n),resultName:t,nextLoc:l},"next"===this.method&&(this.arg=e),g}}}function y(n,t,e,l){var i=t&&t.prototype instanceof w?t:w,r=Object.create(i.prototype),u=new L(l||[]);return r._invoke=function(n,t,e){var l=h;return function(i,r){if(l===d)throw new Error("Generator is already running");if(l===p){if("throw"===i)throw r;return j()}for(e.method=i,e.arg=r;;){var u=e.delegate;if(u){var o=A(u,e);if(o){if(o===g)continue;return o}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(l===h)throw l=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);l=d;var a=x(n,t,e);if("normal"===a.type){if(l=e.done?p:f,a.arg===g)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(l=p,e.method="throw",e.arg=a.arg)}}}(n,e,u),r}function x(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}function w(){}function E(){}function P(){}function O(n){["next","throw","return"].forEach(function(t){n[t]=function(n){return this._invoke(t,n)}})}function S(n){var t;this._invoke=function(e,l){function r(){return new Promise(function(t,r){!function t(e,l,r,u){var o=x(n[e],n,l);if("throw"!==o.type){var a=o.arg,s=a.value;return s&&"object"==typeof s&&i.call(s,"__await")?Promise.resolve(s.__await).then(function(n){t("next",n,r,u)},function(n){t("throw",n,r,u)}):Promise.resolve(s).then(function(n){a.value=n,r(a)},function(n){return t("throw",n,r,u)})}u(o.arg)}(e,l,t,r)})}return t=t?t.then(r,r):r()}}function A(n,t){var l=n.iterator[t.method];if(l===e){if(t.delegate=null,"throw"===t.method){if(n.iterator.return&&(t.method="return",t.arg=e,A(n,t),"throw"===t.method))return g;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=x(l,n.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,g;var r=i.arg;return r?r.done?(t[n.resultName]=r.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=e),t.delegate=null,g):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,g)}function T(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function C(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function L(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(T,this),this.reset(!0)}function M(n){if(n){var t=n[u];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var l=-1,r=function t(){for(;++l<n.length;)if(i.call(n,l))return t.value=n[l],t.done=!1,t;return t.value=e,t.done=!0,t};return r.next=r}}return{next:j}}function j(){return{value:e,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(n,t,e){var l;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(i,r,u,o){"use strict";var a,s=["","webkit","Moz","MS","ms","o"],c=r.createElement("div"),h="function",f=Math.round,d=Math.abs,p=Date.now;function g(n,t,e){return setTimeout(w(n,e),t)}function v(n,t,e){return!!Array.isArray(n)&&(m(n,e[t],e),!0)}function m(n,t,e){var l;if(n)if(n.forEach)n.forEach(t,e);else if(n.length!==o)for(l=0;l<n.length;)t.call(e,n[l],l,n),l++;else for(l in n)n.hasOwnProperty(l)&&t.call(e,n[l],l,n)}function _(n,t,e){var l="DEPRECATED METHOD: "+t+"\n"+e+" AT \n";return function(){var t=new Error("get-stack-trace"),e=t&&t.stack?t.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=i.console&&(i.console.warn||i.console.log);return r&&r.call(i.console,l,e),n.apply(this,arguments)}}a="function"!=typeof Object.assign?function(n){if(n===o||null===n)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(n),e=1;e<arguments.length;e++){var l=arguments[e];if(l!==o&&null!==l)for(var i in l)l.hasOwnProperty(i)&&(t[i]=l[i])}return t}:Object.assign;var b=_(function(n,t,e){for(var l=Object.keys(t),i=0;i<l.length;)(!e||e&&n[l[i]]===o)&&(n[l[i]]=t[l[i]]),i++;return n},"extend","Use `assign`."),y=_(function(n,t){return b(n,t,!0)},"merge","Use `assign`.");function x(n,t,e){var l,i=t.prototype;(l=n.prototype=Object.create(i)).constructor=n,l._super=i,e&&a(l,e)}function w(n,t){return function(){return n.apply(t,arguments)}}function E(n,t){return typeof n==h?n.apply(t&&t[0]||o,t):n}function P(n,t){return n===o?t:n}function O(n,t,e){m(C(t),function(t){n.addEventListener(t,e,!1)})}function S(n,t,e){m(C(t),function(t){n.removeEventListener(t,e,!1)})}function A(n,t){for(;n;){if(n==t)return!0;n=n.parentNode}return!1}function T(n,t){return n.indexOf(t)>-1}function C(n){return n.trim().split(/\s+/g)}function L(n,t,e){if(n.indexOf&&!e)return n.indexOf(t);for(var l=0;l<n.length;){if(e&&n[l][e]==t||!e&&n[l]===t)return l;l++}return-1}function M(n){return Array.prototype.slice.call(n,0)}function j(n,t,e){for(var l=[],i=[],r=0;r<n.length;){var u=t?n[r][t]:n[r];L(i,u)<0&&l.push(n[r]),i[r]=u,r++}return e&&(l=t?l.sort(function(n,e){return n[t]>e[t]}):l.sort()),l}function R(n,t){for(var e,l,i=t[0].toUpperCase()+t.slice(1),r=0;r<s.length;){if((l=(e=s[r])?e+i:t)in n)return l;r++}return o}var I=1;function k(n){var t=n.ownerDocument||n;return t.defaultView||t.parentWindow||i}var F="ontouchstart"in i,N=R(i,"PointerEvent")!==o,D=F&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),B=25,U=1,z=2,V=4,G=8,W=1,H=2,X=4,Y=8,Z=16,q=H|X,$=Y|Z,K=q|$,Q=["x","y"],J=["clientX","clientY"];function nn(n,t){var e=this;this.manager=n,this.callback=t,this.element=n.element,this.target=n.options.inputTarget,this.domHandler=function(t){E(n.options.enable,[n])&&e.handler(t)},this.init()}function tn(n,t,e){var l=e.pointers.length,i=e.changedPointers.length,r=t&U&&l-i==0,u=t&(V|G)&&l-i==0;e.isFirst=!!r,e.isFinal=!!u,r&&(n.session={}),e.eventType=t,function(n,t){var e=n.session,l=t.pointers,i=l.length;e.firstInput||(e.firstInput=en(t));i>1&&!e.firstMultiple?e.firstMultiple=en(t):1===i&&(e.firstMultiple=!1);var r=e.firstInput,u=e.firstMultiple,a=u?u.center:r.center,s=t.center=ln(l);t.timeStamp=p(),t.deltaTime=t.timeStamp-r.timeStamp,t.angle=an(a,s),t.distance=on(a,s),function(n,t){var e=t.center,l=n.offsetDelta||{},i=n.prevDelta||{},r=n.prevInput||{};t.eventType!==U&&r.eventType!==V||(i=n.prevDelta={x:r.deltaX||0,y:r.deltaY||0},l=n.offsetDelta={x:e.x,y:e.y});t.deltaX=i.x+(e.x-l.x),t.deltaY=i.y+(e.y-l.y)}(e,t),t.offsetDirection=un(t.deltaX,t.deltaY);var c=rn(t.deltaTime,t.deltaX,t.deltaY);t.overallVelocityX=c.x,t.overallVelocityY=c.y,t.overallVelocity=d(c.x)>d(c.y)?c.x:c.y,t.scale=u?(h=u.pointers,f=l,on(f[0],f[1],J)/on(h[0],h[1],J)):1,t.rotation=u?function(n,t){return an(t[1],t[0],J)+an(n[1],n[0],J)}(u.pointers,l):0,t.maxPointers=e.prevInput?t.pointers.length>e.prevInput.maxPointers?t.pointers.length:e.prevInput.maxPointers:t.pointers.length,function(n,t){var e,l,i,r,u=n.lastInterval||t,a=t.timeStamp-u.timeStamp;if(t.eventType!=G&&(a>B||u.velocity===o)){var s=t.deltaX-u.deltaX,c=t.deltaY-u.deltaY,h=rn(a,s,c);l=h.x,i=h.y,e=d(h.x)>d(h.y)?h.x:h.y,r=un(s,c),n.lastInterval=t}else e=u.velocity,l=u.velocityX,i=u.velocityY,r=u.direction;t.velocity=e,t.velocityX=l,t.velocityY=i,t.direction=r}(e,t);var h,f;var g=n.element;A(t.srcEvent.target,g)&&(g=t.srcEvent.target);t.target=g}(n,e),n.emit("hammer.input",e),n.recognize(e),n.session.prevInput=e}function en(n){for(var t=[],e=0;e<n.pointers.length;)t[e]={clientX:f(n.pointers[e].clientX),clientY:f(n.pointers[e].clientY)},e++;return{timeStamp:p(),pointers:t,center:ln(t),deltaX:n.deltaX,deltaY:n.deltaY}}function ln(n){var t=n.length;if(1===t)return{x:f(n[0].clientX),y:f(n[0].clientY)};for(var e=0,l=0,i=0;i<t;)e+=n[i].clientX,l+=n[i].clientY,i++;return{x:f(e/t),y:f(l/t)}}function rn(n,t,e){return{x:t/n||0,y:e/n||0}}function un(n,t){return n===t?W:d(n)>=d(t)?n<0?H:X:t<0?Y:Z}function on(n,t,e){e||(e=Q);var l=t[e[0]]-n[e[0]],i=t[e[1]]-n[e[1]];return Math.sqrt(l*l+i*i)}function an(n,t,e){e||(e=Q);var l=t[e[0]]-n[e[0]],i=t[e[1]]-n[e[1]];return 180*Math.atan2(i,l)/Math.PI}nn.prototype={handler:function(){},init:function(){this.evEl&&O(this.element,this.evEl,this.domHandler),this.evTarget&&O(this.target,this.evTarget,this.domHandler),this.evWin&&O(k(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&S(this.element,this.evEl,this.domHandler),this.evTarget&&S(this.target,this.evTarget,this.domHandler),this.evWin&&S(k(this.element),this.evWin,this.domHandler)}};var sn={mousedown:U,mousemove:z,mouseup:V},cn="mousedown",hn="mousemove mouseup";function fn(){this.evEl=cn,this.evWin=hn,this.pressed=!1,nn.apply(this,arguments)}x(fn,nn,{handler:function(n){var t=sn[n.type];t&U&&0===n.button&&(this.pressed=!0),t&z&&1!==n.which&&(t=V),this.pressed&&(t&V&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[n],changedPointers:[n],pointerType:"mouse",srcEvent:n}))}});var dn={pointerdown:U,pointermove:z,pointerup:V,pointercancel:G,pointerout:G},pn={2:"touch",3:"pen",4:"mouse",5:"kinect"},gn="pointerdown",vn="pointermove pointerup pointercancel";function mn(){this.evEl=gn,this.evWin=vn,nn.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}i.MSPointerEvent&&!i.PointerEvent&&(gn="MSPointerDown",vn="MSPointerMove MSPointerUp MSPointerCancel"),x(mn,nn,{handler:function(n){var t=this.store,e=!1,l=n.type.toLowerCase().replace("ms",""),i=dn[l],r=pn[n.pointerType]||n.pointerType,u="touch"==r,o=L(t,n.pointerId,"pointerId");i&U&&(0===n.button||u)?o<0&&(t.push(n),o=t.length-1):i&(V|G)&&(e=!0),o<0||(t[o]=n,this.callback(this.manager,i,{pointers:t,changedPointers:[n],pointerType:r,srcEvent:n}),e&&t.splice(o,1))}});var _n={touchstart:U,touchmove:z,touchend:V,touchcancel:G},bn="touchstart",yn="touchstart touchmove touchend touchcancel";function xn(){this.evTarget=bn,this.evWin=yn,this.started=!1,nn.apply(this,arguments)}x(xn,nn,{handler:function(n){var t=_n[n.type];if(t===U&&(this.started=!0),this.started){var e=function(n,t){var e=M(n.touches),l=M(n.changedTouches);t&(V|G)&&(e=j(e.concat(l),"identifier",!0));return[e,l]}.call(this,n,t);t&(V|G)&&e[0].length-e[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:e[0],changedPointers:e[1],pointerType:"touch",srcEvent:n})}}});var wn={touchstart:U,touchmove:z,touchend:V,touchcancel:G},En="touchstart touchmove touchend touchcancel";function Pn(){this.evTarget=En,this.targetIds={},nn.apply(this,arguments)}x(Pn,nn,{handler:function(n){var t=wn[n.type],e=function(n,t){var e=M(n.touches),l=this.targetIds;if(t&(U|z)&&1===e.length)return l[e[0].identifier]=!0,[e,e];var i,r,u=M(n.changedTouches),o=[],a=this.target;if(r=e.filter(function(n){return A(n.target,a)}),t===U)for(i=0;i<r.length;)l[r[i].identifier]=!0,i++;i=0;for(;i<u.length;)l[u[i].identifier]&&o.push(u[i]),t&(V|G)&&delete l[u[i].identifier],i++;if(!o.length)return;return[j(r.concat(o),"identifier",!0),o]}.call(this,n,t);e&&this.callback(this.manager,t,{pointers:e[0],changedPointers:e[1],pointerType:"touch",srcEvent:n})}});var On=2500,Sn=25;function An(){nn.apply(this,arguments);var n=w(this.handler,this);this.touch=new Pn(this.manager,n),this.mouse=new fn(this.manager,n),this.primaryTouch=null,this.lastTouches=[]}function Tn(n){var t=n.changedPointers[0];if(t.identifier===this.primaryTouch){var e={x:t.clientX,y:t.clientY};this.lastTouches.push(e);var l=this.lastTouches;setTimeout(function(){var n=l.indexOf(e);n>-1&&l.splice(n,1)},On)}}x(An,nn,{handler:function(n,t,e){var l="touch"==e.pointerType,i="mouse"==e.pointerType;if(!(i&&e.sourceCapabilities&&e.sourceCapabilities.firesTouchEvents)){if(l)(function(n,t){n&U?(this.primaryTouch=t.changedPointers[0].identifier,Tn.call(this,t)):n&(V|G)&&Tn.call(this,t)}).call(this,t,e);else if(i&&function(n){for(var t=n.srcEvent.clientX,e=n.srcEvent.clientY,l=0;l<this.lastTouches.length;l++){var i=this.lastTouches[l],r=Math.abs(t-i.x),u=Math.abs(e-i.y);if(r<=Sn&&u<=Sn)return!0}return!1}.call(this,e))return;this.callback(n,t,e)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Cn=R(c.style,"touchAction"),Ln=Cn!==o,Mn="auto",jn="manipulation",Rn="none",In="pan-x",kn="pan-y",Fn=function(){if(!Ln)return!1;var n={},t=i.CSS&&i.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(e){n[e]=!t||i.CSS.supports("touch-action",e)}),n}();function Nn(n,t){this.manager=n,this.set(t)}Nn.prototype={set:function(n){"compute"==n&&(n=this.compute()),Ln&&this.manager.element.style&&Fn[n]&&(this.manager.element.style[Cn]=n),this.actions=n.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var n=[];return m(this.manager.recognizers,function(t){E(t.options.enable,[t])&&(n=n.concat(t.getTouchAction()))}),function(n){if(T(n,Rn))return Rn;var t=T(n,In),e=T(n,kn);if(t&&e)return Rn;if(t||e)return t?In:kn;if(T(n,jn))return jn;return Mn}(n.join(" "))},preventDefaults:function(n){var t=n.srcEvent,e=n.offsetDirection;if(this.manager.session.prevented)t.preventDefault();else{var l=this.actions,i=T(l,Rn)&&!Fn[Rn],r=T(l,kn)&&!Fn[kn],u=T(l,In)&&!Fn[In];if(i){var o=1===n.pointers.length,a=n.distance<2,s=n.deltaTime<250;if(o&&a&&s)return}if(!u||!r)return i||r&&e&q||u&&e&$?this.preventSrc(t):void 0}},preventSrc:function(n){this.manager.session.prevented=!0,n.preventDefault()}};var Dn=1,Bn=2,Un=4,zn=8,Vn=zn,Gn=16;function Wn(n){this.options=a({},this.defaults,n||{}),this.id=I++,this.manager=null,this.options.enable=P(this.options.enable,!0),this.state=Dn,this.simultaneous={},this.requireFail=[]}function Hn(n){return n&Gn?"cancel":n&zn?"end":n&Un?"move":n&Bn?"start":""}function Xn(n){return n==Z?"down":n==Y?"up":n==H?"left":n==X?"right":""}function Yn(n,t){var e=t.manager;return e?e.get(n):n}function Zn(){Wn.apply(this,arguments)}function qn(){Zn.apply(this,arguments),this.pX=null,this.pY=null}function $n(){Zn.apply(this,arguments)}function Kn(){Wn.apply(this,arguments),this._timer=null,this._input=null}function Qn(){Zn.apply(this,arguments)}function Jn(){Zn.apply(this,arguments)}function nt(){Wn.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function tt(n,t){return(t=t||{}).recognizers=P(t.recognizers,tt.defaults.preset),new et(n,t)}Wn.prototype={defaults:{},set:function(n){return a(this.options,n),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(n){if(v(n,"recognizeWith",this))return this;var t=this.simultaneous;return t[(n=Yn(n,this)).id]||(t[n.id]=n,n.recognizeWith(this)),this},dropRecognizeWith:function(n){return v(n,"dropRecognizeWith",this)?this:(n=Yn(n,this),delete this.simultaneous[n.id],this)},requireFailure:function(n){if(v(n,"requireFailure",this))return this;var t=this.requireFail;return-1===L(t,n=Yn(n,this))&&(t.push(n),n.requireFailure(this)),this},dropRequireFailure:function(n){if(v(n,"dropRequireFailure",this))return this;n=Yn(n,this);var t=L(this.requireFail,n);return t>-1&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(n){return!!this.simultaneous[n.id]},emit:function(n){var t=this,e=this.state;function l(e){t.manager.emit(e,n)}e<zn&&l(t.options.event+Hn(e)),l(t.options.event),n.additionalEvent&&l(n.additionalEvent),e>=zn&&l(t.options.event+Hn(e))},tryEmit:function(n){if(this.canEmit())return this.emit(n);this.state=32},canEmit:function(){for(var n=0;n<this.requireFail.length;){if(!(this.requireFail[n].state&(32|Dn)))return!1;n++}return!0},recognize:function(n){var t=a({},n);if(!E(this.options.enable,[this,t]))return this.reset(),void(this.state=32);this.state&(Vn|Gn|32)&&(this.state=Dn),this.state=this.process(t),this.state&(Bn|Un|zn|Gn)&&this.tryEmit(t)},process:function(n){},getTouchAction:function(){},reset:function(){}},x(Zn,Wn,{defaults:{pointers:1},attrTest:function(n){var t=this.options.pointers;return 0===t||n.pointers.length===t},process:function(n){var t=this.state,e=n.eventType,l=t&(Bn|Un),i=this.attrTest(n);return l&&(e&G||!i)?t|Gn:l||i?e&V?t|zn:t&Bn?t|Un:Bn:32}}),x(qn,Zn,{defaults:{event:"pan",threshold:10,pointers:1,direction:K},getTouchAction:function(){var n=this.options.direction,t=[];return n&q&&t.push(kn),n&$&&t.push(In),t},directionTest:function(n){var t=this.options,e=!0,l=n.distance,i=n.direction,r=n.deltaX,u=n.deltaY;return i&t.direction||(t.direction&q?(i=0===r?W:r<0?H:X,e=r!=this.pX,l=Math.abs(n.deltaX)):(i=0===u?W:u<0?Y:Z,e=u!=this.pY,l=Math.abs(n.deltaY))),n.direction=i,e&&l>t.threshold&&i&t.direction},attrTest:function(n){return Zn.prototype.attrTest.call(this,n)&&(this.state&Bn||!(this.state&Bn)&&this.directionTest(n))},emit:function(n){this.pX=n.deltaX,this.pY=n.deltaY;var t=Xn(n.direction);t&&(n.additionalEvent=this.options.event+t),this._super.emit.call(this,n)}}),x($n,Zn,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Rn]},attrTest:function(n){return this._super.attrTest.call(this,n)&&(Math.abs(n.scale-1)>this.options.threshold||this.state&Bn)},emit:function(n){if(1!==n.scale){var t=n.scale<1?"in":"out";n.additionalEvent=this.options.event+t}this._super.emit.call(this,n)}}),x(Kn,Wn,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Mn]},process:function(n){var t=this.options,e=n.pointers.length===t.pointers,l=n.distance<t.threshold,i=n.deltaTime>t.time;if(this._input=n,!l||!e||n.eventType&(V|G)&&!i)this.reset();else if(n.eventType&U)this.reset(),this._timer=g(function(){this.state=Vn,this.tryEmit()},t.time,this);else if(n.eventType&V)return Vn;return 32},reset:function(){clearTimeout(this._timer)},emit:function(n){this.state===Vn&&(n&&n.eventType&V?this.manager.emit(this.options.event+"up",n):(this._input.timeStamp=p(),this.manager.emit(this.options.event,this._input)))}}),x(Qn,Zn,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Rn]},attrTest:function(n){return this._super.attrTest.call(this,n)&&(Math.abs(n.rotation)>this.options.threshold||this.state&Bn)}}),x(Jn,Zn,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:q|$,pointers:1},getTouchAction:function(){return qn.prototype.getTouchAction.call(this)},attrTest:function(n){var t,e=this.options.direction;return e&(q|$)?t=n.overallVelocity:e&q?t=n.overallVelocityX:e&$&&(t=n.overallVelocityY),this._super.attrTest.call(this,n)&&e&n.offsetDirection&&n.distance>this.options.threshold&&n.maxPointers==this.options.pointers&&d(t)>this.options.velocity&&n.eventType&V},emit:function(n){var t=Xn(n.offsetDirection);t&&this.manager.emit(this.options.event+t,n),this.manager.emit(this.options.event,n)}}),x(nt,Wn,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[jn]},process:function(n){var t=this.options,e=n.pointers.length===t.pointers,l=n.distance<t.threshold,i=n.deltaTime<t.time;if(this.reset(),n.eventType&U&&0===this.count)return this.failTimeout();if(l&&i&&e){if(n.eventType!=V)return this.failTimeout();var r=!this.pTime||n.timeStamp-this.pTime<t.interval,u=!this.pCenter||on(this.pCenter,n.center)<t.posThreshold;if(this.pTime=n.timeStamp,this.pCenter=n.center,u&&r?this.count+=1:this.count=1,this._input=n,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=g(function(){this.state=Vn,this.tryEmit()},t.interval,this),Bn):Vn}return 32},failTimeout:function(){return this._timer=g(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==Vn&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),tt.VERSION="2.0.7",tt.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Qn,{enable:!1}],[$n,{enable:!1},["rotate"]],[Jn,{direction:q}],[qn,{direction:q},["swipe"]],[nt],[nt,{event:"doubletap",taps:2},["tap"]],[Kn]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function et(n,t){var e;this.options=a({},tt.defaults,t||{}),this.options.inputTarget=this.options.inputTarget||n,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=n,this.input=new((e=this).options.inputClass||(N?mn:D?Pn:F?An:fn))(e,tn),this.touchAction=new Nn(this,this.options.touchAction),lt(this,!0),m(this.options.recognizers,function(n){var t=this.add(new n[0](n[1]));n[2]&&t.recognizeWith(n[2]),n[3]&&t.requireFailure(n[3])},this)}function lt(n,t){var e,l=n.element;l.style&&(m(n.options.cssProps,function(i,r){e=R(l.style,r),t?(n.oldCssProps[e]=l.style[e],l.style[e]=i):l.style[e]=n.oldCssProps[e]||""}),t||(n.oldCssProps={}))}et.prototype={set:function(n){return a(this.options,n),n.touchAction&&this.touchAction.update(),n.inputTarget&&(this.input.destroy(),this.input.target=n.inputTarget,this.input.init()),this},stop:function(n){this.session.stopped=n?2:1},recognize:function(n){var t=this.session;if(!t.stopped){var e;this.touchAction.preventDefaults(n);var l=this.recognizers,i=t.curRecognizer;(!i||i&&i.state&Vn)&&(i=t.curRecognizer=null);for(var r=0;r<l.length;)e=l[r],2===t.stopped||i&&e!=i&&!e.canRecognizeWith(i)?e.reset():e.recognize(n),!i&&e.state&(Bn|Un|zn)&&(i=t.curRecognizer=e),r++}},get:function(n){if(n instanceof Wn)return n;for(var t=this.recognizers,e=0;e<t.length;e++)if(t[e].options.event==n)return t[e];return null},add:function(n){if(v(n,"add",this))return this;var t=this.get(n.options.event);return t&&this.remove(t),this.recognizers.push(n),n.manager=this,this.touchAction.update(),n},remove:function(n){if(v(n,"remove",this))return this;if(n=this.get(n)){var t=this.recognizers,e=L(t,n);-1!==e&&(t.splice(e,1),this.touchAction.update())}return this},on:function(n,t){if(n!==o&&t!==o){var e=this.handlers;return m(C(n),function(n){e[n]=e[n]||[],e[n].push(t)}),this}},off:function(n,t){if(n!==o){var e=this.handlers;return m(C(n),function(n){t?e[n]&&e[n].splice(L(e[n],t),1):delete e[n]}),this}},emit:function(n,t){this.options.domEvents&&function(n,t){var e=r.createEvent("Event");e.initEvent(n,!0,!0),e.gesture=t,t.target.dispatchEvent(e)}(n,t);var e=this.handlers[n]&&this.handlers[n].slice();if(e&&e.length){t.type=n,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var l=0;l<e.length;)e[l](t),l++}},destroy:function(){this.element&&lt(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},a(tt,{INPUT_START:U,INPUT_MOVE:z,INPUT_END:V,INPUT_CANCEL:G,STATE_POSSIBLE:Dn,STATE_BEGAN:Bn,STATE_CHANGED:Un,STATE_ENDED:zn,STATE_RECOGNIZED:Vn,STATE_CANCELLED:Gn,STATE_FAILED:32,DIRECTION_NONE:W,DIRECTION_LEFT:H,DIRECTION_RIGHT:X,DIRECTION_UP:Y,DIRECTION_DOWN:Z,DIRECTION_HORIZONTAL:q,DIRECTION_VERTICAL:$,DIRECTION_ALL:K,Manager:et,Input:nn,TouchAction:Nn,TouchInput:Pn,MouseInput:fn,PointerEventInput:mn,TouchMouseInput:An,SingleTouchInput:xn,Recognizer:Wn,AttrRecognizer:Zn,Tap:nt,Pan:qn,Swipe:Jn,Pinch:$n,Rotate:Qn,Press:Kn,on:O,off:S,each:m,merge:y,extend:b,assign:a,inherit:x,bindFn:w,prefixed:R}),(void 0!==i?i:"undefined"!=typeof self?self:{}).Hammer=tt,(l=function(){return tt}.call(t,e,t,n))===o||(n.exports=l)}(window,document)},function(n,t,e){"use strict";e.r(t),e.d(t,"default",function(){return u});var l=e(90),i=e(4);const r={position:"absolute",left:0,top:0,width:"100%",height:"100%"};class u extends i.Deck{constructor(n={}){if("undefined"==typeof document)throw Error("Deck can only be used in the browser");const{mapCanvas:t,deckCanvas:e}=function(n){let{container:t=document.body}=n;if("string"==typeof t&&(t=document.getElementById(t)),!t)throw Error("Deck: container not found");"static"===window.getComputedStyle(t).position&&(t.style.position="relative");const e=document.createElement("div");t.appendChild(e),Object.assign(e.style,r);const l=document.createElement("canvas");return t.appendChild(l),Object.assign(l.style,r),{container:t,mapCanvas:e,deckCanvas:l}}(n),i=n.initialViewState||function(n){if(!n.viewState&&"latitude"in n&&"longitude"in n&&"zoom"in n){const{latitude:t,longitude:e,zoom:l,pitch:i=0,bearing:r=0}=n;return{latitude:t,longitude:e,zoom:l,pitch:i,bearing:r}}return n.viewState}(n),u=Number.isFinite(i.latitude),{map:o=window.mapboxgl,controller:a=!0}=n;super(Object.assign({},n,{width:"100%",height:"100%",canvas:e,controller:a,initialViewState:i})),o&&o.Map?this._map=u&&new l.a(Object.assign({},n,{viewState:i,container:t,mapboxgl:o})):this._map=o,this._onBeforeRender=(n=>{if(this.onBeforeRender(n),this._map){const n=this.getViewports()[0];this._map.setProps({width:n.width,height:n.height,viewState:n})}})}getMapboxMap(){return this._map&&this._map.getMap()}finalize(){this._map&&this._map.finalize(),super.finalize()}setProps(n){"onBeforeRender"in n&&this._onBeforeRender&&n.onBeforeRender!==this._onBeforeRender&&(this.onBeforeRender=n.onBeforeRender,n.onBeforeRender=this._onBeforeRender),super.setProps(n)}}},function(n,t,e){"use strict";var l=e(108);function i(){}n.exports=function(){function n(n,t,e,i,r,u){if(u!==l){var o=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw o.name="Invariant Violation",o}}function t(){return n}n.isRequired=n;var e={array:n,bool:n,func:n,number:n,object:n,string:n,symbol:n,any:n,arrayOf:t,element:n,instanceOf:t,node:n,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return e.checkPropTypes=i,e.PropTypes=e,e}},function(n,t,e){"use strict";n.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(n,t,e){"use strict";t.byteLength=function(n){var t=s(n),e=t[0],l=t[1];return 3*(e+l)/4-l},t.toByteArray=function(n){for(var t,e=s(n),l=e[0],u=e[1],o=new r(function(n,t,e){return 3*(t+e)/4-e}(0,l,u)),a=0,c=u>0?l-4:l,h=0;h<c;h+=4)t=i[n.charCodeAt(h)]<<18|i[n.charCodeAt(h+1)]<<12|i[n.charCodeAt(h+2)]<<6|i[n.charCodeAt(h+3)],o[a++]=t>>16&255,o[a++]=t>>8&255,o[a++]=255&t;2===u&&(t=i[n.charCodeAt(h)]<<2|i[n.charCodeAt(h+1)]>>4,o[a++]=255&t);1===u&&(t=i[n.charCodeAt(h)]<<10|i[n.charCodeAt(h+1)]<<4|i[n.charCodeAt(h+2)]>>2,o[a++]=t>>8&255,o[a++]=255&t);return o},t.fromByteArray=function(n){for(var t,e=n.length,i=e%3,r=[],u=0,o=e-i;u<o;u+=16383)r.push(c(n,u,u+16383>o?o:u+16383));1===i?(t=n[e-1],r.push(l[t>>2]+l[t<<4&63]+"==")):2===i&&(t=(n[e-2]<<8)+n[e-1],r.push(l[t>>10]+l[t>>4&63]+l[t<<2&63]+"="));return r.join("")};for(var l=[],i=[],r="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=u.length;o<a;++o)l[o]=u[o],i[u.charCodeAt(o)]=o;function s(n){var t=n.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=n.indexOf("=");return-1===e&&(e=t),[e,e===t?0:4-e%4]}function c(n,t,e){for(var i,r,u=[],o=t;o<e;o+=3)i=(n[o]<<16&16711680)+(n[o+1]<<8&65280)+(255&n[o+2]),u.push(l[(r=i)>>18&63]+l[r>>12&63]+l[r>>6&63]+l[63&r]);return u.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(n,t){t.read=function(n,t,e,l,i){var r,u,o=8*i-l-1,a=(1<<o)-1,s=a>>1,c=-7,h=e?i-1:0,f=e?-1:1,d=n[t+h];for(h+=f,r=d&(1<<-c)-1,d>>=-c,c+=o;c>0;r=256*r+n[t+h],h+=f,c-=8);for(u=r&(1<<-c)-1,r>>=-c,c+=l;c>0;u=256*u+n[t+h],h+=f,c-=8);if(0===r)r=1-s;else{if(r===a)return u?NaN:1/0*(d?-1:1);u+=Math.pow(2,l),r-=s}return(d?-1:1)*u*Math.pow(2,r-l)},t.write=function(n,t,e,l,i,r){var u,o,a,s=8*r-i-1,c=(1<<s)-1,h=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=l?0:r-1,p=l?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,u=c):(u=Math.floor(Math.log(t)/Math.LN2),t*(a=Math.pow(2,-u))<1&&(u--,a*=2),(t+=u+h>=1?f/a:f*Math.pow(2,1-h))*a>=2&&(u++,a/=2),u+h>=c?(o=0,u=c):u+h>=1?(o=(t*a-1)*Math.pow(2,i),u+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,i),u=0));i>=8;n[e+d]=255&o,d+=p,o/=256,i-=8);for(u=u<<i|o,s+=i;s>0;n[e+d]=255&u,d+=p,u/=256,s-=8);n[e+d-p]|=128*g}},function(n,t){var e={}.toString;n.exports=Array.isArray||function(n){return"[object Array]"==e.call(n)}},function(n,t,e){var l=function(n){"use strict";var t,e=Object.prototype,l=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},r=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",o=i.toStringTag||"@@toStringTag";function a(n,t,e,l){var i=t&&t.prototype instanceof g?t:g,r=Object.create(i.prototype),u=new A(l||[]);return r._invoke=function(n,t,e){var l=c;return function(i,r){if(l===f)throw new Error("Generator is already running");if(l===d){if("throw"===i)throw r;return C()}for(e.method=i,e.arg=r;;){var u=e.delegate;if(u){var o=P(u,e);if(o){if(o===p)continue;return o}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(l===c)throw l=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);l=f;var a=s(n,t,e);if("normal"===a.type){if(l=e.done?d:h,a.arg===p)continue;return{value:a.arg,done:e.done}}"throw"===a.type&&(l=d,e.method="throw",e.arg=a.arg)}}}(n,e,u),r}function s(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(n){return{type:"throw",arg:n}}}n.wrap=a;var c="suspendedStart",h="suspendedYield",f="executing",d="completed",p={};function g(){}function v(){}function m(){}var _={};_[r]=function(){return this};var b=Object.getPrototypeOf,y=b&&b(b(T([])));y&&y!==e&&l.call(y,r)&&(_=y);var x=m.prototype=g.prototype=Object.create(_);function w(n){["next","throw","return"].forEach(function(t){n[t]=function(n){return this._invoke(t,n)}})}function E(n){var t;this._invoke=function(e,i){function r(){return new Promise(function(t,r){!function t(e,i,r,u){var o=s(n[e],n,i);if("throw"!==o.type){var a=o.arg,c=a.value;return c&&"object"==typeof c&&l.call(c,"__await")?Promise.resolve(c.__await).then(function(n){t("next",n,r,u)},function(n){t("throw",n,r,u)}):Promise.resolve(c).then(function(n){a.value=n,r(a)},function(n){return t("throw",n,r,u)})}u(o.arg)}(e,i,t,r)})}return t=t?t.then(r,r):r()}}function P(n,e){var l=n.iterator[e.method];if(l===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=t,P(n,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var i=s(l,n.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,p;var r=i.arg;return r?r.done?(e[n.resultName]=r.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=t),e.delegate=null,p):r:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function O(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function S(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function A(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(O,this),this.reset(!0)}function T(n){if(n){var e=n[r];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var i=-1,u=function e(){for(;++i<n.length;)if(l.call(n,i))return e.value=n[i],e.done=!1,e;return e.value=t,e.done=!0,e};return u.next=u}}return{next:C}}function C(){return{value:t,done:!0}}return v.prototype=x.constructor=m,m.constructor=v,m[o]=v.displayName="GeneratorFunction",n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,m):(n.__proto__=m,o in n||(n[o]="GeneratorFunction")),n.prototype=Object.create(x),n},n.awrap=function(n){return{__await:n}},w(E.prototype),E.prototype[u]=function(){return this},n.AsyncIterator=E,n.async=function(t,e,l,i){var r=new E(a(t,e,l,i));return n.isGeneratorFunction(e)?r:r.next().then(function(n){return n.done?n.value:r.next()})},w(x),x[o]="Generator",x[r]=function(){return this},x.toString=function(){return"[object Generator]"},n.keys=function(n){var t=[];for(var e in n)t.push(e);return t.reverse(),function e(){for(;t.length;){var l=t.pop();if(l in n)return e.value=l,e.done=!1,e}return e.done=!0,e}},n.values=T,A.prototype={constructor:A,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(S),!n)for(var e in this)"t"===e.charAt(0)&&l.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=t)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function i(l,i){return o.type="throw",o.arg=n,e.next=l,i&&(e.method="next",e.arg=t),!!i}for(var r=this.tryEntries.length-1;r>=0;--r){var u=this.tryEntries[r],o=u.completion;if("root"===u.tryLoc)return i("end");if(u.tryLoc<=this.prev){var a=l.call(u,"catchLoc"),s=l.call(u,"finallyLoc");if(a&&s){if(this.prev<u.catchLoc)return i(u.catchLoc,!0);if(this.prev<u.finallyLoc)return i(u.finallyLoc)}else if(a){if(this.prev<u.catchLoc)return i(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return i(u.finallyLoc)}}}},abrupt:function(n,t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&l.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var r=i;break}}r&&("break"===n||"continue"===n)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var u=r?r.completion:{};return u.type=n,u.arg=t,r?(this.method="next",this.next=r.finallyLoc,p):this.complete(u)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),p},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),S(e),p}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var l=e.completion;if("throw"===l.type){var i=l.arg;S(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,l){return this.delegate={iterator:T(n),resultName:e,nextLoc:l},"next"===this.method&&(this.arg=t),p}},n}(n.exports);try{regeneratorRuntime=l}catch(n){Function("r","regeneratorRuntime = r")(l)}},function(n,t,e){"use strict";e.r(t),function(n){var t=e(47);!function(l){function i(n,t,e){return t<=n&&n<=e}n.exports&&!l["encoding-indexes"]&&(l["encoding-indexes"]=e(115)["encoding-indexes"]);var r=Math.floor;function u(n){if(void 0===n)return{};if(n===Object(n))return n;throw TypeError("Could not convert argument to dictionary")}function o(n){return 0<=n&&n<=127}var a=o,s=-1;function c(n){this.tokens=[].slice.call(n),this.tokens.reverse()}c.prototype={endOfStream:function(){return!this.tokens.length},read:function(){return this.tokens.length?this.tokens.pop():s},prepend:function(n){if(Array.isArray(n))for(var t=n;t.length;)this.tokens.push(t.pop());else this.tokens.push(n)},push:function(n){if(Array.isArray(n))for(var t=n;t.length;)this.tokens.unshift(t.shift());else this.tokens.unshift(n)}};var h=-1;function f(n,t){if(n)throw TypeError("Decoder error");return t||65533}function d(n){throw TypeError("The code point "+n+" could not be encoded.")}function p(n){return n=String(n).trim().toLowerCase(),Object.prototype.hasOwnProperty.call(v,n)?v[n]:null}var g=[{encodings:[{labels:["unicode-1-1-utf-8","utf-8","utf8"],name:"UTF-8"}],heading:"The Encoding"},{encodings:[{labels:["866","cp866","csibm866","ibm866"],name:"IBM866"},{labels:["csisolatin2","iso-8859-2","iso-ir-101","iso8859-2","iso88592","iso_8859-2","iso_8859-2:1987","l2","latin2"],name:"ISO-8859-2"},{labels:["csisolatin3","iso-8859-3","iso-ir-109","iso8859-3","iso88593","iso_8859-3","iso_8859-3:1988","l3","latin3"],name:"ISO-8859-3"},{labels:["csisolatin4","iso-8859-4","iso-ir-110","iso8859-4","iso88594","iso_8859-4","iso_8859-4:1988","l4","latin4"],name:"ISO-8859-4"},{labels:["csisolatincyrillic","cyrillic","iso-8859-5","iso-ir-144","iso8859-5","iso88595","iso_8859-5","iso_8859-5:1988"],name:"ISO-8859-5"},{labels:["arabic","asmo-708","csiso88596e","csiso88596i","csisolatinarabic","ecma-114","iso-8859-6","iso-8859-6-e","iso-8859-6-i","iso-ir-127","iso8859-6","iso88596","iso_8859-6","iso_8859-6:1987"],name:"ISO-8859-6"},{labels:["csisolatingreek","ecma-118","elot_928","greek","greek8","iso-8859-7","iso-ir-126","iso8859-7","iso88597","iso_8859-7","iso_8859-7:1987","sun_eu_greek"],name:"ISO-8859-7"},{labels:["csiso88598e","csisolatinhebrew","hebrew","iso-8859-8","iso-8859-8-e","iso-ir-138","iso8859-8","iso88598","iso_8859-8","iso_8859-8:1988","visual"],name:"ISO-8859-8"},{labels:["csiso88598i","iso-8859-8-i","logical"],name:"ISO-8859-8-I"},{labels:["csisolatin6","iso-8859-10","iso-ir-157","iso8859-10","iso885910","l6","latin6"],name:"ISO-8859-10"},{labels:["iso-8859-13","iso8859-13","iso885913"],name:"ISO-8859-13"},{labels:["iso-8859-14","iso8859-14","iso885914"],name:"ISO-8859-14"},{labels:["csisolatin9","iso-8859-15","iso8859-15","iso885915","iso_8859-15","l9"],name:"ISO-8859-15"},{labels:["iso-8859-16"],name:"ISO-8859-16"},{labels:["cskoi8r","koi","koi8","koi8-r","koi8_r"],name:"KOI8-R"},{labels:["koi8-ru","koi8-u"],name:"KOI8-U"},{labels:["csmacintosh","mac","macintosh","x-mac-roman"],name:"macintosh"},{labels:["dos-874","iso-8859-11","iso8859-11","iso885911","tis-620","windows-874"],name:"windows-874"},{labels:["cp1250","windows-1250","x-cp1250"],name:"windows-1250"},{labels:["cp1251","windows-1251","x-cp1251"],name:"windows-1251"},{labels:["ansi_x3.4-1968","ascii","cp1252","cp819","csisolatin1","ibm819","iso-8859-1","iso-ir-100","iso8859-1","iso88591","iso_8859-1","iso_8859-1:1987","l1","latin1","us-ascii","windows-1252","x-cp1252"],name:"windows-1252"},{labels:["cp1253","windows-1253","x-cp1253"],name:"windows-1253"},{labels:["cp1254","csisolatin5","iso-8859-9","iso-ir-148","iso8859-9","iso88599","iso_8859-9","iso_8859-9:1989","l5","latin5","windows-1254","x-cp1254"],name:"windows-1254"},{labels:["cp1255","windows-1255","x-cp1255"],name:"windows-1255"},{labels:["cp1256","windows-1256","x-cp1256"],name:"windows-1256"},{labels:["cp1257","windows-1257","x-cp1257"],name:"windows-1257"},{labels:["cp1258","windows-1258","x-cp1258"],name:"windows-1258"},{labels:["x-mac-cyrillic","x-mac-ukrainian"],name:"x-mac-cyrillic"}],heading:"Legacy single-byte encodings"},{encodings:[{labels:["chinese","csgb2312","csiso58gb231280","gb2312","gb_2312","gb_2312-80","gbk","iso-ir-58","x-gbk"],name:"GBK"},{labels:["gb18030"],name:"gb18030"}],heading:"Legacy multi-byte Chinese (simplified) encodings"},{encodings:[{labels:["big5","big5-hkscs","cn-big5","csbig5","x-x-big5"],name:"Big5"}],heading:"Legacy multi-byte Chinese (traditional) encodings"},{encodings:[{labels:["cseucpkdfmtjapanese","euc-jp","x-euc-jp"],name:"EUC-JP"},{labels:["csiso2022jp","iso-2022-jp"],name:"ISO-2022-JP"},{labels:["csshiftjis","ms932","ms_kanji","shift-jis","shift_jis","sjis","windows-31j","x-sjis"],name:"Shift_JIS"}],heading:"Legacy multi-byte Japanese encodings"},{encodings:[{labels:["cseuckr","csksc56011987","euc-kr","iso-ir-149","korean","ks_c_5601-1987","ks_c_5601-1989","ksc5601","ksc_5601","windows-949"],name:"EUC-KR"}],heading:"Legacy multi-byte Korean encodings"},{encodings:[{labels:["csiso2022kr","hz-gb-2312","iso-2022-cn","iso-2022-cn-ext","iso-2022-kr"],name:"replacement"},{labels:["utf-16be"],name:"UTF-16BE"},{labels:["utf-16","utf-16le"],name:"UTF-16LE"},{labels:["x-user-defined"],name:"x-user-defined"}],heading:"Legacy miscellaneous encodings"}],v={};g.forEach(function(n){n.encodings.forEach(function(n){n.labels.forEach(function(t){v[t]=n})})});var m,_,b={},y={};function x(n,t){return t&&t[n]||null}function w(n,t){var e=t.indexOf(n);return-1===e?null:e}function E(n){if(!("encoding-indexes"in l))throw Error("Indexes missing. Did you forget to include encoding-indexes.js first?");return l["encoding-indexes"][n]}var P="utf-8";function O(n,t){if(!(this instanceof O))throw TypeError("Called as a function. Did you forget 'new'?");n=void 0!==n?String(n):P,t=u(t),this._encoding=null,this._decoder=null,this._ignoreBOM=!1,this._BOMseen=!1,this._error_mode="replacement",this._do_not_flush=!1;var e=p(n);if(null===e||"replacement"===e.name)throw RangeError("Unknown encoding: "+n);if(!y[e.name])throw Error("Decoder not present. Did you forget to include encoding-indexes.js first?");return this._encoding=e,Boolean(t.fatal)&&(this._error_mode="fatal"),Boolean(t.ignoreBOM)&&(this._ignoreBOM=!0),Object.defineProperty||(this.encoding=this._encoding.name.toLowerCase(),this.fatal="fatal"===this._error_mode,this.ignoreBOM=this._ignoreBOM),this}function S(n,t){if(!(this instanceof S))throw TypeError("Called as a function. Did you forget 'new'?");t=u(t),this._encoding=null,this._encoder=null,this._do_not_flush=!1,this._fatal=Boolean(t.fatal)?"fatal":"replacement";if(Boolean(t.NONSTANDARD_allowLegacyEncoding)){var e=p(n=void 0!==n?String(n):P);if(null===e||"replacement"===e.name)throw RangeError("Unknown encoding: "+n);if(!b[e.name])throw Error("Encoder not present. Did you forget to include encoding-indexes.js first?");this._encoding=e}else this._encoding=p("utf-8"),void 0!==n&&"console"in l&&console.warn("TextEncoder constructor called with encoding label, which is ignored.");return Object.defineProperty||(this.encoding=this._encoding.name.toLowerCase()),this}function A(n){var t=n.fatal,e=0,l=0,r=0,u=128,o=191;this.handler=function(n,a){if(a===s&&0!==r)return r=0,f(t);if(a===s)return h;if(0===r){if(i(a,0,127))return a;if(i(a,194,223))r=1,e=31&a;else if(i(a,224,239))224===a&&(u=160),237===a&&(o=159),r=2,e=15&a;else{if(!i(a,240,244))return f(t);240===a&&(u=144),244===a&&(o=143),r=3,e=7&a}return null}if(!i(a,u,o))return e=r=l=0,u=128,o=191,n.prepend(a),f(t);if(u=128,o=191,e=e<<6|63&a,(l+=1)!==r)return null;var c=e;return e=r=l=0,c}}function T(n){n.fatal;this.handler=function(n,t){if(t===s)return h;if(a(t))return t;var e,l;i(t,128,2047)?(e=1,l=192):i(t,2048,65535)?(e=2,l=224):i(t,65536,1114111)&&(e=3,l=240);for(var r=[(t>>6*e)+l];e>0;){var u=t>>6*(e-1);r.push(128|63&u),e-=1}return r}}function C(n,t){var e=t.fatal;this.handler=function(t,l){if(l===s)return h;if(o(l))return l;var i=n[l-128];return null===i?f(e):i}}function L(n,t){t.fatal;this.handler=function(t,e){if(e===s)return h;if(a(e))return e;var l=w(e,n);return null===l&&d(e),l+128}}function M(n){var t=n.fatal,e=0,l=0,r=0;this.handler=function(n,u){if(u===s&&0===e&&0===l&&0===r)return h;var a;if(u!==s||0===e&&0===l&&0===r||(e=0,l=0,r=0,f(t)),0!==r){a=null,i(u,48,57)&&(a=function(n){if(n>39419&&n<189e3||n>1237575)return null;if(7457===n)return 59335;var t,e=0,l=0,i=E("gb18030-ranges");for(t=0;t<i.length;++t){var r=i[t];if(!(r[0]<=n))break;e=r[0],l=r[1]}return l+n-e}(10*(126*(10*(e-129)+l-48)+r-129)+u-48));var c=[l,r,u];return e=0,l=0,r=0,null===a?(n.prepend(c),f(t)):a}if(0!==l)return i(u,129,254)?(r=u,null):(n.prepend([l,u]),e=0,l=0,f(t));if(0!==e){if(i(u,48,57))return l=u,null;var d=e,p=null;e=0;var g=u<127?64:65;return(i(u,64,126)||i(u,128,254))&&(p=190*(d-129)+(u-g)),null===(a=null===p?null:x(p,E("gb18030")))&&o(u)&&n.prepend(u),null===a?f(t):a}return o(u)?u:128===u?8364:i(u,129,254)?(e=u,null):f(t)}}function j(n,t){n.fatal;this.handler=function(n,e){if(e===s)return h;if(a(e))return e;if(58853===e)return d(e);if(t&&8364===e)return 128;var l=w(e,E("gb18030"));if(null!==l){var i=l%190;return[r(l/190)+129,i+(i<63?64:65)]}if(t)return d(e);l=function(n){if(59335===n)return 7457;var t,e=0,l=0,i=E("gb18030-ranges");for(t=0;t<i.length;++t){var r=i[t];if(!(r[1]<=n))break;e=r[1],l=r[0]}return l+n-e}(e);var u=r(l/10/126/10),o=r((l-=10*u*126*10)/10/126),c=r((l-=10*o*126)/10);return[u+129,o+48,c+129,l-10*c+48]}}function R(n){var t=n.fatal,e=0;this.handler=function(n,l){if(l===s&&0!==e)return e=0,f(t);if(l===s&&0===e)return h;if(0!==e){var r=e,u=null;e=0;var a=l<127?64:98;switch((i(l,64,126)||i(l,161,254))&&(u=157*(r-129)+(l-a)),u){case 1133:return[202,772];case 1135:return[202,780];case 1164:return[234,772];case 1166:return[234,780]}var c=null===u?null:x(u,E("big5"));return null===c&&o(l)&&n.prepend(l),null===c?f(t):c}return o(l)?l:i(l,129,254)?(e=l,null):f(t)}}function I(n){n.fatal;this.handler=function(n,t){if(t===s)return h;if(a(t))return t;var e=function(n){var t=_=_||E("big5").map(function(n,t){return t<5024?null:n});return 9552===n||9566===n||9569===n||9578===n||21313===n||21317===n?t.lastIndexOf(n):w(n,t)}(t);if(null===e)return d(t);var l=r(e/157)+129;if(l<161)return d(t);var i=e%157;return[l,i+(i<63?64:98)]}}function k(n){var t=n.fatal,e=!1,l=0;this.handler=function(n,r){if(r===s&&0!==l)return l=0,f(t);if(r===s&&0===l)return h;if(142===l&&i(r,161,223))return l=0,65216+r;if(143===l&&i(r,161,254))return e=!0,l=r,null;if(0!==l){var u=l;l=0;var a=null;return i(u,161,254)&&i(r,161,254)&&(a=x(94*(u-161)+(r-161),E(e?"jis0212":"jis0208"))),e=!1,i(r,161,254)||n.prepend(r),null===a?f(t):a}return o(r)?r:142===r||143===r||i(r,161,254)?(l=r,null):f(t)}}function F(n){n.fatal;this.handler=function(n,t){if(t===s)return h;if(a(t))return t;if(165===t)return 92;if(8254===t)return 126;if(i(t,65377,65439))return[142,t-65377+161];8722===t&&(t=65293);var e=w(t,E("jis0208"));return null===e?d(t):[r(e/94)+161,e%94+161]}}function N(n){var t=n.fatal,e=0,l=1,r=2,u=3,o=4,a=5,c=6,d=e,p=e,g=0,v=!1;this.handler=function(n,m){switch(d){default:case e:return 27===m?(d=a,null):i(m,0,127)&&14!==m&&15!==m&&27!==m?(v=!1,m):m===s?h:(v=!1,f(t));case l:return 27===m?(d=a,null):92===m?(v=!1,165):126===m?(v=!1,8254):i(m,0,127)&&14!==m&&15!==m&&27!==m&&92!==m&&126!==m?(v=!1,m):m===s?h:(v=!1,f(t));case r:return 27===m?(d=a,null):i(m,33,95)?(v=!1,65344+m):m===s?h:(v=!1,f(t));case u:return 27===m?(d=a,null):i(m,33,126)?(v=!1,g=m,d=o,null):m===s?h:(v=!1,f(t));case o:if(27===m)return d=a,f(t);if(i(m,33,126)){d=u;var _=x(94*(g-33)+m-33,E("jis0208"));return null===_?f(t):_}return m===s?(d=u,n.prepend(m),f(t)):(d=u,f(t));case a:return 36===m||40===m?(g=m,d=c,null):(n.prepend(m),v=!1,d=p,f(t));case c:var b=g;g=0;var y=null;if(40===b&&66===m&&(y=e),40===b&&74===m&&(y=l),40===b&&73===m&&(y=r),36!==b||64!==m&&66!==m||(y=u),null!==y){d=d=y;var w=v;return v=!0,w?f(t):null}return n.prepend([b,m]),v=!1,d=p,f(t)}}}function D(n){n.fatal;var t=0,e=1,l=2,i=t;this.handler=function(n,u){if(u===s&&i!==t)return n.prepend(u),i=t,[27,40,66];if(u===s&&i===t)return h;if(!(i!==t&&i!==e||14!==u&&15!==u&&27!==u))return d(65533);if(i===t&&a(u))return u;if(i===e&&(a(u)&&92!==u&&126!==u||165==u||8254==u)){if(a(u))return u;if(165===u)return 92;if(8254===u)return 126}if(a(u)&&i!==t)return n.prepend(u),i=t,[27,40,66];if((165===u||8254===u)&&i!==e)return n.prepend(u),i=e,[27,40,74];8722===u&&(u=65293);var o=w(u,E("jis0208"));return null===o?d(u):i!==l?(n.prepend(u),i=l,[27,36,66]):[r(o/94)+33,o%94+33]}}function B(n){var t=n.fatal,e=0;this.handler=function(n,l){if(l===s&&0!==e)return e=0,f(t);if(l===s&&0===e)return h;if(0!==e){var r=e,u=null;e=0;var a=l<127?64:65,c=r<160?129:193;if((i(l,64,126)||i(l,128,252))&&(u=188*(r-c)+l-a),i(u,8836,10715))return 48508+u;var d=null===u?null:x(u,E("jis0208"));return null===d&&o(l)&&n.prepend(l),null===d?f(t):d}return o(l)||128===l?l:i(l,161,223)?65216+l:i(l,129,159)||i(l,224,252)?(e=l,null):f(t)}}function U(n){n.fatal;this.handler=function(n,t){if(t===s)return h;if(a(t)||128===t)return t;if(165===t)return 92;if(8254===t)return 126;if(i(t,65377,65439))return t-65377+161;8722===t&&(t=65293);var e=function(n){return(m=m||E("jis0208").map(function(n,t){return i(t,8272,8835)?null:n})).indexOf(n)}(t);if(null===e)return d(t);var l=r(e/188),u=e%188;return[l+(l<31?129:193),u+(u<63?64:65)]}}function z(n){var t=n.fatal,e=0;this.handler=function(n,l){if(l===s&&0!==e)return e=0,f(t);if(l===s&&0===e)return h;if(0!==e){var r=e,u=null;e=0,i(l,65,254)&&(u=190*(r-129)+(l-65));var a=null===u?null:x(u,E("euc-kr"));return null===u&&o(l)&&n.prepend(l),null===a?f(t):a}return o(l)?l:i(l,129,254)?(e=l,null):f(t)}}function V(n){n.fatal;this.handler=function(n,t){if(t===s)return h;if(a(t))return t;var e=w(t,E("euc-kr"));return null===e?d(t):[r(e/190)+129,e%190+65]}}function G(n,t){var e=n>>8,l=255&n;return t?[e,l]:[l,e]}function W(n,t){var e=t.fatal,l=null,r=null;this.handler=function(t,u){if(u===s&&(null!==l||null!==r))return f(e);if(u===s&&null===l&&null===r)return h;if(null===l)return l=u,null;var o;if(o=n?(l<<8)+u:(u<<8)+l,l=null,null!==r){var a=r;return r=null,i(o,56320,57343)?65536+1024*(a-55296)+(o-56320):(t.prepend(G(o,n)),f(e))}return i(o,55296,56319)?(r=o,null):i(o,56320,57343)?f(e):o}}function H(n,t){t.fatal;this.handler=function(t,e){if(e===s)return h;if(i(e,0,65535))return G(e,n);var l=G(55296+(e-65536>>10),n),r=G(56320+(e-65536&1023),n);return l.concat(r)}}function X(n){n.fatal;this.handler=function(n,t){return t===s?h:o(t)?t:63360+t-128}}function Y(n){n.fatal;this.handler=function(n,t){return t===s?h:a(t)?t:i(t,63360,63487)?t-63360+128:d(t)}}Object.defineProperty&&(Object.defineProperty(O.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),Object.defineProperty(O.prototype,"fatal",{get:function(){return"fatal"===this._error_mode}}),Object.defineProperty(O.prototype,"ignoreBOM",{get:function(){return this._ignoreBOM}})),O.prototype.decode=function(n,e){var l;l="object"===Object(t.a)(n)&&n instanceof ArrayBuffer?new Uint8Array(n):"object"===Object(t.a)(n)&&"buffer"in n&&n.buffer instanceof ArrayBuffer?new Uint8Array(n.buffer,n.byteOffset,n.byteLength):new Uint8Array(0),e=u(e),this._do_not_flush||(this._decoder=y[this._encoding.name]({fatal:"fatal"===this._error_mode}),this._BOMseen=!1),this._do_not_flush=Boolean(e.stream);for(var i,r=new c(l),o=[];;){var a=r.read();if(a===s)break;if((i=this._decoder.handler(r,a))===h)break;null!==i&&(Array.isArray(i)?o.push.apply(o,i):o.push(i))}if(!this._do_not_flush){do{if((i=this._decoder.handler(r,r.read()))===h)break;null!==i&&(Array.isArray(i)?o.push.apply(o,i):o.push(i))}while(!r.endOfStream());this._decoder=null}return function(n){var t,e;return t=["UTF-8","UTF-16LE","UTF-16BE"],e=this._encoding.name,-1===t.indexOf(e)||this._ignoreBOM||this._BOMseen||(n.length>0&&65279===n[0]?(this._BOMseen=!0,n.shift()):n.length>0&&(this._BOMseen=!0)),function(n){for(var t="",e=0;e<n.length;++e){var l=n[e];l<=65535?t+=String.fromCharCode(l):(l-=65536,t+=String.fromCharCode(55296+(l>>10),56320+(1023&l)))}return t}(n)}.call(this,o)},Object.defineProperty&&Object.defineProperty(S.prototype,"encoding",{get:function(){return this._encoding.name.toLowerCase()}}),S.prototype.encode=function(n,t){n=void 0===n?"":String(n),t=u(t),this._do_not_flush||(this._encoder=b[this._encoding.name]({fatal:"fatal"===this._fatal})),this._do_not_flush=Boolean(t.stream);for(var e,l=new c(function(n){for(var t=String(n),e=t.length,l=0,i=[];l<e;){var r=t.charCodeAt(l);if(r<55296||r>57343)i.push(r);else if(56320<=r&&r<=57343)i.push(65533);else if(55296<=r&&r<=56319)if(l===e-1)i.push(65533);else{var u=t.charCodeAt(l+1);if(56320<=u&&u<=57343){var o=1023&r,a=1023&u;i.push(65536+(o<<10)+a),l+=1}else i.push(65533)}l+=1}return i}(n)),i=[];;){var r=l.read();if(r===s)break;if((e=this._encoder.handler(l,r))===h)break;Array.isArray(e)?i.push.apply(i,e):i.push(e)}if(!this._do_not_flush){for(;(e=this._encoder.handler(l,l.read()))!==h;)Array.isArray(e)?i.push.apply(i,e):i.push(e);this._encoder=null}return new Uint8Array(i)},b["UTF-8"]=function(n){return new T(n)},y["UTF-8"]=function(n){return new A(n)},"encoding-indexes"in l&&g.forEach(function(n){"Legacy single-byte encodings"===n.heading&&n.encodings.forEach(function(n){var t=n.name,e=E(t.toLowerCase());y[t]=function(n){return new C(e,n)},b[t]=function(n){return new L(e,n)}})}),y.GBK=function(n){return new M(n)},b.GBK=function(n){return new j(n,!0)},b.gb18030=function(n){return new j(n)},y.gb18030=function(n){return new M(n)},b.Big5=function(n){return new I(n)},y.Big5=function(n){return new R(n)},b["EUC-JP"]=function(n){return new F(n)},y["EUC-JP"]=function(n){return new k(n)},b["ISO-2022-JP"]=function(n){return new D(n)},y["ISO-2022-JP"]=function(n){return new N(n)},b.Shift_JIS=function(n){return new U(n)},y.Shift_JIS=function(n){return new B(n)},b["EUC-KR"]=function(n){return new V(n)},y["EUC-KR"]=function(n){return new z(n)},b["UTF-16BE"]=function(n){return new H(!0,n)},y["UTF-16BE"]=function(n){return new W(!0,n)},b["UTF-16LE"]=function(n){return new H(!1,n)},y["UTF-16LE"]=function(n){return new W(!1,n)},b["x-user-defined"]=function(n){return new Y(n)},y["x-user-defined"]=function(n){return new X(n)},l.TextEncoder||(l.TextEncoder=S),l.TextDecoder||(l.TextDecoder=O),n.exports&&(n.exports={TextEncoder:l.TextEncoder,TextDecoder:l.TextDecoder,EncodingIndexes:l["encoding-indexes"]})}({})}.call(this,e(114)(n))},function(n,t){n.exports=function(n){if(!n.webpackPolyfill){var t=Object.create(n);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(n,t,e){!function(t){"use strict";n.exports&&(n.exports=t),t["encoding-indexes"]={big5:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,17e4,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14e3,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132e3,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22e3,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21e3,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,3e4,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23e3,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32e3,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36e3,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26e3,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37e3,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39e3,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38e3,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28e3,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35e3,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27e3,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34e3,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25e3,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24e3,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,4e4,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],"euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46e3,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48e3,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49e3,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,5e4,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51e3,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45e3,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47e3,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52e3,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55e3,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53e3,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54e3,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32e3,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37e3,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36e3,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26e3,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21e3,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39e3,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,3e4,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64e3,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27e3,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],gb18030:[19970,19972,19973,19974,19983,19986,19991,19999,2e4,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22e3,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24e3,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29e3,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59e3,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31e3,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25e3,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32e3,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,3e4,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35e3,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36e3,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21e3,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34e3,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28e3,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37e3,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23e3,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38e3,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27e3,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33e3,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26e3,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39e3,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,4e4,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58e3,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],"gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189e3,65536]],jis0208:[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21e3,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39e3,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32e3,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,3e4,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26e3,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36e3,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27e3,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34e3,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38e3,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],jis0212:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25e3,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37e3,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],ibm866:[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],"iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],"iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],"iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],"iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],"iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],"iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],"iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],"iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],"koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],"koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],macintosh:[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],"windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],"windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],"windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],"windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],"windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],"windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],"windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],"windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],"windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],"windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],"x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]}}(this||{})},function(n,t,e){"use strict";e.r(t);var l=e(4);const i=[[255,255,178],[254,217,118],[254,178,76],[253,141,60],[240,59,32],[189,0,38]];var r=e(5),u=e.n(r),o=e(1),a=e(21);const s={SUM:1,MEAN:2,MIN:3,MAX:4},c={dataChanged:!0,viewportChanged:!0,cellSizeChanged:!0},h={changeFlags:c,projectPoints:!1,useGPU:!0,fp64:!1,viewport:null,gridTransformMatrix:null,createBufferObjects:!0},f=3.402823466e38,d=[u.a.MIN,u.a.FUNC_ADD],p=[u.a.MAX,u.a.FUNC_ADD],g=[u.a.MAX,u.a.MIN],v={[s.SUM]:u.a.FUNC_ADD,[s.MEAN]:u.a.FUNC_ADD,[s.MIN]:d,[s.MAX]:p},m=4,_={size:1,operation:s.SUM,needMin:!1,needMax:!1,combineMaxMin:!1},b=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],y=4,x=3;var w="#define SHADER_NAME gpu-aggregation-to-grid-vs\n\nattribute vec2 positions;\nattribute vec3 weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform mat4 uProjectionMatrix;\nuniform bool projectPoints;\n\nvarying vec3 vWeights;\n\nvec2 project_to_pixel(vec4 pos) {\n  vec4 result =  uProjectionMatrix * pos;\n  return result.xy/result.w;\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec4 windowPos = vec4(positions, 0, 1.);\n  if (projectPoints) {\n    windowPos = project_position_to_clipspace(vec3(positions, 0), vec2(0, 0), vec3(0, 0, 0));\n  }\n\n  vec2 pos = project_to_pixel(windowPos);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  pos = floor(pos / cellSize);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n",E="#define SHADER_NAME gpu-aggregation-to-grid-vs-64\n\nattribute vec2 positions;\nattribute vec2 positions64xyLow;\nattribute vec3 weights;\nuniform vec2 windowSize;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform vec2 uProjectionMatrixFP64[16];\nuniform bool projectPoints;\n\nvarying vec3 vWeights;\n\nvoid project_to_pixel(vec2 pos, vec2 pos64xyLow, out vec2 pixelXY64[2]) {\n\n  vec2 result64[4];\n  vec2 position64[4];\n  position64[0] = vec2(pos.x, pos64xyLow.x);\n  position64[1] = vec2(pos.y, pos64xyLow.y);\n  position64[2] = vec2(0., 0.);\n  position64[3] = vec2(1., 0.);\n  mat4_vec4_mul_fp64(uProjectionMatrixFP64, position64,\n  result64);\n\n  pixelXY64[0] = div_fp64(result64[0], result64[3]);\n  pixelXY64[1] = div_fp64(result64[1], result64[3]);\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec2 windowPos = positions;\n  vec2 windowPos64xyLow = positions64xyLow;\n  if (projectPoints) {\n    vec2 projectedXY[2];\n    project_position_fp64(windowPos, windowPos64xyLow, projectedXY);\n    windowPos.x = projectedXY[0].x;\n    windowPos.y = projectedXY[1].x;\n    windowPos64xyLow.x = projectedXY[0].y;\n    windowPos64xyLow.y = projectedXY[1].y;\n  }\n\n  vec2 pixelXY64[2];\n  project_to_pixel(windowPos, windowPos64xyLow, pixelXY64);\n\n  // Transform (0,0):windowSize -> (0, 0): gridSize\n  vec2 gridXY64[2];\n  gridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\n  gridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\n  float x = floor(gridXY64[0].x);\n  float y = floor(gridXY64[1].x);\n  vec2 pos = vec2(x, y);\n\n  // Transform (0,0):gridSize -> (-1, -1):(1,1)\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n}\n",P="#define SHADER_NAME gpu-aggregation-to-grid-fs\n\nprecision highp float;\n\nvarying vec3 vWeights;\n\nvoid main(void) {\n  gl_FragColor = vec4(vWeights, 1.0);\n}\n",O="#version 300 es\n#define SHADER_NAME gpu-aggregation-all-vs-64\n\nin vec2 position;\nuniform vec2 gridSize;\n\nout vec2 vTextureCoord;\nvoid main(void) {\n  // Map each position to single pixel\n  vec2 pos = vec2(-1.0, -1.0);\n\n  // Move to pixel center, pixel-size in screen sapce (2/gridSize) * 0.5 => 1/gridSize\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  float yIndex = floor(float(gl_InstanceID) / gridSize[0]);\n  float xIndex = float(gl_InstanceID) - (yIndex * gridSize[0]);\n\n  vec2 yIndexFP64 = vec2(yIndex, 0.);\n  vec2 xIndexFP64 = vec2(xIndex, 0.);\n  vec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\n  vec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\n\n  vec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\n  vec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\n\n  vTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\n}\n",S="#version 300 es\n#define SHADER_NAME gpu-aggregation-all-fs\n\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform bool combineMaxMin;\nout vec4 fragColor;\nvoid main(void) {\n  vec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  if (textureColor.a == 0.) {\n    discard;\n  }\n  fragColor.rgb = textureColor.rgb;\n  // if combineMinMax is true, use Alpha channel for first weights min value.\n  fragColor.a = combineMaxMin ? textureColor.r : textureColor.a;\n}\n",A="#define SHADER_NAME gpu-aggregation-transform-mean-vs\nattribute vec4 aggregationValues;\nvarying vec4 meanValues;\n\nvoid main()\n{\n  // TODO: Use 64-bit division ?? not needed given this is aggregation ??\n  bool isCellValid = bool(aggregationValues.w > 0.);\n  // aggregationValues:  XYZ contain aggregated values, W contains count\n  meanValues.xyz = isCellValid ? aggregationValues.xyz/aggregationValues.w : vec3(0, 0, 0);\n  meanValues.w = aggregationValues.w;\n}\n";function T(n,t){const{width:e=1,height:l=1}=t;return new o.Texture2D(n,{data:null,format:u.a.RGBA32F,type:u.a.FLOAT,border:0,mipmaps:!1,parameters:{[u.a.TEXTURE_MAG_FILTER]:u.a.NEAREST,[u.a.TEXTURE_MIN_FILTER]:u.a.NEAREST},dataFormat:u.a.RGBA,width:e,height:l})}function C(n,t){const{id:e,width:l=1,height:i=1}=t,r=t.texture||T(n,t);return new o.Framebuffer(n,{id:e,width:l,height:i,attachments:{[u.a.COLOR_ATTACHMENT0]:r}})}function L(n,t,e=0){return!n||n.length<t?new Float32Array(t).fill(e):n}function M({gl:n,bufferName:t,data:e,result:l}){l[t]?l[t].subData({data:e}):l[t]=new o.Buffer(n,e)}const{fp64ifyMatrix4:j}=o.fp64;class R{static getAggregationData({aggregationData:n,maxData:t,pixelIndex:e}){l.log.assert(n.length>=(e+1)*y),l.log.assert(t.length===y);const i=e*y;return{cellCount:n[i+3],cellWeight:n[i],totalCount:t[3],maxCellWieght:t[0]}}static getCellData({countsData:n,size:t=1}){const e=n.length/4,l=new Float32Array(e*t),i=new Uint32Array(e);for(let r=0;r<e;r++){for(let e=0;e<t;e++)l[r*t+e]=n[4*r+e];i[r]=n[4*r+3]}return{cellCounts:i,cellWeights:l}}constructor(n,t={}){this.id=t.id||"gpu-grid-aggregator",this.shaderCache=t.shaderCache||null,this.gl=n,this.state={weights:null,gridPositions:null,positionsBuffer:null,positions64xyLowBuffer:null,vertexCount:0,fp64:null,useGPU:null,numCol:0,numRow:0,windowSize:null,cellSize:null,weightAttributes:{},textures:{},meanTextures:{},buffers:{},framebuffers:{},maxMinFramebuffers:{},minFramebuffers:{},maxFramebuffers:{},equations:{}},this._hasGPUSupport=Object(o.isWebGL2)(n)&&Object(o.hasFeatures)(this.gl,o.FEATURES.BLEND_EQUATION_MINMAX,o.FEATURES.COLOR_ATTACHMENT_RGBA32F,o.FEATURES.TEXTURE_FLOAT)}delete(){const{gridAggregationModel:n,allAggregationModel:t,meanTransform:e}=this,{positionsBuffer:l,position64Buffer:i,framebuffers:r,maxMinFramebuffers:u,minFramebuffers:o,maxFramebuffers:a,meanTextures:s}=this.state;n&&n.delete(),t&&t.delete(),e&&e.delete(),l&&l.delete(),i&&i.delete(),this.deleteResources(r),this.deleteResources(u),this.deleteResources(o),this.deleteResources(a),this.deleteResources(s)}run(n={}){const t=this.getAggregationParams(n);this.updateGridSize(t);const{useGPU:e}=t;return this._hasGPUSupport&&e?this.runAggregationOnGPU(t):(e&&l.log.warn("ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU")(),this.runAggregationOnCPU(t))}deleteResources(n){for(const t in n)n[t].delete()}getAggregationParams(n){const t=Object.assign({},h,n),{useGPU:e,gridTransformMatrix:l,viewport:i,weights:r,projectPoints:u,cellSize:o}=t;return this.state.useGPU!==e&&(t.changeFlags=Object.assign({},t.changeFlags,c)),!o||this.state.cellSize&&this.state.cellSize[0]===o[0]&&this.state.cellSize[1]===o[1]||(t.changeFlags.cellSizeChanged=!0,this.setState({cellSize:o})),this.validateProps(t,n),this.setState({useGPU:e}),t.gridTransformMatrix=(u?i.viewportMatrix:l)||b,r&&(t.weights=this.normalizeWeightParams(r),this.setState({weights:t.weights})),t}normalizeWeightParams(n){const t={};for(const e in n)t[e]=Object.assign({},_,n[e]);return t}setState(n){Object.assign(this.state,n)}shouldTransformToGrid(n){const{projectPoints:t,changeFlags:e}=n;return!!(!this.state.gridPositions||e.dataChanged||t&&e.viewportChanged)}updateGridSize(n){const{viewport:t,cellSize:e}=n,l=n.width||t.width,i=n.height||t.height,r=Math.ceil(l/e[0]),u=Math.ceil(i/e[1]);this.setState({numCol:r,numRow:u,windowSize:[l,i]})}validateProps(n,t){const{changeFlags:e,projectPoints:i,gridTransformMatrix:r}=n;l.log.assert(e.dataChanged||e.viewportChanged||e.cellSizeChanged),l.log.assert(!e.dataChanged||t.positions&&t.weights&&(!t.projectPositions||t.viewport)&&t.cellSize),l.log.assert(!e.cellSizeChanged||t.cellSize),l.log.assert(!(e.viewportChanged&&i)||t.viewport),i&&r&&l.log.warn("projectPoints is true, gridTransformMatrix is ignored")()}calculateAggregationData(n){const{weights:t,results:e,cellIndex:i,posIndex:r}=n;for(const n in t){const{values:u,size:o,operation:a}=t[n],{aggregationData:c}=e[n];for(let n=0;n<o;n++){const t=i+n,e=u[r*x+n];if(0===c[i+3])c[t]=e;else switch(a){case s.SUM:case s.MEAN:c[t]+=e;break;case s.MIN:c[t]=Math.min(c[t],e);break;case s.MAX:c[t]=Math.max(c[t],e);break;default:l.log.assert(!1)}}c[i+3]++}}calculateMeanMaxMinData(n){const{validCellIndices:t,results:e,weights:l}=n;t.forEach(n=>{for(const t in e){const{size:i,needMin:r,needMax:u,operation:o}=l[t],{aggregationData:a,minData:c,maxData:h,maxMinData:f}=e[t],d=r||u,p=o===s.MEAN,g=r&&u&&l[t].combineMaxMin,v=a[n+m-1];for(let t=0;t<i&&(d||p);t++){const e=n+t;let l=a[e];p&&(a[e]/=v,l=a[e]),g?f[t]=Math.max(f[t],l):(r&&(c[t]=Math.min(c[t],l)),u&&(h[t]=Math.max(h[t],l)))}g?f[m-1]=Math.min(f[m-1],a[n+0]):(r&&(c[m-1]+=v),u&&(h[m-1]+=v))}})}initCPUResults(n){const t=n.weights||this.state.weights,{numCol:e,numRow:l}=this.state,i={};for(const n in t){let{aggregationData:r,minData:u,maxData:o,maxMinData:a}=t[n];const{needMin:s,needMax:c}=t[n],h=s&&c&&t[n].combineMaxMin;r=L(r,e*l*m),h?((a=L(a,m)).fill(-1/0,0,m-1),a[m-1]=1/0):(s&&((u=L(u,m,1/0))[m-1]=0),c&&((o=L(o,m,-1/0))[m-1]=0)),i[n]=Object.assign({},t[n],{aggregationData:r,minData:u,maxData:o,maxMinData:a})}return i}runAggregationOnCPU(n){const{positions:t,cellSize:e,gridTransformMatrix:i,viewport:r,projectPoints:u}=n;let{weights:o}=n;const{numCol:s,numRow:c}=this.state,h=this.initCPUResults(n),f=this.shouldTransformToGrid(n);let d;const p=[0,0,0];let g;l.log.assert(f||n.changeFlags.cellSizeChanged),f?(g=t.length/2,d=new Float64Array(t.length),this.setState({gridPositions:d})):(d=this.state.gridPositions,o=this.state.weights,g=d.length/2);const v=new Set;for(let n=0;n<g;n++){let l,g;f?(p[0]=t[2*n],p[1]=t[2*n+1],[l,g]=u?r.project(p):Object(a.k)(p,i),d[2*n]=l,d[2*n+1]=g):(l=d[2*n],g=d[2*n+1]);const _=Math.floor(l/e[0]),b=Math.floor(g/e[1]);if(_>=0&&_<s&&b>=0&&b<c){const t=(_+b*s)*m;v.add(t),this.calculateAggregationData({weights:o,results:h,cellIndex:t,posIndex:n})}}return this.calculateMeanMaxMinData({validCellIndices:v,results:h,weights:o}),this.updateAggregationBuffers(n,h),h}updateAggregationBuffers(n,t){if(!n.createBufferObjects)return;const e=n.weights||this.state.weights;for(const n in t){const{aggregationData:l,minData:i,maxData:r,maxMinData:u}=t[n],{needMin:o,needMax:a}=e[n],s=o&&a&&e[n].combineMaxMin;M({gl:this.gl,bufferName:"aggregationBuffer",data:l,result:t[n]}),s?M({gl:this.gl,bufferName:"maxMinBuffer",data:u,result:t[n]}):(o&&M({gl:this.gl,bufferName:"minBuffer",data:i,result:t[n]}),a&&M({gl:this.gl,bufferName:"maxBuffer",data:r,result:t[n]}))}}getAggregateData(n){const t={},{textures:e,framebuffers:l,maxMinFramebuffers:i,minFramebuffers:r,maxFramebuffers:a,weights:s}=this.state;for(const n in s){t[n]={};const{needMin:c,needMax:h,combineMaxMin:f}=s[n];t[n].aggregationTexture=e[n],t[n].aggregationBuffer=Object(o.readPixelsToBuffer)(l[n],{target:s[n].aggregationBuffer,sourceType:u.a.FLOAT}),c&&h&&f?t[n].maxMinBuffer=Object(o.readPixelsToBuffer)(i[n],{target:s[n].maxMinBuffer,sourceType:u.a.FLOAT}):(c&&(t[n].minBuffer=Object(o.readPixelsToBuffer)(r[n],{target:s[n].minBuffer,sourceType:u.a.FLOAT})),h&&(t[n].maxBuffer=Object(o.readPixelsToBuffer)(a[n],{target:s[n].maxBuffer,sourceType:u.a.FLOAT})))}return t}getAggregationModel(n=!1){const{gl:t,shaderCache:e}=this;return new o.Model(t,{id:"Gird-Aggregation-Model",vs:n?E:w,fs:P,modules:n?["fp64","project64"]:["project32"],shaderCache:e,vertexCount:0,drawMode:u.a.POINTS})}getAllAggregationModel(n=!1){const{gl:t,shaderCache:e}=this;return new o.Model(t,{id:"All-Aggregation-Model",vs:O,fs:S,modules:["fp64"],shaderCache:e,vertexCount:1,drawMode:u.a.POINTS,isInstanced:!0,instanceCount:0,attributes:{position:new o.Buffer(t,{data:new Float32Array([0,0]),accessor:{size:2}})}})}getMeanTransform(n){return this.meanTransform?this.meanTransform.update(n):this.meanTransform=new o.Transform(this.gl,Object.assign({},{vs:A,_targetTextureVarying:"meanValues"},n)),this.meanTransform}renderAggregateData(n){const{cellSize:t,viewport:e,gridTransformMatrix:l,projectPoints:i}=n,{numCol:r,numRow:o,windowSize:a,maxMinFramebuffers:s,minFramebuffers:c,maxFramebuffers:h,weights:v}=this.state,m=j(l),_=[r,o],b={blend:!0,depthTest:!1,blendFunc:[u.a.ONE,u.a.ONE]},y={viewport:e},x={windowSize:a,cellSize:t,gridSize:_,uProjectionMatrix:l,uProjectionMatrixFP64:m,projectPoints:i};for(const n in v){const{needMin:t,needMax:e}=v[n],l=t&&e&&v[n].combineMaxMin;this.renderToWeightsTexture({id:n,parameters:b,moduleSettings:y,uniforms:x,gridSize:_}),l?this.renderToMaxMinTexture({id:n,parameters:Object.assign({},b,{blendEquation:g}),gridSize:_,minOrMaxFb:s[n],clearParams:{clearColor:[0,0,0,f]},combineMaxMin:l}):(t&&this.renderToMaxMinTexture({id:n,parameters:Object.assign({},b,{blendEquation:d}),gridSize:_,minOrMaxFb:c[n],clearParams:{clearColor:[f,f,f,0]},combineMaxMin:l}),e&&this.renderToMaxMinTexture({id:n,parameters:Object.assign({},b,{blendEquation:p}),gridSize:_,minOrMaxFb:h[n],combineMaxMin:l}))}}renderToMaxMinTexture(n){const{id:t,parameters:e,gridSize:l,minOrMaxFb:i,combineMaxMin:r,clearParams:u={}}=n,{framebuffers:a}=this.state,{gl:s,allAggregationModel:c}=this;i.bind(),s.viewport(0,0,l[0],l[1]),Object(o.withParameters)(s,u,()=>{s.clear(s.COLOR_BUFFER_BIT)}),c.draw({parameters:e,uniforms:{uSampler:a[t].texture,gridSize:l,combineMaxMin:r}}),i.unbind()}renderToWeightsTexture(n){const{id:t,parameters:e,moduleSettings:l,uniforms:i,gridSize:r}=n,{framebuffers:a,equations:c,weightAttributes:h,weights:d}=this.state,{gl:p,gridAggregationModel:g}=this,{operation:v}=d[t];a[t].bind(),p.viewport(0,0,r[0],r[1]);const m=v===s.MIN?[f,f,f,0]:[0,0,0,0];Object(o.withParameters)(p,{clearColor:m},()=>{p.clear(p.COLOR_BUFFER_BIT)});const _={weights:h[t]};if(g.draw({parameters:Object.assign({},e,{blendEquation:c[t]}),moduleSettings:l,uniforms:i,attributes:_}),a[t].unbind(),v===s.MEAN){const{meanTextures:n,textures:e}=this.state,l={_sourceTextures:{aggregationValues:n[t]},_targetTexture:e[t],elementCount:e[t].width*e[t].height};this.getMeanTransform(l).run({parameters:{blend:!1,depthTest:!1}}),a[t].attach({[u.a.COLOR_ATTACHMENT0]:e[t]})}}runAggregationOnGPU(n){return this.updateModels(n),this.setupFramebuffers(n),this.renderAggregateData(n),this.getAggregateData(n)}setupFramebuffers(n){const{numCol:t,numRow:e,textures:l,framebuffers:i,maxMinFramebuffers:r,minFramebuffers:o,maxFramebuffers:a,meanTextures:c,equations:h,weights:f}=this.state,d={width:t,height:e};for(const n in f){const{needMin:p,needMax:g,combineMaxMin:m,operation:_}=f[n];l[n]=f[n].aggregationTexture||l[n]||T(this.gl,{id:`${n}-texture`,width:t,height:e}),l[n].resize(d);let b=l[n];_===s.MEAN&&(c[n]=c[n]||T(this.gl,{id:`${n}-mean-texture`,width:t,height:e}),c[n].resize(d),b=c[n]),i[n]?i[n].attach({[u.a.COLOR_ATTACHMENT0]:b}):i[n]=C(this.gl,{id:`${n}-fb`,width:t,height:e,texture:b}),i[n].resize(d),h[n]=v[_],(p||g)&&(p&&g&&m?r[n]=r[n]||C(this.gl,{id:`${n}-maxMinFb`}):(p&&(o[n]=o[n]||C(this.gl,{id:`${n}-minFb`})),g&&(a[n]=a[n]||C(this.gl,{id:`${n}-maxFb`}))))}}setupModels(n=!1){this.gridAggregationModel&&this.gridAggregationModel.delete(),this.gridAggregationModel=this.getAggregationModel(n),this.allAggregationModel&&this.allAggregationModel.delete(),this.allAggregationModel=this.getAllAggregationModel(n)}setupWeightAttributes(n){const{weightAttributes:t,vertexCount:e,weights:i}=this.state;for(const n in i){const{values:r}=i[n];if(Array.isArray(r)||r.constructor===Float32Array){l.log.assert(r.length/3===e);const i=Array.isArray(r)?new Float32Array(r):r;t[n]instanceof o.Buffer?t[n].setData(i):t[n]=new o.Buffer(this.gl,i)}else l.log.assert(r instanceof o.Buffer),t[n]=r}}updateModels(n){const{gl:t}=this,{positions:e,positions64xyLow:i,changeFlags:r}=n,{numCol:u,numRow:a}=this.state;let{positionsBuffer:s,positions64xyLowBuffer:c}=this.state;const h={};let f=!1;if(n.fp64!==this.state.fp64&&(this.setupModels(n.fp64),this.setState({fp64:n.fp64}),n.fp64&&(f=!0)),r.dataChanged||!s){s&&s.delete();const l=e.length/2;s=new o.Buffer(t,new Float32Array(e)),f=n.fp64,Object.assign(h,{positions:s}),this.setState({positionsBuffer:s,vertexCount:l}),this.setupWeightAttributes(n),this.gridAggregationModel.setVertexCount(l)}f&&(l.log.assert(i),c&&c.delete(),c=new o.Buffer(t,{size:2,data:new Float32Array(i)}),Object.assign(h,{positions64xyLow:c}),this.setState({positions64xyLowBuffer:c})),this.gridAggregationModel.setAttributes(h),(r.cellSizeChanged||r.viewportChanged)&&this.allAggregationModel.setInstanceCount(u*a)}}var I="#version 300 es\n#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nin vec3 positions;\nin vec3 instancePositions;\nin vec4 instanceCounts;\nin vec3 instancePickingColors;\n\nlayout(std140) uniform;\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform AggregationData\n{\n  vec4 maxCount;\n} aggregationData;\n\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\n\nout vec4 vColor;\nout float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r ;\n  float maxWeight = aggregationData.maxCount.r;\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n",k="#define SHADER_NAME screen-grid-layer-vertex-shader-webgl1\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform float maxWeight;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n",F="#version 300 es\n#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\nin float vSampleCount;\nout vec4 fragColor;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  fragColor = vColor;\n\n  fragColor = picking_filterColor(fragColor);\n}\n",N="#define SHADER_NAME screen-grid-layer-fragment-shader-webgl1\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  gl_FragColor = picking_filterColor(gl_FragColor);\n}\n";const{count:D}=l.experimental,B=[0,0,0,0],U=[0,255,0,255],z=0,V=["minColor","maxColor","colorRange","colorDomain"],G={cellSizePixels:{value:100,min:1},cellMarginPixels:{value:2,min:0,max:5},colorDomain:null,colorRange:i,getPosition:{type:"accessor",value:n=>n.position},getWeight:{type:"accessor",value:n=>[1,0,0]},gpuAggregation:!0,aggregation:"SUM"};class W extends l.Layer{getShaders(){const n=Object(o.isWebGL2)(this.context.gl)?{vs:I,fs:F}:{vs:k,fs:N};return n.modules=["picking"],n}initializeState(){const n=this.getAttributeManager(),{gl:t}=this.context;n.addInstanced({instancePositions:{size:3,update:this.calculateInstancePositions},instanceCounts:{size:4,transition:!0,accessor:["getPosition","getWeight"],update:this.calculateInstanceCounts,noAlloc:!0}});const e={id:`${this.id}-aggregator`,shaderCache:this.context.shaderCache},l=this._getMaxCountBuffer(t),i={color:{size:1,operation:s.SUM,needMax:!0,maxBuffer:l}};this.setState({model:this._getModel(t),gpuGridAggregator:new R(t,e),maxBuffer:l,weights:i,aggregationResults:null}),this._setupUniformBuffer()}shouldUpdateState({changeFlags:n}){return n.somethingChanged}updateState(n){super.updateState(n),this._updateUniforms(n),n.changeFlags.dataChanged&&this._processData();const t=this._getAggregationChangeFlags(n);t&&this._updateAggregation(t)}draw({uniforms:n}){const{gl:t}=this.context,{parameters:e={}}=this.props,l=this.props.minColor||B,i=this.props.maxColor||U,r=this.props.colorDomain||[1,0],{model:a,maxBuffer:s,cellScale:c,shouldUseMinMax:h,colorRange:f,maxWeight:d}=this.state,p={minColor:l,maxColor:i,cellScale:c,colorRange:f,colorDomain:r,shouldUseMinMax:h};Object(o.isWebGL2)(t)?s.bind({target:u.a.UNIFORM_BUFFER}):p.maxWeight=d,n=Object.assign(p,n),a.draw({uniforms:n,parameters:Object.assign({depthTest:!1,depthMask:!1},e)}),Object(o.isWebGL2)(t)&&s.unbind()}calculateInstancePositions(n,{numInstances:t}){const{width:e,height:l}=this.context.viewport,{cellSizePixels:i}=this.props,{numCol:r}=this.state,{value:u,size:o}=n;for(let n=0;n<t;n++){const t=n%r,a=Math.floor(n/r);u[n*o+0]=t*i/e*2-1,u[n*o+1]=1-a*i/l*2,u[n*o+2]=0}}calculateInstanceCounts(n,{numInstances:t}){const{aggregationBuffer:e}=this.state;n.update({buffer:e})}getPickingInfo({info:n,mode:t}){const{index:e}=n;if(e>=0){const{aggregationResults:t}=this.state;t.aggregationData=t.aggregationData||this.state.aggregationBuffer.getData(),t.maxData=t.maxData||this.state.maxBuffer.getData();const{aggregationData:l,maxData:i}=t;n.object=R.getAggregationData({aggregationData:l,maxData:i,pixelIndex:e})}return n}_getAggregationChangeFlags({oldProps:n,props:t,changeFlags:e}){const l=t.cellSizePixels!==n.cellSizePixels||t.cellMarginPixels!==n.cellMarginPixels,i=e.dataChanged||t.aggregation!==n.aggregation,r=e.viewportChanged;return l||i||r?{cellSizeChanged:l,dataChanged:i,viewportChanged:r}:null}_getModel(n){return new o.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new o.Geometry({drawMode:u.a.TRIANGLE_FAN,attributes:{positions:new Float32Array([0,0,0,1,0,0,1,1,0,0,1,0])}}),isInstanced:!0,shaderCache:this.context.shaderCache}))}_getMaxCountBuffer(n){return new o.Buffer(n,{byteLength:16,index:z,accessor:{size:4}})}_processData(){const{data:n,getPosition:t,getWeight:e}=this.props,i=D(n),r=new Float64Array(2*i),u=new Float32Array(3*i),{weights:o}=this.state,{iterable:a,objectInfo:s}=Object(l.createIterable)(n);for(const n of a){s.index++;const l=t(n,s),i=e(n,s),{index:o}=s;r[2*o]=l[0],r[2*o+1]=l[1],Array.isArray(i)?(u[3*o]=i[0],u[3*o+1]=i[1],u[3*o+2]=i[2]):u[3*o]=i}o.color.values=u,this.setState({positions:r})}_setupUniformBuffer(){const n=this.context.gl;if(!Object(o.isWebGL2)(n))return;const t=this.state.model.program.handle,e=n.getUniformBlockIndex(t,"AggregationData");n.uniformBlockBinding(t,e,z)}_shouldUseMinMax(){const{minColor:n,maxColor:t,colorDomain:e,colorRange:i}=this.props;return n||t?(l.log.deprecated("ScreenGridLayer props: minColor and maxColor","colorRange, colorDomain")(),!0):!e&&!i}_updateAggregation(n){const t=this.getAttributeManager();(n.cellSizeChanged||n.viewportChanged)&&(this._updateGridParams(),t.invalidateAll());const{cellSizePixels:e,gpuAggregation:i}=this.props,{positions:r,weights:u}=this.state,{viewport:o}=this.context;u.color.operation=s[this.props.aggregation.toUpperCase()]||s.SUM;let a=!1,c=null;this.context.viewport instanceof l.WebMercatorViewport?a=!0:(a=!1,c=o.pixelProjectionMatrix);const h=this.state.gpuGridAggregator.run({positions:r,weights:u,cellSize:[e,e],viewport:o,changeFlags:n,useGPU:i,projectPoints:a,gridTransformMatrix:c}),f=h.color.maxData&&Number.isFinite(h.color.maxData[0])?h.color.maxData[0]:0,d={aggregationData:h.color.aggregationData,maxData:h.color.maxData};this.setState({aggregationResults:d,maxWeight:f}),t.invalidate("instanceCounts")}_updateUniforms({oldProps:n,props:t,changeFlags:e}){const l={};if(V.some(e=>n[e]!==t[e])&&(l.shouldUseMinMax=this._shouldUseMinMax()),n.colorRange!==t.colorRange){const n=[];t.colorRange.forEach(t=>{n.push(t[0],t[1],t[2],t[3]||255)}),l.colorRange=n}if(n.cellMarginPixels!==t.cellMarginPixels||n.cellSizePixels!==t.cellSizePixels||e.viewportChanged){const{width:n,height:t}=this.context.viewport,{cellSizePixels:e,cellMarginPixels:i}=this.props,r=e>i?i:0;l.cellScale=new Float32Array([(e-r)/n*2,-(e-r)/t*2,1])}this.setState(l)}_updateGridParams(){const{width:n,height:t}=this.context.viewport,{cellSizePixels:e}=this.props,{gl:l}=this.context,i=Math.ceil(n/e),r=Math.ceil(t/e),a=i*r,s=4*a*4;let c=this.state.aggregationBuffer;c&&c.delete(),c=new o.Buffer(l,{byteLength:s,accessor:{size:4,type:u.a.FLOAT,divisor:1}}),this.state.weights.color.aggregationBuffer=c,this.setState({numCol:i,numRow:r,numInstances:a,aggregationBuffer:c})}}W.layerName="ScreenGridLayer",W.defaultProps=G;var H=e(84);const X=n=>n.length;class Y{constructor(n=[],t=X){this.sortedBins=this.getSortedBins(n,t),this.maxCount=this.getMaxCount(),this.binMap=this.getBinMap()}getSortedBins(n,t){return n.reduce((n,e,l)=>{const i=t(e.points);return null!=i&&n.push({i:Number.isFinite(e.index)?e.index:l,value:i,counts:e.points.length}),n},[]).sort((n,t)=>n.value-t.value)}getValueRange([n,t]){const e=this.sortedBins.length;if(!e)return[0,0];const l=Math.ceil(n/100*(e-1)),i=Math.floor(t/100*(e-1));return[this.sortedBins[l].value,this.sortedBins[i].value]}getMaxCount(){let n=0;return this.sortedBins.forEach(t=>n=n>t.counts?n:t.counts),n}getBinMap(){return this.sortedBins.reduce((n,t)=>Object.assign(n,{[t.i]:t}),{})}}function Z(n,t,e){const i=n[1]-n[0];if(i<=0)return l.log.warn("quantizeScale: invalid domain, returning range[0]")(),t[0];const r=i/t.length,u=Math.floor((e-n[0])/r);return t[Math.max(Math.min(u,t.length-1),0)]}function q(n,t){return e=>Z(n,t,e)}function $(n,t){return e=>(e-n[0])/(n[1]-n[0])*(t[1]-t[0])+t[0]}const K=6378e3;function Q(n,t,e){const{gridHash:l,gridOffset:i}=function(n=[],t,e){let l,i=1/0,r=-1/0;for(const t of n)l=e(t)[1],Number.isFinite(l)&&(i=l<i?l:i,r=l>r?l:r);const u=function(n,t){const e=(u=n,u/K*(180/Math.PI)),l=(i=t,r=n,r/K*(180/Math.PI)/Math.cos(i*Math.PI/180));var i,r;var u;return{yOffset:e,xOffset:l}}(t,(i+r)/2);if(u.xOffset<=0||u.yOffset<=0)return{gridHash:{},gridOffset:u};const o={};for(const t of n){const[n,l]=e(t);if(Number.isFinite(l)&&Number.isFinite(n)){const e=Math.floor((l+90)/u.yOffset),i=Math.floor((n+180)/u.xOffset),r=`${e}-${i}`;o[r]=o[r]||{count:0,points:[]},o[r].count+=1,o[r].points.push(t)}}return{gridHash:o,gridOffset:u}}(n,t,e);return{gridOffset:i,layerData:function(n,t){return Object.keys(n).reduce((e,l,i)=>{const r=l.split("-"),u=parseInt(r[0],10),o=parseInt(r[1],10);return e.push(Object.assign({index:i,position:[t.xOffset*o-180,t.yOffset*u-90]},n[l])),e},[])}(l,i)}}function J(){}const nn={colorDomain:null,colorRange:i,getColorValue:{type:"accessor",value:n=>n.length},lowerPercentile:{type:"number",min:0,max:100,value:0},upperPercentile:{type:"number",min:0,max:100,value:100},onSetColorDomain:J,elevationDomain:null,elevationRange:[0,1e3],getElevationValue:{type:"accessor",value:n=>n.length},elevationLowerPercentile:{type:"number",min:0,max:100,value:0},elevationUpperPercentile:{type:"number",min:0,max:100,value:100},elevationScale:1,onSetElevationDomain:J,cellSize:{type:"number",min:0,max:1e3,value:1e3},coverage:{type:"number",min:0,max:1,value:1},getPosition:{type:"accessor",value:n=>n.position},extruded:!1,fp64:!1,material:new o.PhongMaterial};class tn extends l.CompositeLayer{initializeState(){this.state={layerData:[],sortedColorBins:null,sortedElevationBins:null,colorValueDomain:null,elevationValueDomain:null,colorScaleFunc:J,elevationScaleFunc:J,dimensionUpdaters:this.getDimensionUpdaters()}}updateState({oldProps:n,props:t,changeFlags:e}){const l=this.needsReProjectPoints(n,t,e);if(e.dataChanged||l)this.getLayerData();else{(this.getDimensionChanges(n,t)||[]).forEach(n=>"function"==typeof n&&n.apply(this))}}needsReProjectPoints(n,t,e){return n.cellSize!==t.cellSize||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPosition)}getDimensionUpdaters(){return{getColor:[{id:"value",triggers:["getColorValue"],updater:this.getSortedColorBins},{id:"domain",triggers:["lowerPercentile","upperPercentile"],updater:this.getColorValueDomain},{id:"scaleFunc",triggers:["colorDomain","colorRange"],updater:this.getColorScale}],getElevation:[{id:"value",triggers:["getElevationValue"],updater:this.getSortedElevationBins},{id:"domain",triggers:["elevationLowerPercentile","elevationUpperPercentile"],updater:this.getElevationValueDomain},{id:"scaleFunc",triggers:["elevationDomain","elevationRange"],updater:this.getElevationScale}]}}getDimensionChanges(n,t){const{dimensionUpdaters:e}=this.state,l=[];for(const i in e){const r=e[i].find(e=>e.triggers.some(e=>n[e]!==t[e]));r&&l.push(r.updater)}return l.length?l:null}getPickingInfo({info:n}){const{sortedColorBins:t,sortedElevationBins:e}=this.state;let l=null;if(n.picked&&n.index>-1){const i=this.state.layerData[n.index],r=t.binMap[i.index]&&t.binMap[i.index].value,u=e.binMap[i.index]&&e.binMap[i.index].value;l=Object.assign({colorValue:r,elevationValue:u},i)}return Object.assign(n,{picked:Boolean(l),object:l})}getUpdateTriggers(){const{dimensionUpdaters:n}=this.state,t={};for(const e in n){t[e]={};for(const l of n[e])l.triggers.forEach(n=>{t[e][n]=this.props[n]})}return t}getLayerData(){const{data:n,cellSize:t,getPosition:e}=this.props,{layerData:l}=Q(n,t,e);this.setState({layerData:l}),this.getSortedBins()}getValueDomain(){this.getColorValueDomain(),this.getElevationValueDomain()}getSortedBins(){this.getSortedColorBins(),this.getSortedElevationBins()}getSortedColorBins(){const{getColorValue:n}=this.props,t=new Y(this.state.layerData||[],n);this.setState({sortedColorBins:t}),this.getColorValueDomain()}getSortedElevationBins(){const{getElevationValue:n}=this.props,t=new Y(this.state.layerData||[],n);this.setState({sortedElevationBins:t}),this.getElevationValueDomain()}getColorValueDomain(){const{lowerPercentile:n,upperPercentile:t,onSetColorDomain:e}=this.props;this.state.colorValueDomain=this.state.sortedColorBins.getValueRange([n,t]),"function"==typeof e&&e(this.state.colorValueDomain),this.getColorScale()}getElevationValueDomain(){const{elevationLowerPercentile:n,elevationUpperPercentile:t,onSetElevationDomain:e}=this.props;this.state.elevationValueDomain=this.state.sortedElevationBins.getValueRange([n,t]),"function"==typeof e&&e(this.state.elevationValueDomain),this.getElevationScale()}getColorScale(){const{colorRange:n}=this.props,t=this.props.colorDomain||this.state.colorValueDomain;this.state.colorScaleFunc=q(t,n)}getElevationScale(){const{elevationRange:n}=this.props,t=this.props.elevationDomain||this.state.elevationValueDomain;this.state.elevationScaleFunc=$(t,n)}_onGetSublayerColor(n){const{sortedColorBins:t,colorScaleFunc:e,colorValueDomain:l}=this.state,i=t.binMap[n.index]&&t.binMap[n.index].value,r=this.props.colorDomain||l,u=i>=r[0]&&i<=r[r.length-1]?e(i):[0,0,0,0];return u[3]=Number.isFinite(u[3])?u[3]:255,u}_onGetSublayerElevation(n){const{sortedElevationBins:t,elevationScaleFunc:e,elevationValueDomain:l}=this.state,i=t.binMap[n.index]&&t.binMap[n.index].value,r=this.props.elevationDomain||l;return i>=r[0]&&i<=r[r.length-1]?e(i):-1}renderLayers(){const{elevationScale:n,fp64:t,extruded:e,cellSize:l,coverage:i,material:r,transitions:u}=this.props;return new(this.getSubLayerClass("grid-cell",H.a))({fp64:t,cellSize:l,coverage:i,material:r,elevationScale:n,extruded:e,getColor:this._onGetSublayerColor.bind(this),getElevation:this._onGetSublayerElevation.bind(this),transitions:u&&{getColor:u.getColorValue,getElevation:u.getElevationValue}},this.getSubLayerProps({id:"grid-cell",updateTriggers:this.getUpdateTriggers()}),{data:this.state.layerData})}}tn.layerName="GridLayer",tn.defaultProps=nn;var en=e(69),ln=Math.PI/3,rn=[0,ln,2*ln,3*ln,4*ln,5*ln];function un(n){return n[0]}function on(n){return n[1]}var an=function(){var n,t,e,l=0,i=0,r=1,u=1,o=un,a=on;function s(n){var l,i={},r=[],u=n.length;for(l=0;l<u;++l)if(!isNaN(c=+o.call(null,s=n[l],l,n))&&!isNaN(h=+a.call(null,s,l,n))){var s,c,h,f=Math.round(h/=e),d=Math.round(c=c/t-(1&f)/2),p=h-f;if(3*Math.abs(p)>1){var g=c-d,v=d+(c<d?-1:1)/2,m=f+(h<f?-1:1),_=c-v,b=h-m;g*g+p*p>_*_+b*b&&(d=v+(1&f?1:-1)/2,f=m)}var y=d+"-"+f,x=i[y];x?x.push(s):(r.push(x=i[y]=[s]),x.x=(d+(1&f)/2)*t,x.y=f*e)}return r}function c(n){var t=0,e=0;return rn.map(function(l){var i=Math.sin(l)*n,r=-Math.cos(l)*n,u=i-t,o=r-e;return t=i,e=r,[u,o]})}return s.hexagon=function(t){return"m"+c(null==t?n:+t).join("l")+"z"},s.centers=function(){for(var o=[],a=Math.round(i/e),s=Math.round(l/t),c=a*e;c<u+n;c+=e,++a)for(var h=s*t+(1&a)*t/2;h<r+t/2;h+=t)o.push([h,c]);return o},s.mesh=function(){var t=c(n).slice(0,4).join("l");return s.centers().map(function(n){return"M"+n+"m"+t}).join("")},s.x=function(n){return arguments.length?(o=n,s):o},s.y=function(n){return arguments.length?(a=n,s):a},s.radius=function(l){return arguments.length?(t=2*(n=+l)*Math.sin(ln),e=1.5*n,s):n},s.size=function(n){return arguments.length?(l=i=0,r=+n[0],u=+n[1],s):[r-l,u-i]},s.extent=function(n){return arguments.length?(l=+n[0][0],i=+n[0][1],r=+n[1][0],u=+n[1][1],s):[[l,i],[r,u]]},s.radius(1)};function sn(){}const cn={colorDomain:null,colorRange:i,getColorValue:{type:"accessor",value:n=>n.length},lowerPercentile:{type:"number",value:0,min:0,max:100},upperPercentile:{type:"number",value:100,min:0,max:100},onSetColorDomain:sn,elevationDomain:null,elevationRange:[0,1e3],getElevationValue:{type:"accessor",value:n=>n.length},elevationLowerPercentile:{type:"number",value:0,min:0,max:100},elevationUpperPercentile:{type:"number",value:100,min:0,max:100},elevationScale:{type:"number",min:0,value:1},onSetElevationDomain:sn,radius:{type:"number",value:1e3,min:1},coverage:{type:"number",min:0,max:1,value:1},extruded:!1,hexagonAggregator:function({data:n,radius:t,getPosition:e},i){const r=function(n,t){const{pixelsPerMeter:e}=t.getDistanceScales();return n*e[0]}(t,i),u=[],{iterable:o,objectInfo:a}=Object(l.createIterable)(n);for(const n of o)a.index++,u.push(Object.assign({screenCoord:i.projectFlat(e(n,a))},n));return{hexagons:an().radius(r).x(n=>n.screenCoord[0]).y(n=>n.screenCoord[1])(u).map((n,t)=>({position:i.unprojectFlat([n.x,n.y]),points:n,index:t}))}},getPosition:{type:"accessor",value:n=>n.position},fp64:!1,material:new o.PhongMaterial};class hn extends l.CompositeLayer{initializeState(){this.state={hexagons:[],sortedColorBins:null,sortedElevationBins:null,colorValueDomain:null,elevationValueDomain:null,colorScaleFunc:sn,elevationScaleFunc:sn,dimensionUpdaters:this.getDimensionUpdaters()}}updateState({oldProps:n,props:t,changeFlags:e}){const l=this.getDimensionChanges(n,t);e.dataChanged||this.needsReProjectPoints(n,t)?this.getHexagons():l&&l.forEach(n=>"function"==typeof n&&n.apply(this))}needsReProjectPoints(n,t){return n.radius!==t.radius||n.hexagonAggregator!==t.hexagonAggregator}getDimensionUpdaters(){return{getColor:[{id:"value",triggers:["getColorValue"],updater:this.getSortedColorBins},{id:"domain",triggers:["lowerPercentile","upperPercentile"],updater:this.getColorValueDomain},{id:"scaleFunc",triggers:["colorDomain","colorRange"],updater:this.getColorScale}],getElevation:[{id:"value",triggers:["getElevationValue"],updater:this.getSortedElevationBins},{id:"domain",triggers:["elevationLowerPercentile","elevationUpperPercentile"],updater:this.getElevationValueDomain},{id:"scaleFunc",triggers:["elevationDomain","elevationRange"],updater:this.getElevationScale}]}}getDimensionChanges(n,t){const{dimensionUpdaters:e}=this.state,l=[];for(const i in e){const r=e[i].find(e=>e.triggers.some(e=>n[e]!==t[e]));r&&l.push(r.updater)}return l.length?l:null}getHexagons(){const{hexagonAggregator:n}=this.props,{viewport:t}=this.context,{hexagons:e,hexagonVertices:l}=n(this.props,t);this.updateRadiusAngle(l),this.setState({hexagons:e}),this.getSortedBins()}getPickingInfo({info:n}){const{sortedColorBins:t,sortedElevationBins:e}=this.state;let l=null;if(n.picked&&n.index>-1){const i=this.state.hexagons[n.index],r=t.binMap[i.index]&&t.binMap[i.index].value,u=e.binMap[i.index]&&e.binMap[i.index].value;l=Object.assign({colorValue:r,elevationValue:u},i)}return Object.assign(n,{picked:Boolean(l),object:l})}getUpdateTriggers(){const{dimensionUpdaters:n}=this.state,t={};for(const e in n){t[e]={};for(const l of n[e])l.triggers.forEach(n=>{t[e][n]=this.props[n]})}return t}updateRadiusAngle(n){let{radius:t}=this.props,e=90;if(Array.isArray(n)){n.length<6&&l.log.error("HexagonCellLayer: hexagonVertices needs to be an array of 6 points")();const i=n[0],r=n[3],{viewport:u}=this.context,{pixelsPerMeter:o}=u.getDistanceScales(),a=this.projectFlat(i),s=this.projectFlat(r),c=a[0]-s[0],h=a[1]-s[1],f=Math.sqrt(c*c+h*h);e=Math.acos(c/f)*-Math.sign(h)/Math.PI*180+90,t=f/2/o[0]}this.setState({angle:e,radius:t})}getValueDomain(){this.getColorValueDomain(),this.getElevationValueDomain()}getSortedBins(){this.getSortedColorBins(),this.getSortedElevationBins()}getSortedColorBins(){const{getColorValue:n}=this.props,t=new Y(this.state.hexagons||[],n);this.setState({sortedColorBins:t}),this.getColorValueDomain()}getSortedElevationBins(){const{getElevationValue:n}=this.props,t=new Y(this.state.hexagons||[],n);this.setState({sortedElevationBins:t}),this.getElevationValueDomain()}getColorValueDomain(){const{lowerPercentile:n,upperPercentile:t,onSetColorDomain:e}=this.props;n>t&&l.log.warn("HexagonLayer: lowerPercentile is bigger than upperPercentile")(),this.state.colorValueDomain=this.state.sortedColorBins.getValueRange([n,t]),"function"==typeof e&&e(this.state.colorValueDomain),this.getColorScale()}getElevationValueDomain(){const{elevationLowerPercentile:n,elevationUpperPercentile:t,onSetElevationDomain:e}=this.props;this.state.elevationValueDomain=this.state.sortedElevationBins.getValueRange([n,t]),"function"==typeof e&&e(this.state.elevationValueDomain),this.getElevationScale()}getColorScale(){const{colorRange:n}=this.props,t=this.props.colorDomain||this.state.colorValueDomain;this.state.colorScaleFunc=q(t,n)}getElevationScale(){const{elevationRange:n}=this.props,t=this.props.elevationDomain||this.state.elevationValueDomain;this.state.elevationScaleFunc=$(t,n)}_onGetSublayerColor(n){const{sortedColorBins:t,colorScaleFunc:e,colorValueDomain:l}=this.state,i=t.binMap[n.index]&&t.binMap[n.index].value,r=this.props.colorDomain||l,u=i>=r[0]&&i<=r[r.length-1]?e(i):[0,0,0,0];return u[3]=Number.isFinite(u[3])?u[3]:255,u}_onGetSublayerElevation(n){const{sortedElevationBins:t,elevationScaleFunc:e,elevationValueDomain:l}=this.state,i=t.binMap[n.index]&&t.binMap[n.index].value,r=this.props.elevationDomain||l;return i>=r[0]&&i<=r[r.length-1]?e(i):-1}renderLayers(){const{elevationScale:n,extruded:t,coverage:e,material:l,fp64:i,transitions:r}=this.props,{angle:u,radius:o}=this.state;return new(this.getSubLayerClass("hexagon-cell",en.a))({fp64:i,radius:o,diskResolution:6,elevationScale:n,angle:u,extruded:t,coverage:e,material:l,getColor:this._onGetSublayerColor.bind(this),getElevation:this._onGetSublayerElevation.bind(this),transitions:r&&{getColor:r.getColorValue,getElevation:r.getElevationValue}},this.getSubLayerProps({id:"hexagon-cell",updateTriggers:this.getUpdateTriggers()}),{data:this.state.hexagons})}}hn.layerName="HexagonLayer",hn.defaultProps=cn;var fn=e(13),dn=e(87),pn=e(51);const gn={N:[0,.5],E:[.5,0],S:[0,-.5],W:[-.5,0],NE:[.5,.5],NW:[-.5,.5],SE:[.5,-.5],SW:[-.5,-.5]},vn=[gn.W,gn.SW,gn.S],mn=[gn.S,gn.SE,gn.E],_n=[gn.E,gn.NE,gn.N],bn=[gn.NW,gn.W,gn.N],yn=[[-.5,1/6],[-.5,-1/6],[-1/6,-.5],[1/6,-.5]],xn=[[-1/6,-.5],[1/6,-.5],[.5,-1/6],[.5,1/6]],wn=[[.5,-1/6],[.5,1/6],[1/6,.5],[-1/6,.5]],En=[[-.5,1/6],[-.5,-1/6],[1/6,.5],[-1/6,.5]],Pn=[gn.W,gn.SW,gn.SE,gn.E],On=[gn.S,gn.SE,gn.NE,gn.N],Sn=[gn.NW,gn.W,gn.E,gn.NE],An=[gn.NW,gn.SW,gn.S,gn.N],Tn=[[-.5,1/6],[-.5,-1/6],[.5,-1/6],[.5,1/6]],Cn=[[-1/6,-.5],[1/6,-.5],[1/6,.5],[-1/6,.5]],Ln=[gn.NW,gn.SW,gn.SE,gn.NE],Mn=[gn.NW,gn.SW,gn.SE,gn.E,gn.N],jn=[gn.W,gn.SW,gn.SE,gn.NE,gn.N],Rn=[gn.NW,gn.W,gn.S,gn.SE,gn.NE],In=[gn.NW,gn.SW,gn.S,gn.E,gn.NE],kn=[gn.NW,gn.W,[.5,-1/6],[.5,1/6],gn.N],Fn=[[-1/6,-.5],[1/6,-.5],gn.E,gn.NE,gn.N],Nn=[[-.5,1/6],[-.5,-1/6],gn.S,gn.SE,gn.E],Dn=[gn.W,gn.SW,gn.S,[1/6,.5],[-1/6,.5]],Bn=[gn.NW,gn.W,[-1/6,-.5],[1/6,-.5],gn.N],Un=[[-.5,1/6],[-.5,-1/6],gn.E,gn.NE,gn.N],zn=[gn.S,gn.SE,gn.E,[1/6,.5],[-1/6,.5]],Vn=[gn.W,gn.SW,gn.S,[.5,-1/6],[.5,1/6]],Gn=[gn.W,gn.SW,gn.SE,gn.E,[1/6,.5],[-1/6,.5]],Wn=[[-.5,1/6],[-.5,-1/6],gn.S,gn.SE,gn.NE,gn.N],Hn=[gn.NW,gn.W,[-1/6,-.5],[1/6,-.5],gn.E,gn.NE],Xn=[gn.NW,gn.SW,gn.S,[.5,-1/6],[.5,1/6],gn.N],Yn=[gn.W,gn.SW,gn.S,gn.E,gn.NE,gn.N],Zn=[gn.NW,gn.W,gn.S,gn.SE,gn.E,gn.N],qn=[[-.5,1/6],[-.5,-1/6],[-1/6,-.5],[1/6,-.5],gn.E,gn.NE,gn.N],$n=[gn.W,gn.SW,gn.S,[.5,-1/6],[.5,1/6],[1/6,.5],[-1/6,.5]],Kn=[gn.NW,gn.W,[-1/6,-.5],[1/6,-.5],[.5,-1/6],[.5,1/6],gn.N],Qn=[[-.5,1/6],[-.5,-1/6],gn.S,gn.SE,gn.E,[1/6,.5],[-1/6,.5]],Jn=[[-.5,1/6],[-.5,-1/6],[-1/6,-.5],[1/6,-.5],[.5,-1/6],[.5,1/6],[1/6,.5],[-1/6,.5]],nt={0:[],1:[[gn.W,gn.S]],2:[[gn.S,gn.E]],3:[[gn.W,gn.E]],4:[[gn.N,gn.E]],5:{0:[[gn.W,gn.S],[gn.N,gn.E]],1:[[gn.W,gn.N],[gn.S,gn.E]]},6:[[gn.N,gn.S]],7:[[gn.W,gn.N]],8:[[gn.W,gn.N]],9:[[gn.N,gn.S]],10:{0:[[gn.W,gn.N],[gn.S,gn.E]],1:[[gn.W,gn.S],[gn.N,gn.E]]},11:[[gn.N,gn.E]],12:[[gn.W,gn.E]],13:[[gn.S,gn.E]],14:[[gn.W,gn.S]],15:[]};function tt(n){return parseInt(n,4)}const et={[tt("0000")]:[],[tt("2222")]:[],[tt("2221")]:[vn],[tt("2212")]:[mn],[tt("2122")]:[_n],[tt("1222")]:[bn],[tt("0001")]:[vn],[tt("0010")]:[mn],[tt("0100")]:[_n],[tt("1000")]:[bn],[tt("2220")]:[yn],[tt("2202")]:[xn],[tt("2022")]:[wn],[tt("0222")]:[En],[tt("0002")]:[yn],[tt("0020")]:[xn],[tt("0200")]:[wn],[tt("2000")]:[En],[tt("0011")]:[Pn],[tt("0110")]:[On],[tt("1100")]:[Sn],[tt("1001")]:[An],[tt("2211")]:[Pn],[tt("2112")]:[On],[tt("1122")]:[Sn],[tt("1221")]:[An],[tt("2200")]:[Tn],[tt("2002")]:[Cn],[tt("0022")]:[Tn],[tt("0220")]:[Cn],[tt("1111")]:[Ln],[tt("1211")]:[Mn],[tt("2111")]:[jn],[tt("1112")]:[Rn],[tt("1121")]:[In],[tt("1011")]:[Mn],[tt("0111")]:[jn],[tt("1110")]:[Rn],[tt("1101")]:[In],[tt("1200")]:[kn],[tt("0120")]:[Fn],[tt("0012")]:[Nn],[tt("2001")]:[Dn],[tt("1022")]:[kn],[tt("2102")]:[Fn],[tt("2210")]:[Nn],[tt("0221")]:[Dn],[tt("1002")]:[Bn],[tt("2100")]:[Un],[tt("0210")]:[zn],[tt("0021")]:[Vn],[tt("1220")]:[Bn],[tt("0122")]:[Un],[tt("2012")]:[zn],[tt("2201")]:[Vn],[tt("0211")]:[Gn],[tt("2110")]:[Wn],[tt("1102")]:[Hn],[tt("1021")]:[Xn],[tt("2011")]:[Gn],[tt("0112")]:[Wn],[tt("1120")]:[Hn],[tt("1201")]:[Xn],[tt("2101")]:[Yn],[tt("0121")]:[Yn],[tt("1012")]:[Zn],[tt("1210")]:[Zn],[tt("0101")]:{0:[vn,_n],1:[Yn],2:[Yn]},[tt("1010")]:{0:[bn,mn],1:[Zn],2:[Zn]},[tt("2121")]:{0:[Yn],1:[Yn],2:[vn,_n]},[tt("1212")]:{0:[Zn],1:[Zn],2:[bn,mn]},[tt("2120")]:{0:[qn],1:[qn],2:[yn,_n]},[tt("2021")]:{0:[$n],1:[$n],2:[vn,wn]},[tt("1202")]:{0:[Kn],1:[Kn],2:[bn,xn]},[tt("0212")]:{0:[Qn],1:[Qn],2:[mn,En]},[tt("0102")]:{0:[yn,_n],1:[qn],2:[qn]},[tt("0201")]:{0:[vn,wn],1:[$n],2:[$n]},[tt("1020")]:{0:[bn,xn],1:[Kn],2:[Kn]},[tt("2010")]:{0:[mn,En],1:[Qn],2:[Qn]},[tt("2020")]:{0:[En,xn],1:[Jn],2:[yn,wn]},[tt("0202")]:{0:[wn,yn],1:[Jn],2:[En,xn]}},lt={ISO_LINES:1,ISO_BANDS:2},it={zIndex:0,zOffset:.005};function rt(n,t){return Array.isArray(t)?n<t[0]?0:n<t[1]?1:2:n>=t?1:0}function ut(n){const{cellWeights:t,x:e,y:i,width:r,height:u}=n;let o=n.threshold;n.thresholdValue&&(l.log.deprecated("thresholdValue","threshold")(),o=n.thresholdValue);const a=e<0,s=e>=r-1,c=i<0,h=i>=u-1,f=a||s||c||h,d={},p={};a||h?p.top=0:(d.top=t[(i+1)*r+e],p.top=rt(d.top,o)),s||h?p.topRight=0:(d.topRight=t[(i+1)*r+e+1],p.topRight=rt(d.topRight,o)),s||c?p.right=0:(d.right=t[i*r+e+1],p.right=rt(d.right,o)),a||c?p.current=0:(d.current=t[i*r+e],p.current=rt(d.current,o));const{top:g,topRight:v,right:m,current:_}=p;let b=-1;Number.isFinite(o)&&(b=g<<3|v<<2|m<<1|_),Array.isArray(o)&&(b=g<<6|v<<4|m<<2|_);let y=0;return f||(y=rt((d.top+d.topRight+d.right+d.current)/4,o)),{code:b,meanCode:y}}function ot(n){const{gridOrigin:t,cellSize:e,x:l,y:i,code:r,meanCode:u,type:o=lt.ISO_LINES}=n,a=Object.assign({},it,n.thresholdData);let s=o===lt.ISO_BANDS?et[r]:nt[r];Array.isArray(s)||(s=s[u]);const c=a.zIndex*a.zOffset,h=(l+1)*e[0],f=(i+1)*e[1],d=t[0]+h,p=t[1]+f;if(o===lt.ISO_BANDS){const n=[];return s.forEach(t=>{const l=[];t.forEach(n=>{const t=d+n[0]*e[0],i=p+n[1]*e[1];l.push([t,i,c])}),n.push(l)}),n}const g=[];return s.forEach(n=>{n.forEach(n=>{const t=d+n[0]*e[0],l=p+n[1]*e[1];g.push([t,l,c])})}),g}var at=e(124);const{count:st}=l.experimental,{fp64LowPart:ct}=o.fp64,ht=6378e3,ft=[1,0,0];function dt({data:n,getPosition:t,cellSizeMeters:e,gpuGridAggregator:i,gpuAggregation:r,aggregationFlags:u,getWeight:o,fp64:a=!1,coordinateSystem:c=l.COORDINATE_SYSTEM.LNGLAT,viewport:h=null,boundingBox:f=null}){let d={};l.log.assert(u.dataChanged||u.cellSizeChanged||u.viewportChanged),u.dataChanged&&(f=(d=function(n,t,e=null){const i=st(n),r=new Float32Array(2*i),u=new Float32Array(2*i),o=new Float32Array(3*i);let a,c,h=1/0,f=-1/0,d=1/0,p=-1/0;const{iterable:g,objectInfo:v}=Object(l.createIterable)(n);for(const n of g){v.index++;const l=t(n,v),{index:i}=v;c=l[0],a=l[1],r[2*i]=c,r[2*i+1]=a,u[2*i]=ct(c),u[2*i+1]=ct(a);const s=e?e(n,v):ft;Array.isArray(s)?(o[3*i]=s[0],o[3*i+1]=s[1],o[3*i+2]=s[2]):o[3*i]=s,Number.isFinite(a)&&Number.isFinite(c)&&(h=a<h?a:h,f=a>f?a:f,d=c<d?c:d,p=c>p?c:p)}const m={weight1:{size:1,operation:s.SUM,needMax:!0,values:o}};return{positions:r,positions64xyLow:u,weights:m,boundingBox:{xMin:d,xMax:p,yMin:h,yMax:f}}}(n,t,o)).boundingBox);let p=[e,e],g=[0,0];switch(l.log.assert(c===l.COORDINATE_SYSTEM.LNGLAT||c===l.COORDINATE_SYSTEM.IDENTITY),c){case l.COORDINATE_SYSTEM.LNGLAT:case l.COORDINATE_SYSTEM.LNGLAT_DEPRECATED:const n=function(n,t){const{yMin:e,yMax:l}=n;return function(n,t){const e=(u=n,u/ht*(180/Math.PI)),l=(i=t,r=n,r/ht*(180/Math.PI)/Math.cos(i*Math.PI/180));var i,r;var u;return{yOffset:e,xOffset:l}}(t,(e+l)/2)}(f,e);p=[n.xOffset,n.yOffset],g=[-180,-90];break;case l.COORDINATE_SYSTEM.IDENTITY:const{width:t,height:i}=h;g=[-t/2,-i/2];break;default:l.log.assert(!1)}const v=function({boundingBox:n,cellSize:t,worldOrigin:e}){const{yMin:l,yMax:i,xMin:r,xMax:u}=n,o=pt(r-e[0],t[0])+e[0],a=pt(l-e[1],t[1])+e[1],s=(new at.a).translate([-1*o,-1*a,0]),c=[o,a],h=u-r+t[0],f=i-l+t[1],d=[Math.ceil(h/t[0]),Math.ceil(f/t[1])];return{gridOrigin:c,gridSize:d,width:h,height:f,gridTransformMatrix:s}}({boundingBox:f,cellSize:p,worldOrigin:g}),m=i.run({positions:d.positions,positions64xyLow:d.positions64xyLow,weights:d.weights,cellSize:p,width:v.width,height:v.height,gridTransformMatrix:v.gridTransformMatrix,useGPU:r,changeFlags:u,fp64:a});return{countsBuffer:m.weight1.aggregationBuffer,maxCountBuffer:m.weight1.maxBuffer,countsData:m.weight1.aggregationData,maxCountData:m.weight1.maxData,gridSize:v.gridSize,gridOrigin:v.gridOrigin,cellSize:p,boundingBox:f}}function pt(n,t){const e=n<0?-1:1;let l=e<0?Math.abs(n)+t:Math.abs(n);return(l=Math.floor(l/t)*t)*e}const gt=[255,255,255,255],vt=1,mt={cellSize:{type:"number",min:1,max:1e3,value:1e3},getPosition:{type:"accessor",value:n=>n.position},getWeight:{type:"accessor",value:n=>1},contours:[{threshold:1}],fp64:!1,zOffset:.005};class _t extends l.CompositeLayer{initializeState(){const{gl:n}=this.context,t={id:`${this.id}-gpu-aggregator`,shaderCache:this.context.shaderCache};this.state={contourData:{},gridAggregator:new R(n,t),colorTrigger:0,strokeWidthTrigger:0}}updateState({oldProps:n,props:t,changeFlags:e}){let l=!1,i=!1;const r=this._getAggregationFlags({oldProps:n,props:t,changeFlags:e});r&&(l=!0,this.setState({countsData:null}),this._aggregateData(r)),this._shouldRebuildContours({oldProps:n,props:t})&&(i=!0,this._updateThresholdData(t)),l||i?this._generateContours():this._updateSubLayerTriggers(n,t)}renderLayers(){const{contourSegments:n,contourPolygons:t}=this.state.contourData,e=n&&n.length>0,l=t&&t.length>0;return[e&&new dn.a(this._getLineLayerProps()),l&&new pn.a(this._getSolidPolygonLayerProps())]}_aggregateData(n){const{data:t,cellSize:e,getPosition:l,getWeight:i,gpuAggregation:r,fp64:u,coordinateSystem:o}=this.props,{countsData:a,countsBuffer:s,gridSize:c,gridOrigin:h,cellSize:f,boundingBox:d}=dt({data:t,cellSizeMeters:e,getPosition:l,getWeight:i,gpuAggregation:r,gpuGridAggregator:this.state.gridAggregator,fp64:u,coordinateSystem:o,viewport:this.context.viewport,boundingBox:this.state.boundingBox,aggregationFlags:n});this.setState({countsData:a,countsBuffer:s,gridSize:c,gridOrigin:h,cellSize:f,boundingBox:d})}_generateContours(){const{gridSize:n,gridOrigin:t,cellSize:e,thresholdData:l}=this.state;let{countsData:i}=this.state;if(!i){const{countsBuffer:n}=this.state;i=n.getData(),this.setState({countsData:i})}const{cellWeights:r}=R.getCellData({countsData:i}),u=function({thresholdData:n,colors:t,cellWeights:e,gridSize:l,gridOrigin:i,cellSize:r}){const u=[],o=[],a=l[0],s=l[1];return n.forEach((n,t)=>{const{threshold:l}=n;for(let t=-1;t<a;t++)for(let c=-1;c<s;c++){const{code:h,meanCode:f}=ut({cellWeights:e,threshold:l,x:t,y:c,width:a,height:s}),d={gridOrigin:i,cellSize:r,x:t,y:c,width:a,height:s,code:h,meanCode:f,thresholdData:n};if(Array.isArray(l))d.type=lt.ISO_BANDS,ot(d).forEach(n=>{o.push({vertices:n,threshold:l})});else{d.type=lt.ISO_LINES;const n=ot(d);for(let t=0;t<n.length;t+=2)u.push({start:n[t],end:n[t+1],threshold:l})}}}),{contourSegments:u,contourPolygons:o}}({thresholdData:l,cellWeights:r,gridSize:n,gridOrigin:t,cellSize:e});this.setState({contourData:u})}_getAggregationFlags({oldProps:n,props:t,changeFlags:e}){let l=null;return(e.dataChanged||n.gpuAggregation!==t.gpuAggregation||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPosition))&&(l=Object.assign({},l,{dataChanged:!0})),n.cellSize!==t.cellSize&&(l=Object.assign({},l,{cellSizeChanged:!0})),l}_getLineLayerProps(){const{fp64:n}=this.props,{colorTrigger:t,strokeWidthTrigger:e}=this.state;return this.getSubLayerProps({id:"contour-line-layer",data:this.state.contourData.contourSegments,fp64:n,getSourcePosition:n=>n.start,getTargetPosition:n=>n.end,getColor:this._onGetSublayerColor.bind(this),getWidth:this._onGetSublayerStrokeWidth.bind(this),widthUnits:"pixels",updateTriggers:{getColor:t,getWidth:e}})}_getSolidPolygonLayerProps(){const{fp64:n}=this.props,{colorTrigger:t}=this.state;return this.getSubLayerProps({id:"contour-solid-polygon-layer",data:this.state.contourData.contourPolygons,fp64:n,getPolygon:n=>n.vertices,getFillColor:this._onGetSublayerColor.bind(this),updateTriggers:{getFillColor:t}})}_onGetSublayerColor(n){const{contours:t}=this.props;let e=gt;return t.forEach(t=>{Object(fn.e)(t.threshold,n.threshold)&&(e=t.color||gt)}),e}_onGetSublayerStrokeWidth(n){const{contours:t}=this.props;let e=vt;return t.some(t=>t.threshold===n.threshold&&(e=t.strokeWidth||vt,!0)),e}_shouldRebuildContours({oldProps:n,props:t}){if(!n.contours||!n.zOffset||n.contours.length!==t.contours.length||n.zOffset!==t.zOffset)return!0;const e=n.contours.map(n=>n.threshold),l=t.contours.map(n=>n.threshold);return l.some((n,t)=>!Object(fn.e)(l[t],e[t]))}_updateSubLayerTriggers(n,t){n&&n.contours&&t&&t.contours&&(t.contours.some((t,e)=>t.color!==n.contours[e].color)&&this.state.colorTrigger++,t.contours.some((t,e)=>t.strokeWidth!==n.contours[e].strokeWidth)&&this.state.strokeWidthTrigger++)}_updateThresholdData(n){const t=n.contours.map((t,e)=>({threshold:t.threshold,zIndex:t.zIndex||e,zOffset:n.zOffset}));this.setState({thresholdData:t})}}_t.layerName="ContourLayer",_t.defaultProps=mt;var bt="#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-vertex-shader\n\nin vec3 positions;\nin vec3 normals;\n\nin vec4 instanceCounts;\n\n// Custom uniforms\nuniform float extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\n\nuniform vec2 gridSize;\nuniform vec2 gridOrigin;\nuniform vec2 gridOriginLow;\nuniform vec2 gridOffset;\nuniform vec2 gridOffsetLow;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nlayout(std140) uniform;\nuniform AggregationData\n{\n  vec4 maxCount;\n} aggregationData;\n\n#define ELEVATION_SCALE 100.\n\n// Result\nout vec4 vColor;\n\nvoid main(void) {\n\n  bool noRender = instanceCounts.r <= 0.0;\n\n  float step = instanceCounts.r / aggregationData.maxCount.r;\n  vec4 color = mix(minColor, maxColor, step) / 255.;\n\n  // TODO: discard when noRender is true\n  float finalCellSize = noRender ? 0.0 : project_size(cellSize);\n\n\n  float elevation = 0.0;\n\n  if (extruded > 0.5) {\n    elevation = instanceCounts.r  * (positions.z + 1.0) *\n      ELEVATION_SCALE * elevationScale;\n  }\n\n  float yIndex = floor(float(gl_InstanceID) / gridSize[0]);\n  float xIndex = float(gl_InstanceID) - (yIndex * gridSize[0]);\n\n  // Keeping 32-bit calculations for debugging, to be removed.\n  // float instancePositionX = gridOffset[0] * xIndex + gridOrigin[0];\n  // float instancePositionY = gridOffset[1] * yIndex + gridOrigin[1];\n  // vec3 extrudedPosition = vec3(instancePositionX, instancePositionY, elevation);\n  // vec2 extrudedPosition64xyLow = vec2(0., 0.);\n\n  vec2 instancePositionXFP64 = mul_fp64(vec2(gridOffset[0], gridOffsetLow[0]), vec2(xIndex, 0.));\n  instancePositionXFP64 = sum_fp64(instancePositionXFP64, vec2(gridOrigin[0], gridOriginLow[0]));\n  vec2 instancePositionYFP64 = mul_fp64(vec2(gridOffset[1], gridOffsetLow[1]), vec2(yIndex, 0.));\n  instancePositionYFP64 = sum_fp64(instancePositionYFP64, vec2(gridOrigin[1], gridOriginLow[1]));\n  vec3 extrudedPosition = vec3(instancePositionXFP64[0], instancePositionYFP64[0], elevation);\n  vec2 extrudedPosition64xyLow = vec2(instancePositionXFP64[1], instancePositionYFP64[1]);\n\n  vec3 offset = vec3(\n    (positions.x * coverage + 1.0) / 2.0 * finalCellSize,\n    (positions.y * coverage - 1.0) / 2.0 * finalCellSize,\n    1.0);\n\n  // extrude positions\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(extrudedPosition, extrudedPosition64xyLow, offset, position_commonspace);\n\n   if (extruded > 0.5) {\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, position_commonspace.xyz, normals);\n    vColor = vec4(lightColor, color.a * opacity);\n  } else {\n    vColor = vec4(color.rgb, color.a * opacity);\n  }\n}\n",yt="#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  fragColor = vColor;\n}\n";const{fp64LowPart:xt}=o.fp64,wt=new o.PhongMaterial,Et=0,Pt={cellSize:{type:"number",min:0,max:1e3,value:1e3},coverage:{type:"number",min:0,max:1,value:1},elevationScale:{type:"number",min:0,value:1},extruded:!0,fp64:!1,pickable:!1,minColor:{type:"color",value:[0,0,0,255]},maxColor:{type:"color",value:[0,255,0,255]},material:wt};class Ot extends l.Layer{getShaders(){return{vs:bt,fs:yt,modules:["project32","gouraud-lighting","picking","fp64"]}}initializeState(){this.getAttributeManager().addInstanced({instanceCounts:{size:4,update:this.calculateInstanceCounts,noAlloc:!0}})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.fp64!==t.fp64){const{gl:n}=this.context;this.state.model&&this.state.model.delete();const t=this._getModel(n);this._setupUniformBuffer(t),this.setState({model:t}),this.state.attributeManager.invalidate("instanceCounts")}n.countsBuffer!==t.countsBuffer&&this.state.attributeManager.invalidate("instanceCounts")}_getModel(n){return new o.Model(n,Object.assign({},this.getShaders(),{id:this.props.id,geometry:new o.CubeGeometry,isInstanced:!0,shaderCache:this.context.shaderCache}))}draw({uniforms:n}){const{cellSize:t,extruded:e,elevationScale:l,coverage:i,gridSize:r,gridOrigin:o,gridOffset:a,minColor:s,maxColor:c,maxCountBuffer:h}=this.props,f=[xt(o[0]),xt(o[1])],d=[xt(a[0]),xt(a[1])];h.bind({target:u.a.UNIFORM_BUFFER,index:Et}),this.state.model.setUniforms(Object.assign({},n,{cellSize:t,extruded:e,elevationScale:l,coverage:i,gridSize:r,gridOrigin:o,gridOriginLow:f,gridOffset:a,gridOffsetLow:d,minColor:s,maxColor:c})).draw(),h.unbind({target:u.a.UNIFORM_BUFFER,index:Et})}calculateInstanceCounts(n){const{countsBuffer:t}=this.props;n.update({buffer:t})}_setupUniformBuffer(n){const t=this.context.gl,e=n.program.handle,l=t.getUniformBlockIndex(e,"AggregationData");t.uniformBlockBinding(e,l,Et)}}Ot.layerName="GPUGridCellLayer",Ot.defaultProps=Pt;const St=[0,0,0,255],At=[0,255,0,255],Tt={elevationScale:{type:"number",min:0,value:1},cellSize:{type:"number",min:0,max:1e3,value:1e3},coverage:{type:"number",min:0,max:1,value:1},getPosition:{type:"accessor",value:n=>n.position},extruded:!1,fp64:!1,pickable:!1,material:new o.PhongMaterial,gpuAggregation:!0};class Ct extends l.CompositeLayer{initializeState(){const{gl:n}=this.context,t={id:`${this.id}-gpu-aggregator`,shaderCache:this.context.shaderCache};this.state={gpuGridAggregator:new R(n,t)}}updateState(n){const t=this.getAggregationFlags(n);t&&this.getLayerData(t)}getAggregationFlags({oldProps:n,props:t,changeFlags:e}){let l=null;return(e.dataChanged||n.gpuAggregation!==t.gpuAggregation||e.updateTriggersChanged&&(e.updateTriggersChanged.all||e.updateTriggersChanged.getPosition))&&(l=Object.assign({},l,{dataChanged:!0})),n.cellSize!==t.cellSize&&(l=Object.assign({},l,{cellSizeChanged:!0})),l}getLayerData(n){const{data:t,cellSize:e,getPosition:l,gpuAggregation:i}=this.props,{countsBuffer:r,maxCountBuffer:u,gridSize:o,gridOrigin:a,cellSize:s,boundingBox:c}=dt({data:t,cellSizeMeters:e,getPosition:l,gpuAggregation:i,gpuGridAggregator:this.state.gpuGridAggregator,boundingBox:this.state.boundingBox,aggregationFlags:n});this.setState({countsBuffer:r,maxCountBuffer:u,gridSize:o,gridOrigin:a,cellSize:s,boundingBox:c})}getSubLayerProps(){const{elevationScale:n,fp64:t,extruded:e,cellSize:l,coverage:i,material:r}=this.props,{countsBuffer:u,maxCountBuffer:o,gridSize:a,gridOrigin:s,cellSize:c}=this.state,h=St,f=At;return super.getSubLayerProps({id:"grid-cell",data:this.state.layerData,countsBuffer:u,maxCountBuffer:o,gridSize:a,gridOrigin:s,gridOffset:c,numInstances:a[0]*a[1],minColor:h,maxColor:f,fp64:t,cellSize:l,coverage:i,material:r,elevationScale:n,extruded:e,pickable:!1})}getSubLayerClass(){return Ot}renderLayers(){return new(this.getSubLayerClass())(this.getSubLayerProps())}}Ct.layerName="GPUGridLayer",Ct.defaultProps=Tt,e.d(t,"experimental",function(){return Lt}),e.d(t,"ScreenGridLayer",function(){return W}),e.d(t,"GridLayer",function(){return tn}),e.d(t,"HexagonLayer",function(){return hn}),e.d(t,"ContourLayer",function(){return _t}),e.d(t,"_GPUGridLayer",function(){return Ct}),e.d(t,"_GPUGridAggregator",function(){return R}),e.d(t,"AGGREGATION_OPERATION",function(){return s}),e.d(t,"_pointToDensityGridData",function(){return dt});const Lt={BinSorter:Y,linearScale:function(n,t,e){return(e-n[0])/(n[1]-n[0])*(t[1]-t[0])+t[0]},getLinearScale:$,quantizeScale:Z,getQuantizeScale:q,defaultColorRange:i}},function(n,t,e){"use strict";e.r(t);var l=e(4),i=e(5),r=e.n(i),u=e(1),o=e(9),a=e.n(o),s=e(15),c=e(55),h=e(76),f=e(32);function d(n,t){return p.apply(this,arguments)}function p(){return(p=Object(s.a)(a.a.mark(function n(t,e){return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(t,e);case 2:return n.abrupt("return",n.sent);case 3:case"end":return n.stop()}},n)}))).apply(this,arguments)}var g="",v={};function m(n){for(var t in v)if(n.startsWith(t)){var e=v[t];return n.replace(t,e)}return n+=g}function _(n,t){return b.apply(this,arguments)}function b(){return(b=Object(s.a)(a.a.mark(function n(t,e){var l;return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return t=m(t),l=c.a?d:h.b,n.abrupt("return",l(t,e));case 3:case"end":return n.stop()}},n)}))).apply(this,arguments)}var y=e(56);function x(n){return!!n&&(Array.isArray(n)&&(n=n[0]),n.parseTextSync||n.parseSync||n.parse||n.loadAndParse||n.parseStream||n.parseInBatches||n.worker)}function w(n){var t;return Object(f.a)(x(n)),Array.isArray(n)&&(t=(n=n[0])[1],n=Object(y.a)({},n,{options:Object(y.a)({},n.options,{options:t})})),n.extension&&(n.extensions=n.extensions||[n.extension],delete n.extension),Array.isArray(n.extensions)||(n.extensions=[n.extensions]),Object(f.a)(n.extensions&&n.extensions.length>0&&n.extensions[0]),n.parseTextSync&&(n.text=!0),n.text||(n.binary=!0),n}var E=/[^\.]+$/;function P(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1?arguments[1]:void 0,e=arguments.length>2?arguments[2]:void 0,l=n.match(E);if(l&&l[0]){var i=function(n,t){t=t.toLowerCase();var e=!0,l=!1,i=void 0;try{for(var r,u=n[Symbol.iterator]();!(e=(r=u.next()).done);e=!0){var o=r.value;w(o);var a=!0,s=!1,c=void 0;try{for(var h,f=o.extensions[Symbol.iterator]();!(a=(h=f.next()).done);a=!0){var d=h.value;if(d.toLowerCase()===t)return o}}catch(n){s=!0,c=n}finally{try{a||null==f.return||f.return()}finally{if(s)throw c}}}}catch(n){l=!0,i=n}finally{try{e||null==u.return||u.return()}finally{if(l)throw i}}return null}(e,l[0]);if(i)return i}var r=function(n,t){var e=!0,l=!1,i=void 0;try{for(var r,u=n[Symbol.iterator]();!(e=(r=u.next()).done);e=!0){var o=r.value;if(o.testText&&o.testText(t))return o}}catch(n){l=!0,i=n}finally{try{e||null==u.return||u.return()}finally{if(l)throw i}}return null}(e,t);return r||null}var O=e(62),S=e(63),A=function(){function n(){Object(O.a)(this,n)}return Object(S.a)(n,[{key:"log",value:function(){}},{key:"info",value:function(){}},{key:"warn",value:function(){}},{key:"error",value:function(){}}]),n}(),T={};function C(){return Object.values(T)}var L=e(64),M=new Map;function j(n,t,e){var l=function(n){var t=M.get(n);if(!t){var e=new Blob([n],{type:"application/javascript"});t=URL.createObjectURL(e),M.set(n,t)}return new Worker(t)}(n);e=function(n){null!==(n=Object.assign({},n)).log&&delete n.log;return n}(e);var i=function(n,t){return new Promise(function(e,i){l.onmessage=function(n){switch(n.data.type){case"done":e(n.data.result),l.terminate();break;case"error":i(new Error(n.data.message))}};var r=Object(L.a)(n);l.postMessage({arraybuffer:r,opts:t},[r])})};return t?i(t,e):i}e(47);var R=function(n){return"undefined"!=typeof window&&n instanceof window.Response||n.arrayBuffer&&n.json&&n.body},I=(e(65),e(53)),k="Cannot convert supplied data type";function F(n){return R(n)?n.url:null}function N(n,t){if(t.text&&"string"==typeof n)return n;if(n instanceof ArrayBuffer||ArrayBuffer.isView(n)){var e=n.buffer||n;return t.text&&!t.binary?new I.TextDecoder("utf8").decode(e):e}throw new Error(k)}function D(n,t){return B.apply(this,arguments)}function B(){return(B=Object(s.a)(a.a.mark(function n(t,e){var l;return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,t;case 2:if(t=n.sent,l=t instanceof ArrayBuffer||ArrayBuffer.isView(t),"string"!=typeof t&&!l){n.next=6;break}return n.abrupt("return",N(t,e));case 6:if(!R(t)){n.next=15;break}if(!e.binary){n.next=13;break}return n.next=10,t.arrayBuffer();case 10:n.t0=n.sent,n.next=14;break;case 13:n.t0=t.text();case 14:return n.abrupt("return",n.t0);case 15:throw new Error(k);case 16:case"end":return n.stop()}},n)}))).apply(this,arguments)}function U(n,t){return z.apply(this,arguments)}function z(){return(z=Object(s.a)(a.a.mark(function n(t,e){var l,i,r=arguments;return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return l=r.length>2&&void 0!==r[2]?r[2]:{},i=(i=r.length>3?r[3]:void 0)||F(t),n.next=5,D(t,e);case 5:if(t=n.sent,!e.parseTextSync||"string"!=typeof t){n.next=9;break}return l.dataType="text",n.abrupt("return",e.parseTextSync(t,l,i,e));case 9:if(!e.parseSync){n.next=11;break}return n.abrupt("return",e.parseSync(t,l,i,e));case 11:if(!e.parse){n.next=15;break}return n.next=14,e.parse(t,l,i,e);case 14:return n.abrupt("return",n.sent);case 15:if(!e.worker){n.next=19;break}return n.next=18,j(e.worker,t,l);case 18:return n.abrupt("return",n.sent);case 19:return n.abrupt("return",Object(f.a)(!1));case 20:case"end":return n.stop()}},n)}))).apply(this,arguments)}function V(n,t,e,l){return G.apply(this,arguments)}function G(){return(G=Object(s.a)(a.a.mark(function n(t,e,l,i){var r;return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(Array.isArray(e)||x(e)||(i=l,l=e,e=null),e=e||C(),r=Array.isArray(e)?P(i,t,e):e){n.next=5;break}return n.abrupt("return",null);case 5:return w(r),l=W(l,r),n.next=9,U(t,r,l,i);case 9:return n.abrupt("return",n.sent);case 10:case"end":return n.stop()}},n)}))).apply(this,arguments)}function W(n,t){return null===(n=Object.assign({},t.DEFAULT_OPTIONS,t.options,n,{dataType:"arraybuffer"})).log&&(n.log=new A),"log"in n||(n.log=console),n}function H(n,t,e){return X.apply(this,arguments)}function X(){return(X=Object(s.a)(a.a.mark(function n(t,e,l){var i,r;return a.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(Array.isArray(e)||x(e)||(l=e,e=null),e=e||C(),!(i=Array.isArray(e)?P(t,null,e):e)||!i.loadAndParse){n.next=7;break}return n.next=6,i.loadAndParse(t,l);case 6:return n.abrupt("return",n.sent);case 7:return n.next=9,_(t,l);case 9:return r=n.sent,n.abrupt("return",V(r,e,l,t));case 11:case"end":return n.stop()}},n)}))).apply(this,arguments)}var Y=e(122);const Z=Math.PI/180,q=new Float32Array(16),$=new Float32Array(12);function K(n,t,e){const l=t[0]*Z,i=t[1]*Z,r=t[2]*Z,u=Math.sin(r),o=Math.sin(l),a=Math.sin(i),s=Math.cos(r),c=Math.cos(l),h=Math.cos(i),f=e[0],d=e[1],p=e[2];n[0]=f*h*c,n[1]=f*a*c,n[2]=f*-o,n[3]=d*(-a*s+h*o*u),n[4]=d*(h*s+a*o*u),n[5]=d*c*u,n[6]=p*(a*u+h*o*s),n[7]=p*(-h*u+a*o*s),n[8]=p*c*s}function Q(n){return n[0]=n[0],n[1]=n[1],n[2]=n[2],n[3]=n[4],n[4]=n[5],n[5]=n[6],n[6]=n[8],n[7]=n[9],n[8]=n[10],n[9]=n[12],n[10]=n[13],n[11]=n[14],n.subarray(0,12)}const J={size:12,accessor:["getOrientation","getScale","getTranslation","getTransformMatrix"],shaderAttributes:{instanceModelMatrix__LOCATION_0:{size:3,stride:48,offset:0},instanceModelMatrix__LOCATION_1:{size:3,stride:48,offset:12},instanceModelMatrix__LOCATION_2:{size:3,stride:48,offset:24},instanceTranslation:{size:3,stride:48,offset:36}},update(n){const{data:t,getOrientation:e,getScale:i,getTranslation:r,getTransformMatrix:u}=this.props,o=Array.isArray(u),a=o&&16===u.length,s=Array.isArray(i),c=Array.isArray(e),h=Array.isArray(r),f=a||!o&&Boolean(u(t[0]));n.constant=f?a:c&&s&&h;const d=n.value;if(n.constant){let t;if(f)q.set(u),t=Q(q);else{K(t=$,e,i),t.set(r,9)}n.value=new Float32Array(t)}else{let n=0;const{iterable:o,objectInfo:p}=Object(l.createIterable)(t);for(const t of o){let l;if(p.index++,f)q.set(a?u:u(t,p)),l=Q(q);else{K(l=$,c?e:e(t,p),s?i:i(t,p)),l.set(h?r:r(t,p),9)}d[n++]=l[0],d[n++]=l[1],d[n++]=l[2],d[n++]=l[3],d[n++]=l[4],d[n++]=l[5],d[n++]=l[6],d[n++]=l[7],d[n++]=l[8],d[n++]=l[9],d[n++]=l[10],d[n++]=l[11]}}}};var nn="\n#define SHADER_NAME simple-mesh-layer-vs\n\n// Scale the model\nuniform float sizeScale;\n\n// Primitive attributes\nattribute vec3 positions;\nattribute vec3 normals;\nattribute vec2 texCoords;\n\n// Instance attributes\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xy;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute mat3 instanceModelMatrix;\nattribute vec3 instanceTranslation;\n\n// Outputs to fragment shader\nvarying vec2 vTexCoord;\nvarying vec3 cameraPosition;\nvarying vec3 normals_commonspace;\nvarying vec4 position_commonspace;\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;\n  pos = project_size(pos);\n\n  vTexCoord = texCoords;\n  cameraPosition = project_uCameraPosition;\n  normals_commonspace = project_normal(instanceModelMatrix * normals);\n  vColor = instanceColors;\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xy, pos, position_commonspace);\n\n  picking_setPickingColor(instancePickingColors);\n}\n",tn="\n#define SHADER_NAME simple-mesh-layer-fs\n\n// Note(Tarek): headless-gl supports derivatives, but doesn't report it via getExtension. Awesome!\n#ifdef DERIVATIVES\n#define FLAT_SHADE_NORMAL normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)))\n#else\n#define FLAT_SHADE_NORMAL vec3(0.0, 0.0, 1.0)\n#endif\n\nprecision highp float;\n\nuniform bool hasTexture;\nuniform sampler2D sampler;\nuniform vec4 color;\nuniform bool flatShading;\n\nvarying vec2 vTexCoord;\nvarying vec3 cameraPosition;\nvarying vec3 normals_commonspace;\nvarying vec4 position_commonspace;\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec3 normal;\n  if (flatShading) {\n    normal = FLAT_SHADE_NORMAL;\n  } else {\n    normal = normals_commonspace;\n  }\n\n  vec4 color = hasTexture ? texture2D(sampler, vTexCoord) : vColor / 255.;\n  vec3 lightColor = lighting_getLightColor(color.rgb * 255., cameraPosition, position_commonspace.xyz, normal);\n  gl_FragColor = vec4(lightColor / 255., color.a);\n\n  // use highlight color if this fragment belongs to the selected object.\n  gl_FragColor = picking_filterHighlightColor(gl_FragColor);\n\n  // use picking color if rendering to picking FBO.\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n",en="#version 300 es\n#define SHADER_NAME simple-mesh-layer-vs\n\n// Scale the model\nuniform float sizeScale;\n\n// Primitive attributes\nin vec3 positions;\nin vec3 normals;\nin vec2 texCoords;\n\n// Instance attributes\nin vec3 instancePositions;\nin vec2 instancePositions64xy;\nin vec4 instanceColors;\nin vec3 instancePickingColors;\nin mat3 instanceModelMatrix;\nin vec3 instanceTranslation;\n\n// Outputs to fragment shader\nout vec2 vTexCoord;\nout vec3 cameraPosition;\nout vec3 normals_commonspace;\nout vec4 position_commonspace;\nout vec4 vColor;\n\nvoid main(void) {\n  vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;\n  pos = project_size(pos);\n\n  vTexCoord = texCoords;\n  cameraPosition = project_uCameraPosition;\n  normals_commonspace = project_normal(instanceModelMatrix * normals);\n  vColor = instanceColors;\n\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xy, pos, position_commonspace);\n\n  picking_setPickingColor(instancePickingColors);\n}\n",ln="#version 300 es\n#define SHADER_NAME simple-mesh-layer-fs\n\nprecision highp float;\n\nuniform bool hasTexture;\nuniform sampler2D sampler;\nuniform vec4 color;\nuniform bool flatShading;\n\nin vec2 vTexCoord;\nin vec3 cameraPosition;\nin vec3 normals_commonspace;\nin vec4 position_commonspace;\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  vec3 normal;\n  if (flatShading) {\n    normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));\n  } else {\n    normal = normals_commonspace;\n  }\n\n  vec4 color = hasTexture ? texture(sampler, vTexCoord) : vColor / 255.;\n  vec3 lightColor = lighting_getLightColor(color.rgb * 255., cameraPosition, position_commonspace.xyz, normal);\n  fragColor = vec4(lightColor / 255., color.a);\n\n  // use highlight color if this fragment belongs to the selected object.\n  fragColor = picking_filterHighlightColor(fragColor);\n\n  // use picking color if rendering to picking FBO.\n  fragColor = picking_filterPickingColor(fragColor);\n}\n";const{fp64LowPart:rn}=u.fp64;function un(n,t,e){return t instanceof u.Texture2D?t:new u.Texture2D(n,Object.assign({data:t},e))}function on(n){!function(n,t){if(!n)throw new Error(`deck.gl: ${t}`)}(n.positions||n.POSITION,'SimpleMeshLayer requires "postions" or "POSITION" attribute in mesh property.')}function an(n){if(n.attributes)return on(n.attributes),n instanceof u.Geometry?n:new u.Geometry(n);if(n.positions||n.POSITION)return on(n),new u.Geometry({attributes:n});throw Error("Invalid mesh")}const sn=new u.PhongMaterial,cn={fetch:(n,{propName:t})=>"mesh"===t?H(n):fetch(n).then(n=>n.json()),mesh:{value:null,type:"object",async:!0},texture:null,sizeScale:{type:"number",value:1,min:0},parameters:{depthTest:!0,depthFunc:r.a.LEQUAL},fp64:!1,wireframe:!1,material:sn,getPosition:{type:"accessor",value:n=>n.position},getColor:{type:"accessor",value:[0,0,0,255]},getOrientation:{type:"accessor",value:[0,0,0]},getScale:{type:"accessor",value:[1,1,1]},getTranslation:{type:"accessor",value:[0,0,0]},getTransformMatrix:{type:"accessor",value:[]}};class hn extends l.Layer{getShaders(){const n=this.use64bitProjection()?"project64":"project32",t=Object(u.isWebGL2)(this.context.gl);return{vs:t?en:nn,fs:t?ln:tn,modules:[n,"phong-lighting","picking"]}}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{transition:!0,size:3,accessor:"getPosition"},instancePositions64xy:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceColors:{transition:!0,size:4,accessor:"getColor",defaultValue:[0,0,0,255]},instanceModelMatrix:J}),this.setState({emptyTexture:new u.Texture2D(this.context.gl,{data:new Uint8Array(4),width:1,height:1})})}updateState({props:n,oldProps:t,changeFlags:e}){if(super.updateState({props:n,oldProps:t,changeFlags:e}),n.mesh!==t.mesh||n.fp64!==t.fp64){if(this.state.model&&this.state.model.delete(),n.mesh){this.setState({model:this.getModel(n.mesh)});const t=n.mesh.attributes||n.mesh;this.setState({hasNormals:Boolean(t.NORMAL||t.normals)})}this.getAttributeManager().invalidateAll()}n.texture!==t.texture&&this.setTexture(n.texture),this.state.model&&this.state.model.setDrawMode(this.props.wireframe?r.a.LINE_STRIP:r.a.TRIANGLES)}draw({uniforms:n}){if(!this.state.model)return;const{sizeScale:t}=this.props;this.state.model.draw({uniforms:Object.assign({},n,{sizeScale:t,flatShade:!this.state.hasNormals})})}getModel(n){const t=new u.Model(this.context.gl,Object.assign({},this.getShaders(),{id:this.props.id,geometry:an(n),isInstanced:!0,shaderCache:this.context.shaderCache}));return this.state.texture?t.setUniforms({sampler:this.state.texture,hasTexture:1}):t.setUniforms({sampler:this.state.emptyTexture,hasTexture:0}),t}setTexture(n){const{gl:t}=this.context,{emptyTexture:e}=this.state;n?function(n,t,e){return"string"==typeof t?Object(Y.a)(t).then(t=>un(n,t,e)).catch(n=>{throw new Error(`Could not load texture from ${t}: ${n}`)}):new Promise(l=>l(un(n,t,e)))}(t,n).then(n=>{this.setState({texture:n}),this.state.model&&this.state.model.setUniforms({sampler:this.state.texture,hasTexture:1})}):(this.setState({texture:null}),this.state.model&&this.state.model.setUniforms({sampler:e,hasTexture:0}))}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:i}=this.props,{value:r}=n;let u=0;const{iterable:o,objectInfo:a}=Object(l.createIterable)(e);for(const n of o){a.index++;const t=i(n,a);r[u++]=rn(t[0]),r[u++]=rn(t[1])}}}hn.layerName="SimpleMeshLayer",hn.defaultProps=cn;var fn="// Instance attributes\nattribute vec3 instancePositions;\nattribute vec2 instancePositions64xy;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute mat3 instanceModelMatrix;\nattribute vec3 instanceTranslation;\n\n// Uniforms\nuniform float sizeScale;\n\n// Attributes\nattribute vec4 POSITION;\n\n#ifdef HAS_UV\n  attribute vec2 TEXCOORD_0;\n  varying vec2 vTEXCOORD_0;\n#endif\nvarying vec4 vColor;\n\nvoid main(void) {\n  #ifdef HAS_UV\n    vTEXCOORD_0 = TEXCOORD_0;\n  #endif\n  vColor = instanceColors;\n\n  vec3 pos = (instanceModelMatrix * POSITION.xyz) * sizeScale + instanceTranslation;\n  pos = project_size(pos);\n\n  vec4 position_commonspace;\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64xy, pos, position_commonspace);\n  picking_setPickingColor(instancePickingColors);\n}\n",dn="#ifdef HAS_UV\n  varying vec2 vTEXCOORD_0;\n  uniform sampler2D u_BaseColorSampler;\n#endif\nvarying vec4 vColor;\n\nvoid main(void) {\n  #ifdef HAS_UV\n    gl_FragColor = (vColor / 255.) * texture2D(u_BaseColorSampler, vTEXCOORD_0);\n  #else\n    gl_FragColor = vColor / 255.;\n  #endif\n\n  gl_FragColor = picking_filterPickingColor(gl_FragColor);\n}\n";const{fp64LowPart:pn}=u.fp64,gn=[255,255,255,255],vn={scenegraph:{type:"object",value:null,async:!0},fetch:(n,{propName:t,layer:e})=>"scenegraph"===t?H(n,e.getLoadOptions()).then(({scenes:n})=>n[0]):fetch(n).then(n=>n.json()),sizeScale:{type:"number",value:1,min:0},getPosition:{type:"accessor",value:n=>n.position},getColor:{type:"accessor",value:gn},getOrientation:{type:"accessor",value:[0,0,0]},getScale:{type:"accessor",value:[1,1,1]},getTranslation:{type:"accessor",value:[0,0,0]},getTransformMatrix:{type:"accessor",value:[]}};class mn extends l.Layer{initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,accessor:"getPosition",transition:!0},instancePositions64xy:{size:2,accessor:"getPosition",update:this.calculateInstancePositions64xyLow},instanceColors:{size:4,accessor:"getColor",defaultValue:gn,transition:!0},instanceModelMatrix:J})}calculateInstancePositions64xyLow(n){const t=this.use64bitPositions();if(n.constant=!t,!t)return void(n.value=new Float32Array(2));const{data:e,getPosition:l}=this.props,{value:i}=n;let r=0;for(const n of e){const t=l(n);i[r++]=pn(t[0]),i[r++]=pn(t[1])}}updateState(n){super.updateState(n);const{props:t,oldProps:e}=n;t.scenegraph!==e.scenegraph&&(t.scenegraph instanceof u.ScenegraphNode?(this._deleteScenegraph(),this._applyAllAttributes(t.scenegraph),this.setState({scenegraph:t.scenegraph})):null!==t.scenegraph&&u.log.warn("bad scenegraph:",t.scenegraph)())}finalizeState(){this._deleteScenegraph()}_applyAllAttributes(n){const t=this.getAttributeManager().getAttributes();n.traverse(n=>{this._setModelAttributes(n.model,t)})}_deleteScenegraph(){const{scenegraph:n}=this.state;n instanceof u.ScenegraphNode&&n.delete()}getLoadOptions(){return{gl:this.context.gl,waitForFullLoad:!0,modelOptions:{vs:fn,fs:dn,modules:["project32","picking"],isInstanced:!0}}}updateAttributes(n){if(super.updateAttributes(n),!this.state.scenegraph)return;const t=this.getAttributeManager().getChangedAttributes({clearChangedFlags:!0});this.state.scenegraph.traverse(n=>{this._setModelAttributes(n.model,t)})}draw({moduleParameters:n=null,parameters:t={}}){if(!this.state.scenegraph)return;const{sizeScale:e}=this.props,l=this.getNumInstances();this.state.scenegraph.traverse(i=>{i.model.setInstanceCount(l),i.updateModuleSettings(n),i.draw({parameters:t,uniforms:{sizeScale:e}})})}}mn.layerName="ScenegraphLayer",mn.defaultProps=vn,e.d(t,"SimpleMeshLayer",function(){return hn}),e.d(t,"ScenegraphLayer",function(){return mn})},function(n,t,e){"use strict";e.r(t);var l=e(86),i="#define SHADER_NAME great-circle-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\nattribute vec4 instancePositions;\nattribute vec4 instancePositions64Low;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\n\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\n\nvarying vec4 vColor;\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  vec2 offset_screenspace = dir_screenspace * offset_direction * width / 2.0;\n  vec2 offset_clipspace = project_pixel_size_to_clipspace(offset_screenspace);\n\n  return offset_clipspace;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\n// get angular distance in radian\nfloat getAngularDist (vec2 source, vec2 target) {\n  vec2 delta = source - target;\n  vec2 sin_half_delta = sin(delta / 2.0);\n  float a =\n    sin_half_delta.y * sin_half_delta.y +\n    cos(source.y) * cos(target.y) *\n    sin_half_delta.x * sin_half_delta.x;\n  return 2.0 * atan(sqrt(a), sqrt(1.0 - a));\n}\n\nvec2 interpolate (vec2 source, vec2 target, float angularDist, float t) {\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\n  if(abs(angularDist - PI) < 0.001) {\n    return (1.0 - t) * source + t * target;\n  }\n\n  float a = sin((1.0 - t) * angularDist) / sin(angularDist);\n  float b = sin(t * angularDist) / sin(angularDist);\n  vec2 sin_source = sin(source);\n  vec2 cos_source = cos(source);\n  vec2 sin_target = sin(target);\n  vec2 cos_target = cos(target);\n\n  float x = a * cos_source.y * cos_source.x + b * cos_target.y * cos_target.x;\n  float y = a * cos_source.y * sin_source.x + b * cos_target.y * sin_target.x;\n  float z = a * sin_source.y + b * sin_target.y;\n  return vec2(atan(y, x), atan(z, sqrt(x * x + y * y)));\n}\n\nvoid main(void) {\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  \n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\n  \n  vec2 source = radians(instancePositions.xy);\n  vec2 target = radians(instancePositions.zw);\n  \n  float angularDist = getAngularDist(source, target);\n\n  vec3 currPos = vec3(degrees(interpolate(source, target, angularDist, segmentRatio)), 0.0);\n  vec3 nextPos = vec3(degrees(interpolate(source, target, angularDist, nextSegmentRatio)), 0.0);\n\n  vec2 currPos64Low = mix(instancePositions64Low.xy, instancePositions64Low.zw, segmentRatio);\n  vec2 nextPos64Low = mix(instancePositions64Low.xy, instancePositions64Low.zw, nextSegmentRatio);\n\n  vec4 curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0));\n  vec4 next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels);\n  gl_Position = curr + vec4(offset, 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio) / 255.0;\n  vColor = vec4(color.rgb, color.a * opacity);\n  \n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n}\n";class r extends l.a{getShaders(){return Object.assign({},super.getShaders(),{vs:i,modules:["picking","project32"]})}}r.layerName="GreatCircleLayer";var u=e(4),o=e(85),a=e(57);const s=180/Math.PI,c=100;function h([n,t,e]){const l=Math.atan2(e,Math.sqrt(n*n+t*t));return[Math.atan2(t,n)*s,l*s]}function f(n){const t=function(n){const t=n.padEnd(16,"0");return String(parseInt(t,16))}(n),e=function(n){const t=n.substr(n.length-1);return 2*(n.length-1)-(0==(1&t))}(n);return function({face:n,ij:t,level:e}){const l=[],i=[[0,0],[0,1],[1,1],[1,0],[0,0]],r=Math.max(1,c*Math.pow(2,-e));for(let u=0;u<4;u++){const o=i[u].slice(0),s=i[u+1],c=(s[0]-o[0])/r,f=(s[1]-o[1])/r;for(let i=0;i<r;i++){o[0]+=c,o[1]+=f;const i=a.S2.IJToST(t,e,o),r=a.S2.STToUV(i),u=a.S2.FaceUVToXYZ(n,r);l.push(h(u))}}return l}(a.S2.S2Cell.FromLatLng(a.S2.idToLatLng(t),e))}const d=Object.assign({getS2Token:{type:"accessor",value:n=>n.token}},o.a.defaultProps);class p extends u.CompositeLayer{renderLayers(){const{data:n,getS2Token:t}=this.props,{elevationScale:e,extruded:l,wireframe:i,filled:r,stroked:u,lineWidthUnits:a,lineWidthScale:s,lineWidthMinPixels:c,lineWidthMaxPixels:h,lineJointRounded:d,lineMiterLimit:p,lineDashJustified:g,fp64:v,getElevation:m,getFillColor:_,getLineColor:b,getLineWidth:y,getLineDashArray:x}=this.props,{updateTriggers:w,material:E}=this.props;return new(this.getSubLayerClass("cell",o.a))({fp64:v,filled:r,wireframe:i,extruded:l,elevationScale:e,stroked:u,lineWidthUnits:a,lineWidthScale:s,lineWidthMinPixels:c,lineWidthMaxPixels:h,lineJointRounded:d,lineMiterLimit:p,lineDashJustified:g,material:E,getElevation:m,getFillColor:_,getLineColor:b,getLineWidth:y,getLineDashArray:x},this.getSubLayerProps({id:"cell",updateTriggers:{getElevation:w.getElevation,getFillColor:w.getFillColor,getLineColor:w.getLineColor,getLineWidth:w.getLineWidth,getLineDashArray:w.getLineDashArray}}),{data:n,getPolygon:n=>f(t(n))})}}p.layerName="S2Layer",p.defaultProps=d;var g=e(88);function v(n,t,e){const l=n/Math.pow(2,e)*360-180,i=Math.PI-2*Math.PI*t/Math.pow(2,e);return[l,180/Math.PI*Math.atan(.5*(Math.exp(i)-Math.exp(-i)))]}class m{constructor({getTileData:n,x:t,y:e,z:l,onTileError:i}){this.x=t,this.y=e,this.z=l,this.bbox=function(n,t,e){const[l,i]=v(n,t,e),[r,u]=v(n+1,t+1,e);return{west:l,north:i,east:r,south:u}}(this.x,this.y,this.z),this.isVisible=!0,this.getTileData=n,this._data=null,this._isLoaded=!1,this._loader=this._loadData(),this.onTileError=i}get data(){return this._data?Promise.resolve(this._data):this._loader}get isLoaded(){return this._isLoaded}_loadData(){const{x:n,y:t,z:e}=this;return this.getTileData?this.getTileData({x:n,y:t,z:e}).then(n=>(this._data=n,this._isLoaded=!0,n)).catch(n=>{this._isLoaded=!0,this.onTileError(n)}):null}isOverlapped(n){const{x:t,y:e,z:l}=this,i=Math.pow(2,n.z-l);return Math.floor(n.x/i)===t&&Math.floor(n.y/i)===e}}var _=e(21);const b=512;function y(n){return Math.floor(n/b)}function x({x:n,y:t,z:e},l){const i=Math.pow(2,e-l);return{x:Math.floor(n/i),y:Math.floor(t/i),z:l}}class w{constructor({getTileData:n,maxSize:t,maxZoom:e,minZoom:l,onTileError:i}){this._getTileData=n,this._maxSize=t,this.onTileError=i,this._cache=new Map,e&&parseInt(e,10)===e&&(this._maxZoom=e),l&&parseInt(l,10)===l&&(this._minZoom=l)}finalize(){this._cache.clear()}update(n,t){const{_cache:e,_getTileData:l,_maxSize:i,_maxZoom:r,_minZoom:u}=this;this._markOldTiles();const o=function(n,t,e){const l=Math.floor(n.zoom);if(e&&l<e)return[];const i=function(n){const t=[n.unproject([0,0]),n.unproject([n.width,0]),n.unproject([0,n.height]),n.unproject([n.width,n.height])];return[t.reduce((n,t)=>n<t[0]?n:t[0],180),t.reduce((n,t)=>n<t[1]?n:t[1],90),t.reduce((n,t)=>n>t[0]?n:t[0],-180),t.reduce((n,t)=>n>t[1]?n:t[1],-90)]}(n=new n.constructor(Object.assign({},n,{zoom:l}))),[r,u]=Object(_.g)([i[0],i[3]],n.scale).map(y),[o,a]=Object(_.g)([i[2],i[1]],n.scale).map(y),s=[];for(let n=r;n<=o;n++)for(let e=u;e<=a;e++)t&&l>t?s.push(x({x:n,y:e,z:l},t)):s.push({x:n,y:e,z:l});return s}(n,r,u);if(!o||0===o.length)return void t(o);const a=new Set;e.forEach(n=>{o.some(t=>n.isOverlapped(t))&&(n.isVisible=!0,a.add(n))});for(let n=0;n<o.length;n++){const t=o[n],{x:i,y:r,z:u}=t;let s=this._getTile(i,r,u);s||(s=new m({getTileData:l,x:i,y:r,z:u,onTileError:this.onTileError}));const c=this._getTileId(i,r,u);e.set(c,s),a.add(s)}this._resizeCache(i||5*o.length),t(Array.from(a).sort((n,t)=>n.z-t.z))}_resizeCache(n){const{_cache:t}=this;if(t.size>n){const e=t[Symbol.iterator]();for(const l of e){if(t.size<=n)break;const e=l[0];l[1].isVisible||t.delete(e)}}}_markOldTiles(){this._cache.forEach(n=>{n.isVisible=!1})}_getTile(n,t,e){const l=this._getTileId(n,t,e);return this._cache.get(l)}_getTileId(n,t,e){return`${e}-${n}-${t}`}}const E={renderSubLayers:{type:"function",value:n=>new g.a(n)},getTileData:{type:"function",value:({x:n,y:t,z:e})=>Promise.resolve(null)},onViewportLoaded:{type:"function",value:()=>{}},onTileError:{type:"function",value:n=>console.error(n)},maxZoom:null,minZoom:0,maxCacheSize:null};class P extends u.CompositeLayer{initializeState(){const{maxZoom:n,minZoom:t,getTileData:e,onTileError:l}=this.props;this.state={tiles:[],tileCache:new w({getTileData:e,maxZoom:n,minZoom:t,onTileError:l}),isLoaded:!1}}shouldUpdateState({changeFlags:n}){return n.somethingChanged}updateState({props:n,oldProps:t,context:e,changeFlags:l}){const{onViewportLoaded:i,onTileError:r}=n;if(l.updateTriggersChanged&&(l.updateTriggersChanged.all||l.updateTriggersChanged.getTileData)){const{getTileData:t,maxZoom:e,minZoom:l,maxCacheSize:i}=n;this.state.tileCache.finalize(),this.setState({tileCache:new w({getTileData:t,maxSize:i,maxZoom:e,minZoom:l,onTileError:r})})}if(l.viewportChanged){const{viewport:n}=e,t=this.getLayerZoomLevel();"DEFAULT-INITIAL-VIEWPORT"!==n.id&&this.state.tileCache.update(n,n=>{const e=n.filter(n=>n.z===t),l=e.every(n=>n.isLoaded);this.setState({tiles:n,isLoaded:l}),l?i(e.filter(n=>n._data).map(n=>n._data)):Promise.all(e.map(n=>n.data)).then(()=>{this.setState({isLoaded:!0}),i(e.filter(n=>n._data).map(n=>n._data))})})}}getPickingInfo({info:n,sourceLayer:t}){return n.sourceLayer=t,n.tile=t.props.tile,n}getLayerZoomLevel(){const n=Math.floor(this.context.viewport.zoom),{maxZoom:t,minZoom:e}=this.props;return t&&parseInt(t,10)===t&&n>t?t:e&&parseInt(e,10)===e&&n<e?e:n}renderLayers(){const{renderSubLayers:n,visible:t}=this.props,e=this.getLayerZoomLevel();return this.state.tiles.map(l=>n(Object.assign({},this.props,{id:`${this.id}-${l.x}-${l.y}-${l.z}`,data:l.data,visible:t&&(!this.state.isLoaded||l.z===e),tile:l})))}}P.layerName="TileLayer",P.defaultProps=E;var O=e(46);class S extends O.a{getShaders(){const n=super.getShaders();return n.inject={"vs:#decl":"uniform float trailLength;\nvarying float vTime;\n","vec3 pos = lineJoin(prevPosition, currPosition, nextPosition);":"pos.z = 0.0;","vs:#main-end":"float shiftZ = mod(instanceEndPositions.z, trailLength) * 1e-4;\ngl_Position.z += shiftZ;\nvTime = instanceStartPositions.z + (instanceEndPositions.z - instanceStartPositions.z) * vPathPosition.y / vPathLength;\n","fs:#decl":"uniform float trailLength;\nuniform float currentTime;\nvarying float vTime;\n","fs:#main-start":"if(vTime > currentTime || vTime < currentTime - trailLength) {\n  discard;\n}\n","gl_FragColor = vColor;":"gl_FragColor.a *= 1.0 - (currentTime - vTime) / trailLength;"},n}draw(n){const{trailLength:t,currentTime:e}=this.props;n.uniforms=Object.assign({},n.uniforms,{trailLength:t,currentTime:e}),super.draw(n)}}S.layerName="TripsLayer",S.defaultProps={trailLength:{type:"number",value:120,min:0},currentTime:{type:"number",value:0,min:0}};var A=e(37);const T=Object.assign({getHexagons:{type:"accessor",value:n=>n.hexagons}},o.a.defaultProps);class C extends u.CompositeLayer{updateState({props:n,oldProps:t,changeFlags:e}){if(e.dataChanged||e.updateTriggers&&e.updateTriggers.getHexagons){const{data:t,getHexagons:e}=n,l=[],{iterable:i,objectInfo:r}=Object(u.createIterable)(t);for(const n of i){r.index++;const t=e(n,r),i=Object(A.h3SetToMultiPolygon)(t,!0);for(const t of i)l.push({polygon:t,object:n,index:r.index})}this.setState({polygons:l})}}getPickingInfo({info:n}){return Object.assign(n,{object:n.object&&n.object.object,index:n.object&&n.object.index})}getSubLayerAccessor(n){return"function"!=typeof n?n:(t,e)=>n(t.object,e)}renderLayers(){const{elevationScale:n,extruded:t,wireframe:e,filled:l,stroked:i,lineWidthScale:r,lineWidthMinPixels:u,lineWidthMaxPixels:a,lineJointRounded:s,lineMiterLimit:c,lineDashJustified:h,fp64:f,material:d,getFillColor:p,getLineColor:g,getLineWidth:v,getLineDashArray:m,getElevation:_,updateTriggers:b}=this.props;return new(this.getSubLayerClass("cluster-region",o.a))({fp64:f,filled:l,wireframe:e,extruded:t,elevationScale:n,stroked:i,lineWidthScale:r,lineWidthMinPixels:u,lineWidthMaxPixels:a,lineJointRounded:s,lineMiterLimit:c,lineDashJustified:h,material:d,getFillColor:this.getSubLayerAccessor(p),getLineColor:this.getSubLayerAccessor(g),getLineWidth:this.getSubLayerAccessor(v),getLineDashArray:this.getSubLayerAccessor(m),getElevation:this.getSubLayerAccessor(_)},this.getSubLayerProps({id:"cluster-region",updateTriggers:b}),{data:this.state.polygons,getPolygon:n=>n.polygon})}}C.defaultProps=T,C.layerName="H3ClusterLayer";var L=e(1),M=e(51),j=e(69);function R(n,t,e){const l=n(t,e),[i,r]=Object(A.h3ToGeo)(l);return[r,i]}const I={highPrecision:!1,coverage:{type:"number",min:0,max:1,value:1},elevationScale:{type:"number",min:0,value:1},extruded:!0,fp64:!1,getHexagon:{type:"accessor",value:n=>n.hexagon},getColor:{type:"accessor",value:[255,0,255,255]},getElevation:{type:"accessor",value:1e3},material:new L.PhongMaterial};class k extends u.CompositeLayer{shouldUpdateState({changeFlags:n}){return this._shouldUseHighPrecision()?n.propsOrDataChanged:n.somethingChanged}updateState({props:n,oldProps:t,changeFlags:e}){if(e.dataChanged||e.updateTriggers&&e.updateTriggers.getHexagon){let t=-1,e=!1;const{iterable:l,objectInfo:i}=Object(u.createIterable)(n.data);for(const r of l){i.index++;const l=n.getHexagon(r,i);if(t=t<0?Object(A.h3GetResolution)(l):t,Object(A.h3IsPentagon)(l)){e=!0;break}}this.setState({resolution:t,hasPentagon:e,vertices:null})}this._updateVertices(this.context.viewport)}_shouldUseHighPrecision(){const{resolution:n,hasPentagon:t}=this.state;return this.props.highPrecision||t||n>=0&&n<=5}_updateVertices(n){if(this._shouldUseHighPrecision())return;const{resolution:t,centerHex:e}=this.state;if(t<0)return;const l=Object(A.geoToH3)(n.latitude,n.longitude,t);if(e===l)return;const{pixelsPerMeter:i}=n.distanceScales;let r=Object(A.h3ToGeoBoundary)(l,!0);const[u,o]=Object(A.h3ToGeo)(l),[a,s]=n.projectFlat([o,u]);r=r.map(t=>{const e=n.projectFlat(t);return e[0]=(e[0]-a)/i[0],e[1]=(e[1]-s)/i[1],e}),this.setState({centerHex:l,vertices:r})}renderLayers(){return this._shouldUseHighPrecision()?this._renderPolygonLayer():this._renderColumnLayer()}_renderPolygonLayer(){const{data:n,getHexagon:t,updateTriggers:e,elevationScale:l,extruded:i,fp64:r,getColor:u,getElevation:o,material:a}=this.props;return new(this.getSubLayerClass("hexagon-cell-hifi",M.a))({filled:!0,elevationScale:l,extruded:i,fp64:r,getFillColor:u,getElevation:o,material:a},this.getSubLayerProps({id:"hexagon-cell-hifi",updateTriggers:{getFillColor:e.getFillColor,getElevation:e.getElevation}}),{data:n,getPolygon:(n,e)=>{const l=t(n,e);return Object(A.h3ToGeoBoundary)(l,!0)}})}_renderColumnLayer(){const{data:n,getHexagon:t,updateTriggers:e,coverage:l,elevationScale:i,extruded:r,fp64:u,getColor:o,getElevation:a,material:s}=this.props;return new(this.getSubLayerClass("hexagon-cell",j.a))({coverage:l,elevationScale:i,extruded:r,fp64:u,getColor:o,getElevation:a,material:s},this.getSubLayerProps({id:"hexagon-cell",updateTriggers:e}),{data:n,diskResolution:6,radius:1,vertices:this.state.vertices,getPosition:R.bind(null,t)})}}k.defaultProps=I,k.layerName="H3HexagonLayer",e.d(t,"GreatCircleLayer",function(){return r}),e.d(t,"S2Layer",function(){return p}),e.d(t,"TileLayer",function(){return P}),e.d(t,"TripsLayer",function(){return S}),e.d(t,"H3ClusterLayer",function(){return C}),e.d(t,"H3HexagonLayer",function(){return k})},function(n,t,e){"use strict";e.r(t);var l=e(4);class i extends l.CompositeLayer{initializeState(){this.state={layers:[]}}updateState({props:n,oldProps:t}){if(n.data!==t.data||n.configuration!==t.configuration){const t="string"==typeof n.data?JSON.parse(n.data):n.data;this.state.layers=function(n=[],t){const e=t.layers||{};return n.map(n=>{const l=e[n.type],i=function(n,t){const e={};for(const l in n){const i=n[l];l.startsWith("get")?e[l]=x(i,t):e[l]=i}return e}(n,t);return i.fetch=w,l&&new l(i)})}(t,n.configuration)}}renderLayers(){return this.state.layers}}function r(n,t){const e=function(n){if("string"==typeof n){let t=o[n];return t||(t=n.split("."),o[n]=t),t}return Array.isArray(n)?n:[n]}(t);let l=n;for(const n of e)l=u(l)?l[n]:void 0;return l}function u(n){return null!==n&&"object"==typeof n}i.layerName="JSONLayer",i.defaultProps={configuration:[]};const o={};var a={},s={},c=34,h=10,f=13;function d(n){return new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}")}var p=function(n){var t=new RegExp('["'+n+"\n\r]"),e=n.charCodeAt(0);function l(n,t){var l,i=[],r=n.length,u=0,o=0,d=r<=0,p=!1;function g(){if(d)return s;if(p)return p=!1,a;var t,l,i=u;if(n.charCodeAt(i)===c){for(;u++<r&&n.charCodeAt(u)!==c||n.charCodeAt(++u)===c;);return(t=u)>=r?d=!0:(l=n.charCodeAt(u++))===h?p=!0:l===f&&(p=!0,n.charCodeAt(u)===h&&++u),n.slice(i+1,t-1).replace(/""/g,'"')}for(;u<r;){if((l=n.charCodeAt(t=u++))===h)p=!0;else if(l===f)p=!0,n.charCodeAt(u)===h&&++u;else if(l!==e)continue;return n.slice(i,t)}return d=!0,n.slice(i,r)}for(n.charCodeAt(r-1)===h&&--r,n.charCodeAt(r-1)===f&&--r;(l=g())!==s;){for(var v=[];l!==a&&l!==s;)v.push(l),l=g();t&&null==(v=t(v,o++))||i.push(v)}return i}function i(t){return t.map(r).join(n)}function r(n){return null==n?"":t.test(n+="")?'"'+n.replace(/"/g,'""')+'"':n}return{parse:function(n,t){var e,i,r=l(n,function(n,l){if(e)return e(n,l-1);i=n,e=t?function(n,t){var e=d(n);return function(l,i){return t(e(l),i,n)}}(n,t):d(n)});return r.columns=i||[],r},parseRows:l,format:function(t,e){return null==e&&(e=function(n){var t=Object.create(null),e=[];return n.forEach(function(n){for(var l in n)l in t||e.push(t[l]=l)}),e}(t)),[e.map(r).join(n)].concat(t.map(function(t){return e.map(function(n){return r(t[n])}).join(n)})).join("\n")},formatRows:function(n){return n.map(i).join("\n")}}},g=p(","),v=(g.parse,g.parseRows),m=(g.format,g.formatRows,p("\t"));m.parse,m.parseRows,m.format,m.formatRows;const _={MapView:l.MapView,FirstPersonView:l.FirstPersonView,OrbitView:l.OrbitView,OrthographicView:l.OrthographicView},b={style:"mapbox://styles/mapbox/light-v9"};function y(n,t){const e=n;return e.layers&&(e.layers=function(n,t){return[new i({data:n,configuration:t})]}(n.layers,t)),e.views&&(e.views=function(n,t){if(!n)return n;const e=t.views||{};return(n=Array.isArray(n)?n:[n]).map(n=>{const t=e[n.type]||_[n.type];if(t){const e=Object.assign({},n);return delete e.type,new t(e)}return null}).filter(Boolean)}(n.views,t)),"initialViewState"in e&&(e.viewState=e.viewState||e.initialViewState),function(n,t){(n.map||n.mapStyle)&&(n.map=Object.assign({},b,n.map));if(!n.map)return;"mapStyle"in n&&(n.map.style=n.mapStyle,n.map.mapStyle=n.mapStyle,delete n.mapStyle);"viewState"in n&&(n.map.viewState=n.viewState)}(e),e}function x(n,t){return"-"===n?n=>n:"string"==typeof n?t=>r(t,n):n}function w(n){return fetch(n).then(n=>n.text()).then(n=>{try{return JSON.parse(n)}catch(t){return function(n){const t=v(n);t.length>0&&t.shift();for(const n of t)for(const t in n){const e=parseFloat(n[t])||0;Number.isNaN(e)||(n[t]=e)}return t}(n)}})}class E{constructor(n){this.configuration={},this.onJSONChange=(()=>{}),this.setProps(n)}finalize(){}setProps(n){"configuration"in n&&(this.configuration=n.configuration),"onJSONChange"in n&&(this.onJSONChange=n.onJSONChange)}convertJsonToDeckProps(n){if(!n||n===this.json)return this.deckProps;this.json=n;const t=y(function(n){return"string"==typeof n?JSON.parse(n):Object.assign({},n)}(n),this.configuration);if("initialViewState"in t){(!this.initialViewState||!function(n,t){if(n===t)return!0;if("object"!=typeof n||null===n||"object"!=typeof t||null===t)return!1;if(Object.keys(n).length!==Object.keys(t).length)return!1;for(const e in n)if(!(e in t)||n[e]!==t[e])return!1;for(const e in t)if(!(e in n))return!1;return!0}(t.initialViewState,this.initialViewState))&&(t.viewState=t.initialViewState,this.initialViewState=t.initialViewState),delete t.initialViewState}return this.deckProps=t,t}}e.d(t,"_JSONConverter",function(){return E}),e.d(t,"_JSONLayer",function(){return i})},function(n,t,e){"use strict";e.r(t);var l=e(4);function i(n){const t=n.getPanes().overlayLayer,e=document.createElement("canvas");return Object.assign(e.style,{position:"absolute"}),t.appendChild(e),e}function r(n){const{_eventListeners:t}=n.props.userData;for(const n in t)t[n].remove();n.finalize(),n.canvas.parentNode.removeChild(n.canvas)}function u(n,t,e){let l;switch(t){case"click":l=n._onEvent;break;case"mousemove":l=n._onPointerMove;break;case"mouseout":l=n._onPointerLeave;break;default:return}l({type:t,offsetCenter:e.pixel,srcEvent:e})}const o=()=>!1;class a{constructor(n){this.props={},this._map=null;const t=new google.maps.OverlayView;t.onAdd=this._onAdd.bind(this),t.onRemove=this._onRemove.bind(this),t.draw=this._draw.bind(this),this._overlay=t,this.setProps(n)}setMap(n){n!==this._map&&(this._map&&(this._overlay.setMap(null),this._map=null),n&&(this._map=n,this._overlay.setMap(n)))}setProps(n){Object.assign(this.props,n),this._deck&&this._deck.setProps(this.props)}pickObject(n){return this._deck&&this._deck.pickObject(n)}pickMultipleObjects(n){return this._deck&&this._deck.pickMultipleObjects(n)}pickObjects(n){return this._deck&&this._deck.pickObjects(n)}finalize(){this.setMap(null),this._deck&&(r(this._deck),this._deck=null)}_onAdd(){this._deck=function(n,t,e){if(e){if(e.props.userData._googleMap===n)return e;r(e)}const o={click:null,mousemove:null,mouseout:null};e=new l.Deck({canvas:i(t),initialViewState:{longitude:0,latitude:0,zoom:1},controller:!1,userData:{_googleMap:n,_eventListeners:o}});for(const t in o)o[t]=n.addListener(t,n=>u(e,t,n));return e}(this._map,this._overlay,this._deck),this._deck.setProps(this.props)}_onRemove(){this._deck.setProps({layerFilter:o})}_draw(){const n=this._deck,{width:t,height:e,left:l,top:i,zoom:r,pitch:u,latitude:a,longitude:s}=function(n,t){const e=n.getDiv(),l=e.offsetWidth,i=e.offsetHeight,r=t.getProjection(),u=n.getBounds(),o=u.getNorthEast(),a=u.getSouthWest(),s=r.fromLatLngToDivPixel(o),c=r.fromLatLngToDivPixel(a),h=new google.maps.Point(0,0),f=r.fromContainerPixelToLatLng(h),d=r.fromLatLngToDivPixel(f),p=(s.x-c.x)/l,g=Math.log2(p)+n.getZoom()-1,v=new google.maps.Point(l/2,i/2),m=r.fromContainerPixelToLatLng(v),_=m.lat(),b=m.lng();return{width:l,height:i,left:d.x,top:d.y,zoom:g,pitch:n.getTilt(),latitude:_,longitude:b}}(this._map,this._overlay),c=r>=0&&0===u;n.canvas.style.left=`${l}px`,n.canvas.style.top=`${i}px`,n.setProps({width:t,height:e,viewState:{latitude:a,longitude:s,zoom:r},layerFilter:c?this.props.layerFilter:o}),n.redraw()}}e.d(t,"GoogleMapsOverlay",function(){return a})},function(n,t,e){"use strict";e.r(t);var l=e(4);function i({map:n,gl:t,deck:e}){if(n.__deck)return n.__deck;const i={useDevicePixels:!0,_customRender:()=>n.triggerRepaint(),parameters:{depthMask:!0,depthTest:!0,blendFunc:[t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA],blendEquation:t.FUNC_ADD},userData:{isExternal:!1,mapboxLayers:new Set}};return e?(e.setProps(i),e.props.userData.isExternal=!0):(Object.assign(i,{gl:t,width:!1,height:!1}),e=new l.Deck(i),n.on("remove",()=>{e.finalize(),n.__deck=null})),n.__deck=e,n.on("render",()=>(function(n,t){const{mapboxLayers:e,isExternal:l}=n.props.userData;if(l){const l=r(t,{nearZMultiplier:.1,farZMultiplier:10});n.setProps({viewState:l});const i=Array.from(e,n=>n.id),a=u(n,n=>{for(const t of i)if(o(t,n))return!1;return!0});a.length>0&&n._drawLayers("mapbox-repaint",{layers:a,clearCanvas:!1})}n.needsRedraw({clearRedrawFlags:!0})})(e,n)),e}function r(n,t){const{lng:e,lat:l}=n.getCenter();return Object.assign({longitude:e,latitude:l,zoom:n.getZoom(),bearing:n.getBearing(),pitch:n.getPitch()},t)}function u(n,t){return n.layerManager.getLayers().filter(t)}function o(n,t){let e=t;for(;e;){if(e.id===n)return!0;e=e.parent}return!1}function a(n){if(n.props.userData.isExternal)return;const t=[];n.props.userData.mapboxLayers.forEach(n=>{const e=new(0,n.props.type)(n.props);t.push(e)}),n.setProps({layers:t})}class s{constructor(n){if(!n.id)throw new Error("Layer must have an unique id");this.id=n.id,this.type="custom",this.renderingMode=n.renderingMode||"3d",this.map=null,this.deck=null,this.props=n}onAdd(n,t){var e,l;this.map=n,this.deck=i({map:n,gl:t,deck:this.props.deck}),e=this.deck,l=this,e.props.userData.mapboxLayers.add(l),a(e)}onRemove(){var n,t;n=this.deck,t=this,n.props.userData.mapboxLayers.delete(t),a(n)}setProps(n){Object.assign(this.props,n,{id:this.id}),this.deck&&a(this.deck)}render(n,t){var e,l;this.deck.setProps({viewState:this._getViewState()}),e=this.deck,l=this,e._drawLayers("mapbox-repaint",{layers:u(e,n=>o(l.id,n)),clearCanvas:!1})}_getViewState(){const{map:n,deck:t}=this;return r(n,{nearZMultiplier:t.height?1/t.height:1,farZMultiplier:1})}}e.d(t,"MapboxLayer",function(){return s})},function(n,t,e){"use strict";e.d(t,"a",function(){return a});var l=e(28),i=e.n(l),r=e(39),u=e(75);u.a;function o(n,t){return u.a?Object(u.a)(n,t):function(n){if("undefined"==typeof createImageBitmap)throw new Error("parseImage");var t=new Blob([new Uint8Array(n)]);return createImageBitmap(t)}(n)}function a(n,t){return s.apply(this,arguments)}function s(){return(s=Object(r.a)(i.a.mark(function n(t,e){var l,r;return i.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if("undefined"!=typeof Image){n.next=8;break}return n.next=3,fetch(t,e);case 3:return l=n.sent,n.next=6,l.arrayBuffer();case 6:return r=n.sent,n.abrupt("return",o(r));case 8:return n.next=10,c(t,e);case 10:return n.abrupt("return",n.sent);case 11:case"end":return n.stop()}},n)}))).apply(this,arguments)}function c(n,t){return h.apply(this,arguments)}function h(){return(h=Object(r.a)(i.a.mark(function n(t,e){var l,r,u;return i.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(!/\.svg((\?|#).*)?$/.test(t)){n.next=10;break}return n.next=3,fetch(t,e);case 3:return r=n.sent,n.next=6,r.text();case 6:u=n.sent,l="data:image/svg+xml;base64,".concat(btoa(u)),n.next=13;break;case 10:return n.next=12,t;case 12:l=n.sent;case 13:return n.next=15,new Promise(function(n,i){try{var r=new Image;r.onload=function(){return n(r)},r.onerror=function(n){return i(new Error("Could not load image ".concat(t,": ").concat(n)))},r.crossOrigin=e&&e.crossOrigin||"anonymous",r.src=l}catch(n){i(n)}});case 15:return n.abrupt("return",n.sent);case 16:case"end":return n.stop()}},n)}))).apply(this,arguments)}},function(n,t,e){"use strict";var l=e(17),i=e(14),r=e(0),u=e(2),o=e(3),a=e(40);var s=function(){function n(t,e){var l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"sessionStorage";Object(u.a)(this,n),this.storage=function(n){try{var t=window[n],e="__storage_test__";return t.setItem(e,e),t.removeItem(e),t}catch(n){return null}}(l),this.id=t,this.config={},Object.assign(this.config,e),this._loadConfiguration()}return Object(o.a)(n,[{key:"getConfiguration",value:function(){return this.config}},{key:"setConfiguration",value:function(n){return this.config={},this.updateConfiguration(n)}},{key:"updateConfiguration",value:function(n){if(Object.assign(this.config,n),this.storage){var t=JSON.stringify(this.config);this.storage.setItem(this.id,t)}return this}},{key:"_loadConfiguration",value:function(){var n={};if(this.storage){var t=this.storage.getItem(this.id);n=t?JSON.parse(t):{}}return Object.assign(this.config,n),this}}]),n}();function c(n,t,e){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:600,i=n.src.replace(/\(/g,"%28").replace(/\)/g,"%29");n.width>l&&(e=Math.min(e,l/n.width));var r=n.width*e,u=n.height*e,o=["font-size:1px;","padding:".concat(Math.floor(u/2),"px ").concat(Math.floor(r/2),"px;"),"line-height:".concat(u,"px;"),"background:url(".concat(i,");"),"background-size:".concat(r,"px ").concat(u,"px;"),"color:transparent;"].join("");return["".concat(t," %c+"),o]}var h={BLACK:30,RED:31,GREEN:32,YELLOW:33,BLUE:34,MAGENTA:35,CYAN:36,WHITE:37,BRIGHT_BLACK:90,BRIGHT_RED:91,BRIGHT_GREEN:92,BRIGHT_YELLOW:93,BRIGHT_BLUE:94,BRIGHT_MAGENTA:95,BRIGHT_CYAN:96,BRIGHT_WHITE:97};function f(n){return"string"==typeof n?h[n.toUpperCase()]||h.WHITE:n}function d(n,t){if(!n)throw new Error(t||"Assertion failed")}var p=e(35);e.d(t,"a",function(){return b});var g={debug:a.b&&console.debug||console.log,log:console.log,info:console.info,warn:console.warn,error:console.error},v={enabled:!1,priority:0};function m(){}var _={};var b=function(){function n(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).id;Object(u.a)(this,n),this.id=t,this.VERSION=a.a,this._startTs=Object(p.a)(),this._deltaTs=Object(p.a)(),this.LOG_THROTTLE_TIMEOUT=0,this._storage=new s("__probe-".concat(this.id,"__"),v),this.userData={},this.timeStamp("".concat(this.id," started")),function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:["constructor"],e=Object.getPrototypeOf(n),l=Object.getOwnPropertyNames(e),i=!0,r=!1,u=void 0;try{for(var o,a=function(){var e=o.value;"function"==typeof n[e]&&(t.find(function(n){return e===n})||(n[e]=n[e].bind(n)))},s=l[Symbol.iterator]();!(i=(o=s.next()).done);i=!0)a()}catch(n){r=!0,u=n}finally{try{i||null==s.return||s.return()}finally{if(r)throw u}}}(this),Object.seal(this)}return Object(o.a)(n,[{key:"isEnabled",value:function(){return this._storage.config.enabled}},{key:"getPriority",value:function(){return this._storage.config.priority}},{key:"getLevel",value:function(){return this._storage.config.priority}},{key:"getTotal",value:function(){return Number((Object(p.a)()-this._startTs).toPrecision(10))}},{key:"getDelta",value:function(){return Number((Object(p.a)()-this._deltaTs).toPrecision(10))}},{key:"enable",value:function(){var n=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._storage.updateConfiguration({enabled:n}),this}},{key:"setLevel",value:function(n){return this._storage.updateConfiguration({priority:n}),this}},{key:"assert",value:function(n,t){d(n,t)}},{key:"warn",value:function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),l=1;l<t;l++)e[l-1]=arguments[l];return this._getLogFunction({message:n,args:e,method:g.warn,once:!0})}},{key:"error",value:function(n){for(var t=arguments.length,e=new Array(t>1?t-1:0),l=1;l<t;l++)e[l-1]=arguments[l];return this._getLogFunction({message:n,args:e,method:g.error})}},{key:"deprecated",value:function(n,t){return this.warn("`".concat(n,"` is deprecated and will be removed in a later version. Use `").concat(t,"` instead"))}},{key:"removed",value:function(n,t){return this.error("`".concat(n,"` has been removed. Use `").concat(t,"` instead"))}},{key:"probe",value:function(n,t){for(var e=arguments.length,l=new Array(e>2?e-2:0),i=2;i<e;i++)l[i-2]=arguments[i];return this._getLogFunction({priority:n,message:t,args:l,method:g.log,time:!0,once:!0})}},{key:"log",value:function(n,t){for(var e=arguments.length,l=new Array(e>2?e-2:0),i=2;i<e;i++)l[i-2]=arguments[i];return this._getLogFunction({priority:n,message:t,args:l,method:g.debug})}},{key:"info",value:function(n,t){for(var e=arguments.length,l=new Array(e>2?e-2:0),i=2;i<e;i++)l[i-2]=arguments[i];return this._getLogFunction({priority:n,message:t,args:l,method:console.info})}},{key:"once",value:function(n,t){for(var e=arguments.length,l=new Array(e>2?e-2:0),i=2;i<e;i++)l[i-2]=arguments[i];return this._getLogFunction({priority:n,message:t,args:l,method:g.debug||g.info,once:!0})}},{key:"table",value:function(n,t,e){if(t){var l=function(n){for(var t in n)for(var e in n[t])return e||"untitled";return"empty"}(t);return this._getLogFunction({priority:n,message:t,args:e&&[e],tag:l,method:console.table||m})}return m}},{key:"image",value:function(n){var t=n.priority,e=n.image,l=n.message,i=void 0===l?"":l,r=n.scale,u=void 0===r?1:r;return t>this.getPriority()?m:a.b?this._logImageInBrowser({image:e,message:i,scale:u}):this._logImageInNode({image:e,message:i,scale:u})}},{key:"settings",value:function(){console.table?console.table(this._storage.config):console.log(this._storage.config)}},{key:"get",value:function(n){return this._storage.config[n]}},{key:"set",value:function(n,t){this._storage.updateConfiguration(Object(r.a)({},n,t))}},{key:"_logImageInNode",value:function(n){var t=n.image,l=(n.message,n.scale),i=void 0===l?1:l,r=null;try{r=e(100)}catch(n){}return r?function(){return r(t,{fit:"box",width:"".concat(Math.round(80*i),"%")}).then(function(n){return console.log(n)})}:m}},{key:"_logImageInBrowser",value:function(n){var t=n.image,e=n.message,l=void 0===e?"":e,r=n.scale,u=void 0===r?1:r;if("string"==typeof t){var o=new Image;return o.onload=function(){var n,t=c(o,l,u);(n=console).log.apply(n,Object(i.a)(t))},o.src=t,m}var a,s=t.nodeName||"";if("img"===s.toLowerCase())return(a=console).log.apply(a,Object(i.a)(c(t,l,u))),m;if("canvas"===s.toLowerCase()){var h=new Image;return h.onload=function(){var n;return(n=console).log.apply(n,Object(i.a)(c(h,l,u)))},h.src=t.toDataURL(),m}return m}},{key:"time",value:function(n,t){return this._getLogFunction({priority:n,message:t,method:console.time?console.time:console.info})}},{key:"timeEnd",value:function(n,t){return this._getLogFunction({priority:n,message:t,method:console.timeEnd?console.timeEnd:console.info})}},{key:"timeStamp",value:function(n,t){return this._getLogFunction({priority:n,message:t,method:console.timeStamp||m})}},{key:"group",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{collapsed:!1},l=(e=this._normalizeArguments({priority:n,message:t,opts:e})).collapsed;return this._getLogFunction({priority:n,message:t,opts:e,method:(l?console.groupCollapsed:console.group)||console.info})}},{key:"groupCollapsed",value:function(n,t){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.group(n,t,Object.assign({},e,{collapsed:!0}))}},{key:"groupEnd",value:function(n){return this._getLogFunction({priority:n,message:"",method:console.groupEnd||m})}},{key:"withGroup",value:function(n,t,e){var l=this._normalizeArguments({priority:n,message:t});this.group(l);try{e()}finally{this.groupEnd(l.message)}}},{key:"trace",value:function(){console.trace&&console.trace()}},{key:"_shouldLog",value:function(n){return 0===(n=this._normalizePriority(n))||this.isEnabled()&&this.getPriority()>=n}},{key:"_getElapsedTime",value:function(){var n=this.getTotal(),t=this.getDelta();return this._deltaTs=Object(p.a)(),{total:n,delta:t}}},{key:"_getLogFunction",value:function(n){if(this._shouldLog(n.priority)){var t=n.method;n=this._parseArguments(n),d(t);var e=n.message,l=n.tag||n.message;if(n.once){if(_[l])return m;_[l]=Object(p.a)()}return e=this._decorateMessage(e,n),t.bind.apply(t,[console,e].concat(Object(i.a)(n.args)))}return m}},{key:"_parseArguments",value:function(n){var t=this._normalizeArguments(n),e=this._getElapsedTime(),l=e.delta,i=e.total;return Object.assign(n,t,{delta:l,total:i})}},{key:"_normalizePriority",value:function(n){var t;switch(Object(l.a)(n)){case"number":t=n;break;case"object":t=n.priority||0;break;default:t=0}return d(Number.isFinite(t)&&t>=0),t}},{key:"_normalizeArguments",value:function(n){var t=n.priority,e=n.message,i=n.args,r=void 0===i?[]:i,u=n.opts,o={priority:this._normalizePriority(t),message:e,args:r};switch(Object(l.a)(t)){case"string":case"function":void 0!==e&&r.unshift(e),Object.assign(o,{message:t});break;case"object":Object.assign(o,t)}return"function"==typeof o.message&&(o.message=this._shouldLog(o.priority)?o.message():""),d("string"==typeof o.message||"object"===Object(l.a)(o.message)),Object.assign(o,u)}},{key:"_decorateMessage",value:function(n,t){if("string"==typeof n){var e="";if(t.time){var l=this._getElapsedTime().total;e=function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:8,e=Math.max(t-n.length,0);return"".concat(" ".repeat(e)).concat(n)}((o=l)<10?"".concat(o.toFixed(2),"ms"):o<100?"".concat(o.toFixed(1),"ms"):o<1e3?"".concat(o.toFixed(0),"ms"):"".concat((o/1e3).toFixed(2),"s"))}n=t.time?"".concat(this.id,": ").concat(e,"  ").concat(n):"".concat(this.id,": ").concat(n),i=n,r=t.color,u=t.background,a.b||"string"!=typeof i||(r&&(r=f(r),i="[".concat(r,"m").concat(i,"[39m")),u&&(r=f(u),i="[".concat(u+10,"m").concat(i,"[49m"))),n=i}var i,r,u,o;return n}},{key:"priority",set:function(n){return this._storage.updateConfiguration({priority:n}),this},get:function(){return this._storage.config.priority}}]),n}();b.VERSION=a.a},function(n,t,e){"use strict";var l=e(12),i=e(14),r=e(2),u=e(3),o=e(7),a=e(6),s=e(8),c=e(74),h=e(13);function f(n,t){return n.length===t&&n.every(Number.isFinite)}var d=e(79),p=e(61),g=function(n){function t(){var n,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return Object(r.a)(this,t),n=Object(o.a)(this,Object(a.a)(t).call(this)),Array.isArray(e)&&1===arguments.length?n.copy(e):n.set(e,l,i,u),n}return Object(s.a)(t,n),Object(u.a)(t,[{key:"applyMatrix4",value:function(n){return n.transformVector(this,this),this}},{key:"ELEMENTS",get:function(){return 4}},{key:"z",get:function(){return this[2]},set:function(n){return this[2]=Object(h.a)(n)}},{key:"w",get:function(){return this[3]},set:function(n){return this[3]=Object(h.a)(n)}}]),t}(e(52).a),v=e(11),m=e(22),_=e(27),b=e(26);e.d(t,"a",function(){return x});var y=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];var x=function(n){function t(){for(var n,e=arguments.length,l=new Array(e),i=0;i<e;i++)l[i]=arguments[i];return Object(r.a)(this,t),n=Object(o.a)(this,Object(a.a)(t).call(this)),Array.isArray(l[0])&&1===arguments.length?n.copy(l[0]):n.identity(),n}return Object(s.a)(t,n),Object(u.a)(t,[{key:"setRowMajor",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,s=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,c=arguments.length>10&&void 0!==arguments[10]?arguments[10]:1,h=arguments.length>11&&void 0!==arguments[11]?arguments[11]:0,f=arguments.length>12&&void 0!==arguments[12]?arguments[12]:0,d=arguments.length>13&&void 0!==arguments[13]?arguments[13]:0,p=arguments.length>14&&void 0!==arguments[14]?arguments[14]:0,g=arguments.length>15&&void 0!==arguments[15]?arguments[15]:1;return this[0]=n,this[1]=i,this[2]=a,this[3]=f,this[4]=t,this[5]=r,this[6]=s,this[7]=d,this[8]=e,this[9]=u,this[10]=c,this[11]=p,this[12]=l,this[13]=o,this[14]=h,this[15]=g,this.check()}},{key:"setColumnMajor",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0,s=arguments.length>9&&void 0!==arguments[9]?arguments[9]:0,c=arguments.length>10&&void 0!==arguments[10]?arguments[10]:1,h=arguments.length>11&&void 0!==arguments[11]?arguments[11]:0,f=arguments.length>12&&void 0!==arguments[12]?arguments[12]:0,d=arguments.length>13&&void 0!==arguments[13]?arguments[13]:0,p=arguments.length>14&&void 0!==arguments[14]?arguments[14]:0,g=arguments.length>15&&void 0!==arguments[15]?arguments[15]:1;return this[0]=n,this[1]=t,this[2]=e,this[3]=l,this[4]=i,this[5]=r,this[6]=u,this[7]=o,this[8]=a,this[9]=s,this[10]=c,this[11]=h,this[12]=f,this[13]=d,this[14]=p,this[15]=g,this.check()}},{key:"copy",value:function(n){return this.setColumnMajor.apply(this,Object(i.a)(n))}},{key:"set",value:function(){return this.setColumnMajor.apply(this,arguments)}},{key:"getElement",value:function(n,t){return arguments.length>2&&void 0!==arguments[2]&&arguments[2]?this[n][t]:this[t][n]}},{key:"setElement",value:function(n,t,e){return arguments.length>3&&void 0!==arguments[3]&&arguments[3]?this[n][t]=Object(h.a)(e):this[t][n]=Object(h.a)(e),this}},{key:"determinant",value:function(){return v.a(this)}},{key:"identity",value:function(){return this.copy(y)}},{key:"fromQuaternion",value:function(n){return v.c(this,n),this.check()}},{key:"frustum",value:function(n){var t=n.left,e=n.right,l=n.bottom,i=n.top,r=n.near,u=n.far;return v.d(this,t,e,l,i,r,u),this.check()}},{key:"lookAt",value:function(n){var t=n.eye,e=n.center,l=void 0===e?[0,0,0]:e,i=n.up,r=void 0===i?[0,1,0]:i;return v.f(this,t,l,r),this.check()}},{key:"ortho",value:function(n){var t=n.left,e=n.right,l=n.bottom,i=n.top,r=n.near,u=void 0===r?.1:r,o=n.far,a=void 0===o?500:o;return v.h(this,t,e,l,i,u,a),this.check()}},{key:"orthographic",value:function(n){var e=n.fovy,l=void 0===e?45*Math.PI/180:e,i=n.aspect,r=void 0===i?1:i,u=n.focalDistance,o=void 0===u?1:u,a=n.near,s=void 0===a?.1:a,c=n.far,h=void 0===c?500:c;if(l>2*Math.PI)throw Error("radians");var f=l/2,d=o*Math.tan(f),p=d*r;return(new t).ortho({left:-p,right:p,bottom:-d,top:d,near:s,far:h})}},{key:"perspective",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.fovy,e=n.fov,l=void 0===e?45*Math.PI/180:e,i=n.aspect,r=void 0===i?1:i,u=n.near,o=void 0===u?.1:u,a=n.far,s=void 0===a?500:a;if((t=t||l)>2*Math.PI)throw Error("radians");return v.i(this,t,r,o,s),this.check()}},{key:"transpose",value:function(){return v.p(this,this),this.check()}},{key:"invert",value:function(){return v.e(this,this),this.check()}},{key:"multiplyLeft",value:function(n){return v.g(this,n,this),this.check()}},{key:"multiplyRight",value:function(n){return v.g(this,this,n),this.check()}},{key:"rotateX",value:function(n){return v.k(this,this,n),this.check()}},{key:"rotateY",value:function(n){return v.l(this,this,n),this.check()}},{key:"rotateZ",value:function(n){return v.m(this,this,n),this.check()}},{key:"rotateXYZ",value:function(n){var t=Object(l.a)(n,3),e=t[0],i=t[1],r=t[2];return this.rotateX(e).rotateY(i).rotateZ(r)}},{key:"rotateAxis",value:function(n,t){return v.j(this,this,n,t),this.check()}},{key:"scale",value:function(n){return Array.isArray(n)?v.n(this,this,n):v.n(this,this,[n,n,n]),this.check()}},{key:"translate",value:function(n){return v.o(this,this,n),this.check()}},{key:"transformVector2",value:function(n,t){return t=t||new d.a,m.h(t,n,this),f(t,2),t}},{key:"transformVector3",value:function(n,t){return t=t||new p.a,_.i(t,n,this),f(t,3),t}},{key:"transformVector4",value:function(n,t){return t=t||new g,b.c(t,n,this),f(t,4),t.check()}},{key:"transformVector",value:function(n,t){switch(n.length){case 2:return this.transformVector2(n,t);case 3:return this.transformVector3(n,t);case 4:return this.transformVector4(n,t);default:throw new Error("Illegal vector")}}},{key:"transformDirection",value:function(n,t){return this._transformVector(n,t,0)}},{key:"transformPoint",value:function(n,t){return this._transformVector(n,t,1)}},{key:"_transformVector",value:function(n,t,e){switch(n.length){case 2:t=t||new d.a,b.c(t,[n[0],n[1],0,e],this),t.length=2,f(t,2);break;case 3:t=t||new p.a,b.c(t,[n[0],n[1],n[2],e],this),t.length=3,f(t,3);break;case 4:if(Boolean(e)!==Boolean(n[3]))throw new Error("math.gl: Matrix4.transformPoint - invalid vector");t=t||new g,b.c(t,n,this),f(t,4);break;default:throw new Error("Illegal vector")}return t}},{key:"makeRotationX",value:function(n){return this.identity().rotateX(n)}},{key:"makeTranslation",value:function(n,t,e){return this.identity().translate([n,t,e])}},{key:"ELEMENTS",get:function(){return 16}}]),t}(c.a)},function(n,t,e){"use strict";var l=e(2),i=e(3),r=e(35),u=function(){function n(t){Object(l.a)(this,n),this.name=t,this.reset()}return Object(i.a)(n,[{key:"incrementCount",value:function(){this.addCount(1)}},{key:"decrementCount",value:function(){this.subtractCount(1)}},{key:"addCount",value:function(n){this.count+=n}},{key:"subtractCount",value:function(n){this.count-=n}},{key:"addTime",value:function(n){this.time+=n,this.lastTiming=n,this.count++}},{key:"timeStart",value:function(){this._startTime=Object(r.a)(),this._timerPending=!0}},{key:"timeEnd",value:function(){this._timerPending&&(this.addTime(Object(r.a)()-this._startTime),this._timerPending=!1)}},{key:"getAverageTime",value:function(){return this.count>0?this.time/this.count:0}},{key:"getHz",value:function(){return this.time>0?this.count/(this.time/1e3):0}},{key:"reset",value:function(){this.time=0,this.count=0,this.lastTiming=0,this._startTime=0,this._timerPending=!1}}]),n}();e.d(t,"a",function(){return o});var o=function(){function n(t){var e=t.id;Object(l.a)(this,n),this.id=e,this.stats={},Object.seal(this)}return Object(i.a)(n,[{key:"get",value:function(n){return this.stats[n]=this.stats[n]||new u(n),this.stats[n]}},{key:"reset",value:function(){for(var n in this.stats)this.stats[n].reset();return this}},{key:"forEach",value:function(n){for(var t in this.stats)n(this.stats[t])}},{key:"getTable",value:function(){var n={};return this.forEach(function(t){n[t.name]={time:t.time||0,count:t.count||0,average:t.getAverageTime()||0,hz:t.getHz()||0}}),n}}]),n}()}])});