"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _core = require("@deck.gl/core");

var _core2 = require("@luma.gl/core");

var _core3 = require("@loaders.gl/core");

var _matrix = require("../utils/matrix");

var _scenegraphLayerVertex = _interopRequireDefault(require("./scenegraph-layer-vertex.glsl"));

var _scenegraphLayerFragment = _interopRequireDefault(require("./scenegraph-layer-fragment.glsl"));

var fp64LowPart = _core2.fp64.fp64LowPart;
var DEFAULT_COLOR = [255, 255, 255, 255];
var defaultProps = {
  scenegraph: {
    type: 'object',
    value: null,
    async: true
  },
  fetch: function (_fetch) {
    function fetch(_x, _x2) {
      return _fetch.apply(this, arguments);
    }

    fetch.toString = function () {
      return _fetch.toString();
    };

    return fetch;
  }(function (url, _ref) {
    var propName = _ref.propName,
        layer = _ref.layer;

    if (propName === 'scenegraph') {
      return (0, _core3.load)(url, layer.getLoadOptions()).then(function (_ref2) {
        var scenes = _ref2.scenes;
        return scenes[0];
      });
    }

    return fetch(url).then(function (response) {
      return response.json();
    });
  }),
  sizeScale: {
    type: 'number',
    value: 1,
    min: 0
  },
  getPosition: {
    type: 'accessor',
    value: function value(x) {
      return x.position;
    }
  },
  getColor: {
    type: 'accessor',
    value: DEFAULT_COLOR
  },
  getOrientation: {
    type: 'accessor',
    value: [0, 0, 0]
  },
  getScale: {
    type: 'accessor',
    value: [1, 1, 1]
  },
  getTranslation: {
    type: 'accessor',
    value: [0, 0, 0]
  },
  getTransformMatrix: {
    type: 'accessor',
    value: []
  }
};

var ScenegraphLayer = function (_Layer) {
  (0, _inherits2.default)(ScenegraphLayer, _Layer);

  function ScenegraphLayer() {
    (0, _classCallCheck2.default)(this, ScenegraphLayer);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ScenegraphLayer).apply(this, arguments));
  }

  (0, _createClass2.default)(ScenegraphLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instancePositions: {
          size: 3,
          accessor: 'getPosition',
          transition: true
        },
        instancePositions64xy: {
          size: 2,
          accessor: 'getPosition',
          update: this.calculateInstancePositions64xyLow
        },
        instanceColors: {
          size: 4,
          accessor: 'getColor',
          defaultValue: DEFAULT_COLOR,
          transition: true
        },
        instanceModelMatrix: _matrix.MATRIX_ATTRIBUTES
      });
    }
  }, {
    key: "calculateInstancePositions64xyLow",
    value: function calculateInstancePositions64xyLow(attribute) {
      var isFP64 = this.use64bitPositions();
      attribute.constant = !isFP64;

      if (!isFP64) {
        attribute.value = new Float32Array(2);
        return;
      }

      var _this$props = this.props,
          data = _this$props.data,
          getPosition = _this$props.getPosition;
      var value = attribute.value;
      var i = 0;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var point = _step.value;
          var position = getPosition(point);
          value[i++] = fp64LowPart(position[0]);
          value[i++] = fp64LowPart(position[1]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "updateState",
    value: function updateState(params) {
      (0, _get2.default)((0, _getPrototypeOf2.default)(ScenegraphLayer.prototype), "updateState", this).call(this, params);
      var props = params.props,
          oldProps = params.oldProps;

      if (props.scenegraph !== oldProps.scenegraph) {
        if (props.scenegraph instanceof _core2.ScenegraphNode) {
          this._deleteScenegraph();

          this._applyAllAttributes(props.scenegraph);

          this.setState({
            scenegraph: props.scenegraph
          });
        } else if (props.scenegraph !== null) {
          _core2.log.warn('bad scenegraph:', props.scenegraph)();
        }
      }
    }
  }, {
    key: "finalizeState",
    value: function finalizeState() {
      this._deleteScenegraph();
    }
  }, {
    key: "_applyAllAttributes",
    value: function _applyAllAttributes(scenegraph) {
      var _this = this;

      var allAttributes = this.getAttributeManager().getAttributes();
      scenegraph.traverse(function (model) {
        _this._setModelAttributes(model.model, allAttributes);
      });
    }
  }, {
    key: "_deleteScenegraph",
    value: function _deleteScenegraph() {
      var scenegraph = this.state.scenegraph;

      if (scenegraph instanceof _core2.ScenegraphNode) {
        scenegraph.delete();
      }
    }
  }, {
    key: "getLoadOptions",
    value: function getLoadOptions() {
      return {
        gl: this.context.gl,
        waitForFullLoad: true,
        modelOptions: {
          vs: _scenegraphLayerVertex.default,
          fs: _scenegraphLayerFragment.default,
          modules: ['project32', 'picking'],
          isInstanced: true
        }
      };
    }
  }, {
    key: "updateAttributes",
    value: function updateAttributes(props) {
      var _this2 = this;

      (0, _get2.default)((0, _getPrototypeOf2.default)(ScenegraphLayer.prototype), "updateAttributes", this).call(this, props);
      if (!this.state.scenegraph) return;
      var attributeManager = this.getAttributeManager();
      var changedAttributes = attributeManager.getChangedAttributes({
        clearChangedFlags: true
      });
      this.state.scenegraph.traverse(function (model) {
        _this2._setModelAttributes(model.model, changedAttributes);
      });
    }
  }, {
    key: "draw",
    value: function draw(_ref3) {
      var _ref3$moduleParameter = _ref3.moduleParameters,
          moduleParameters = _ref3$moduleParameter === void 0 ? null : _ref3$moduleParameter,
          _ref3$parameters = _ref3.parameters,
          parameters = _ref3$parameters === void 0 ? {} : _ref3$parameters;
      if (!this.state.scenegraph) return;
      var sizeScale = this.props.sizeScale;
      var numInstances = this.getNumInstances();
      this.state.scenegraph.traverse(function (model) {
        model.model.setInstanceCount(numInstances);
        model.updateModuleSettings(moduleParameters);
        model.draw({
          parameters: parameters,
          uniforms: {
            sizeScale: sizeScale
          }
        });
      });
    }
  }]);
  return ScenegraphLayer;
}(_core.Layer);

exports.default = ScenegraphLayer;
ScenegraphLayer.layerName = 'ScenegraphLayer';
ScenegraphLayer.defaultProps = defaultProps;
//# sourceMappingURL=scenegraph-layer.js.map