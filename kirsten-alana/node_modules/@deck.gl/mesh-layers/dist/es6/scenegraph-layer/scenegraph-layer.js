import { Layer } from '@deck.gl/core';
import { fp64, ScenegraphNode, log } from '@luma.gl/core';
import { load } from '@loaders.gl/core';
import { MATRIX_ATTRIBUTES } from '../utils/matrix';
import vs from './scenegraph-layer-vertex.glsl';
import fs from './scenegraph-layer-fragment.glsl';
const fp64LowPart = fp64.fp64LowPart;
const DEFAULT_COLOR = [255, 255, 255, 255];
const defaultProps = {
  scenegraph: {
    type: 'object',
    value: null,
    async: true
  },
  fetch: function (_fetch) {
    function fetch(_x, _x2) {
      return _fetch.apply(this, arguments);
    }

    fetch.toString = function () {
      return _fetch.toString();
    };

    return fetch;
  }((url, _ref) => {
    let propName = _ref.propName,
        layer = _ref.layer;

    if (propName === 'scenegraph') {
      return load(url, layer.getLoadOptions()).then((_ref2) => {
        let scenes = _ref2.scenes;
        return scenes[0];
      });
    }

    return fetch(url).then(response => response.json());
  }),
  sizeScale: {
    type: 'number',
    value: 1,
    min: 0
  },
  getPosition: {
    type: 'accessor',
    value: x => x.position
  },
  getColor: {
    type: 'accessor',
    value: DEFAULT_COLOR
  },
  getOrientation: {
    type: 'accessor',
    value: [0, 0, 0]
  },
  getScale: {
    type: 'accessor',
    value: [1, 1, 1]
  },
  getTranslation: {
    type: 'accessor',
    value: [0, 0, 0]
  },
  getTransformMatrix: {
    type: 'accessor',
    value: []
  }
};
export default class ScenegraphLayer extends Layer {
  initializeState() {
    const attributeManager = this.getAttributeManager();
    attributeManager.addInstanced({
      instancePositions: {
        size: 3,
        accessor: 'getPosition',
        transition: true
      },
      instancePositions64xy: {
        size: 2,
        accessor: 'getPosition',
        update: this.calculateInstancePositions64xyLow
      },
      instanceColors: {
        size: 4,
        accessor: 'getColor',
        defaultValue: DEFAULT_COLOR,
        transition: true
      },
      instanceModelMatrix: MATRIX_ATTRIBUTES
    });
  }

  calculateInstancePositions64xyLow(attribute) {
    const isFP64 = this.use64bitPositions();
    attribute.constant = !isFP64;

    if (!isFP64) {
      attribute.value = new Float32Array(2);
      return;
    }

    const _this$props = this.props,
          data = _this$props.data,
          getPosition = _this$props.getPosition;
    const value = attribute.value;
    let i = 0;

    for (const point of data) {
      const position = getPosition(point);
      value[i++] = fp64LowPart(position[0]);
      value[i++] = fp64LowPart(position[1]);
    }
  }

  updateState(params) {
    super.updateState(params);
    const props = params.props,
          oldProps = params.oldProps;

    if (props.scenegraph !== oldProps.scenegraph) {
      if (props.scenegraph instanceof ScenegraphNode) {
        this._deleteScenegraph();

        this._applyAllAttributes(props.scenegraph);

        this.setState({
          scenegraph: props.scenegraph
        });
      } else if (props.scenegraph !== null) {
        log.warn('bad scenegraph:', props.scenegraph)();
      }
    }
  }

  finalizeState() {
    this._deleteScenegraph();
  }

  _applyAllAttributes(scenegraph) {
    const allAttributes = this.getAttributeManager().getAttributes();
    scenegraph.traverse(model => {
      this._setModelAttributes(model.model, allAttributes);
    });
  }

  _deleteScenegraph() {
    const scenegraph = this.state.scenegraph;

    if (scenegraph instanceof ScenegraphNode) {
      scenegraph.delete();
    }
  }

  getLoadOptions() {
    return {
      gl: this.context.gl,
      waitForFullLoad: true,
      modelOptions: {
        vs,
        fs,
        modules: ['project32', 'picking'],
        isInstanced: true
      }
    };
  }

  updateAttributes(props) {
    super.updateAttributes(props);
    if (!this.state.scenegraph) return;
    const attributeManager = this.getAttributeManager();
    const changedAttributes = attributeManager.getChangedAttributes({
      clearChangedFlags: true
    });
    this.state.scenegraph.traverse(model => {
      this._setModelAttributes(model.model, changedAttributes);
    });
  }

  draw(_ref3) {
    let _ref3$moduleParameter = _ref3.moduleParameters,
        moduleParameters = _ref3$moduleParameter === void 0 ? null : _ref3$moduleParameter,
        _ref3$parameters = _ref3.parameters,
        parameters = _ref3$parameters === void 0 ? {} : _ref3$parameters;
    if (!this.state.scenegraph) return;
    const sizeScale = this.props.sizeScale;
    const numInstances = this.getNumInstances();
    this.state.scenegraph.traverse(model => {
      model.model.setInstanceCount(numInstances);
      model.updateModuleSettings(moduleParameters);
      model.draw({
        parameters,
        uniforms: {
          sizeScale
        }
      });
    });
  }

}
ScenegraphLayer.layerName = 'ScenegraphLayer';
ScenegraphLayer.defaultProps = defaultProps;
//# sourceMappingURL=scenegraph-layer.js.map