{"version":3,"sources":["../../src/deck-utils.js"],"names":["Deck","getDeckInstance","map","gl","deck","__deck","deckProps","useDevicePixels","_customRender","triggerRepaint","parameters","depthMask","depthTest","blendFunc","blendEquation","userData","isExternal","mapboxLayers","Set","setProps","props","Object","assign","width","height","on","finalize","afterRender","addLayer","layer","add","updateLayers","removeLayer","delete","updateLayer","drawLayer","_drawLayers","layers","getLayers","deckLayer","shouldDrawLayer","id","clearCanvas","getViewState","extraProps","getCenter","lng","lat","longitude","latitude","zoom","getZoom","bearing","getBearing","pitch","getPitch","viewState","nearZMultiplier","farZMultiplier","mapboxLayerIds","Array","from","length","needsRedraw","clearRedrawFlags","layerFilter","layerManager","filter","layerInstance","parent","forEach","LayerType","type","push"],"mappings":"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","sourcesContent":["import {Deck} from '@deck.gl/core';\n\nexport function getDeckInstance({map, gl, deck}) {\n  // Only create one deck instance per context\n  if (map.__deck) {\n    return map.__deck;\n  }\n\n  const deckProps = {\n    useDevicePixels: true,\n    _customRender: () => map.triggerRepaint(),\n    // TODO: import these defaults from a single source of truth\n    parameters: {\n      depthMask: true,\n      depthTest: true,\n      blendFunc: [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA],\n      blendEquation: gl.FUNC_ADD\n    },\n    userData: {\n      isExternal: false,\n      mapboxLayers: new Set()\n    }\n  };\n\n  if (deck) {\n    deck.setProps(deckProps);\n    deck.props.userData.isExternal = true;\n  } else {\n    // Using external gl context - do not set css size\n    Object.assign(deckProps, {\n      gl,\n      width: false,\n      height: false\n    });\n    deck = new Deck(deckProps);\n\n    map.on('remove', () => {\n      deck.finalize();\n      map.__deck = null;\n    });\n  }\n  map.__deck = deck;\n  map.on('render', () => afterRender(deck, map));\n\n  return deck;\n}\n\nexport function addLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.add(layer);\n  updateLayers(deck);\n}\n\nexport function removeLayer(deck, layer) {\n  deck.props.userData.mapboxLayers.delete(layer);\n  updateLayers(deck);\n}\n\nexport function updateLayer(deck, layer) {\n  updateLayers(deck);\n}\n\nexport function drawLayer(deck, layer) {\n  deck._drawLayers('mapbox-repaint', {\n    // TODO - accept layerFilter in drawLayers' renderOptions\n    layers: getLayers(deck, deckLayer => shouldDrawLayer(layer.id, deckLayer)),\n    clearCanvas: false\n  });\n}\n\nexport function getViewState(map, extraProps) {\n  const {lng, lat} = map.getCenter();\n  return Object.assign(\n    {\n      longitude: lng,\n      latitude: lat,\n      zoom: map.getZoom(),\n      bearing: map.getBearing(),\n      pitch: map.getPitch()\n    },\n    extraProps\n  );\n}\n\nfunction afterRender(deck, map) {\n  const {mapboxLayers, isExternal} = deck.props.userData;\n\n  if (isExternal) {\n    // Update viewState\n    const viewState = getViewState(map, {\n      nearZMultiplier: 0.1,\n      farZMultiplier: 10\n    });\n    deck.setProps({viewState});\n\n    // Draw non-Mapbox layers\n    const mapboxLayerIds = Array.from(mapboxLayers, layer => layer.id);\n    const layers = getLayers(deck, deckLayer => {\n      for (const id of mapboxLayerIds) {\n        if (shouldDrawLayer(id, deckLayer)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    if (layers.length > 0) {\n      deck._drawLayers('mapbox-repaint', {\n        layers,\n        clearCanvas: false\n      });\n    }\n  }\n\n  deck.needsRedraw({clearRedrawFlags: true});\n}\n\nfunction getLayers(deck, layerFilter) {\n  const layers = deck.layerManager.getLayers();\n  return layers.filter(layerFilter);\n}\n\nfunction shouldDrawLayer(id, layer) {\n  let layerInstance = layer;\n  while (layerInstance) {\n    if (layerInstance.id === id) {\n      return true;\n    }\n    layerInstance = layerInstance.parent;\n  }\n  return false;\n}\n\nfunction updateLayers(deck) {\n  if (deck.props.userData.isExternal) {\n    return;\n  }\n\n  const layers = [];\n  deck.props.userData.mapboxLayers.forEach(deckLayer => {\n    const LayerType = deckLayer.props.type;\n    const layer = new LayerType(deckLayer.props);\n    layers.push(layer);\n  });\n  deck.setProps({layers});\n}\n"],"file":"deck-utils.js"}