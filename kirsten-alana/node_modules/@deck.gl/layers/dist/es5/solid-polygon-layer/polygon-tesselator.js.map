{"version":3,"sources":["../../../src/solid-polygon-layer/polygon-tesselator.js"],"names":["Tesselator","experimental","fp64LowPart","fp64Module","PolygonTesselator","data","getGeometry","fp64","positionFormat","IndexType","Uint32Array","attributes","positions","size","positions64xyLow","fp64Only","vertexValid","type","Uint8ClampedArray","indices","attributeName","target","accessor","subarray","vertexCount","_updateAttribute","getValue","object","objectInfo","color","length","value","index","polygon","Polygon","getVertexCount","positionSize","context","normalize","geometrySize","_updateIndices","_updatePositions","geometryIndex","offset","vertexStart","indexStart","indexLayout","typedArrayManager","currentLength","i","getSurfaceIndices","allocate","constructor","copy","j","polygonPositions","holeIndices","x","y","z"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// Handles tesselation of polygons with holes\n// - 2D surfaces\n// - 2D outlines\n// - 3D surfaces (top and sides only)\n// - 3D wireframes (not yet)\nimport * as Polygon from './polygon';\nimport {experimental} from '@deck.gl/core';\nconst {Tesselator} = experimental;\nimport {fp64 as fp64Module} from '@luma.gl/core';\nconst {fp64LowPart} = fp64Module;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PolygonTesselator extends Tesselator {\n  constructor({data, getGeometry, fp64, positionFormat, IndexType = Uint32Array}) {\n    super({\n      data,\n      getGeometry,\n      fp64,\n      positionFormat,\n      attributes: {\n        positions: {size: 3},\n        positions64xyLow: {size: 2, fp64Only: true},\n        vertexValid: {type: Uint8ClampedArray, size: 1},\n        indices: {type: IndexType, size: 1}\n      }\n    });\n  }\n\n  /* Getters */\n  get(attributeName, target, accessor) {\n    if (attributeName === 'indices') {\n      return this.attributes.indices.subarray(0, this.vertexCount);\n    }\n\n    if (this.attributes[attributeName]) {\n      return this.attributes[attributeName];\n    }\n\n    switch (attributeName) {\n      case 'elevations':\n        return this._updateAttribute({\n          target,\n          size: 1,\n          getValue: (object, objectInfo) => {\n            objectInfo.target[0] = accessor(object, objectInfo);\n            return objectInfo.target;\n          }\n        });\n\n      case 'colors':\n        return this._updateAttribute({\n          target,\n          size: 4,\n          getValue: (object, objectInfo) => {\n            const color = accessor(object, objectInfo);\n            if (color.length === 4) {\n              return color;\n            }\n            const value = objectInfo.target;\n            value[0] = color[0];\n            value[1] = color[1];\n            value[2] = color[2];\n            value[3] = 255;\n            return value;\n          }\n        });\n\n      case 'pickingColors':\n        return this._updateAttribute({\n          target,\n          size: 3,\n          getValue: (object, {index, target: value}) => accessor(index, value)\n        });\n\n      default:\n        return null;\n    }\n  }\n\n  /* Implement base Tesselator interface */\n  getGeometrySize(polygon) {\n    return Polygon.getVertexCount(polygon, this.positionSize);\n  }\n\n  updateGeometryAttributes(polygon, context) {\n    polygon = Polygon.normalize(polygon, this.positionSize, context.geometrySize);\n\n    this._updateIndices(polygon, context);\n    this._updatePositions(polygon, context);\n  }\n\n  // Flatten the indices array\n  _updateIndices(polygon, {geometryIndex, vertexStart: offset, indexStart}) {\n    const {attributes, indexLayout, typedArrayManager} = this;\n\n    let target = attributes.indices;\n    let currentLength = target.length;\n    let i = indexStart;\n\n    // 1. get triangulated indices for the internal areas\n    const indices = Polygon.getSurfaceIndices(polygon, this.positionSize);\n\n    // make sure the buffer is large enough\n    if (currentLength < i + indices.length) {\n      currentLength = (i + indices.length) * 2;\n      target = typedArrayManager.allocate(target, currentLength, {\n        type: target.constructor,\n        size: 1,\n        copy: true\n      });\n    }\n\n    // 2. offset each index by the number of indices in previous polygons\n    for (let j = 0; j < indices.length; j++) {\n      target[i++] = indices[j] + offset;\n    }\n\n    indexLayout[geometryIndex] = indices.length;\n    attributes.indices = target;\n  }\n\n  // Flatten out all the vertices of all the sub subPolygons\n  _updatePositions(polygon, {vertexStart, geometrySize}) {\n    const {\n      attributes: {positions, positions64xyLow, vertexValid},\n      fp64,\n      positionSize\n    } = this;\n\n    let i = vertexStart;\n    const {positions: polygonPositions, holeIndices} = polygon;\n\n    for (let j = 0; j < geometrySize; j++) {\n      const x = polygonPositions[j * positionSize];\n      const y = polygonPositions[j * positionSize + 1];\n      const z = positionSize > 2 ? polygonPositions[j * positionSize + 2] : 0;\n\n      positions[i * 3] = x;\n      positions[i * 3 + 1] = y;\n      positions[i * 3 + 2] = z;\n      if (fp64) {\n        positions64xyLow[i * 2] = fp64LowPart(x);\n        positions64xyLow[i * 2 + 1] = fp64LowPart(y);\n      }\n      vertexValid[i] = 1;\n      i++;\n    }\n\n    /* We are reusing the some buffer for `nextPositions` by offseting one vertex\n     * to the left. As a result,\n     * the last vertex of each ring overlaps with the first vertex of the next ring.\n     * `vertexValid` is used to mark the end of each ring so we don't draw these\n     * segments:\n      positions      A0 A1 A2 A3 A4 B0 B1 B2 C0 ...\n      nextPositions  A1 A2 A3 A4 B0 B1 B2 C0 C1 ...\n      vertexValid    1  1  1  1  0  1  1  0  1 ...\n     */\n    if (holeIndices) {\n      for (let j = 0; j < holeIndices.length; j++) {\n        vertexValid[vertexStart + holeIndices[j] / positionSize - 1] = 0;\n      }\n    }\n    vertexValid[vertexStart + geometrySize - 1] = 0;\n  }\n}\n"],"file":"polygon-tesselator.js"}