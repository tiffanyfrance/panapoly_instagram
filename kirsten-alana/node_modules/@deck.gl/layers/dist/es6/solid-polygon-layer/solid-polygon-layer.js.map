{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","Model","Geometry","hasFeature","FEATURES","PhongMaterial","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultMaterial","defaultProps","filled","extruded","wireframe","fp64","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","getShaders","vs","projectModule","use64bitProjection","modules","initializeState","gl","context","setState","numInstances","polygonTesselator","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","offset","divisor","instancePositions","nextPositions","positions64xyLow","calculatePositionsLow","instancePositions64xyLow","nextPositions64xyLow","vertexValid","calculateVertexValid","elevations","calculateElevations","instanceElevations","fillColors","alias","calculateFillColors","defaultValue","instanceFillColors","lineColors","calculateLineColors","instanceLineColors","pickingColors","calculatePickingColors","instancePickingColors","draw","uniforms","props","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","setVertexCount","get","updateState","updateParams","updateGeometry","oldProps","regenerateModels","models","forEach","model","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","data","getGeometry","positionFormat","use64bitPositions","id","drawMode","attributes","vertexPositions","Float32Array","isSideVertex","vertexCount","shaderCache","geometry","isInstanced","userData","excludeAttributes","filter","attribute","bufferLayout","indexLayout","isFP64","constant","encodePickingColor","clearPickingColor","color","pickedPolygonIndex","decodePickingColor","numVertices","startInstanceIndex","polygonIndex","endInstanceIndex","fill","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES, PhongMaterial} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: defaultMaterial\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {\n      vs,\n      fs,\n      modules: [projectModule, 'gouraud-lighting', 'picking']\n    };\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        IndexType: !gl || hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        shaderAttributes: {\n          positions: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            offset: 12,\n            divisor: 1\n          }\n        }\n      },\n      positions64xyLow: {\n        size: 2,\n        update: this.calculatePositionsLow,\n        shaderAttributes: {\n          positions64xyLow: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions64xyLow: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions64xyLow: {\n            offset: 8,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculatePickingColors,\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.get('indices').length);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      props.fp64 !== oldProps.fp64 ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions()\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      topModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsTop), {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.indexLayout;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.get('positions64xyLow');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded) {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.get('elevations', attribute.value, getElevation);\n    } else {\n      attribute.constant = true;\n      attribute.value = new Float32Array(1);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getFillColor);\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getLineColor);\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.value = polygonTesselator.get(\n      'pickingColors',\n      attribute.value,\n      this.encodePickingColor\n    );\n  }\n\n  clearPickingColor(color) {\n    const pickedPolygonIndex = this.decodePickingColor(color);\n    const {bufferLayout} = this.state.polygonTesselator;\n    const numVertices = bufferLayout[pickedPolygonIndex];\n\n    let startInstanceIndex = 0;\n    for (let polygonIndex = 0; polygonIndex < pickedPolygonIndex; polygonIndex++) {\n      startInstanceIndex += bufferLayout[polygonIndex];\n    }\n\n    const {pickingColors} = this.getAttributeManager().attributes;\n\n    const {value} = pickingColors;\n    const endInstanceIndex = startInstanceIndex + numVertices;\n    value.fill(0, startInstanceIndex * 3, endInstanceIndex * 3);\n    pickingColors.update({value});\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}