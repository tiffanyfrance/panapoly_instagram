{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.js"],"names":["Layer","Model","Geometry","hasFeature","FEATURES","PhongMaterial","PolygonTesselator","vsTop","vsSide","fs","DEFAULT_COLOR","defaultMaterial","defaultProps","filled","extruded","wireframe","fp64","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","length","subarray","SolidPolygonLayer","vs","projectModule","use64bitProjection","modules","gl","context","setState","numInstances","polygonTesselator","IndexType","ELEMENT_INDEX_UINT32","Uint32Array","Uint16Array","attributeManager","getAttributeManager","noAlloc","remove","add","indices","size","isIndexed","update","calculateIndices","positions","transition","accessor","calculatePositions","shaderAttributes","offset","divisor","instancePositions","nextPositions","positions64xyLow","calculatePositionsLow","instancePositions64xyLow","nextPositions64xyLow","vertexValid","calculateVertexValid","elevations","calculateElevations","instanceElevations","fillColors","alias","calculateFillColors","defaultValue","instanceFillColors","lineColors","calculateLineColors","instanceLineColors","pickingColors","calculatePickingColors","instancePickingColors","uniforms","props","state","topModel","sideModel","renderUniforms","Object","assign","Boolean","setInstanceCount","instanceCount","setUniforms","setDrawMode","isWireframe","draw","setVertexCount","get","updateParams","updateGeometry","oldProps","regenerateModels","models","forEach","model","delete","_getModels","invalidateAll","changeFlags","geometryConfigChanged","dataChanged","updateTriggersChanged","all","data","getGeometry","positionFormat","use64bitPositions","id","getShaders","drawMode","attributes","vertexPositions","Float32Array","isSideVertex","vertexCount","shaderCache","geometry","isInstanced","userData","excludeAttributes","filter","attribute","bufferLayout","indexLayout","isFP64","constant","encodePickingColor","color","pickedPolygonIndex","decodePickingColor","numVertices","startInstanceIndex","polygonIndex","endInstanceIndex","fill","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeature, FEATURES, PhongMaterial} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  filled: true,\n  // Whether to extrude\n  extruded: false,\n  // Whether to draw a GL.LINES wireframe of the polygon\n  wireframe: false,\n  fp64: false,\n\n  // elevation multiplier\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // Accessor for polygon geometry\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Accessor for extrusion height\n  getElevation: {type: 'accessor', value: 1000},\n  // Accessor for colors\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  // Optional settings for 'lighting' shader module\n  material: defaultMaterial\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer extends Layer {\n  getShaders(vs) {\n    const projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n    return {\n      vs,\n      fs,\n      modules: [projectModule, 'gouraud-lighting', 'picking']\n    };\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        IndexType: !gl || hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {size: 1, isIndexed: true, update: this.calculateIndices, noAlloc},\n      positions: {\n        size: 3,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        shaderAttributes: {\n          positions: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            offset: 12,\n            divisor: 1\n          }\n        }\n      },\n      positions64xyLow: {\n        size: 2,\n        update: this.calculatePositionsLow,\n        shaderAttributes: {\n          positions64xyLow: {\n            offset: 0,\n            divisor: 0\n          },\n          instancePositions64xyLow: {\n            offset: 0,\n            divisor: 1\n          },\n          nextPositions64xyLow: {\n            offset: 8,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        update: this.calculateElevations,\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        update: this.calculateFillColors,\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        alias: 'colors',\n        size: 4,\n        type: GL.UNSIGNED_BYTE,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        update: this.calculateLineColors,\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        update: this.calculatePickingColors,\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = Object.assign({}, uniforms, {\n      extruded: Boolean(extruded),\n      elevationScale\n    });\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.get('indices').length);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      props.fp64 !== oldProps.fp64 ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      if (this.state.models) {\n        this.state.models.forEach(model => model.delete());\n      }\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({props, oldProps, changeFlags}) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      props.fp64 !== oldProps.fp64 ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        fp64: this.use64bitPositions()\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount\n      });\n\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  _getModels(gl) {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      topModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsTop), {\n          id: `${id}-top`,\n          drawMode: GL.TRIANGLES,\n          attributes: {\n            vertexPositions: new Float32Array([0, 1])\n          },\n          uniforms: {\n            isWireframe: false,\n            isSideVertex: false\n          },\n          vertexCount: 0,\n          isIndexed: true,\n          shaderCache: this.context.shaderCache\n        })\n      );\n    }\n    if (extruded) {\n      sideModel = new Model(\n        gl,\n        Object.assign({}, this.getShaders(vsSide), {\n          id: `${id}-side`,\n          geometry: new Geometry({\n            drawMode: GL.LINES,\n            vertexCount: 4,\n            attributes: {\n              // top right - top left - bootom left - bottom right\n              vertexPositions: {\n                size: 2,\n                value: new Float32Array([1, 1, 0, 1, 0, 0, 1, 0])\n              }\n            }\n          }),\n          instanceCount: 0,\n          isInstanced: 1,\n          shaderCache: this.context.shaderCache\n        })\n      );\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.indexLayout;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('positions');\n  }\n  calculatePositionsLow(attribute) {\n    const isFP64 = this.use64bitPositions();\n    attribute.constant = !isFP64;\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2);\n      return;\n    }\n\n    attribute.value = this.state.polygonTesselator.get('positions64xyLow');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n  calculateElevations(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n\n    const {extruded, getElevation} = this.props;\n    if (extruded) {\n      attribute.constant = false;\n      attribute.value = polygonTesselator.get('elevations', attribute.value, getElevation);\n    } else {\n      attribute.constant = true;\n      attribute.value = new Float32Array(1);\n    }\n  }\n\n  calculateFillColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getFillColor);\n  }\n  calculateLineColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.bufferLayout = polygonTesselator.bufferLayout;\n    attribute.value = polygonTesselator.get('colors', attribute.value, this.props.getLineColor);\n  }\n\n  // Override the default picking colors calculation\n  calculatePickingColors(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.value = polygonTesselator.get(\n      'pickingColors',\n      attribute.value,\n      this.encodePickingColor\n    );\n  }\n\n  clearPickingColor(color) {\n    const pickedPolygonIndex = this.decodePickingColor(color);\n    const {bufferLayout} = this.state.polygonTesselator;\n    const numVertices = bufferLayout[pickedPolygonIndex];\n\n    let startInstanceIndex = 0;\n    for (let polygonIndex = 0; polygonIndex < pickedPolygonIndex; polygonIndex++) {\n      startInstanceIndex += bufferLayout[polygonIndex];\n    }\n\n    const {pickingColors} = this.getAttributeManager().attributes;\n\n    const {value} = pickingColors;\n    const endInstanceIndex = startInstanceIndex + numVertices;\n    value.fill(0, startInstanceIndex * 3, endInstanceIndex * 3);\n    pickingColors.update({value});\n  }\n}\n\nSolidPolygonLayer.layerName = 'SolidPolygonLayer';\nSolidPolygonLayer.defaultProps = defaultProps;\n"],"file":"solid-polygon-layer.js"}