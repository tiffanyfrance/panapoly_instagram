{"version":3,"sources":["../../../src/s2-layer/s2-utils.js"],"names":["getLevelFromToken","token","lastHex","substr","length","level","getIdFromToken","paddedToken","padEnd","String","parseInt","RADIAN_TO_DEGREE","Math","PI","MAX_RESOLUTION","XYZToLngLat","x","y","z","lat","atan2","sqrt","lng","getGeoBounds","face","ij","result","offsets","resolution","max","pow","i","offset","slice","nextOffset","stepI","stepJ","j","st","S2","IJToST","uv","STToUV","xyz","FaceUVToXYZ","push","getS2Polygon","id","s2cell","S2Cell","FromLatLng","idToLatLng"],"mappings":"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","sourcesContent":["// s2-geometry is a pure JavaScript port of Google/Niantic's S2 Geometry library\n// which is perfect since it works in the browser.\nimport {S2} from 's2-geometry';\n\n/**\n * Given a S2 hex token this function returns cell level\n * cells level is a number between 1 and 30\n *\n * S2 cell id is a 64 bit number\n * S2 token removed all trailing zeros from the 16 bit converted number\n * */\nfunction getLevelFromToken(token) {\n  // leaf level token size is 16. Each 2 bit add a level\n  const lastHex = token.substr(token.length - 1);\n  // a) token = trailing-zero trimmed hex id\n  // b) 64 bit hex id - 3 face bit + 60 bits for 30 levels + 1 bit lsb marker\n  const level = 2 * (token.length - 1) - ((lastHex & 1) === 0);\n  // c) If lsb bit of last hex digit is zero, we have one more level less of\n  return level;\n}\n\n/**\n * Given an S2 token this function convert the token to 64 bit id\n * */\nfunction getIdFromToken(token) {\n  // pad token with zeros to make the length 16\n  const paddedToken = token.padEnd(16, '0');\n  return String(parseInt(paddedToken, 16));\n}\n\nconst RADIAN_TO_DEGREE = 180 / Math.PI;\nconst MAX_RESOLUTION = 100;\n\n/* Adapted from s2-geometry's S2.XYZToLatLng */\nfunction XYZToLngLat([x, y, z]) {\n  const lat = Math.atan2(z, Math.sqrt(x * x + y * y));\n  const lng = Math.atan2(y, x);\n\n  return [lng * RADIAN_TO_DEGREE, lat * RADIAN_TO_DEGREE];\n}\n\n/* Adapted from s2-geometry's S2Cell.getCornerLatLngs */\nfunction getGeoBounds({face, ij, level}) {\n  const result = [];\n  const offsets = [[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]];\n\n  // The S2 cell edge is curved: http://s2geometry.io/\n  // This is more prominent at lower levels\n  // resolution is the number of segments to generate per edge.\n  // We exponentially reduce resolution as level increases so it doesn't affect perf\n  // when there are a large number of cells\n  const resolution = Math.max(1, MAX_RESOLUTION * Math.pow(2, -level));\n\n  for (let i = 0; i < 4; i++) {\n    const offset = offsets[i].slice(0);\n    const nextOffset = offsets[i + 1];\n    const stepI = (nextOffset[0] - offset[0]) / resolution;\n    const stepJ = (nextOffset[1] - offset[1]) / resolution;\n\n    for (let j = 0; j < resolution; j++) {\n      offset[0] += stepI;\n      offset[1] += stepJ;\n      // Cell can be represented by coordinates IJ, ST, UV, XYZ\n      // http://s2geometry.io/devguide/s2cell_hierarchy#coordinate-systems\n      const st = S2.IJToST(ij, level, offset);\n      const uv = S2.STToUV(st);\n      const xyz = S2.FaceUVToXYZ(face, uv);\n\n      result.push(XYZToLngLat(xyz));\n    }\n  }\n  return result;\n}\n\n/**\n * Get a polygon with corner coordinates for an s2 cell\n * @param {*} cell - This can be an S2 key or token\n * @return {Array} - a simple polygon in array format: [[lng, lat], ...]\n *   - each coordinate is an array [lng, lat]\n *   - the polygon is closed, i.e. last coordinate is a copy of the first coordinate\n */\nexport function getS2Polygon(token) {\n  const id = getIdFromToken(token);\n  const level = getLevelFromToken(token);\n\n  const s2cell = S2.S2Cell.FromLatLng(S2.idToLatLng(id), level);\n\n  return getGeoBounds(s2cell);\n}\n"],"file":"s2-utils.js"}