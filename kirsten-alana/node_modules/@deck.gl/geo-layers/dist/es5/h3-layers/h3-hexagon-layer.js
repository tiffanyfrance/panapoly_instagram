"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _h3Js = require("h3-js");

var _core = require("@deck.gl/core");

var _core2 = require("@luma.gl/core");

var _layers = require("@deck.gl/layers");

function getHexagonCentroid(getHexagon, object, objectInfo) {
  var hexagonId = getHexagon(object, objectInfo);

  var _h3ToGeo = (0, _h3Js.h3ToGeo)(hexagonId),
      _h3ToGeo2 = (0, _slicedToArray2.default)(_h3ToGeo, 2),
      lat = _h3ToGeo2[0],
      lng = _h3ToGeo2[1];

  return [lng, lat];
}

var defaultProps = {
  highPrecision: false,
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  extruded: true,
  fp64: false,
  getHexagon: {
    type: 'accessor',
    value: function value(x) {
      return x.hexagon;
    }
  },
  getColor: {
    type: 'accessor',
    value: [255, 0, 255, 255]
  },
  getElevation: {
    type: 'accessor',
    value: 1000
  },
  material: new _core2.PhongMaterial()
};

var H3HexagonLayer = function (_CompositeLayer) {
  (0, _inherits2.default)(H3HexagonLayer, _CompositeLayer);

  function H3HexagonLayer() {
    (0, _classCallCheck2.default)(this, H3HexagonLayer);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(H3HexagonLayer).apply(this, arguments));
  }

  (0, _createClass2.default)(H3HexagonLayer, [{
    key: "shouldUpdateState",
    value: function shouldUpdateState(_ref) {
      var changeFlags = _ref.changeFlags;
      return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;
    }
  }, {
    key: "updateState",
    value: function updateState(_ref2) {
      var props = _ref2.props,
          oldProps = _ref2.oldProps,
          changeFlags = _ref2.changeFlags;

      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon) {
        var resolution = -1;
        var hasPentagon = false;

        var _createIterable = (0, _core.createIterable)(props.data),
            iterable = _createIterable.iterable,
            objectInfo = _createIterable.objectInfo;

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var object = _step.value;
            objectInfo.index++;
            var hexId = props.getHexagon(object, objectInfo);
            resolution = resolution < 0 ? (0, _h3Js.h3GetResolution)(hexId) : resolution;

            if ((0, _h3Js.h3IsPentagon)(hexId)) {
              hasPentagon = true;
              break;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this.setState({
          resolution: resolution,
          hasPentagon: hasPentagon,
          vertices: null
        });
      }

      this._updateVertices(this.context.viewport);
    }
  }, {
    key: "_shouldUseHighPrecision",
    value: function _shouldUseHighPrecision() {
      var _this$state = this.state,
          resolution = _this$state.resolution,
          hasPentagon = _this$state.hasPentagon;
      return this.props.highPrecision || hasPentagon || resolution >= 0 && resolution <= 5;
    }
  }, {
    key: "_updateVertices",
    value: function _updateVertices(viewport) {
      if (this._shouldUseHighPrecision()) {
        return;
      }

      var _this$state2 = this.state,
          resolution = _this$state2.resolution,
          centerHex = _this$state2.centerHex;

      if (resolution < 0) {
        return;
      }

      var hex = (0, _h3Js.geoToH3)(viewport.latitude, viewport.longitude, resolution);

      if (centerHex === hex) {
        return;
      }

      var pixelsPerMeter = viewport.distanceScales.pixelsPerMeter;
      var vertices = (0, _h3Js.h3ToGeoBoundary)(hex, true);

      var _h3ToGeo3 = (0, _h3Js.h3ToGeo)(hex),
          _h3ToGeo4 = (0, _slicedToArray2.default)(_h3ToGeo3, 2),
          centerLat = _h3ToGeo4[0],
          centerLng = _h3ToGeo4[1];

      var _viewport$projectFlat = viewport.projectFlat([centerLng, centerLat]),
          _viewport$projectFlat2 = (0, _slicedToArray2.default)(_viewport$projectFlat, 2),
          centerX = _viewport$projectFlat2[0],
          centerY = _viewport$projectFlat2[1];

      vertices = vertices.map(function (p) {
        var worldPosition = viewport.projectFlat(p);
        worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];
        worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];
        return worldPosition;
      });
      this.setState({
        centerHex: hex,
        vertices: vertices
      });
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();
    }
  }, {
    key: "_renderPolygonLayer",
    value: function _renderPolygonLayer() {
      var _this$props = this.props,
          data = _this$props.data,
          getHexagon = _this$props.getHexagon,
          updateTriggers = _this$props.updateTriggers,
          elevationScale = _this$props.elevationScale,
          extruded = _this$props.extruded,
          fp64 = _this$props.fp64,
          getColor = _this$props.getColor,
          getElevation = _this$props.getElevation,
          material = _this$props.material;
      var SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', _layers.SolidPolygonLayer);
      return new SubLayerClass({
        filled: true,
        elevationScale: elevationScale,
        extruded: extruded,
        fp64: fp64,
        getFillColor: getColor,
        getElevation: getElevation,
        material: material
      }, this.getSubLayerProps({
        id: 'hexagon-cell-hifi',
        updateTriggers: {
          getFillColor: updateTriggers.getFillColor,
          getElevation: updateTriggers.getElevation
        }
      }), {
        data: data,
        getPolygon: function getPolygon(object, objectInfo) {
          var hexagonId = getHexagon(object, objectInfo);
          return (0, _h3Js.h3ToGeoBoundary)(hexagonId, true);
        }
      });
    }
  }, {
    key: "_renderColumnLayer",
    value: function _renderColumnLayer() {
      var _this$props2 = this.props,
          data = _this$props2.data,
          getHexagon = _this$props2.getHexagon,
          updateTriggers = _this$props2.updateTriggers,
          coverage = _this$props2.coverage,
          elevationScale = _this$props2.elevationScale,
          extruded = _this$props2.extruded,
          fp64 = _this$props2.fp64,
          getColor = _this$props2.getColor,
          getElevation = _this$props2.getElevation,
          material = _this$props2.material;
      var SubLayerClass = this.getSubLayerClass('hexagon-cell', _layers.ColumnLayer);
      return new SubLayerClass({
        coverage: coverage,
        elevationScale: elevationScale,
        extruded: extruded,
        fp64: fp64,
        getColor: getColor,
        getElevation: getElevation,
        material: material
      }, this.getSubLayerProps({
        id: 'hexagon-cell',
        updateTriggers: updateTriggers
      }), {
        data: data,
        diskResolution: 6,
        radius: 1,
        vertices: this.state.vertices,
        getPosition: getHexagonCentroid.bind(null, getHexagon)
      });
    }
  }]);
  return H3HexagonLayer;
}(_core.CompositeLayer);

exports.default = H3HexagonLayer;
H3HexagonLayer.defaultProps = defaultProps;
H3HexagonLayer.layerName = 'H3HexagonLayer';
//# sourceMappingURL=h3-hexagon-layer.js.map