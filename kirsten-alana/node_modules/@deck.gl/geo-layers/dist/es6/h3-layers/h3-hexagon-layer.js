import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { h3ToGeoBoundary, h3GetResolution, h3ToGeo, geoToH3, h3IsPentagon } from 'h3-js';
import { CompositeLayer, createIterable } from '@deck.gl/core';
import { PhongMaterial } from '@luma.gl/core';
import { ColumnLayer, SolidPolygonLayer } from '@deck.gl/layers';

function getHexagonCentroid(getHexagon, object, objectInfo) {
  const hexagonId = getHexagon(object, objectInfo);

  const _h3ToGeo = h3ToGeo(hexagonId),
        _h3ToGeo2 = _slicedToArray(_h3ToGeo, 2),
        lat = _h3ToGeo2[0],
        lng = _h3ToGeo2[1];

  return [lng, lat];
}

const defaultProps = {
  highPrecision: false,
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  extruded: true,
  fp64: false,
  getHexagon: {
    type: 'accessor',
    value: x => x.hexagon
  },
  getColor: {
    type: 'accessor',
    value: [255, 0, 255, 255]
  },
  getElevation: {
    type: 'accessor',
    value: 1000
  },
  material: new PhongMaterial()
};
export default class H3HexagonLayer extends CompositeLayer {
  shouldUpdateState(_ref) {
    let changeFlags = _ref.changeFlags;
    return this._shouldUseHighPrecision() ? changeFlags.propsOrDataChanged : changeFlags.somethingChanged;
  }

  updateState(_ref2) {
    let props = _ref2.props,
        oldProps = _ref2.oldProps,
        changeFlags = _ref2.changeFlags;

    if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon) {
      let resolution = -1;
      let hasPentagon = false;

      const _createIterable = createIterable(props.data),
            iterable = _createIterable.iterable,
            objectInfo = _createIterable.objectInfo;

      for (const object of iterable) {
        objectInfo.index++;
        const hexId = props.getHexagon(object, objectInfo);
        resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;

        if (h3IsPentagon(hexId)) {
          hasPentagon = true;
          break;
        }
      }

      this.setState({
        resolution,
        hasPentagon,
        vertices: null
      });
    }

    this._updateVertices(this.context.viewport);
  }

  _shouldUseHighPrecision() {
    const _this$state = this.state,
          resolution = _this$state.resolution,
          hasPentagon = _this$state.hasPentagon;
    return this.props.highPrecision || hasPentagon || resolution >= 0 && resolution <= 5;
  }

  _updateVertices(viewport) {
    if (this._shouldUseHighPrecision()) {
      return;
    }

    const _this$state2 = this.state,
          resolution = _this$state2.resolution,
          centerHex = _this$state2.centerHex;

    if (resolution < 0) {
      return;
    }

    const hex = geoToH3(viewport.latitude, viewport.longitude, resolution);

    if (centerHex === hex) {
      return;
    }

    const pixelsPerMeter = viewport.distanceScales.pixelsPerMeter;
    let vertices = h3ToGeoBoundary(hex, true);

    const _h3ToGeo3 = h3ToGeo(hex),
          _h3ToGeo4 = _slicedToArray(_h3ToGeo3, 2),
          centerLat = _h3ToGeo4[0],
          centerLng = _h3ToGeo4[1];

    const _viewport$projectFlat = viewport.projectFlat([centerLng, centerLat]),
          _viewport$projectFlat2 = _slicedToArray(_viewport$projectFlat, 2),
          centerX = _viewport$projectFlat2[0],
          centerY = _viewport$projectFlat2[1];

    vertices = vertices.map(p => {
      const worldPosition = viewport.projectFlat(p);
      worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];
      worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];
      return worldPosition;
    });
    this.setState({
      centerHex: hex,
      vertices
    });
  }

  renderLayers() {
    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();
  }

  _renderPolygonLayer() {
    const _this$props = this.props,
          data = _this$props.data,
          getHexagon = _this$props.getHexagon,
          updateTriggers = _this$props.updateTriggers,
          elevationScale = _this$props.elevationScale,
          extruded = _this$props.extruded,
          fp64 = _this$props.fp64,
          getColor = _this$props.getColor,
          getElevation = _this$props.getElevation,
          material = _this$props.material;
    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', SolidPolygonLayer);
    return new SubLayerClass({
      filled: true,
      elevationScale,
      extruded,
      fp64,
      getFillColor: getColor,
      getElevation,
      material
    }, this.getSubLayerProps({
      id: 'hexagon-cell-hifi',
      updateTriggers: {
        getFillColor: updateTriggers.getFillColor,
        getElevation: updateTriggers.getElevation
      }
    }), {
      data,
      getPolygon: (object, objectInfo) => {
        const hexagonId = getHexagon(object, objectInfo);
        return h3ToGeoBoundary(hexagonId, true);
      }
    });
  }

  _renderColumnLayer() {
    const _this$props2 = this.props,
          data = _this$props2.data,
          getHexagon = _this$props2.getHexagon,
          updateTriggers = _this$props2.updateTriggers,
          coverage = _this$props2.coverage,
          elevationScale = _this$props2.elevationScale,
          extruded = _this$props2.extruded,
          fp64 = _this$props2.fp64,
          getColor = _this$props2.getColor,
          getElevation = _this$props2.getElevation,
          material = _this$props2.material;
    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);
    return new SubLayerClass({
      coverage,
      elevationScale,
      extruded,
      fp64,
      getColor,
      getElevation,
      material
    }, this.getSubLayerProps({
      id: 'hexagon-cell',
      updateTriggers
    }), {
      data,
      diskResolution: 6,
      radius: 1,
      vertices: this.state.vertices,
      getPosition: getHexagonCentroid.bind(null, getHexagon)
    });
  }

}
H3HexagonLayer.defaultProps = defaultProps;
H3HexagonLayer.layerName = 'H3HexagonLayer';
//# sourceMappingURL=h3-hexagon-layer.js.map