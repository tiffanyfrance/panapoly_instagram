{"version":3,"sources":["../../../src/h3-layers/h3-hexagon-layer.js"],"names":["h3ToGeoBoundary","h3GetResolution","h3ToGeo","geoToH3","h3IsPentagon","CompositeLayer","createIterable","PhongMaterial","ColumnLayer","SolidPolygonLayer","getHexagonCentroid","getHexagon","object","objectInfo","hexagonId","lat","lng","defaultProps","highPrecision","coverage","type","min","max","value","elevationScale","extruded","fp64","x","hexagon","getColor","getElevation","material","H3HexagonLayer","shouldUpdateState","changeFlags","_shouldUseHighPrecision","propsOrDataChanged","somethingChanged","updateState","props","oldProps","dataChanged","updateTriggers","resolution","hasPentagon","data","iterable","index","hexId","setState","vertices","_updateVertices","context","viewport","state","centerHex","hex","latitude","longitude","pixelsPerMeter","distanceScales","centerLat","centerLng","projectFlat","centerX","centerY","map","p","worldPosition","renderLayers","_renderPolygonLayer","_renderColumnLayer","SubLayerClass","getSubLayerClass","filled","getFillColor","getSubLayerProps","id","getPolygon","diskResolution","radius","getPosition","bind","layerName"],"mappings":"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","sourcesContent":["import {h3ToGeoBoundary, h3GetResolution, h3ToGeo, geoToH3, h3IsPentagon} from 'h3-js';\nimport {CompositeLayer, createIterable} from '@deck.gl/core';\nimport {PhongMaterial} from '@luma.gl/core';\nimport {ColumnLayer, SolidPolygonLayer} from '@deck.gl/layers';\n\nfunction getHexagonCentroid(getHexagon, object, objectInfo) {\n  const hexagonId = getHexagon(object, objectInfo);\n  const [lat, lng] = h3ToGeo(hexagonId);\n  return [lng, lat];\n}\n\nconst defaultProps = {\n  highPrecision: false,\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n\n  getHexagon: {type: 'accessor', value: x => x.hexagon},\n  getColor: {type: 'accessor', value: [255, 0, 255, 255]},\n  getElevation: {type: 'accessor', value: 1000},\n\n  material: new PhongMaterial()\n};\n\n/**\n * A subclass of HexagonLayer that uses H3 hexagonIds in data objects\n * rather than centroid lat/longs. The shape of each hexagon is determined\n * based on a single \"center\" hexagon, which can be selected by passing in\n * a center lat/lon pair. If not provided, the map center will be used.\n *\n * Also sets the `hexagonId` field in the onHover/onClick callback's info\n * objects. Since this is calculated using math, hexagonId will be present\n * even when no corresponding hexagon is in the data set. You can check\n * index !== -1 to see if picking matches an actual object.\n */\nexport default class H3HexagonLayer extends CompositeLayer {\n  shouldUpdateState({changeFlags}) {\n    return this._shouldUseHighPrecision()\n      ? changeFlags.propsOrDataChanged\n      : changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagon)\n    ) {\n      let resolution = -1;\n      let hasPentagon = false;\n      const {iterable, objectInfo} = createIterable(props.data);\n      for (const object of iterable) {\n        objectInfo.index++;\n        const hexId = props.getHexagon(object, objectInfo);\n        // Take the resolution of the first hex\n        resolution = resolution < 0 ? h3GetResolution(hexId) : resolution;\n        if (h3IsPentagon(hexId)) {\n          hasPentagon = true;\n          break;\n        }\n      }\n      this.setState({\n        resolution,\n        hasPentagon,\n        vertices: null\n      });\n    }\n\n    this._updateVertices(this.context.viewport);\n  }\n\n  _shouldUseHighPrecision() {\n    const {resolution, hasPentagon} = this.state;\n    return this.props.highPrecision || hasPentagon || (resolution >= 0 && resolution <= 5);\n  }\n\n  _updateVertices(viewport) {\n    if (this._shouldUseHighPrecision()) {\n      return;\n    }\n    const {resolution, centerHex} = this.state;\n    if (resolution < 0) {\n      return;\n    }\n    const hex = geoToH3(viewport.latitude, viewport.longitude, resolution);\n    if (centerHex === hex) {\n      return;\n    }\n\n    const {pixelsPerMeter} = viewport.distanceScales;\n\n    let vertices = h3ToGeoBoundary(hex, true);\n    const [centerLat, centerLng] = h3ToGeo(hex);\n\n    const [centerX, centerY] = viewport.projectFlat([centerLng, centerLat]);\n    vertices = vertices.map(p => {\n      const worldPosition = viewport.projectFlat(p);\n      worldPosition[0] = (worldPosition[0] - centerX) / pixelsPerMeter[0];\n      worldPosition[1] = (worldPosition[1] - centerY) / pixelsPerMeter[1];\n      return worldPosition;\n    });\n\n    this.setState({centerHex: hex, vertices});\n  }\n\n  renderLayers() {\n    return this._shouldUseHighPrecision() ? this._renderPolygonLayer() : this._renderColumnLayer();\n  }\n\n  _renderPolygonLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers,\n\n      elevationScale,\n      extruded,\n      fp64,\n\n      getColor,\n      getElevation,\n      material\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell-hifi', SolidPolygonLayer);\n\n    return new SubLayerClass(\n      {\n        filled: true,\n        elevationScale,\n        extruded,\n        fp64,\n        getFillColor: getColor,\n        getElevation,\n        material\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell-hifi',\n        updateTriggers: {\n          getFillColor: updateTriggers.getFillColor,\n          getElevation: updateTriggers.getElevation\n        }\n      }),\n      {\n        data,\n        getPolygon: (object, objectInfo) => {\n          const hexagonId = getHexagon(object, objectInfo);\n          return h3ToGeoBoundary(hexagonId, true);\n        }\n      }\n    );\n  }\n\n  _renderColumnLayer() {\n    const {\n      data,\n      getHexagon,\n      updateTriggers,\n\n      coverage,\n      elevationScale,\n      extruded,\n      fp64,\n\n      getColor,\n      getElevation,\n      material\n    } = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    return new SubLayerClass(\n      {\n        coverage,\n        elevationScale,\n        extruded,\n        fp64,\n        getColor,\n        getElevation,\n        material\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers\n      }),\n      {\n        data,\n        diskResolution: 6, // generate an extruded hexagon as the base geometry\n        radius: 1,\n        vertices: this.state.vertices,\n        getPosition: getHexagonCentroid.bind(null, getHexagon)\n      }\n    );\n  }\n}\n\nH3HexagonLayer.defaultProps = defaultProps;\nH3HexagonLayer.layerName = 'H3HexagonLayer';\n"],"file":"h3-hexagon-layer.js"}