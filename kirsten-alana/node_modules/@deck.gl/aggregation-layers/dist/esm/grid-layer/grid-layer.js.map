{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["PhongMaterial","CompositeLayer","GridCellLayer","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","pointToDensityGridData","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","points","length","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","x","position","extruded","fp64","material","GridLayer","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","oldProps","props","changeFlags","reprojectNeeded","needsReProjectPoints","dataChanged","getLayerData","dimensionChanges","getDimensionChanges","forEach","f","apply","updateTriggersChanged","all","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","updateTriggers","step","prop","data","setState","getSortedBins","getValueRange","cv","isColorValueInDomain","color","Number","isFinite","ev","isElevationValueInDomain","transitions","SubLayerClass","getSubLayerClass","_onGetSublayerColor","bind","_onGetSublayerElevation","getSubLayerProps","getUpdateTriggers","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\n\nimport {pointToDensityGridData} from './grid-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: points => points.length},\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: points => points.length},\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      oldProps.cellSize !== props.cellSize ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridData(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, fp64, extruded, cellSize, coverage, material, transitions} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.layerData\n      }\n    );\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"],"file":"grid-layer.js"}