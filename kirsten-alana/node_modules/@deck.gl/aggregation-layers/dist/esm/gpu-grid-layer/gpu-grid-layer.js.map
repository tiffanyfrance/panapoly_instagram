{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["PhongMaterial","CompositeLayer","GPUGridCellLayer","GPUGridAggregator","pointToDensityGridData","MINCOLOR","MAXCOLOR","defaultMaterial","defaultProps","elevationScale","type","min","value","cellSize","max","coverage","getPosition","x","position","extruded","fp64","pickable","material","gpuAggregation","GPUGridLayer","gl","context","options","id","shaderCache","state","gpuGridAggregator","opts","aggregationFlags","getAggregationFlags","getLayerData","oldProps","props","changeFlags","dataChanged","updateTriggersChanged","all","Object","assign","cellSizeChanged","data","cellSizeMeters","boundingBox","countsBuffer","maxCountBuffer","gridSize","gridOrigin","setState","minColor","maxColor","layerData","gridOffset","numInstances","SubLayerClass","getSubLayerClass","getSubLayerProps","layerName"],"mappings":";;;;;;AAoBA,SAAQA,aAAR,QAA4B,eAA5B;AACA,SAAQC,cAAR,QAA6B,eAA7B;AAEA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEA,OAAOC,iBAAP,MAA8B,mDAA9B;AACA,SAAQC,sBAAR,QAAqC,sDAArC;AAEA,IAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAjB;AACA,IAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,GAAZ,CAAjB;AACA,IAAMC,eAAe,GAAG,IAAIP,aAAJ,EAAxB;AAEA,IAAMQ,YAAY,GAAG;AAEnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBC,IAAAA,KAAK,EAAE;AAAhC,GAFG;AAKnBC,EAAAA,QAAQ,EAAE;AAACH,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBG,IAAAA,GAAG,EAAE,IAA9B;AAAoCF,IAAAA,KAAK,EAAE;AAA3C,GALS;AAMnBG,EAAAA,QAAQ,EAAE;AAACL,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,GAAG,EAAE,CAAtB;AAAyBG,IAAAA,GAAG,EAAE,CAA9B;AAAiCF,IAAAA,KAAK,EAAE;AAAxC,GANS;AAOnBI,EAAAA,WAAW,EAAE;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBE,IAAAA,KAAK,EAAE,eAAAK,CAAC;AAAA,aAAIA,CAAC,CAACC,QAAN;AAAA;AAA3B,GAPM;AAQnBC,EAAAA,QAAQ,EAAE,KARS;AASnBC,EAAAA,IAAI,EAAE,KATa;AAUnBC,EAAAA,QAAQ,EAAE,KAVS;AAanBC,EAAAA,QAAQ,EAAEf,eAbS;AAgBnBgB,EAAAA,cAAc,EAAE;AAhBG,CAArB;;IAmBqBC,Y;;;;;;;;;;;sCACD;AAAA,UACTC,EADS,GACH,KAAKC,OADF,CACTD,EADS;AAEhB,UAAME,OAAO,GAAG;AACdC,QAAAA,EAAE,YAAK,KAAKA,EAAV,oBADY;AAEdC,QAAAA,WAAW,EAAE,KAAKH,OAAL,CAAaG;AAFZ,OAAhB;AAIA,WAAKC,KAAL,GAAa;AACXC,QAAAA,iBAAiB,EAAE,IAAI5B,iBAAJ,CAAsBsB,EAAtB,EAA0BE,OAA1B;AADR,OAAb;AAGD;;;gCAEWK,I,EAAM;AAChB,UAAMC,gBAAgB,GAAG,KAAKC,mBAAL,CAAyBF,IAAzB,CAAzB;;AACA,UAAIC,gBAAJ,EAAsB;AAEpB,aAAKE,YAAL,CAAkBF,gBAAlB;AACD;AACF;;;8CAEmD;AAAA,UAA/BG,QAA+B,QAA/BA,QAA+B;AAAA,UAArBC,KAAqB,QAArBA,KAAqB;AAAA,UAAdC,WAAc,QAAdA,WAAc;AAClD,UAAIL,gBAAgB,GAAG,IAAvB;;AACA,UACEK,WAAW,CAACC,WAAZ,IACAH,QAAQ,CAACb,cAAT,KAA4Bc,KAAK,CAACd,cADlC,IAECe,WAAW,CAACE,qBAAZ,KACEF,WAAW,CAACE,qBAAZ,CAAkCC,GAAlC,IAAyCH,WAAW,CAACE,qBAAZ,CAAkCxB,WAD7E,CAHH,EAKE;AACAiB,QAAAA,gBAAgB,GAAGS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,gBAAlB,EAAoC;AAACM,UAAAA,WAAW,EAAE;AAAd,SAApC,CAAnB;AACD;;AACD,UAAIH,QAAQ,CAACvB,QAAT,KAAsBwB,KAAK,CAACxB,QAAhC,EAA0C;AACxCoB,QAAAA,gBAAgB,GAAGS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,gBAAlB,EAAoC;AAACW,UAAAA,eAAe,EAAE;AAAlB,SAApC,CAAnB;AACD;;AACD,aAAOX,gBAAP;AACD;;;iCAEYA,gB,EAAkB;AAAA,wBACyC,KAAKI,KAD9C;AAAA,UACtBQ,IADsB,eACtBA,IADsB;AAAA,UACNC,cADM,eAChBjC,QADgB;AAAA,UACUG,WADV,eACUA,WADV;AAAA,UACuBO,cADvB,eACuBA,cADvB;;AAAA,kCASzBnB,sBAAsB,CAAC;AACzByC,QAAAA,IAAI,EAAJA,IADyB;AAEzBC,QAAAA,cAAc,EAAdA,cAFyB;AAGzB9B,QAAAA,WAAW,EAAXA,WAHyB;AAIzBO,QAAAA,cAAc,EAAdA,cAJyB;AAKzBQ,QAAAA,iBAAiB,EAAE,KAAKD,KAAL,CAAWC,iBALL;AAMzBgB,QAAAA,WAAW,EAAE,KAAKjB,KAAL,CAAWiB,WANC;AAOzBd,QAAAA,gBAAgB,EAAhBA;AAPyB,OAAD,CATG;AAAA,UAG3Be,YAH2B,yBAG3BA,YAH2B;AAAA,UAI3BC,cAJ2B,yBAI3BA,cAJ2B;AAAA,UAK3BC,QAL2B,yBAK3BA,QAL2B;AAAA,UAM3BC,UAN2B,yBAM3BA,UAN2B;AAAA,UAO3BtC,QAP2B,yBAO3BA,QAP2B;AAAA,UAQ3BkC,WAR2B,yBAQ3BA,WAR2B;;AAkB7B,WAAKK,QAAL,CAAc;AAACJ,QAAAA,YAAY,EAAZA,YAAD;AAAeC,QAAAA,cAAc,EAAdA,cAAf;AAA+BC,QAAAA,QAAQ,EAARA,QAA/B;AAAyCC,QAAAA,UAAU,EAAVA,UAAzC;AAAqDtC,QAAAA,QAAQ,EAARA,QAArD;AAA+DkC,QAAAA,WAAW,EAAXA;AAA/D,OAAd;AACD;;;uCAIkB;AAAA,yBAQb,KAAKV,KARQ;AAAA,UAEf5B,cAFe,gBAEfA,cAFe;AAAA,UAGfW,IAHe,gBAGfA,IAHe;AAAA,UAIfD,QAJe,gBAIfA,QAJe;AAAA,UAKL2B,cALK,gBAKfjC,QALe;AAAA,UAMfE,QANe,gBAMfA,QANe;AAAA,UAOfO,QAPe,gBAOfA,QAPe;AAAA,wBAUsD,KAAKQ,KAV3D;AAAA,UAUVkB,YAVU,eAUVA,YAVU;AAAA,UAUIC,cAVJ,eAUIA,cAVJ;AAAA,UAUoBC,QAVpB,eAUoBA,QAVpB;AAAA,UAU8BC,UAV9B,eAU8BA,UAV9B;AAAA,UAU0CtC,QAV1C,eAU0CA,QAV1C;AAWjB,UAAMwC,QAAQ,GAAGhD,QAAjB;AACA,UAAMiD,QAAQ,GAAGhD,QAAjB;AAGA,gGAA8B;AAC5BsB,QAAAA,EAAE,EAAE,WADwB;AAE5BiB,QAAAA,IAAI,EAAE,KAAKf,KAAL,CAAWyB,SAFW;AAI5BP,QAAAA,YAAY,EAAZA,YAJ4B;AAK5BC,QAAAA,cAAc,EAAdA,cAL4B;AAM5BC,QAAAA,QAAQ,EAARA,QAN4B;AAO5BC,QAAAA,UAAU,EAAVA,UAP4B;AAQ5BK,QAAAA,UAAU,EAAE3C,QARgB;AAS5B4C,QAAAA,YAAY,EAAEP,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CATR;AAU5BG,QAAAA,QAAQ,EAARA,QAV4B;AAW5BC,QAAAA,QAAQ,EAARA,QAX4B;AAa5BlC,QAAAA,IAAI,EAAJA,IAb4B;AAc5BP,QAAAA,QAAQ,EAAEiC,cAdkB;AAe5B/B,QAAAA,QAAQ,EAARA,QAf4B;AAgB5BO,QAAAA,QAAQ,EAARA,QAhB4B;AAiB5Bb,QAAAA,cAAc,EAAdA,cAjB4B;AAkB5BU,QAAAA,QAAQ,EAARA,QAlB4B;AAmB5BE,QAAAA,QAAQ,EAAE;AAnBkB,OAA9B;AAqBD;;;uCAIkB;AACjB,aAAOnB,gBAAP;AACD;;;mCAEc;AACb,UAAMwD,aAAa,GAAG,KAAKC,gBAAL,EAAtB;AAEA,aAAO,IAAID,aAAJ,CAAkB,KAAKE,gBAAL,EAAlB,CAAP;AACD;;;;EA3GuC3D,c;;SAArBuB,Y;AA8GrBA,YAAY,CAACqC,SAAb,GAAyB,cAAzB;AACArC,YAAY,CAAChB,YAAb,GAA4BA,YAA5B","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\n\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\n\nconst MINCOLOR = [0, 0, 0, 255];\nconst MAXCOLOR = [0, 255, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // elevation\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n  pickable: false, // TODO: Enable picking with GPU Aggregation\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n\n  // GPU Aggregation\n  gpuAggregation: true\n};\n\nexport default class GPUGridLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      gpuGridAggregator: new GPUGridAggregator(gl, options)\n    };\n  }\n\n  updateState(opts) {\n    const aggregationFlags = this.getAggregationFlags(opts);\n    if (aggregationFlags) {\n      // project data into grid cells\n      this.getLayerData(aggregationFlags);\n    }\n  }\n\n  getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  getLayerData(aggregationFlags) {\n    const {data, cellSize: cellSizeMeters, getPosition, gpuAggregation} = this.props;\n    const {\n      countsBuffer,\n      maxCountBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    } = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gpuGridAggregator,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n    this.setState({countsBuffer, maxCountBuffer, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer props\n  getSubLayerProps() {\n    const {\n      elevationScale,\n      fp64,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material\n    } = this.props;\n\n    const {countsBuffer, maxCountBuffer, gridSize, gridOrigin, cellSize} = this.state;\n    const minColor = MINCOLOR;\n    const maxColor = MAXCOLOR;\n\n    // return props to the sublayer constructor\n    return super.getSubLayerProps({\n      id: 'grid-cell',\n      data: this.state.layerData,\n\n      countsBuffer,\n      maxCountBuffer,\n      gridSize,\n      gridOrigin,\n      gridOffset: cellSize,\n      numInstances: gridSize[0] * gridSize[1],\n      minColor,\n      maxColor,\n\n      fp64,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      pickable: false\n    });\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer class\n  getSubLayerClass() {\n    return GPUGridCellLayer;\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-layer.js"}