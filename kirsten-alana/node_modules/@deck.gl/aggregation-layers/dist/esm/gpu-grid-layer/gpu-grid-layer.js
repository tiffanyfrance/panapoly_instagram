import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { PhongMaterial } from '@luma.gl/core';
import { CompositeLayer } from '@deck.gl/core';
import GPUGridCellLayer from './gpu-grid-cell-layer';
import GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';
import { pointToDensityGridData } from '../utils/gpu-grid-aggregation/grid-aggregation-utils';
var MINCOLOR = [0, 0, 0, 255];
var MAXCOLOR = [0, 255, 0, 255];
var defaultMaterial = new PhongMaterial();
var defaultProps = {
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  getPosition: {
    type: 'accessor',
    value: function value(x) {
      return x.position;
    }
  },
  extruded: false,
  fp64: false,
  pickable: false,
  material: defaultMaterial,
  gpuAggregation: true
};

var GPUGridLayer = function (_CompositeLayer) {
  _inherits(GPUGridLayer, _CompositeLayer);

  function GPUGridLayer() {
    _classCallCheck(this, GPUGridLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridLayer).apply(this, arguments));
  }

  _createClass(GPUGridLayer, [{
    key: "initializeState",
    value: function initializeState() {
      var gl = this.context.gl;
      var options = {
        id: "".concat(this.id, "-gpu-aggregator"),
        shaderCache: this.context.shaderCache
      };
      this.state = {
        gpuGridAggregator: new GPUGridAggregator(gl, options)
      };
    }
  }, {
    key: "updateState",
    value: function updateState(opts) {
      var aggregationFlags = this.getAggregationFlags(opts);

      if (aggregationFlags) {
        this.getLayerData(aggregationFlags);
      }
    }
  }, {
    key: "getAggregationFlags",
    value: function getAggregationFlags(_ref) {
      var oldProps = _ref.oldProps,
          props = _ref.props,
          changeFlags = _ref.changeFlags;
      var aggregationFlags = null;

      if (changeFlags.dataChanged || oldProps.gpuAggregation !== props.gpuAggregation || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition)) {
        aggregationFlags = Object.assign({}, aggregationFlags, {
          dataChanged: true
        });
      }

      if (oldProps.cellSize !== props.cellSize) {
        aggregationFlags = Object.assign({}, aggregationFlags, {
          cellSizeChanged: true
        });
      }

      return aggregationFlags;
    }
  }, {
    key: "getLayerData",
    value: function getLayerData(aggregationFlags) {
      var _this$props = this.props,
          data = _this$props.data,
          cellSizeMeters = _this$props.cellSize,
          getPosition = _this$props.getPosition,
          gpuAggregation = _this$props.gpuAggregation;

      var _pointToDensityGridDa = pointToDensityGridData({
        data: data,
        cellSizeMeters: cellSizeMeters,
        getPosition: getPosition,
        gpuAggregation: gpuAggregation,
        gpuGridAggregator: this.state.gpuGridAggregator,
        boundingBox: this.state.boundingBox,
        aggregationFlags: aggregationFlags
      }),
          countsBuffer = _pointToDensityGridDa.countsBuffer,
          maxCountBuffer = _pointToDensityGridDa.maxCountBuffer,
          gridSize = _pointToDensityGridDa.gridSize,
          gridOrigin = _pointToDensityGridDa.gridOrigin,
          cellSize = _pointToDensityGridDa.cellSize,
          boundingBox = _pointToDensityGridDa.boundingBox;

      this.setState({
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        cellSize: cellSize,
        boundingBox: boundingBox
      });
    }
  }, {
    key: "getSubLayerProps",
    value: function getSubLayerProps() {
      var _this$props2 = this.props,
          elevationScale = _this$props2.elevationScale,
          fp64 = _this$props2.fp64,
          extruded = _this$props2.extruded,
          cellSizeMeters = _this$props2.cellSize,
          coverage = _this$props2.coverage,
          material = _this$props2.material;
      var _this$state = this.state,
          countsBuffer = _this$state.countsBuffer,
          maxCountBuffer = _this$state.maxCountBuffer,
          gridSize = _this$state.gridSize,
          gridOrigin = _this$state.gridOrigin,
          cellSize = _this$state.cellSize;
      var minColor = MINCOLOR;
      var maxColor = MAXCOLOR;
      return _get(_getPrototypeOf(GPUGridLayer.prototype), "getSubLayerProps", this).call(this, {
        id: 'grid-cell',
        data: this.state.layerData,
        countsBuffer: countsBuffer,
        maxCountBuffer: maxCountBuffer,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOffset: cellSize,
        numInstances: gridSize[0] * gridSize[1],
        minColor: minColor,
        maxColor: maxColor,
        fp64: fp64,
        cellSize: cellSizeMeters,
        coverage: coverage,
        material: material,
        elevationScale: elevationScale,
        extruded: extruded,
        pickable: false
      });
    }
  }, {
    key: "getSubLayerClass",
    value: function getSubLayerClass() {
      return GPUGridCellLayer;
    }
  }, {
    key: "renderLayers",
    value: function renderLayers() {
      var SubLayerClass = this.getSubLayerClass();
      return new SubLayerClass(this.getSubLayerProps());
    }
  }]);

  return GPUGridLayer;
}(CompositeLayer);

export { GPUGridLayer as default };
GPUGridLayer.layerName = 'GPUGridLayer';
GPUGridLayer.defaultProps = defaultProps;
//# sourceMappingURL=gpu-grid-layer.js.map