{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-cell-layer.js"],"names":["Layer","Model","CubeGeometry","fp64","PhongMaterial","fp64LowPart","defaultMaterial","vs","fs","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","AGGREGATION_DATA_UBO_INDEX","defaultProps","cellSize","type","min","max","value","coverage","elevationScale","extruded","pickable","minColor","maxColor","material","GPUGridCellLayer","modules","attributeManager","getAttributeManager","addInstanced","instanceCounts","size","update","calculateInstanceCounts","noAlloc","props","oldProps","changeFlags","gl","context","state","model","delete","_getModel","_setupUniformBuffer","setState","invalidate","countsBuffer","Object","assign","getShaders","id","geometry","isInstanced","shaderCache","uniforms","gridSize","gridOrigin","gridOffset","maxCountBuffer","gridOriginLow","gridOffsetLow","bind","target","index","setUniforms","draw","unbind","attribute","buffer","programHandle","program","handle","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, CubeGeometry, fp64, PhongMaterial} from '@luma.gl/core';\nconst {fp64LowPart} = fp64;\nconst defaultMaterial = new PhongMaterial();\n\nimport vs from './gpu-grid-cell-layer-vertex.glsl';\nimport fs from './gpu-grid-cell-layer-fragment.glsl';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 255];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst AGGREGATION_DATA_UBO_INDEX = 0;\n\nconst defaultProps = {\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  extruded: true,\n  fp64: false,\n  pickable: false, // TODO: add picking support (read from aggregated texture)\n\n  minColor: {type: 'color', value: DEFAULT_MINCOLOR},\n  maxColor: {type: 'color', value: DEFAULT_MAXCOLOR},\n\n  material: defaultMaterial\n};\n\nexport default class GPUGridCellLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: ['project32', 'gouraud-lighting', 'picking', 'fp64']};\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceCounts: {\n        size: 4,\n        update: this.calculateInstanceCounts,\n        noAlloc: true\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    // Re-generate model if geometry changed\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context;\n      if (this.state.model) {\n        this.state.model.delete();\n      }\n      const model = this._getModel(gl);\n      this._setupUniformBuffer(model);\n      this.setState({model});\n      this.state.attributeManager.invalidate('instanceCounts');\n    }\n    if (props.countsBuffer !== oldProps.countsBuffer) {\n      this.state.attributeManager.invalidate('instanceCounts');\n    }\n  }\n\n  _getModel(gl) {\n    return new Model(\n      gl,\n      Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: new CubeGeometry(),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    );\n  }\n\n  draw({uniforms}) {\n    const {\n      cellSize,\n      extruded,\n      elevationScale,\n      coverage,\n      gridSize,\n      gridOrigin,\n      gridOffset,\n      minColor,\n      maxColor,\n      maxCountBuffer\n    } = this.props;\n\n    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];\n    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];\n\n    maxCountBuffer.bind({target: GL.UNIFORM_BUFFER, index: AGGREGATION_DATA_UBO_INDEX});\n    this.state.model\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          cellSize,\n          extruded,\n          elevationScale,\n          coverage,\n          gridSize,\n          gridOrigin,\n          gridOriginLow,\n          gridOffset,\n          gridOffsetLow,\n          minColor,\n          maxColor\n        })\n      )\n      .draw();\n    maxCountBuffer.unbind({target: GL.UNIFORM_BUFFER, index: AGGREGATION_DATA_UBO_INDEX});\n  }\n\n  calculateInstanceCounts(attribute) {\n    const {countsBuffer} = this.props;\n    attribute.update({\n      buffer: countsBuffer\n    });\n  }\n\n  _setupUniformBuffer(model) {\n    const gl = this.context.gl;\n    const programHandle = model.program.handle;\n\n    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');\n    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);\n  }\n}\n\nGPUGridCellLayer.layerName = 'GPUGridCellLayer';\nGPUGridCellLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-cell-layer.js"}