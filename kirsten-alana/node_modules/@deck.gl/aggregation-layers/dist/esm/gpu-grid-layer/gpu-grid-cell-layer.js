import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _get from "@babel/runtime/helpers/esm/get";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import { Layer } from '@deck.gl/core';
import { Model, CubeGeometry, fp64, PhongMaterial } from '@luma.gl/core';
var fp64LowPart = fp64.fp64LowPart;
var defaultMaterial = new PhongMaterial();
import vs from './gpu-grid-cell-layer-vertex.glsl';
import fs from './gpu-grid-cell-layer-fragment.glsl';
var DEFAULT_MINCOLOR = [0, 0, 0, 255];
var DEFAULT_MAXCOLOR = [0, 255, 0, 255];
var AGGREGATION_DATA_UBO_INDEX = 0;
var defaultProps = {
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  extruded: true,
  fp64: false,
  pickable: false,
  minColor: {
    type: 'color',
    value: DEFAULT_MINCOLOR
  },
  maxColor: {
    type: 'color',
    value: DEFAULT_MAXCOLOR
  },
  material: defaultMaterial
};

var GPUGridCellLayer = function (_Layer) {
  _inherits(GPUGridCellLayer, _Layer);

  function GPUGridCellLayer() {
    _classCallCheck(this, GPUGridCellLayer);

    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridCellLayer).apply(this, arguments));
  }

  _createClass(GPUGridCellLayer, [{
    key: "getShaders",
    value: function getShaders() {
      return {
        vs: vs,
        fs: fs,
        modules: ['project32', 'gouraud-lighting', 'picking', 'fp64']
      };
    }
  }, {
    key: "initializeState",
    value: function initializeState() {
      var attributeManager = this.getAttributeManager();
      attributeManager.addInstanced({
        instanceCounts: {
          size: 4,
          update: this.calculateInstanceCounts,
          noAlloc: true
        }
      });
    }
  }, {
    key: "updateState",
    value: function updateState(_ref) {
      var props = _ref.props,
          oldProps = _ref.oldProps,
          changeFlags = _ref.changeFlags;

      _get(_getPrototypeOf(GPUGridCellLayer.prototype), "updateState", this).call(this, {
        props: props,
        oldProps: oldProps,
        changeFlags: changeFlags
      });

      if (props.fp64 !== oldProps.fp64) {
        var gl = this.context.gl;

        if (this.state.model) {
          this.state.model.delete();
        }

        var model = this._getModel(gl);

        this._setupUniformBuffer(model);

        this.setState({
          model: model
        });
        this.state.attributeManager.invalidate('instanceCounts');
      }

      if (props.countsBuffer !== oldProps.countsBuffer) {
        this.state.attributeManager.invalidate('instanceCounts');
      }
    }
  }, {
    key: "_getModel",
    value: function _getModel(gl) {
      return new Model(gl, Object.assign({}, this.getShaders(), {
        id: this.props.id,
        geometry: new CubeGeometry(),
        isInstanced: true,
        shaderCache: this.context.shaderCache
      }));
    }
  }, {
    key: "draw",
    value: function draw(_ref2) {
      var uniforms = _ref2.uniforms;
      var _this$props = this.props,
          cellSize = _this$props.cellSize,
          extruded = _this$props.extruded,
          elevationScale = _this$props.elevationScale,
          coverage = _this$props.coverage,
          gridSize = _this$props.gridSize,
          gridOrigin = _this$props.gridOrigin,
          gridOffset = _this$props.gridOffset,
          minColor = _this$props.minColor,
          maxColor = _this$props.maxColor,
          maxCountBuffer = _this$props.maxCountBuffer;
      var gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];
      var gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];
      maxCountBuffer.bind({
        target: 35345,
        index: AGGREGATION_DATA_UBO_INDEX
      });
      this.state.model.setUniforms(Object.assign({}, uniforms, {
        cellSize: cellSize,
        extruded: extruded,
        elevationScale: elevationScale,
        coverage: coverage,
        gridSize: gridSize,
        gridOrigin: gridOrigin,
        gridOriginLow: gridOriginLow,
        gridOffset: gridOffset,
        gridOffsetLow: gridOffsetLow,
        minColor: minColor,
        maxColor: maxColor
      })).draw();
      maxCountBuffer.unbind({
        target: 35345,
        index: AGGREGATION_DATA_UBO_INDEX
      });
    }
  }, {
    key: "calculateInstanceCounts",
    value: function calculateInstanceCounts(attribute) {
      var countsBuffer = this.props.countsBuffer;
      attribute.update({
        buffer: countsBuffer
      });
    }
  }, {
    key: "_setupUniformBuffer",
    value: function _setupUniformBuffer(model) {
      var gl = this.context.gl;
      var programHandle = model.program.handle;
      var uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');
      gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);
    }
  }]);

  return GPUGridCellLayer;
}(Layer);

export { GPUGridCellLayer as default };
GPUGridCellLayer.layerName = 'GPUGridCellLayer';
GPUGridCellLayer.defaultProps = defaultProps;
//# sourceMappingURL=gpu-grid-cell-layer.js.map