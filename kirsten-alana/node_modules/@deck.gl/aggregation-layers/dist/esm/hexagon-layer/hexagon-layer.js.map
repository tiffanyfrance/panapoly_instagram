{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["PhongMaterial","CompositeLayer","log","ColumnLayer","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","pointToHexbin","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","points","length","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","fp64","material","HexagonLayer","state","hexagons","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","oldProps","props","changeFlags","dimensionChanges","getDimensionChanges","dataChanged","needsReProjectPoints","getHexagons","forEach","f","apply","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","viewport","context","hexagonVertices","updateRadiusAngle","setState","getSortedBins","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","updateTriggers","step","prop","vertices","angle","Array","isArray","error","vertex0","vertex3","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","warn","getValueRange","cv","isColorValueInDomain","color","Number","isFinite","ev","isElevationValueInDomain","transitions","SubLayerClass","getSubLayerClass","diskResolution","_onGetSublayerColor","bind","_onGetSublayerElevation","getSubLayerProps","getUpdateTriggers","data","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: points => points.length},\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: points => points.length},\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  fp64: false,\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class HexagonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      hexagons: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n    if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {\n      // project data into hexagons, and get sortedColorBins\n      this.getHexagons();\n    } else if (dimensionChanges) {\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props) {\n    return (\n      oldProps.radius !== props.radius || oldProps.hexagonAggregator !== props.hexagonAggregator\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getHexagons() {\n    const {hexagonAggregator} = this.props;\n    const {viewport} = this.context;\n    const {hexagons, hexagonVertices} = hexagonAggregator(this.props, viewport);\n    this.updateRadiusAngle(hexagonVertices);\n    this.setState({hexagons});\n    this.getSortedBins();\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n    const isPicked = info.picked && info.index > -1;\n\n    let object = null;\n    if (isPicked) {\n      const cell = this.state.hexagons[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  updateRadiusAngle(vertices) {\n    let {radius} = this.props;\n    let angle = 90;\n\n    if (Array.isArray(vertices)) {\n      if (vertices.length < 6) {\n        log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n      }\n\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = ((Math.acos(dx / dxy) * -Math.sign(dy)) / Math.PI) * 180 + 90;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.hexagons || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.hexagons || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    if (lowerPercentile > upperPercentile) {\n      log.warn('HexagonLayer: lowerPercentile is bigger than upperPercentile')();\n    }\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, fp64, transitions} = this.props;\n    const {angle, radius} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        radius,\n        diskResolution: 6,\n        elevationScale,\n        angle,\n        extruded,\n        coverage,\n        material,\n\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.hexagons\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}