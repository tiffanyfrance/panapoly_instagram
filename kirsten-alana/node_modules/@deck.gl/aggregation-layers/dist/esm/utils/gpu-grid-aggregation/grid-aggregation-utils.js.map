{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/grid-aggregation-utils.js"],"names":["Matrix4","fp64","fp64Utils","COORDINATE_SYSTEM","log","createIterable","experimental","count","AGGREGATION_OPERATION","fp64LowPart","R_EARTH","DEFAULT_WEIGHT","pointToDensityGridData","data","getPosition","cellSizeMeters","gpuGridAggregator","gpuAggregation","aggregationFlags","getWeight","coordinateSystem","LNGLAT","viewport","boundingBox","gridData","assert","dataChanged","cellSizeChanged","viewportChanged","parseGridData","cellSize","worldOrigin","IDENTITY","LNGLAT_DEPRECATED","gridOffset","getGridOffset","xOffset","yOffset","width","height","opts","getGPUAggregationParams","aggregatedData","run","positions","positions64xyLow","weights","gridTransformMatrix","useGPU","changeFlags","countsBuffer","weight1","aggregationBuffer","maxCountBuffer","maxBuffer","countsData","aggregationData","maxCountData","maxData","gridSize","gridOrigin","pointCount","Float32Array","weightValues","yMin","Infinity","yMax","xMin","xMax","y","x","iterable","objectInfo","object","index","position","weight","Array","isArray","Number","isFinite","size","operation","SUM","needMax","values","latMin","latMax","centerLat","calculateGridLatLonOffset","latitude","calculateLatOffset","calculateLonOffset","dy","Math","PI","lat","dx","cos","alignToCell","inValue","sign","value","abs","floor","originX","originY","translate","ceil"],"mappings":"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","sourcesContent":["import {Matrix4} from 'math.gl';\nimport {fp64 as fp64Utils} from '@luma.gl/core';\nimport {COORDINATE_SYSTEM, log, createIterable, experimental} from '@deck.gl/core';\nconst {count} = experimental;\nimport {AGGREGATION_OPERATION} from './gpu-grid-aggregator-constants';\nconst {fp64LowPart} = fp64Utils;\n\nconst R_EARTH = 6378000;\nconst DEFAULT_WEIGHT = [1, 0, 0];\n\n// Takes data and aggregation params and returns aggregated data.\nexport function pointToDensityGridData({\n  data,\n  getPosition,\n  cellSizeMeters,\n  gpuGridAggregator,\n  gpuAggregation,\n  aggregationFlags,\n  getWeight,\n  fp64 = false,\n  coordinateSystem = COORDINATE_SYSTEM.LNGLAT,\n  viewport = null,\n  boundingBox = null\n}) {\n  let gridData = {};\n  log.assert(\n    aggregationFlags.dataChanged ||\n      aggregationFlags.cellSizeChanged ||\n      aggregationFlags.viewportChanged\n  );\n  if (aggregationFlags.dataChanged) {\n    gridData = parseGridData(data, getPosition, getWeight);\n    boundingBox = gridData.boundingBox;\n  }\n  let cellSize = [cellSizeMeters, cellSizeMeters];\n  let worldOrigin = [0, 0];\n  log.assert(\n    coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.IDENTITY\n  );\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      const gridOffset = getGridOffset(boundingBox, cellSizeMeters);\n      cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n      worldOrigin = [-180, -90]; // Origin used to define grid cell boundaries\n      break;\n    case COORDINATE_SYSTEM.IDENTITY:\n      const {width, height} = viewport;\n      worldOrigin = [-width / 2, -height / 2]; // Origin used to define grid cell boundaries\n      break;\n    default:\n      // Currently other coodinate systems not supported/verified.\n      log.assert(false);\n  }\n\n  const opts = getGPUAggregationParams({boundingBox, cellSize, worldOrigin});\n\n  const aggregatedData = gpuGridAggregator.run({\n    positions: gridData.positions,\n    positions64xyLow: gridData.positions64xyLow,\n    weights: gridData.weights,\n    cellSize,\n    width: opts.width,\n    height: opts.height,\n    gridTransformMatrix: opts.gridTransformMatrix,\n    useGPU: gpuAggregation,\n    changeFlags: aggregationFlags,\n    fp64\n  });\n\n  return {\n    countsBuffer: aggregatedData.weight1.aggregationBuffer,\n    maxCountBuffer: aggregatedData.weight1.maxBuffer,\n    countsData: aggregatedData.weight1.aggregationData,\n    maxCountData: aggregatedData.weight1.maxData,\n    gridSize: opts.gridSize,\n    gridOrigin: opts.gridOrigin,\n    cellSize,\n    boundingBox\n  };\n}\n\n// Parse input data to build positions, wights and bounding box.\n/* eslint-disable max-statements */\nfunction parseGridData(data, getPosition, getWeight = null) {\n  const pointCount = count(data);\n  const positions = new Float32Array(pointCount * 2);\n  const positions64xyLow = new Float32Array(pointCount * 2);\n  const weightValues = new Float32Array(pointCount * 3);\n\n  let yMin = Infinity;\n  let yMax = -Infinity;\n  let xMin = Infinity;\n  let xMax = -Infinity;\n  let y;\n  let x;\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const position = getPosition(object, objectInfo);\n    const {index} = objectInfo;\n    x = position[0];\n    y = position[1];\n    positions[index * 2] = x;\n    positions[index * 2 + 1] = y;\n\n    positions64xyLow[index * 2] = fp64LowPart(x);\n    positions64xyLow[index * 2 + 1] = fp64LowPart(y);\n\n    const weight = getWeight ? getWeight(object, objectInfo) : DEFAULT_WEIGHT;\n    // Aggregator expects each weight is an array of size 3\n    if (Array.isArray(weight)) {\n      weightValues[index * 3] = weight[0];\n      weightValues[index * 3 + 1] = weight[1];\n      weightValues[index * 3 + 2] = weight[2];\n    } else {\n      // backward compitability\n      weightValues[index * 3] = weight;\n    }\n\n    if (Number.isFinite(y) && Number.isFinite(x)) {\n      yMin = y < yMin ? y : yMin;\n      yMax = y > yMax ? y : yMax;\n\n      xMin = x < xMin ? x : xMin;\n      xMax = x > xMax ? x : xMax;\n    }\n  }\n  const weights = {\n    weight1: {\n      size: 1,\n      operation: AGGREGATION_OPERATION.SUM,\n      needMax: true,\n      values: weightValues\n    }\n  };\n  const boundingBox = {xMin, xMax, yMin, yMax};\n  return {\n    positions,\n    positions64xyLow,\n    weights,\n    boundingBox\n  };\n}\n/* eslint-enable max-statements */\n\n/**\n * Based on geometric center of sample points, calculate cellSize in lng/lat (degree) space\n * @param {object} gridData - contains bounding box of data\n * @param {number} cellSize - grid cell size in meters\n * @returns {yOffset, xOffset} - cellSize size lng/lat (degree) space.\n */\n\nfunction getGridOffset(boundingBox, cellSize) {\n  const {yMin, yMax} = boundingBox;\n  const latMin = yMin;\n  const latMax = yMax;\n  const centerLat = (latMin + latMax) / 2;\n\n  return calculateGridLatLonOffset(cellSize, centerLat);\n}\n\n/**\n * calculate grid layer cell size in lat lon based on world unit size\n * and current latitude\n * @param {number} cellSize\n * @param {number} latitude\n * @returns {object} - lat delta and lon delta\n */\nfunction calculateGridLatLonOffset(cellSize, latitude) {\n  const yOffset = calculateLatOffset(cellSize);\n  const xOffset = calculateLonOffset(latitude, cellSize);\n  return {yOffset, xOffset};\n}\n\n/**\n * with a given x-km change, calculate the increment of latitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} dy - change in km\n * @return {number} - increment in latitude\n */\nfunction calculateLatOffset(dy) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\n/**\n * with a given x-km change, and current latitude\n * calculate the increment of longitude\n * based on stackoverflow http://stackoverflow.com/questions/7477003\n * @param {number} lat - latitude of current location (based on city)\n * @param {number} dx - change in km\n * @return {number} - increment in longitude\n */\nfunction calculateLonOffset(lat, dx) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\n\n// Aligns `inValue` to given `cellSize`\nexport function alignToCell(inValue, cellSize) {\n  const sign = inValue < 0 ? -1 : 1;\n\n  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);\n\n  value = Math.floor(value / cellSize) * cellSize;\n\n  return value * sign;\n}\n\n// Calculate grid parameters\nfunction getGPUAggregationParams({boundingBox, cellSize, worldOrigin}) {\n  const {yMin, yMax, xMin, xMax} = boundingBox;\n\n  // NOTE: this alignment will match grid cell boundaries with existing CPU implementation\n  // this gurantees identical aggregation results when switching between CPU and GPU aggregation.\n  // Also gurantees same cell boundaries, when overlapping between two different layers (like ScreenGrid and Contour)\n  // We first move worldOrigin to [0, 0], align the lower bounding box , then move worldOrigin to its original value.\n  const originX = alignToCell(xMin - worldOrigin[0], cellSize[0]) + worldOrigin[0];\n  const originY = alignToCell(yMin - worldOrigin[1], cellSize[1]) + worldOrigin[1];\n\n  // Setup transformation matrix so that every point is in +ve range\n  const gridTransformMatrix = new Matrix4().translate([-1 * originX, -1 * originY, 0]);\n\n  // const cellSize = [gridOffset.xOffset, gridOffset.yOffset];\n  const gridOrigin = [originX, originY];\n  const width = xMax - xMin + cellSize[0];\n  const height = yMax - yMin + cellSize[1];\n\n  const gridSize = [Math.ceil(width / cellSize[0]), Math.ceil(height / cellSize[1])];\n\n  return {\n    gridOrigin,\n    gridSize,\n    width,\n    height,\n    gridTransformMatrix\n  };\n}\n"],"file":"grid-aggregation-utils.js"}