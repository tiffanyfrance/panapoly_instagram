{"version":3,"sources":["../../../src/grid-layer/grid-layer.js"],"names":["PhongMaterial","CompositeLayer","GridCellLayer","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","pointToDensityGridData","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","points","length","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","cellSize","coverage","getPosition","x","position","extruded","fp64","material","GridLayer","initializeState","state","layerData","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","updateState","oldProps","props","changeFlags","reprojectNeeded","needsReProjectPoints","dataChanged","getLayerData","dimensionChanges","getDimensionChanges","forEach","f","apply","updateTriggersChanged","all","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","getPickingInfo","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","getUpdateTriggers","updateTriggers","step","prop","data","setState","getSortedBins","getValueDomain","getValueRange","_onGetSublayerColor","cv","isColorValueInDomain","color","Number","isFinite","_onGetSublayerElevation","ev","isElevationValueInDomain","renderLayers","transitions","SubLayerClass","getSubLayerClass","bind","getSubLayerProps","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\nimport {GridCellLayer} from '@deck.gl/layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\n\nimport {pointToDensityGridData} from './grid-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: points => points.length},\n  lowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  upperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: points => points.length},\n  elevationLowerPercentile: {type: 'number', min: 0, max: 100, value: 0},\n  elevationUpperPercentile: {type: 'number', min: 0, max: 100, value: 100},\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class GridLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      layerData: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n    if (changeFlags.dataChanged || reprojectNeeded) {\n      // project data into hexagons, and get sortedBins\n      this.getLayerData();\n    } else {\n      const dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props, changeFlags) {\n    return (\n      oldProps.cellSize !== props.cellSize ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n\n    const isPicked = info.picked && info.index > -1;\n    let object = null;\n\n    if (isPicked) {\n      const cell = this.state.layerData[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  getLayerData() {\n    const {data, cellSize, getPosition} = this.props;\n    const {layerData} = pointToDensityGridData(data, cellSize, getPosition);\n\n    this.setState({layerData});\n    this.getSortedBins();\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, fp64, extruded, cellSize, coverage, material, transitions} = this.props;\n\n    const SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        cellSize,\n        coverage,\n        material,\n        elevationScale,\n        extruded,\n\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      },\n      this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.layerData\n      }\n    );\n  }\n}\n\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;\n"],"file":"grid-layer.js"}