import { Layer } from '@deck.gl/core';
import { Model, CubeGeometry, fp64, PhongMaterial } from '@luma.gl/core';
const fp64LowPart = fp64.fp64LowPart;
const defaultMaterial = new PhongMaterial();
import vs from './gpu-grid-cell-layer-vertex.glsl';
import fs from './gpu-grid-cell-layer-fragment.glsl';
const DEFAULT_MINCOLOR = [0, 0, 0, 255];
const DEFAULT_MAXCOLOR = [0, 255, 0, 255];
const AGGREGATION_DATA_UBO_INDEX = 0;
const defaultProps = {
  cellSize: {
    type: 'number',
    min: 0,
    max: 1000,
    value: 1000
  },
  coverage: {
    type: 'number',
    min: 0,
    max: 1,
    value: 1
  },
  elevationScale: {
    type: 'number',
    min: 0,
    value: 1
  },
  extruded: true,
  fp64: false,
  pickable: false,
  minColor: {
    type: 'color',
    value: DEFAULT_MINCOLOR
  },
  maxColor: {
    type: 'color',
    value: DEFAULT_MAXCOLOR
  },
  material: defaultMaterial
};
export default class GPUGridCellLayer extends Layer {
  getShaders() {
    return {
      vs,
      fs,
      modules: ['project32', 'gouraud-lighting', 'picking', 'fp64']
    };
  }

  initializeState() {
    const attributeManager = this.getAttributeManager();
    attributeManager.addInstanced({
      instanceCounts: {
        size: 4,
        update: this.calculateInstanceCounts,
        noAlloc: true
      }
    });
  }

  updateState(_ref) {
    let props = _ref.props,
        oldProps = _ref.oldProps,
        changeFlags = _ref.changeFlags;
    super.updateState({
      props,
      oldProps,
      changeFlags
    });

    if (props.fp64 !== oldProps.fp64) {
      const gl = this.context.gl;

      if (this.state.model) {
        this.state.model.delete();
      }

      const model = this._getModel(gl);

      this._setupUniformBuffer(model);

      this.setState({
        model
      });
      this.state.attributeManager.invalidate('instanceCounts');
    }

    if (props.countsBuffer !== oldProps.countsBuffer) {
      this.state.attributeManager.invalidate('instanceCounts');
    }
  }

  _getModel(gl) {
    return new Model(gl, Object.assign({}, this.getShaders(), {
      id: this.props.id,
      geometry: new CubeGeometry(),
      isInstanced: true,
      shaderCache: this.context.shaderCache
    }));
  }

  draw(_ref2) {
    let uniforms = _ref2.uniforms;
    const _this$props = this.props,
          cellSize = _this$props.cellSize,
          extruded = _this$props.extruded,
          elevationScale = _this$props.elevationScale,
          coverage = _this$props.coverage,
          gridSize = _this$props.gridSize,
          gridOrigin = _this$props.gridOrigin,
          gridOffset = _this$props.gridOffset,
          minColor = _this$props.minColor,
          maxColor = _this$props.maxColor,
          maxCountBuffer = _this$props.maxCountBuffer;
    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];
    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];
    maxCountBuffer.bind({
      target: 35345,
      index: AGGREGATION_DATA_UBO_INDEX
    });
    this.state.model.setUniforms(Object.assign({}, uniforms, {
      cellSize,
      extruded,
      elevationScale,
      coverage,
      gridSize,
      gridOrigin,
      gridOriginLow,
      gridOffset,
      gridOffsetLow,
      minColor,
      maxColor
    })).draw();
    maxCountBuffer.unbind({
      target: 35345,
      index: AGGREGATION_DATA_UBO_INDEX
    });
  }

  calculateInstanceCounts(attribute) {
    const countsBuffer = this.props.countsBuffer;
    attribute.update({
      buffer: countsBuffer
    });
  }

  _setupUniformBuffer(model) {
    const gl = this.context.gl;
    const programHandle = model.program.handle;
    const uniformBlockIndex = gl.getUniformBlockIndex(programHandle, 'AggregationData');
    gl.uniformBlockBinding(programHandle, uniformBlockIndex, AGGREGATION_DATA_UBO_INDEX);
  }

}
GPUGridCellLayer.layerName = 'GPUGridCellLayer';
GPUGridCellLayer.defaultProps = defaultProps;
//# sourceMappingURL=gpu-grid-cell-layer.js.map