{"version":3,"sources":["../../../src/gpu-grid-layer/gpu-grid-layer.js"],"names":["PhongMaterial","CompositeLayer","GPUGridCellLayer","GPUGridAggregator","pointToDensityGridData","MINCOLOR","MAXCOLOR","defaultMaterial","defaultProps","elevationScale","type","min","value","cellSize","max","coverage","getPosition","x","position","extruded","fp64","pickable","material","gpuAggregation","GPUGridLayer","initializeState","gl","context","options","id","shaderCache","state","gpuGridAggregator","updateState","opts","aggregationFlags","getAggregationFlags","getLayerData","oldProps","props","changeFlags","dataChanged","updateTriggersChanged","all","Object","assign","cellSizeChanged","data","cellSizeMeters","boundingBox","countsBuffer","maxCountBuffer","gridSize","gridOrigin","setState","getSubLayerProps","minColor","maxColor","layerData","gridOffset","numInstances","getSubLayerClass","renderLayers","SubLayerClass","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer} from '@deck.gl/core';\n\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\n\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {pointToDensityGridData} from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\n\nconst MINCOLOR = [0, 0, 0, 255];\nconst MAXCOLOR = [0, 255, 0, 255];\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // elevation\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  // grid\n  cellSize: {type: 'number', min: 0, max: 1000, value: 1000},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  getPosition: {type: 'accessor', value: x => x.position},\n  extruded: false,\n  fp64: false,\n  pickable: false, // TODO: Enable picking with GPU Aggregation\n\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial,\n\n  // GPU Aggregation\n  gpuAggregation: true\n};\n\nexport default class GPUGridLayer extends CompositeLayer {\n  initializeState() {\n    const {gl} = this.context;\n    const options = {\n      id: `${this.id}-gpu-aggregator`,\n      shaderCache: this.context.shaderCache\n    };\n    this.state = {\n      gpuGridAggregator: new GPUGridAggregator(gl, options)\n    };\n  }\n\n  updateState(opts) {\n    const aggregationFlags = this.getAggregationFlags(opts);\n    if (aggregationFlags) {\n      // project data into grid cells\n      this.getLayerData(aggregationFlags);\n    }\n  }\n\n  getAggregationFlags({oldProps, props, changeFlags}) {\n    let aggregationFlags = null;\n    if (\n      changeFlags.dataChanged ||\n      oldProps.gpuAggregation !== props.gpuAggregation ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition))\n    ) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {dataChanged: true});\n    }\n    if (oldProps.cellSize !== props.cellSize) {\n      aggregationFlags = Object.assign({}, aggregationFlags, {cellSizeChanged: true});\n    }\n    return aggregationFlags;\n  }\n\n  getLayerData(aggregationFlags) {\n    const {data, cellSize: cellSizeMeters, getPosition, gpuAggregation} = this.props;\n    const {\n      countsBuffer,\n      maxCountBuffer,\n      gridSize,\n      gridOrigin,\n      cellSize,\n      boundingBox\n    } = pointToDensityGridData({\n      data,\n      cellSizeMeters,\n      getPosition,\n      gpuAggregation,\n      gpuGridAggregator: this.state.gpuGridAggregator,\n      boundingBox: this.state.boundingBox, // avoid parsing data when it is not changed.\n      aggregationFlags\n    });\n    this.setState({countsBuffer, maxCountBuffer, gridSize, gridOrigin, cellSize, boundingBox});\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer props\n  getSubLayerProps() {\n    const {\n      elevationScale,\n      fp64,\n      extruded,\n      cellSize: cellSizeMeters,\n      coverage,\n      material\n    } = this.props;\n\n    const {countsBuffer, maxCountBuffer, gridSize, gridOrigin, cellSize} = this.state;\n    const minColor = MINCOLOR;\n    const maxColor = MAXCOLOR;\n\n    // return props to the sublayer constructor\n    return super.getSubLayerProps({\n      id: 'grid-cell',\n      data: this.state.layerData,\n\n      countsBuffer,\n      maxCountBuffer,\n      gridSize,\n      gridOrigin,\n      gridOffset: cellSize,\n      numInstances: gridSize[0] * gridSize[1],\n      minColor,\n      maxColor,\n\n      fp64,\n      cellSize: cellSizeMeters,\n      coverage,\n      material,\n      elevationScale,\n      extruded,\n      pickable: false\n    });\n  }\n\n  // for subclassing, override this method to return\n  // customized sub layer class\n  getSubLayerClass() {\n    return GPUGridCellLayer;\n  }\n\n  renderLayers() {\n    const SubLayerClass = this.getSubLayerClass();\n\n    return new SubLayerClass(this.getSubLayerProps());\n  }\n}\n\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;\n"],"file":"gpu-grid-layer.js"}