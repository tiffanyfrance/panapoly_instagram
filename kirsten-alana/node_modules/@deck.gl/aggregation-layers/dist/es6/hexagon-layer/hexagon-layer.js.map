{"version":3,"sources":["../../../src/hexagon-layer/hexagon-layer.js"],"names":["PhongMaterial","CompositeLayer","log","ColumnLayer","BinSorter","defaultColorRange","getQuantizeScale","getLinearScale","pointToHexbin","nop","defaultMaterial","defaultProps","colorDomain","colorRange","getColorValue","type","value","points","length","lowerPercentile","min","max","upperPercentile","onSetColorDomain","elevationDomain","elevationRange","getElevationValue","elevationLowerPercentile","elevationUpperPercentile","elevationScale","onSetElevationDomain","radius","coverage","extruded","hexagonAggregator","getPosition","x","position","fp64","material","HexagonLayer","initializeState","state","hexagons","sortedColorBins","sortedElevationBins","colorValueDomain","elevationValueDomain","colorScaleFunc","elevationScaleFunc","dimensionUpdaters","getDimensionUpdaters","updateState","oldProps","props","changeFlags","dimensionChanges","getDimensionChanges","dataChanged","needsReProjectPoints","getHexagons","forEach","f","apply","getColor","id","triggers","updater","getSortedColorBins","getColorValueDomain","getColorScale","getElevation","getSortedElevationBins","getElevationValueDomain","getElevationScale","updaters","dimensionKey","needUpdate","find","item","some","t","push","viewport","context","hexagonVertices","updateRadiusAngle","setState","getSortedBins","getPickingInfo","info","isPicked","picked","index","object","cell","colorValue","binMap","elevationValue","Object","assign","Boolean","getUpdateTriggers","updateTriggers","step","prop","vertices","angle","Array","isArray","error","vertex0","vertex3","getDistanceScales","pixelsPerMeter","spaceCoord0","projectFlat","spaceCoord3","dx","dy","dxy","Math","sqrt","acos","sign","PI","getValueDomain","warn","getValueRange","_onGetSublayerColor","cv","isColorValueInDomain","color","Number","isFinite","_onGetSublayerElevation","ev","isElevationValueInDomain","renderLayers","transitions","SubLayerClass","getSubLayerClass","diskResolution","bind","getSubLayerProps","data","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {PhongMaterial} from '@luma.gl/core';\nimport {CompositeLayer, log} from '@deck.gl/core';\nimport {ColumnLayer} from '@deck.gl/layers';\n\nimport BinSorter from '../utils/bin-sorter';\nimport {defaultColorRange} from '../utils/color-utils';\nimport {getQuantizeScale, getLinearScale} from '../utils/scale-utils';\n\nimport {pointToHexbin} from './hexagon-aggregator';\n\nfunction nop() {}\n\nconst defaultMaterial = new PhongMaterial();\n\nconst defaultProps = {\n  // color\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {type: 'accessor', value: points => points.length},\n  lowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  upperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  onSetColorDomain: nop,\n\n  // elevation\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {type: 'accessor', value: points => points.length},\n  elevationLowerPercentile: {type: 'number', value: 0, min: 0, max: 100},\n  elevationUpperPercentile: {type: 'number', value: 100, min: 0, max: 100},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  onSetElevationDomain: nop,\n\n  radius: {type: 'number', value: 1000, min: 1},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  extruded: false,\n  hexagonAggregator: pointToHexbin,\n  getPosition: {type: 'accessor', value: x => x.position},\n  fp64: false,\n  // Optional material for 'lighting' shader module\n  material: defaultMaterial\n};\n\nexport default class HexagonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      hexagons: [],\n      sortedColorBins: null,\n      sortedElevationBins: null,\n      colorValueDomain: null,\n      elevationValueDomain: null,\n      colorScaleFunc: nop,\n      elevationScaleFunc: nop,\n      dimensionUpdaters: this.getDimensionUpdaters()\n    };\n  }\n\n  updateState({oldProps, props, changeFlags}) {\n    const dimensionChanges = this.getDimensionChanges(oldProps, props);\n\n    if (changeFlags.dataChanged || this.needsReProjectPoints(oldProps, props)) {\n      // project data into hexagons, and get sortedColorBins\n      this.getHexagons();\n    } else if (dimensionChanges) {\n      dimensionChanges.forEach(f => typeof f === 'function' && f.apply(this));\n    }\n  }\n\n  needsReProjectPoints(oldProps, props) {\n    return (\n      oldProps.radius !== props.radius || oldProps.hexagonAggregator !== props.hexagonAggregator\n    );\n  }\n\n  getDimensionUpdaters() {\n    // dimension updaters are sequential,\n    // if the first one needs to be called, the 2nd and 3rd one will automatically\n    // be called. e.g. if ColorValue needs to be updated, getColorValueDomain and getColorScale\n    // will automatically be called\n    return {\n      getColor: [\n        {\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        },\n        {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }\n      ],\n      getElevation: [\n        {\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        },\n        {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        },\n        {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }\n      ]\n    };\n  }\n\n  getDimensionChanges(oldProps, props) {\n    const {dimensionUpdaters} = this.state;\n    const updaters = [];\n\n    // get dimension to be updated\n    for (const dimensionKey in dimensionUpdaters) {\n      // return the first triggered updater for each dimension\n      const needUpdate = dimensionUpdaters[dimensionKey].find(item =>\n        item.triggers.some(t => oldProps[t] !== props[t])\n      );\n\n      if (needUpdate) {\n        updaters.push(needUpdate.updater);\n      }\n    }\n\n    return updaters.length ? updaters : null;\n  }\n\n  getHexagons() {\n    const {hexagonAggregator} = this.props;\n    const {viewport} = this.context;\n    const {hexagons, hexagonVertices} = hexagonAggregator(this.props, viewport);\n    this.updateRadiusAngle(hexagonVertices);\n    this.setState({hexagons});\n    this.getSortedBins();\n  }\n\n  getPickingInfo({info}) {\n    const {sortedColorBins, sortedElevationBins} = this.state;\n    const isPicked = info.picked && info.index > -1;\n\n    let object = null;\n    if (isPicked) {\n      const cell = this.state.hexagons[info.index];\n\n      const colorValue =\n        sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      const elevationValue =\n        sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n      object = Object.assign(\n        {\n          colorValue,\n          elevationValue\n        },\n        cell\n      );\n    }\n\n    // add bin colorValue and elevationValue to info\n    return Object.assign(info, {\n      picked: Boolean(object),\n      // override object with picked cell\n      object\n    });\n  }\n\n  getUpdateTriggers() {\n    const {dimensionUpdaters} = this.state;\n\n    // merge all dimension triggers\n    const updateTriggers = {};\n\n    for (const dimensionKey in dimensionUpdaters) {\n      updateTriggers[dimensionKey] = {};\n\n      for (const step of dimensionUpdaters[dimensionKey]) {\n        step.triggers.forEach(prop => {\n          updateTriggers[dimensionKey][prop] = this.props[prop];\n        });\n      }\n    }\n\n    return updateTriggers;\n  }\n\n  updateRadiusAngle(vertices) {\n    let {radius} = this.props;\n    let angle = 90;\n\n    if (Array.isArray(vertices)) {\n      if (vertices.length < 6) {\n        log.error('HexagonCellLayer: hexagonVertices needs to be an array of 6 points')();\n      }\n\n      // calculate angle and vertices from hexagonVertices if provided\n      const vertex0 = vertices[0];\n      const vertex3 = vertices[3];\n\n      // transform to space coordinates\n      const {viewport} = this.context;\n      const {pixelsPerMeter} = viewport.getDistanceScales();\n      const spaceCoord0 = this.projectFlat(vertex0);\n      const spaceCoord3 = this.projectFlat(vertex3);\n\n      // distance between two close centroids\n      const dx = spaceCoord0[0] - spaceCoord3[0];\n      const dy = spaceCoord0[1] - spaceCoord3[1];\n      const dxy = Math.sqrt(dx * dx + dy * dy);\n\n      // Calculate angle that the perpendicular hexagon vertex axis is tilted\n      angle = ((Math.acos(dx / dxy) * -Math.sign(dy)) / Math.PI) * 180 + 90;\n      radius = dxy / 2 / pixelsPerMeter[0];\n    }\n\n    this.setState({angle, radius});\n  }\n\n  getValueDomain() {\n    this.getColorValueDomain();\n    this.getElevationValueDomain();\n  }\n\n  getSortedBins() {\n    this.getSortedColorBins();\n    this.getSortedElevationBins();\n  }\n\n  getSortedColorBins() {\n    const {getColorValue} = this.props;\n    const sortedColorBins = new BinSorter(this.state.hexagons || [], getColorValue);\n\n    this.setState({sortedColorBins});\n    this.getColorValueDomain();\n  }\n\n  getSortedElevationBins() {\n    const {getElevationValue} = this.props;\n    const sortedElevationBins = new BinSorter(this.state.hexagons || [], getElevationValue);\n    this.setState({sortedElevationBins});\n    this.getElevationValueDomain();\n  }\n\n  getColorValueDomain() {\n    const {lowerPercentile, upperPercentile, onSetColorDomain} = this.props;\n\n    if (lowerPercentile > upperPercentile) {\n      log.warn('HexagonLayer: lowerPercentile is bigger than upperPercentile')();\n    }\n\n    this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([\n      lowerPercentile,\n      upperPercentile\n    ]);\n\n    if (typeof onSetColorDomain === 'function') {\n      onSetColorDomain(this.state.colorValueDomain);\n    }\n\n    this.getColorScale();\n  }\n\n  getElevationValueDomain() {\n    const {elevationLowerPercentile, elevationUpperPercentile, onSetElevationDomain} = this.props;\n\n    this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([\n      elevationLowerPercentile,\n      elevationUpperPercentile\n    ]);\n\n    if (typeof onSetElevationDomain === 'function') {\n      onSetElevationDomain(this.state.elevationValueDomain);\n    }\n\n    this.getElevationScale();\n  }\n\n  getColorScale() {\n    const {colorRange} = this.props;\n    const colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n\n    this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n  }\n\n  getElevationScale() {\n    const {elevationRange} = this.props;\n    const elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n\n    this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n  }\n\n  _onGetSublayerColor(cell) {\n    const {sortedColorBins, colorScaleFunc, colorValueDomain} = this.state;\n\n    const cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n    const colorDomain = this.props.colorDomain || colorValueDomain;\n\n    const isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n\n    // if cell value is outside domain, set alpha to 0\n    const color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n\n    // add alpha to color if not defined in colorRange\n    color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n\n    return color;\n  }\n\n  _onGetSublayerElevation(cell) {\n    const {sortedElevationBins, elevationScaleFunc, elevationValueDomain} = this.state;\n    const ev =\n      sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n\n    const elevationDomain = this.props.elevationDomain || elevationValueDomain;\n\n    const isElevationValueInDomain =\n      ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n\n    // if cell value is outside domain, set elevation to -1\n    return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n  }\n\n  renderLayers() {\n    const {elevationScale, extruded, coverage, material, fp64, transitions} = this.props;\n    const {angle, radius} = this.state;\n\n    const SubLayerClass = this.getSubLayerClass('hexagon-cell', ColumnLayer);\n\n    return new SubLayerClass(\n      {\n        fp64,\n        radius,\n        diskResolution: 6,\n        elevationScale,\n        angle,\n        extruded,\n        coverage,\n        material,\n\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      },\n      this.getSubLayerProps({\n        id: 'hexagon-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }),\n      {\n        data: this.state.hexagons\n      }\n    );\n  }\n}\n\nHexagonLayer.layerName = 'HexagonLayer';\nHexagonLayer.defaultProps = defaultProps;\n"],"file":"hexagon-layer.js"}