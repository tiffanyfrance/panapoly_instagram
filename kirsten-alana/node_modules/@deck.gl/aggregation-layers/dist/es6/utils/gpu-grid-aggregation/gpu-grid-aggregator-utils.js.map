{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator-utils.js"],"names":["Buffer","Framebuffer","Texture2D","getFloatTexture","gl","opts","width","height","texture","data","format","type","border","mipmaps","parameters","dataFormat","getFramebuffer","id","fb","attachments","getFloatArray","array","size","fillValue","length","Float32Array","fill","updateBuffer","bufferName","result","subData"],"mappings":"AAEA,SAAQA,MAAR,EAAgBC,WAAhB,EAA6BC,SAA7B,QAA6C,eAA7C;AAEA,OAAO,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,IAA7B,EAAmC;AAAA,sBACRA,IADQ,CACjCC,KADiC;AAAA,QACjCA,KADiC,4BACzB,CADyB;AAAA,uBACRD,IADQ,CACtBE,MADsB;AAAA,QACtBA,MADsB,6BACb,CADa;AAExC,QAAMC,OAAO,GAAG,IAAIN,SAAJ,CAAcE,EAAd,EAAkB;AAChCK,IAAAA,IAAI,EAAE,IAD0B;AAEhCC,IAAAA,MAAM,OAF0B;AAGhCC,IAAAA,IAAI,MAH4B;AAIhCC,IAAAA,MAAM,EAAE,CAJwB;AAKhCC,IAAAA,OAAO,EAAE,KALuB;AAMhCC,IAAAA,UAAU,EAAE;AACV,mBADU;AAEV;AAFU,KANoB;AAUhCC,IAAAA,UAAU,MAVsB;AAWhCT,IAAAA,KAXgC;AAYhCC,IAAAA;AAZgC,GAAlB,CAAhB;AAcA,SAAOC,OAAP;AACD;AAED,OAAO,SAASQ,cAAT,CAAwBZ,EAAxB,EAA4BC,IAA5B,EAAkC;AAAA,QAChCY,EADgC,GACHZ,IADG,CAChCY,EADgC;AAAA,uBACHZ,IADG,CAC5BC,KAD4B;AAAA,QAC5BA,KAD4B,6BACpB,CADoB;AAAA,wBACHD,IADG,CACjBE,MADiB;AAAA,QACjBA,MADiB,8BACR,CADQ;AAEvC,QAAMC,OAAO,GAAGH,IAAI,CAACG,OAAL,IAAgBL,eAAe,CAACC,EAAD,EAAKC,IAAL,CAA/C;AACA,QAAMa,EAAE,GAAG,IAAIjB,WAAJ,CAAgBG,EAAhB,EAAoB;AAC7Ba,IAAAA,EAD6B;AAE7BX,IAAAA,KAF6B;AAG7BC,IAAAA,MAH6B;AAI7BY,IAAAA,WAAW,EAAE;AACX,eAAwBX;AADb;AAJgB,GAApB,CAAX;AASA,SAAOU,EAAP;AACD;AAED,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAmD;AAAA,MAAfC,SAAe,uEAAH,CAAG;;AACxD,MAAI,CAACF,KAAD,IAAUA,KAAK,CAACG,MAAN,GAAeF,IAA7B,EAAmC;AACjC,WAAO,IAAIG,YAAJ,CAAiBH,IAAjB,EAAuBI,IAAvB,CAA4BH,SAA5B,CAAP;AACD;;AACD,SAAOF,KAAP;AACD;AAED,OAAO,SAASM,YAAT,OAAsD;AAAA,MAA/BvB,EAA+B,QAA/BA,EAA+B;AAAA,MAA3BwB,UAA2B,QAA3BA,UAA2B;AAAA,MAAfnB,IAAe,QAAfA,IAAe;AAAA,MAAToB,MAAS,QAATA,MAAS;;AAC3D,MAAIA,MAAM,CAACD,UAAD,CAAV,EAAwB;AACtBC,IAAAA,MAAM,CAACD,UAAD,CAAN,CAAmBE,OAAnB,CAA2B;AAACrB,MAAAA;AAAD,KAA3B;AACD,GAFD,MAEO;AACLoB,IAAAA,MAAM,CAACD,UAAD,CAAN,GAAqB,IAAI5B,MAAJ,CAAWI,EAAX,EAAeK,IAAf,CAArB;AACD;AACF","sourcesContent":["// Helper methods used by GPUGridAggregator.\nimport GL from '@luma.gl/constants';\nimport {Buffer, Framebuffer, Texture2D} from '@luma.gl/core';\n\nexport function getFloatTexture(gl, opts) {\n  const {width = 1, height = 1} = opts;\n  const texture = new Texture2D(gl, {\n    data: null,\n    format: GL.RGBA32F,\n    type: GL.FLOAT,\n    border: 0,\n    mipmaps: false,\n    parameters: {\n      [GL.TEXTURE_MAG_FILTER]: GL.NEAREST,\n      [GL.TEXTURE_MIN_FILTER]: GL.NEAREST\n    },\n    dataFormat: GL.RGBA,\n    width,\n    height\n  });\n  return texture;\n}\n\nexport function getFramebuffer(gl, opts) {\n  const {id, width = 1, height = 1} = opts;\n  const texture = opts.texture || getFloatTexture(gl, opts);\n  const fb = new Framebuffer(gl, {\n    id,\n    width,\n    height,\n    attachments: {\n      [GL.COLOR_ATTACHMENT0]: texture\n    }\n  });\n\n  return fb;\n}\n\nexport function getFloatArray(array, size, fillValue = 0) {\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n  return array;\n}\n\nexport function updateBuffer({gl, bufferName, data, result}) {\n  if (result[bufferName]) {\n    result[bufferName].subData({data});\n  } else {\n    result[bufferName] = new Buffer(gl, data);\n  }\n}\n"],"file":"gpu-grid-aggregator-utils.js"}