{"version":3,"sources":["../../../../src/utils/gpu-grid-aggregation/gpu-grid-aggregator.js"],"names":["fp64ifyMatrix4","fp64Utils","GPUGridAggregator","aggregationData","maxData","pixelIndex","log","assert","length","PIXEL_SIZE","index","cellCount","cellWeight","totalCount","maxCellWieght","countsData","size","numCells","cellWeights","Float32Array","cellCounts","Uint32Array","i","sizeIndex","gl","opts","id","shaderCache","state","weights","gridPositions","positionsBuffer","positions64xyLowBuffer","vertexCount","fp64","useGPU","numCol","numRow","windowSize","cellSize","weightAttributes","textures","meanTextures","buffers","framebuffers","maxMinFramebuffers","minFramebuffers","maxFramebuffers","equations","_hasGPUSupport","FEATURES","BLEND_EQUATION_MINMAX","COLOR_ATTACHMENT_RGBA32F","TEXTURE_FLOAT","gridAggregationModel","allAggregationModel","meanTransform","position64Buffer","delete","deleteResources","aggregationParams","getAggregationParams","updateGridSize","runAggregationOnGPU","warn","runAggregationOnCPU","obj","name","Object","assign","DEFAULT_RUN_PARAMS","gridTransformMatrix","viewport","projectPoints","changeFlags","DEFAULT_CHANGE_FLAGS","cellSizeChanged","setState","validateProps","viewportMatrix","IDENTITY_MATRIX","normalizeWeightParams","result","DEFAULT_WEIGHT_PARAMS","updateObject","dataChanged","viewportChanged","width","height","Math","ceil","positions","projectPositions","results","cellIndex","posIndex","values","operation","cellElementIndex","weightComponent","WEIGHT_SIZE","AGGREGATION_OPERATION","SUM","MEAN","MIN","min","MAX","max","validCellIndices","forEach","needMin","needMax","minData","maxMinData","calculateMinMax","calculateMean","combineMaxMin","count","ELEMENTCOUNT","weight","aggregationSize","fill","Infinity","initCPUResults","gridTransformRequired","shouldTransformToGrid","pos","posCount","Float64Array","Set","x","y","project","colId","floor","rowId","add","calculateAggregationData","calculateMeanMaxMinData","updateAggregationBuffers","createBufferObjects","bufferName","data","aggregationTexture","aggregationBuffer","target","sourceType","maxMinBuffer","minBuffer","maxBuffer","Model","vs","AGGREGATE_TO_GRID_VS_FP64","AGGREGATE_TO_GRID_VS","fs","AGGREGATE_TO_GRID_FS","modules","drawMode","AGGREGATE_ALL_VS_FP64","AGGREGATE_ALL_FS","isInstanced","instanceCount","attributes","position","Buffer","accessor","update","Transform","TRANSFORM_MEAN_VS","_targetTextureVarying","uProjectionMatrixFP64","gridSize","parameters","blend","depthTest","blendFunc","moduleSettings","uniforms","uProjectionMatrix","renderToWeightsTexture","renderToMaxMinTexture","blendEquation","MAX_MIN_BLEND_EQUATION","minOrMaxFb","clearParams","clearColor","MAX_32_BIT_FLOAT","MIN_BLEND_EQUATION","MAX_BLEND_EQUATION","bind","clear","draw","uSampler","texture","unbind","transformOptions","_sourceTextures","aggregationValues","_targetTexture","elementCount","getMeanTransform","run","attach","updateModels","setupFramebuffers","renderAggregateData","getAggregateData","framebufferSize","resize","EQUATION_MAP","getAggregationModel","getAllAggregationModel","Array","isArray","constructor","typedArray","setData","positions64xyLow","aggregationModelAttributes","createPos64xyLow","setupModels","setupWeightAttributes","setVertexCount","setAttributes","setInstanceCount"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport {\n  Buffer,\n  Model,\n  Transform,\n  FEATURES,\n  hasFeatures,\n  isWebGL2,\n  readPixelsToBuffer,\n  fp64 as fp64Utils,\n  withParameters\n} from '@luma.gl/core';\nimport {log} from '@deck.gl/core';\nimport {worldToPixels} from 'viewport-mercator-project';\nconst {fp64ifyMatrix4} = fp64Utils;\n\nimport {\n  AGGREGATION_OPERATION,\n  DEFAULT_CHANGE_FLAGS,\n  DEFAULT_RUN_PARAMS,\n  MAX_32_BIT_FLOAT,\n  MIN_BLEND_EQUATION,\n  MAX_BLEND_EQUATION,\n  MAX_MIN_BLEND_EQUATION,\n  EQUATION_MAP,\n  ELEMENTCOUNT,\n  DEFAULT_WEIGHT_PARAMS,\n  IDENTITY_MATRIX,\n  PIXEL_SIZE,\n  WEIGHT_SIZE\n} from './gpu-grid-aggregator-constants';\n\nimport AGGREGATE_TO_GRID_VS from './aggregate-to-grid-vs.glsl';\nimport AGGREGATE_TO_GRID_VS_FP64 from './aggregate-to-grid-vs-64.glsl';\nimport AGGREGATE_TO_GRID_FS from './aggregate-to-grid-fs.glsl';\nimport AGGREGATE_ALL_VS_FP64 from './aggregate-all-vs-64.glsl';\nimport AGGREGATE_ALL_FS from './aggregate-all-fs.glsl';\nimport TRANSFORM_MEAN_VS from './transform-mean-vs.glsl';\nimport {\n  getFloatTexture,\n  getFramebuffer,\n  getFloatArray,\n  updateBuffer\n} from './gpu-grid-aggregator-utils.js';\n\nexport default class GPUGridAggregator {\n  // Decode and return aggregation data of given pixel.\n  static getAggregationData({aggregationData, maxData, pixelIndex}) {\n    log.assert(aggregationData.length >= (pixelIndex + 1) * PIXEL_SIZE);\n    log.assert(maxData.length === PIXEL_SIZE);\n    const index = pixelIndex * PIXEL_SIZE;\n    const cellCount = aggregationData[index + 3];\n    const cellWeight = aggregationData[index];\n    const totalCount = maxData[3];\n    const maxCellWieght = maxData[0];\n    return {\n      cellCount,\n      cellWeight,\n      totalCount,\n      maxCellWieght\n    };\n  }\n\n  // Decodes and retuns counts and weights of all cells\n  static getCellData({countsData, size = 1}) {\n    const numCells = countsData.length / 4;\n    const cellWeights = new Float32Array(numCells * size);\n    const cellCounts = new Uint32Array(numCells);\n    for (let i = 0; i < numCells; i++) {\n      // weights in RGB channels\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];\n      }\n      // count in Alpha channel\n      cellCounts[i] = countsData[i * 4 + 3];\n    }\n    return {cellCounts, cellWeights};\n  }\n\n  // DEBUG ONLY\n  // static logData({aggregationBuffer, minBuffer, maxBuffer, maxMinBuffer}) {\n  //   const agrData = aggregationBuffer.getData();\n  //   for (let index = 0; index < agrData.length; index += 4) {\n  //     if (agrData[index + 3] > 0) {\n  //       console.log(\n  //         `index: ${index} weights: ${agrData[index]} ${agrData[index + 1]} ${\n  //           agrData[index + 2]\n  //         } count: ${agrData[index + 3]}`\n  //       );\n  //     }\n  //   }\n  // }\n\n  constructor(gl, opts = {}) {\n    this.id = opts.id || 'gpu-grid-aggregator';\n    this.shaderCache = opts.shaderCache || null;\n    this.gl = gl;\n    this.state = {\n      // cache weights and position data to process when data is not changed\n      weights: null,\n      gridPositions: null,\n      positionsBuffer: null,\n      positions64xyLowBuffer: null,\n      vertexCount: 0,\n\n      // flags/variables that affect the aggregation\n      fp64: null,\n      useGPU: null,\n      numCol: 0,\n      numRow: 0,\n      windowSize: null,\n      cellSize: null,\n\n      // per weight GPU resources\n      weightAttributes: {},\n      textures: {},\n      meanTextures: {},\n      buffers: {},\n      framebuffers: {},\n      maxMinFramebuffers: {},\n      minFramebuffers: {},\n      maxFramebuffers: {},\n      equations: {}\n    };\n    this._hasGPUSupport =\n      isWebGL2(gl) && // gl_InstanceID usage in min/max calculation shaders\n      hasFeatures(\n        this.gl,\n        FEATURES.BLEND_EQUATION_MINMAX, // set min/max blend modes\n        FEATURES.COLOR_ATTACHMENT_RGBA32F, // render to float texture\n        FEATURES.TEXTURE_FLOAT // sample from a float texture\n      );\n  }\n\n  // Delete owned resources.\n  /* eslint no-unused-expressions: [\"error\", { \"allowShortCircuit\": true }] */\n  delete() {\n    const {gridAggregationModel, allAggregationModel, meanTransform} = this;\n    const {\n      positionsBuffer,\n      position64Buffer,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures\n    } = this.state;\n\n    gridAggregationModel && gridAggregationModel.delete();\n    allAggregationModel && allAggregationModel.delete();\n    meanTransform && meanTransform.delete();\n\n    positionsBuffer && positionsBuffer.delete();\n    position64Buffer && position64Buffer.delete();\n    this.deleteResources(framebuffers);\n    this.deleteResources(maxMinFramebuffers);\n    this.deleteResources(minFramebuffers);\n    this.deleteResources(maxFramebuffers);\n    this.deleteResources(meanTextures);\n  }\n\n  // Perform aggregation and retun the results\n  run(opts = {}) {\n    const aggregationParams = this.getAggregationParams(opts);\n    this.updateGridSize(aggregationParams);\n    const {useGPU} = aggregationParams;\n    if (this._hasGPUSupport && useGPU) {\n      return this.runAggregationOnGPU(aggregationParams);\n    }\n    if (useGPU) {\n      log.warn('ScreenGridAggregator: GPU Aggregation not supported, falling back to CPU')();\n    }\n    return this.runAggregationOnCPU(aggregationParams);\n  }\n\n  // PRIVATE\n\n  // Common methods\n\n  deleteResources(obj) {\n    for (const name in obj) {\n      obj[name].delete();\n    }\n  }\n\n  getAggregationParams(opts) {\n    const aggregationParams = Object.assign({}, DEFAULT_RUN_PARAMS, opts);\n    const {\n      useGPU,\n      gridTransformMatrix,\n      viewport,\n      weights,\n      projectPoints,\n      cellSize\n    } = aggregationParams;\n    if (this.state.useGPU !== useGPU) {\n      // CPU/GPU resources need to reinitialized, force set the change flags.\n      aggregationParams.changeFlags = Object.assign(\n        {},\n        aggregationParams.changeFlags,\n        DEFAULT_CHANGE_FLAGS\n      );\n    }\n    if (\n      cellSize &&\n      (!this.state.cellSize ||\n        this.state.cellSize[0] !== cellSize[0] ||\n        this.state.cellSize[1] !== cellSize[1])\n    ) {\n      aggregationParams.changeFlags.cellSizeChanged = true;\n      // For GridLayer aggregation, cellSize is calculated by parsing all input data as it depends\n      // on bounding box, cache cellSize\n      this.setState({cellSize});\n    }\n\n    this.validateProps(aggregationParams, opts);\n\n    this.setState({useGPU});\n    aggregationParams.gridTransformMatrix =\n      (projectPoints ? viewport.viewportMatrix : gridTransformMatrix) || IDENTITY_MATRIX;\n\n    if (weights) {\n      aggregationParams.weights = this.normalizeWeightParams(weights);\n\n      // cache weights to process when only cellSize or viewport is changed.\n      // position data is cached in Buffers for GPU case and in 'gridPositions' for CPU case.\n      this.setState({weights: aggregationParams.weights});\n    }\n    return aggregationParams;\n  }\n\n  normalizeWeightParams(weights) {\n    const result = {};\n    for (const id in weights) {\n      result[id] = Object.assign({}, DEFAULT_WEIGHT_PARAMS, weights[id]);\n    }\n    return result;\n  }\n\n  // Update priveate state\n  setState(updateObject) {\n    Object.assign(this.state, updateObject);\n  }\n\n  shouldTransformToGrid(opts) {\n    const {projectPoints, changeFlags} = opts;\n    if (\n      !this.state.gridPositions ||\n      changeFlags.dataChanged ||\n      (projectPoints && changeFlags.viewportChanged) // world space aggregation (GridLayer) doesn't change when viewport is changed.\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  updateGridSize(opts) {\n    const {viewport, cellSize} = opts;\n    const width = opts.width || viewport.width;\n    const height = opts.height || viewport.height;\n    const numCol = Math.ceil(width / cellSize[0]);\n    const numRow = Math.ceil(height / cellSize[1]);\n    this.setState({numCol, numRow, windowSize: [width, height]});\n  }\n\n  /* eslint-disable complexity */\n  // validate and log.assert\n  validateProps(aggregationParams, opts) {\n    const {changeFlags, projectPoints, gridTransformMatrix} = aggregationParams;\n    log.assert(\n      changeFlags.dataChanged || changeFlags.viewportChanged || changeFlags.cellSizeChanged\n    );\n\n    // log.assert for required options\n    log.assert(\n      !changeFlags.dataChanged ||\n        (opts.positions &&\n          opts.weights &&\n          (!opts.projectPositions || opts.viewport) &&\n          opts.cellSize)\n    );\n    log.assert(!changeFlags.cellSizeChanged || opts.cellSize);\n\n    // viewport need only when performing screen space aggregation (projectPoints is true)\n    log.assert(!(changeFlags.viewportChanged && projectPoints) || opts.viewport);\n\n    if (projectPoints && gridTransformMatrix) {\n      log.warn('projectPoints is true, gridTransformMatrix is ignored')();\n    }\n  }\n  /* eslint-enable complexity */\n\n  // CPU Aggregation methods\n\n  // aggregated weight value to a cell\n  /* eslint-disable max-depth */\n  calculateAggregationData(opts) {\n    const {weights, results, cellIndex, posIndex} = opts;\n    for (const id in weights) {\n      const {values, size, operation} = weights[id];\n      const {aggregationData} = results[id];\n\n      // Fill RGB with weights\n      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {\n        const cellElementIndex = cellIndex + sizeIndex;\n        const weightComponent = values[posIndex * WEIGHT_SIZE + sizeIndex];\n\n        if (aggregationData[cellIndex + 3] === 0) {\n          // if the cell is getting update the first time, set the value directly.\n          aggregationData[cellElementIndex] = weightComponent;\n        } else {\n          switch (operation) {\n            case AGGREGATION_OPERATION.SUM:\n            case AGGREGATION_OPERATION.MEAN:\n              aggregationData[cellElementIndex] += weightComponent;\n              // MEAN value is calculated during 'calculateMeanMaxMinData'\n              break;\n            case AGGREGATION_OPERATION.MIN:\n              aggregationData[cellElementIndex] = Math.min(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            case AGGREGATION_OPERATION.MAX:\n              aggregationData[cellElementIndex] = Math.max(\n                aggregationData[cellElementIndex],\n                weightComponent\n              );\n              break;\n            default:\n              // Not a valid operation enum.\n              log.assert(false);\n              break;\n          }\n        }\n      }\n\n      // Track the count per grid-cell\n      aggregationData[cellIndex + 3]++;\n    }\n  }\n\n  /* eslint-disable max-depth, complexity */\n  calculateMeanMaxMinData(opts) {\n    const {validCellIndices, results, weights} = opts;\n\n    // collect max/min values\n    validCellIndices.forEach(cellIndex => {\n      for (const id in results) {\n        const {size, needMin, needMax, operation} = weights[id];\n        const {aggregationData, minData, maxData, maxMinData} = results[id];\n        const calculateMinMax = needMin || needMax;\n        const calculateMean = operation === AGGREGATION_OPERATION.MEAN;\n        const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n        const count = aggregationData[cellIndex + ELEMENTCOUNT - 1];\n        for (\n          let sizeIndex = 0;\n          sizeIndex < size && (calculateMinMax || calculateMean);\n          sizeIndex++\n        ) {\n          const cellElementIndex = cellIndex + sizeIndex;\n          let weight = aggregationData[cellElementIndex];\n          if (calculateMean) {\n            aggregationData[cellElementIndex] /= count;\n            weight = aggregationData[cellElementIndex];\n          }\n          if (combineMaxMin) {\n            // use RGB for max values for 3 weights.\n            maxMinData[sizeIndex] = Math.max(maxMinData[sizeIndex], weight);\n          } else {\n            if (needMin) {\n              minData[sizeIndex] = Math.min(minData[sizeIndex], weight);\n            }\n            if (needMax) {\n              maxData[sizeIndex] = Math.max(maxData[sizeIndex], weight);\n            }\n          }\n        }\n        // update total aggregation values.\n        if (combineMaxMin) {\n          // Use Alpha channel to store total min value for weight#0\n          maxMinData[ELEMENTCOUNT - 1] = Math.min(\n            maxMinData[ELEMENTCOUNT - 1],\n            aggregationData[cellIndex + 0]\n          );\n        } else {\n          // Use Alpha channel to store total counts.\n          if (needMin) {\n            minData[ELEMENTCOUNT - 1] += count;\n          }\n          if (needMax) {\n            maxData[ELEMENTCOUNT - 1] += count;\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable max-depth */\n\n  initCPUResults(opts) {\n    const weights = opts.weights || this.state.weights;\n    const {numCol, numRow} = this.state;\n    const results = {};\n    // setup results object\n    for (const id in weights) {\n      let {aggregationData, minData, maxData, maxMinData} = weights[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n\n      const aggregationSize = numCol * numRow * ELEMENTCOUNT;\n      aggregationData = getFloatArray(aggregationData, aggregationSize);\n      if (combineMaxMin) {\n        maxMinData = getFloatArray(maxMinData, ELEMENTCOUNT);\n        // RGB for max value\n        maxMinData.fill(-Infinity, 0, ELEMENTCOUNT - 1);\n        // Alpha for min value\n        maxMinData[ELEMENTCOUNT - 1] = Infinity;\n      } else {\n        // RGB for min/max values\n        // Alpha for total count\n        if (needMin) {\n          minData = getFloatArray(minData, ELEMENTCOUNT, Infinity);\n          minData[ELEMENTCOUNT - 1] = 0;\n        }\n        if (needMax) {\n          maxData = getFloatArray(maxData, ELEMENTCOUNT, -Infinity);\n          maxData[ELEMENTCOUNT - 1] = 0;\n        }\n      }\n      results[id] = Object.assign({}, weights[id], {\n        aggregationData,\n        minData,\n        maxData,\n        maxMinData\n      });\n    }\n    return results;\n  }\n\n  /* eslint-disable max-statements */\n  runAggregationOnCPU(opts) {\n    const {positions, cellSize, gridTransformMatrix, viewport, projectPoints} = opts;\n    let {weights} = opts;\n    const {numCol, numRow} = this.state;\n    const results = this.initCPUResults(opts);\n    // screen space or world space projection required\n    const gridTransformRequired = this.shouldTransformToGrid(opts);\n    let gridPositions;\n    const pos = [0, 0, 0];\n\n    log.assert(gridTransformRequired || opts.changeFlags.cellSizeChanged);\n\n    let posCount;\n    if (gridTransformRequired) {\n      posCount = positions.length / 2;\n      gridPositions = new Float64Array(positions.length);\n      this.setState({gridPositions});\n    } else {\n      gridPositions = this.state.gridPositions;\n      weights = this.state.weights;\n      posCount = gridPositions.length / 2;\n    }\n\n    const validCellIndices = new Set();\n    for (let posIndex = 0; posIndex < posCount; posIndex++) {\n      let x;\n      let y;\n      if (gridTransformRequired) {\n        pos[0] = positions[posIndex * 2];\n        pos[1] = positions[posIndex * 2 + 1];\n        if (projectPoints) {\n          [x, y] = viewport.project(pos);\n        } else {\n          [x, y] = worldToPixels(pos, gridTransformMatrix);\n        }\n        gridPositions[posIndex * 2] = x;\n        gridPositions[posIndex * 2 + 1] = y;\n      } else {\n        x = gridPositions[posIndex * 2];\n        y = gridPositions[posIndex * 2 + 1];\n      }\n\n      const colId = Math.floor(x / cellSize[0]);\n      const rowId = Math.floor(y / cellSize[1]);\n      if (colId >= 0 && colId < numCol && rowId >= 0 && rowId < numRow) {\n        const cellIndex = (colId + rowId * numCol) * ELEMENTCOUNT;\n        validCellIndices.add(cellIndex);\n        this.calculateAggregationData({weights, results, cellIndex, posIndex});\n      }\n    }\n\n    this.calculateMeanMaxMinData({validCellIndices, results, weights});\n\n    // Update buffer objects.\n    this.updateAggregationBuffers(opts, results);\n    return results;\n  }\n  /* eslint-disable max-statements */\n\n  updateAggregationBuffers(opts, results) {\n    if (!opts.createBufferObjects) {\n      return;\n    }\n    const weights = opts.weights || this.state.weights;\n    for (const id in results) {\n      const {aggregationData, minData, maxData, maxMinData} = results[id];\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      updateBuffer({\n        gl: this.gl,\n        bufferName: 'aggregationBuffer',\n        data: aggregationData,\n        result: results[id]\n      });\n      if (combineMaxMin) {\n        updateBuffer({\n          gl: this.gl,\n          bufferName: 'maxMinBuffer',\n          data: maxMinData,\n          result: results[id]\n        });\n      } else {\n        if (needMin) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'minBuffer',\n            data: minData,\n            result: results[id]\n          });\n        }\n        if (needMax) {\n          updateBuffer({\n            gl: this.gl,\n            bufferName: 'maxBuffer',\n            data: maxData,\n            result: results[id]\n          });\n        }\n      }\n    }\n  }\n\n  // GPU Aggregation methods\n\n  getAggregateData(opts) {\n    const results = {};\n    const {\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    for (const id in weights) {\n      results[id] = {};\n      const {needMin, needMax, combineMaxMin} = weights[id];\n      results[id].aggregationTexture = textures[id];\n      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {\n        target: weights[id].aggregationBuffer, // update if a buffer is provided\n        sourceType: GL.FLOAT\n      });\n      if (needMin && needMax && combineMaxMin) {\n        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {\n          target: weights[id].maxMinBuffer, // update if a buffer is provided\n          sourceType: GL.FLOAT\n        });\n      } else {\n        if (needMin) {\n          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {\n            target: weights[id].minBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n        if (needMax) {\n          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {\n            target: weights[id].maxBuffer, // update if a buffer is provided\n            sourceType: GL.FLOAT\n          });\n        }\n      }\n    }\n    return results;\n  }\n\n  getAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'Gird-Aggregation-Model',\n      vs: fp64 ? AGGREGATE_TO_GRID_VS_FP64 : AGGREGATE_TO_GRID_VS,\n      fs: AGGREGATE_TO_GRID_FS,\n      modules: fp64 ? ['fp64', 'project64'] : ['project32'],\n      shaderCache,\n      vertexCount: 0,\n      drawMode: GL.POINTS\n    });\n  }\n\n  getAllAggregationModel(fp64 = false) {\n    const {gl, shaderCache} = this;\n    return new Model(gl, {\n      id: 'All-Aggregation-Model',\n      vs: AGGREGATE_ALL_VS_FP64,\n      fs: AGGREGATE_ALL_FS,\n      modules: ['fp64'],\n      shaderCache,\n      vertexCount: 1,\n      drawMode: GL.POINTS,\n      isInstanced: true,\n      instanceCount: 0,\n      attributes: {\n        position: new Buffer(gl, {\n          data: new Float32Array([0, 0]),\n          accessor: {\n            size: 2\n          }\n        })\n      }\n    });\n  }\n\n  getMeanTransform(opts) {\n    if (this.meanTransform) {\n      this.meanTransform.update(opts);\n    } else {\n      this.meanTransform = new Transform(\n        this.gl,\n        Object.assign(\n          {},\n          {\n            vs: TRANSFORM_MEAN_VS,\n            _targetTextureVarying: 'meanValues'\n          },\n          opts\n        )\n      );\n    }\n    return this.meanTransform;\n  }\n\n  renderAggregateData(opts) {\n    const {cellSize, viewport, gridTransformMatrix, projectPoints} = opts;\n    const {\n      numCol,\n      numRow,\n      windowSize,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      weights\n    } = this.state;\n\n    const uProjectionMatrixFP64 = fp64ifyMatrix4(gridTransformMatrix);\n    const gridSize = [numCol, numRow];\n    const parameters = {\n      blend: true,\n      depthTest: false,\n      blendFunc: [GL.ONE, GL.ONE]\n    };\n    const moduleSettings = {viewport};\n    const uniforms = {\n      windowSize,\n      cellSize,\n      gridSize,\n      uProjectionMatrix: gridTransformMatrix,\n      uProjectionMatrixFP64,\n      projectPoints\n    };\n\n    for (const id in weights) {\n      const {needMin, needMax} = weights[id];\n      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;\n      this.renderToWeightsTexture({id, parameters, moduleSettings, uniforms, gridSize});\n      if (combineMaxMin) {\n        this.renderToMaxMinTexture({\n          id,\n          parameters: Object.assign({}, parameters, {blendEquation: MAX_MIN_BLEND_EQUATION}),\n          gridSize,\n          minOrMaxFb: maxMinFramebuffers[id],\n          clearParams: {clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]},\n          combineMaxMin\n        });\n      } else {\n        if (needMin) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MIN_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: minFramebuffers[id],\n            clearParams: {clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]},\n            combineMaxMin\n          });\n        }\n        if (needMax) {\n          this.renderToMaxMinTexture({\n            id,\n            parameters: Object.assign({}, parameters, {blendEquation: MAX_BLEND_EQUATION}),\n            gridSize,\n            minOrMaxFb: maxFramebuffers[id],\n            combineMaxMin\n          });\n        }\n      }\n    }\n  }\n\n  // render all aggregated grid-cells to generate Min, Max or MaxMin data texture\n  renderToMaxMinTexture(opts) {\n    const {id, parameters, gridSize, minOrMaxFb, combineMaxMin, clearParams = {}} = opts;\n    const {framebuffers} = this.state;\n    const {gl, allAggregationModel} = this;\n\n    minOrMaxFb.bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    withParameters(gl, clearParams, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n    allAggregationModel.draw({\n      parameters,\n      uniforms: {\n        uSampler: framebuffers[id].texture,\n        gridSize,\n        combineMaxMin\n      }\n    });\n    minOrMaxFb.unbind();\n  }\n\n  // render all data points to aggregate weights\n  renderToWeightsTexture(opts) {\n    const {id, parameters, moduleSettings, uniforms, gridSize} = opts;\n    const {framebuffers, equations, weightAttributes, weights} = this.state;\n    const {gl, gridAggregationModel} = this;\n    const {operation} = weights[id];\n\n    framebuffers[id].bind();\n    gl.viewport(0, 0, gridSize[0], gridSize[1]);\n    const clearColor =\n      operation === AGGREGATION_OPERATION.MIN\n        ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]\n        : [0, 0, 0, 0];\n    withParameters(gl, {clearColor}, () => {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    });\n\n    const attributes = {weights: weightAttributes[id]};\n    gridAggregationModel.draw({\n      parameters: Object.assign({}, parameters, {blendEquation: equations[id]}),\n      moduleSettings,\n      uniforms,\n      attributes\n    });\n    framebuffers[id].unbind();\n\n    if (operation === AGGREGATION_OPERATION.MEAN) {\n      const {meanTextures, textures} = this.state;\n      const transformOptions = {\n        _sourceTextures: {aggregationValues: meanTextures[id]}, // contains aggregated data\n        _targetTexture: textures[id], // store mean values,\n        elementCount: textures[id].width * textures[id].height\n      };\n      const meanTransform = this.getMeanTransform(transformOptions);\n      meanTransform.run({\n        parameters: {\n          blend: false,\n          depthTest: false\n        }\n      });\n\n      // update framebuffer with mean results so readPixelsToBuffer returns mean values\n      framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: textures[id]});\n    }\n  }\n\n  runAggregationOnGPU(opts) {\n    this.updateModels(opts);\n    this.setupFramebuffers(opts);\n    this.renderAggregateData(opts);\n    return this.getAggregateData(opts);\n  }\n\n  // set up framebuffer for each weight\n  /* eslint-disable complexity, max-depth */\n  setupFramebuffers(opts) {\n    const {\n      numCol,\n      numRow,\n      textures,\n      framebuffers,\n      maxMinFramebuffers,\n      minFramebuffers,\n      maxFramebuffers,\n      meanTextures,\n      equations,\n      weights\n    } = this.state;\n    const framebufferSize = {width: numCol, height: numRow};\n    for (const id in weights) {\n      const {needMin, needMax, combineMaxMin, operation} = weights[id];\n      textures[id] =\n        weights[id].aggregationTexture ||\n        textures[id] ||\n        getFloatTexture(this.gl, {id: `${id}-texture`, width: numCol, height: numRow});\n      textures[id].resize(framebufferSize);\n      let texture = textures[id];\n      if (operation === AGGREGATION_OPERATION.MEAN) {\n        // For MEAN, we first aggregatet into a temp texture\n        meanTextures[id] =\n          meanTextures[id] ||\n          getFloatTexture(this.gl, {id: `${id}-mean-texture`, width: numCol, height: numRow});\n        meanTextures[id].resize(framebufferSize);\n        texture = meanTextures[id];\n      }\n      if (framebuffers[id]) {\n        framebuffers[id].attach({[GL.COLOR_ATTACHMENT0]: texture});\n      } else {\n        framebuffers[id] = getFramebuffer(this.gl, {\n          id: `${id}-fb`,\n          width: numCol,\n          height: numRow,\n          texture\n        });\n      }\n      framebuffers[id].resize(framebufferSize);\n      equations[id] = EQUATION_MAP[operation];\n      // For min/max framebuffers will use default size 1X1\n      if (needMin || needMax) {\n        if (needMin && needMax && combineMaxMin) {\n          maxMinFramebuffers[id] =\n            maxMinFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxMinFb`});\n        } else {\n          if (needMin) {\n            minFramebuffers[id] =\n              minFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-minFb`});\n          }\n          if (needMax) {\n            maxFramebuffers[id] =\n              maxFramebuffers[id] || getFramebuffer(this.gl, {id: `${id}-maxFb`});\n          }\n        }\n      }\n    }\n  }\n  /* eslint-enable complexity, max-depth */\n\n  setupModels(fp64 = false) {\n    if (this.gridAggregationModel) {\n      this.gridAggregationModel.delete();\n    }\n    this.gridAggregationModel = this.getAggregationModel(fp64);\n    if (this.allAggregationModel) {\n      this.allAggregationModel.delete();\n    }\n    this.allAggregationModel = this.getAllAggregationModel(fp64);\n  }\n\n  // set up buffers for all weights\n  setupWeightAttributes(opts) {\n    const {weightAttributes, vertexCount, weights} = this.state;\n    for (const id in weights) {\n      const {values} = weights[id];\n      // values can be Array, Float32Array or Buffer\n      if (Array.isArray(values) || values.constructor === Float32Array) {\n        log.assert(values.length / 3 === vertexCount);\n        const typedArray = Array.isArray(values) ? new Float32Array(values) : values;\n        if (weightAttributes[id] instanceof Buffer) {\n          weightAttributes[id].setData(typedArray);\n        } else {\n          weightAttributes[id] = new Buffer(this.gl, typedArray);\n        }\n      } else {\n        // log.assert((values instanceof Attribute) || (values instanceof Buffer));\n        log.assert(values instanceof Buffer);\n        weightAttributes[id] = values;\n      }\n    }\n  }\n\n  /* eslint-disable max-statements */\n  updateModels(opts) {\n    const {gl} = this;\n    const {positions, positions64xyLow, changeFlags} = opts;\n    const {numCol, numRow} = this.state;\n\n    let {positionsBuffer, positions64xyLowBuffer} = this.state;\n\n    const aggregationModelAttributes = {};\n\n    let createPos64xyLow = false;\n    if (opts.fp64 !== this.state.fp64) {\n      this.setupModels(opts.fp64);\n      this.setState({fp64: opts.fp64});\n      if (opts.fp64) {\n        createPos64xyLow = true;\n      }\n    }\n\n    if (changeFlags.dataChanged || !positionsBuffer) {\n      if (positionsBuffer) {\n        positionsBuffer.delete();\n      }\n      const vertexCount = positions.length / 2;\n      // positionsBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions)});\n      positionsBuffer = new Buffer(gl, new Float32Array(positions));\n      createPos64xyLow = opts.fp64;\n      Object.assign(aggregationModelAttributes, {\n        positions: positionsBuffer\n      });\n      this.setState({positionsBuffer, vertexCount});\n\n      this.setupWeightAttributes(opts);\n      this.gridAggregationModel.setVertexCount(vertexCount);\n    }\n\n    if (createPos64xyLow) {\n      log.assert(positions64xyLow);\n      if (positions64xyLowBuffer) {\n        positions64xyLowBuffer.delete();\n      }\n      positions64xyLowBuffer = new Buffer(gl, {size: 2, data: new Float32Array(positions64xyLow)});\n      Object.assign(aggregationModelAttributes, {\n        positions64xyLow: positions64xyLowBuffer\n      });\n      this.setState({positions64xyLowBuffer});\n    }\n\n    this.gridAggregationModel.setAttributes(aggregationModelAttributes);\n\n    if (changeFlags.cellSizeChanged || changeFlags.viewportChanged) {\n      this.allAggregationModel.setInstanceCount(numCol * numRow);\n    }\n  }\n  /* eslint-enable max-statements */\n}\n"],"file":"gpu-grid-aggregator.js"}