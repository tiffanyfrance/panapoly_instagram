{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["log","DrawLayersPass","PickLayersPass","getPixelRatio","LOG_PRIORITY_DRAW","DeckRenderer","constructor","gl","pixelRatio","layerFilter","drawPickingColors","drawLayersPass","pickLayersPass","renderCount","_needsRedraw","setProps","props","useDevicePixels","renderLayers","layers","viewports","activateViewport","views","redrawReason","clearCanvas","effects","pass","stats","layerPass","effectProps","prepareEffects","renderStats","render","onViewportActive","priority","forEach","status","logRenderStats","needsRedraw","opts","clearRedrawFlags","redraw","effect","Object","assign","prepare","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","message","get","add"],"mappings":"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","sourcesContent":["import log from '../utils/log';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport getPixelRatio from '../utils/get-pixel-ratio';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.pixelRatio = null;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n  }\n\n  setProps(props) {\n    if ('useDevicePixels' in props) {\n      this.pixelRatio = getPixelRatio(props.useDevicePixels);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n\n    const {pixelRatio, layerFilter} = this;\n\n    this.drawLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n    this.pickLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n  }\n\n  renderLayers({\n    layers,\n    viewports,\n    activateViewport,\n    views,\n    redrawReason = 'unknown reason',\n    clearCanvas = true,\n    effects = [],\n    pass,\n    stats\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const effectProps = this.prepareEffects(effects);\n    const renderStats = layerPass.render({\n      layers,\n      viewports,\n      views,\n      onViewportActive: activateViewport,\n      redrawReason,\n      clearCanvas,\n      effects,\n      effectProps\n    });\n    this.renderCount++;\n\n    if (log.priority >= LOG_PRIORITY_DRAW) {\n      renderStats.forEach(status => {\n        this.logRenderStats({status, pass, redrawReason, stats});\n      });\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Private\n  prepareEffects(effects) {\n    const effectProps = {};\n\n    for (const effect of effects) {\n      Object.assign(effectProps, effect.prepare());\n    }\n\n    return effectProps;\n  }\n\n  logRenderStats({renderStats, pass, redrawReason, stats}) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${this.renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.get('Redraw Layers').add(visibleCount);\n    }\n  }\n}\n"],"file":"deck-renderer.js"}