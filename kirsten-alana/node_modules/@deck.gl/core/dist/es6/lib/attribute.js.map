{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["Buffer","assert","createIterable","log","BaseAttribute","DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","allocedInstances","Attribute","constructor","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","seal","_validateAttributeUpdaters","layout","clearChangedFlags","getInstanceCount","length","getUpdateTriggers","concat","getAccessor","getShaderAttributes","supportsTransition","getTransitionSetting","settings","find","a","Number","isFinite","duration","setNeedsUpdate","reason","setNeedsRedraw","allocate","numInstances","state","instanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","updateBuffer","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","_updateShaderAttributes","setGenericValue","undefined","_normalizeValue","hasChanged","_areValuesEqual","setExternalBuffer","externalBuffer","ArrayBuffer","isView","Error","auto","warn","name","out","start","value1","value2","i","accessorFunc","iterable","objectInfo","object","index","objectValue","hasUpdater","valid","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign({}, shaderAttribute, {\n            id: shaderAttributeName,\n            // Luma fields\n            constant: shaderAttribute.constant || false,\n            isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n            size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n            value: shaderAttribute.value || null,\n            divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n            buffer: this.getBuffer(),\n            noAlloc: true\n          })\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsUpdate = true;\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        constant: this.constant\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else if (this.value !== buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n          throw new Error('Attribute prop must be typed array');\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (buffer instanceof ArrayType) {\n          this.update({constant: false, value: buffer});\n        } else {\n          log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n          // Cast to proper type\n          this.update({constant: false, value: new ArrayType(buffer)});\n        }\n        // Save original typed array\n        this.value = buffer;\n        state.needsRedraw = true;\n      }\n      this._updateShaderAttributes();\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const objectValue = accessorFunc(object, objectInfo);\n      this._normalizeValue(objectValue, value, i);\n      i += size;\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}