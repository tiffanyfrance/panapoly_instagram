{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["Pass","clear","setParameters","withParameters","LayersPass","render","props","drawLayers","layers","viewports","views","onViewportActive","deviceRect","parameters","pass","redrawReason","clearCanvas","effects","effectProps","gl","renderStats","forEach","viewportOrDescriptor","i","viewport","getViewportFromDescriptor","view","id","stats","drawLayersInViewport","push","glViewport","getGLViewport","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","pickable","isComposite","drawLayerInViewport","moduleParameters","getModuleParameters","uniforms","Object","assign","context","layerParameters","getLayerParameters","drawLayer","layerFilter","visible","isPicking","create","pickingActive","devicePixelRatio","pixelRatio","height","canvas","clientHeight","dimensions","x","y","width","drawingBufferWidth","drawingBufferHeight"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    return this.drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  drawLayers({\n    layers,\n    viewports,\n    views,\n    onViewportActive,\n    deviceRect = null,\n    parameters = {},\n    pass = 'draw',\n    redrawReason = '',\n    clearCanvas = true,\n    effects,\n    effectProps\n  }) {\n    const gl = this.gl;\n    if (clearCanvas) {\n      this.clearCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    viewports.forEach((viewportOrDescriptor, i) => {\n      const viewport = this.getViewportFromDescriptor(viewportOrDescriptor);\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      // render this viewport\n      const stats = this.drawLayersInViewport(gl, {\n        layers,\n        viewport,\n        view,\n        deviceRect,\n        parameters,\n        pass,\n        redrawReason,\n        effects,\n        effectProps\n      });\n      renderStats.push(stats);\n    });\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  drawLayersInViewport(\n    gl,\n    {\n      layers,\n      viewport,\n      view,\n      deviceRect = null,\n      parameters = {},\n      pass = 'draw',\n      redrawReason = '',\n      effects,\n      effectProps\n    }\n  ) {\n    const glViewport = this.getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, parameters || {});\n\n    // render layers in normal colors\n    layers.forEach((layer, layerIndex) => {\n      // Check if we should draw layer\n      const shouldDrawLayer = this.shouldDrawLayer(layer, viewport);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        this.drawLayerInViewport({\n          gl,\n          layer,\n          layerIndex,\n          glViewport,\n          parameters,\n          effects,\n          effectProps\n        });\n      }\n    });\n\n    return renderStatus;\n  }\n\n  drawLayerInViewport({gl, layer, layerIndex, glViewport, parameters, effects, effectProps}) {\n    const moduleParameters = this.getModuleParameters(layer, effects, effectProps);\n    const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n    const layerParameters = this.getLayerParameters(layer, layerIndex, glViewport, parameters);\n\n    layer.drawLayer({\n      moduleParameters,\n      uniforms,\n      parameters: layerParameters\n    });\n  }\n\n  // Get a viewport from a viewport descriptor (which can be a plain viewport)\n  getViewportFromDescriptor(viewportOrDescriptor) {\n    return viewportOrDescriptor.viewport ? viewportOrDescriptor.viewport : viewportOrDescriptor;\n  }\n\n  shouldDrawLayer(layer, viewport) {\n    const layerFilter = this.props.layerFilter;\n    let shouldDrawLayer = !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: false});\n    }\n    return shouldDrawLayer;\n  }\n\n  getModuleParameters(layer) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      pickingActive: 0,\n      devicePixelRatio: this.props.pixelRatio\n    });\n    return moduleParameters;\n  }\n\n  getLayerParameters(layer, layerIndex, glViewport, parameters) {\n    // All parameter resolving is done here instead of the layer\n    // Blend parameters must not be overridden\n    const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n    Object.assign(layerParameters, {\n      viewport: glViewport\n    });\n    return layerParameters;\n  }\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  getGLViewport(gl, {viewport}) {\n    // TODO - dummy default for node\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n    const dimensions = viewport;\n    const pixelRatio = this.props.pixelRatio;\n    return [\n      dimensions.x * pixelRatio,\n      (height - dimensions.y - dimensions.height) * pixelRatio,\n      dimensions.width * pixelRatio,\n      dimensions.height * pixelRatio\n    ];\n  }\n\n  clearCanvas(gl) {\n    const width = gl.drawingBufferWidth;\n    const height = gl.drawingBufferHeight;\n    // clear depth and color buffers, restoring transparency\n    withParameters(gl, {viewport: [0, 0, width, height]}, () => {\n      gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    });\n  }\n}\n"],"file":"layers-pass.js"}