{"version":3,"sources":["../../../src/utils/tesselator.js"],"names":["fillArray","createIterable","TypedArrayManager","overAlloc","typedArray","count","size","type","copy","newSize","length","allocSize","Math","max","ceil","newArray","_allocate","set","_release","Type","Float32Array","Tesselator","opts","attributes","typedArrayManager","indexLayout","bufferLayout","vertexCount","instanceCount","_attributeDefs","updateGeometry","Object","seal","data","getGeometry","positionFormat","fp64","positionSize","_rebuildGeometry","start","objects","geometry","startIndex","Error","visitor","iterable","objectInfo","object","index","target","getValue","i","value","numVertices","source","_forEachGeometry","dataIndex","getGeometrySize","name","def","fp64Only","allocate","context","vertexStart","indexStart","geometrySize","geometryIndex","updateGeometryAttributes"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {fillArray} from './flatten';\nimport {createIterable} from './iterable-utils';\n\nclass TypedArrayManager {\n  constructor({overAlloc = 1} = {}) {\n    this.overAlloc = overAlloc;\n  }\n\n  allocate(typedArray, count, {size, type, copy = false}) {\n    const newSize = count * size;\n    if (typedArray && newSize <= typedArray.length) {\n      return typedArray;\n    }\n\n    // Allocate at least one element to ensure a valid buffer\n    const allocSize = Math.max(Math.ceil(newSize * this.overAlloc), 1);\n    const newArray = this._allocate(type, allocSize);\n\n    if (typedArray && copy) {\n      newArray.set(typedArray);\n    }\n\n    this._release(typedArray);\n    return newArray;\n  }\n\n  _allocate(Type = Float32Array, size) {\n    // TODO - check if available in pool\n    return new Type(size);\n  }\n\n  _release(typedArray) {\n    // TODO - add to pool\n    // logFunctions.onUpdate({\n    //   level: LOG_DETAIL_PRIORITY,\n    //   message: `${attributeName} allocated ${allocCount}`,\n    //   id: this.id\n    // });\n  }\n}\n\nexport default class Tesselator {\n  constructor(opts = {}) {\n    const {attributes = {}} = opts;\n\n    this.typedArrayManager = new TypedArrayManager();\n    this.indexLayout = null;\n    this.bufferLayout = null;\n    this.vertexCount = 0;\n    this.instanceCount = 0;\n    this.attributes = {};\n    this._attributeDefs = attributes;\n\n    this.updateGeometry(opts);\n\n    Object.seal(this);\n  }\n\n  /* Public methods */\n  updateGeometry({data, getGeometry, positionFormat, fp64}) {\n    this.data = data;\n    this.getGeometry = getGeometry;\n    this.fp64 = fp64;\n    this.positionSize = positionFormat === 'XY' ? 2 : 3;\n    this._rebuildGeometry();\n  }\n\n  updatePartialGeometry({start, count, objects}) {\n    // TODO\n  }\n\n  /* Subclass interface */\n\n  // Update the positions of a single geometry\n  updateGeometryAttributes(geometry, startIndex, size) {\n    throw new Error('Not implemented');\n  }\n\n  // Returns the number of vertices in a geometry\n  getGeometrySize(geometry) {\n    throw new Error('Not implemented');\n  }\n\n  /* Private utility methods */\n\n  /**\n   * Visit all objects\n   * `data` is expected to be an iterable consistent with the base Layer expectation\n   */\n  _forEachGeometry(visitor) {\n    const {data, getGeometry} = this;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const geometry = getGeometry(object, objectInfo);\n      visitor(geometry, objectInfo.index);\n    }\n  }\n\n  _updateAttribute({target, size, getValue}) {\n    const {data, bufferLayout} = this;\n\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const value = getValue(object, objectInfo);\n      const numVertices = bufferLayout[objectInfo.index];\n\n      fillArray({target, source: value, start: i, count: numVertices});\n      i += numVertices * size;\n    }\n    return target;\n  }\n\n  _rebuildGeometry() {\n    if (!this.data || !this.getGeometry) {\n      return;\n    }\n\n    // count instances\n    const indexLayout = [];\n    const bufferLayout = [];\n    let instanceCount = 0;\n    this._forEachGeometry((geometry, dataIndex) => {\n      const count = this.getGeometrySize(geometry);\n      instanceCount += count;\n      bufferLayout[dataIndex] = count;\n    });\n\n    // allocate attributes\n    const {attributes, _attributeDefs, typedArrayManager, fp64} = this;\n    for (const name in _attributeDefs) {\n      const def = _attributeDefs[name];\n\n      // do not create fp64-only attributes unless in fp64 mode\n      if (!def.fp64Only || fp64) {\n        attributes[name] = typedArrayManager.allocate(attributes[name], instanceCount, def);\n      }\n    }\n\n    this.indexLayout = indexLayout;\n    this.bufferLayout = bufferLayout;\n    this.instanceCount = instanceCount;\n\n    const context = {\n      vertexStart: 0,\n      indexStart: 0\n    };\n    this._forEachGeometry((geometry, dataIndex) => {\n      const geometrySize = bufferLayout[dataIndex];\n      context.geometryIndex = dataIndex;\n      context.geometrySize = geometrySize;\n      this.updateGeometryAttributes(geometry, context);\n      context.vertexStart += geometrySize;\n      context.indexStart += indexLayout[dataIndex] || 0;\n    });\n\n    this.vertexCount = context.indexStart;\n  }\n}\n"],"file":"tesselator.js"}