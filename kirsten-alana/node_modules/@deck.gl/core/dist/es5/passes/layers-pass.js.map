{"version":3,"sources":["../../../src/passes/layers-pass.js"],"names":["LayersPass","props","drawLayers","layers","viewports","views","onViewportActive","deviceRect","parameters","pass","redrawReason","clearCanvas","effects","effectProps","gl","renderStats","forEach","viewportOrDescriptor","i","viewport","getViewportFromDescriptor","view","id","stats","drawLayersInViewport","push","glViewport","getGLViewport","clear","clearOpts","color","depth","scissorTest","scissor","renderStatus","totalCount","length","visibleCount","compositeCount","pickableCount","layer","layerIndex","shouldDrawLayer","pickable","isComposite","drawLayerInViewport","moduleParameters","getModuleParameters","uniforms","Object","assign","context","layerParameters","getLayerParameters","drawLayer","layerFilter","visible","isPicking","create","pickingActive","devicePixelRatio","pixelRatio","height","canvas","clientHeight","dimensions","x","y","width","drawingBufferWidth","drawingBufferHeight","Pass"],"mappings":"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","sourcesContent":["import GL from '@luma.gl/constants';\nimport Pass from './pass';\nimport {clear, setParameters, withParameters} from '@luma.gl/core';\n\nexport default class LayersPass extends Pass {\n  render(props) {\n    return this.drawLayers(props);\n  }\n\n  // PRIVATE\n  // Draw a list of layers in a list of viewports\n  drawLayers({\n    layers,\n    viewports,\n    views,\n    onViewportActive,\n    deviceRect = null,\n    parameters = {},\n    pass = 'draw',\n    redrawReason = '',\n    clearCanvas = true,\n    effects,\n    effectProps\n  }) {\n    const gl = this.gl;\n    if (clearCanvas) {\n      this.clearCanvas(gl);\n    }\n\n    const renderStats = [];\n\n    viewports.forEach((viewportOrDescriptor, i) => {\n      const viewport = this.getViewportFromDescriptor(viewportOrDescriptor);\n      const view = views && views[viewport.id];\n\n      // Update context to point to this viewport\n      onViewportActive(viewport);\n\n      // render this viewport\n      const stats = this.drawLayersInViewport(gl, {\n        layers,\n        viewport,\n        view,\n        deviceRect,\n        parameters,\n        pass,\n        redrawReason,\n        effects,\n        effectProps\n      });\n      renderStats.push(stats);\n    });\n    return renderStats;\n  }\n\n  // Draws a list of layers in one viewport\n  // TODO - when picking we could completely skip rendering viewports that dont\n  // intersect with the picking rect\n  drawLayersInViewport(\n    gl,\n    {\n      layers,\n      viewport,\n      view,\n      deviceRect = null,\n      parameters = {},\n      pass = 'draw',\n      redrawReason = '',\n      effects,\n      effectProps\n    }\n  ) {\n    const glViewport = this.getGLViewport(gl, {viewport});\n\n    if (view && view.props.clear) {\n      const clearOpts = view.props.clear === true ? {color: true, depth: true} : view.props.clear;\n      withParameters(\n        gl,\n        {\n          scissorTest: true,\n          scissor: glViewport\n        },\n        () => clear(gl, clearOpts)\n      );\n    }\n\n    // render layers in normal colors\n    const renderStatus = {\n      totalCount: layers.length,\n      visibleCount: 0,\n      compositeCount: 0,\n      pickableCount: 0\n    };\n\n    setParameters(gl, parameters || {});\n\n    // render layers in normal colors\n    layers.forEach((layer, layerIndex) => {\n      // Check if we should draw layer\n      const shouldDrawLayer = this.shouldDrawLayer(layer, viewport);\n\n      // Calculate stats\n      if (shouldDrawLayer && layer.props.pickable) {\n        renderStatus.pickableCount++;\n      }\n      if (layer.isComposite) {\n        renderStatus.compositeCount++;\n      }\n\n      // Draw the layer\n      if (shouldDrawLayer) {\n        renderStatus.visibleCount++;\n\n        this.drawLayerInViewport({\n          gl,\n          layer,\n          layerIndex,\n          glViewport,\n          parameters,\n          effects,\n          effectProps\n        });\n      }\n    });\n\n    return renderStatus;\n  }\n\n  drawLayerInViewport({gl, layer, layerIndex, glViewport, parameters, effects, effectProps}) {\n    const moduleParameters = this.getModuleParameters(layer, effects, effectProps);\n    const uniforms = Object.assign({}, layer.context.uniforms, {layerIndex});\n    const layerParameters = this.getLayerParameters(layer, layerIndex, glViewport, parameters);\n\n    layer.drawLayer({\n      moduleParameters,\n      uniforms,\n      parameters: layerParameters\n    });\n  }\n\n  // Get a viewport from a viewport descriptor (which can be a plain viewport)\n  getViewportFromDescriptor(viewportOrDescriptor) {\n    return viewportOrDescriptor.viewport ? viewportOrDescriptor.viewport : viewportOrDescriptor;\n  }\n\n  shouldDrawLayer(layer, viewport) {\n    const layerFilter = this.props.layerFilter;\n    let shouldDrawLayer = !layer.isComposite && layer.props.visible;\n\n    if (shouldDrawLayer && layerFilter) {\n      shouldDrawLayer = layerFilter({layer, viewport, isPicking: false});\n    }\n    return shouldDrawLayer;\n  }\n\n  getModuleParameters(layer) {\n    const moduleParameters = Object.assign(Object.create(layer.props), {\n      viewport: layer.context.viewport,\n      pickingActive: 0,\n      devicePixelRatio: this.props.pixelRatio\n    });\n    return moduleParameters;\n  }\n\n  getLayerParameters(layer, layerIndex, glViewport, parameters) {\n    // All parameter resolving is done here instead of the layer\n    // Blend parameters must not be overridden\n    const layerParameters = Object.assign({}, layer.props.parameters || {}, parameters);\n\n    Object.assign(layerParameters, {\n      viewport: glViewport\n    });\n    return layerParameters;\n  }\n\n  // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n  getGLViewport(gl, {viewport}) {\n    // TODO - dummy default for node\n    // Fallback to width/height when clientWidth/clientHeight are 0 or undefined.\n    const height = gl.canvas ? gl.canvas.clientHeight || gl.canvas.height : 100;\n    // Convert viewport top-left CSS coordinates to bottom up WebGL coordinates\n    const dimensions = viewport;\n    const pixelRatio = this.props.pixelRatio;\n    return [\n      dimensions.x * pixelRatio,\n      (height - dimensions.y - dimensions.height) * pixelRatio,\n      dimensions.width * pixelRatio,\n      dimensions.height * pixelRatio\n    ];\n  }\n\n  clearCanvas(gl) {\n    const width = gl.drawingBufferWidth;\n    const height = gl.drawingBufferHeight;\n    // clear depth and color buffers, restoring transparency\n    withParameters(gl, {viewport: [0, 0, width, height]}, () => {\n      gl.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\n    });\n  }\n}\n"],"file":"layers-pass.js"}