{"version":3,"sources":["../../../src/lib/attribute.js"],"names":["DEFAULT_STATE","isExternalBuffer","needsUpdate","needsRedraw","allocedInstances","Attribute","gl","opts","transition","noAlloc","update","accessor","bufferLayout","defaultValue","Array","isArray","shaderAttributes","hasShaderAttributes","shaderAttributeName","shaderAttribute","Object","assign","id","constant","isIndexed","elements","size","value","divisor","instanced","buffer","getBuffer","userData","seal","_validateAttributeUpdaters","clearChangedFlags","length","concat","settings","find","a","Number","isFinite","duration","reason","numInstances","state","instanceCount","getInstanceCount","needsAlloc","allocCount","Math","max","ArrayType","glArrayFromType","type","data","props","context","updated","call","_checkAttributeArray","_updateBufferViaStandardAccessor","_updateShaderAttributes","undefined","_normalizeValue","hasChanged","_areValuesEqual","Buffer","externalBuffer","ArrayBuffer","isView","Error","auto","log","warn","name","out","start","value1","value2","i","accessorFunc","iterable","objectInfo","object","index","objectValue","hasUpdater","valid","layout","BaseAttribute","glType","clamped","Float32Array","Uint16Array","Uint32Array","Uint8ClampedArray","Uint8Array","Int8Array","Int16Array","Int32Array"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {createIterable} from '../utils/iterable-utils';\nimport log from '../utils/log';\nimport BaseAttribute from './base-attribute';\n\nconst DEFAULT_STATE = {\n  isExternalBuffer: false,\n  needsUpdate: true,\n  needsRedraw: false,\n  allocedInstances: -1\n};\n\nexport default class Attribute extends BaseAttribute {\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    const {\n      // deck.gl fields\n      transition = false,\n      noAlloc = false,\n      update = null,\n      accessor = null,\n      bufferLayout = null\n    } = opts;\n\n    let {defaultValue = [0, 0, 0, 0]} = opts;\n    defaultValue = Array.isArray(defaultValue) ? defaultValue : [defaultValue];\n\n    this.shaderAttributes = {};\n    this.hasShaderAttributes = false;\n\n    if (opts.shaderAttributes) {\n      const shaderAttributes = opts.shaderAttributes;\n      for (const shaderAttributeName in shaderAttributes) {\n        const shaderAttribute = shaderAttributes[shaderAttributeName];\n\n        // Initialize the attribute descriptor, with WebGL and metadata fields\n        this.shaderAttributes[shaderAttributeName] = new Attribute(\n          this.gl,\n          Object.assign({}, shaderAttribute, {\n            id: shaderAttributeName,\n            // Luma fields\n            constant: shaderAttribute.constant || false,\n            isIndexed: shaderAttribute.isIndexed || shaderAttribute.elements,\n            size: (shaderAttribute.elements && 1) || shaderAttribute.size || this.size,\n            value: shaderAttribute.value || null,\n            divisor: shaderAttribute.instanced || shaderAttribute.divisor || this.divisor,\n            buffer: this.getBuffer(),\n            noAlloc: true\n          })\n        );\n\n        this.hasShaderAttributes = true;\n      }\n    }\n\n    Object.assign(this.userData, DEFAULT_STATE, opts, {\n      transition,\n      noAlloc,\n      update,\n      accessor,\n      defaultValue,\n      bufferLayout\n    });\n\n    Object.seal(this.userData);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeUpdaters();\n  }\n\n  get bufferLayout() {\n    return this.userData.bufferLayout;\n  }\n\n  set bufferLayout(layout) {\n    this.userData.bufferLayout = layout;\n  }\n\n  needsUpdate() {\n    return this.userData.needsUpdate;\n  }\n\n  needsRedraw({clearChangedFlags = false} = {}) {\n    const needsRedraw = this.userData.needsRedraw;\n    this.userData.needsRedraw = this.userData.needsRedraw && !clearChangedFlags;\n    return needsRedraw;\n  }\n\n  getInstanceCount() {\n    return this.value !== null ? this.value.length / this.size : 0;\n  }\n\n  getUpdateTriggers() {\n    const {accessor} = this.userData;\n\n    // Backards compatibility: allow attribute name to be used as update trigger key\n    return [this.id].concat(accessor || []);\n  }\n\n  getAccessor() {\n    return this.userData.accessor;\n  }\n\n  getShaderAttributes() {\n    const shaderAttributes = {};\n    if (this.hasShaderAttributes) {\n      Object.assign(shaderAttributes, this.shaderAttributes);\n    } else {\n      shaderAttributes[this.id] = this;\n    }\n\n    return shaderAttributes;\n  }\n\n  supportsTransition() {\n    return this.userData.transition;\n  }\n\n  // Resolve transition settings object if transition is enabled, otherwise `null`\n  getTransitionSetting(opts) {\n    const {transition, accessor} = this.userData;\n    if (!transition) {\n      return null;\n    }\n    let settings = Array.isArray(accessor) ? opts[accessor.find(a => opts[a])] : opts[accessor];\n\n    // Shorthand: use duration instead of parameter object\n    if (Number.isFinite(settings)) {\n      settings = {duration: settings};\n    }\n\n    if (settings && settings.duration > 0) {\n      return Object.assign({}, transition, settings);\n    }\n\n    return null;\n  }\n\n  // Checks that typed arrays for attributes are big enough\n  // sets alloc flag if not\n  // @return {Boolean} whether any updates are needed\n  setNeedsUpdate(reason = this.id) {\n    this.userData.needsUpdate = this.userData.needsUpdate || reason;\n  }\n\n  setNeedsRedraw(reason = this.id) {\n    this.userData.needsRedraw = this.userData.needsRedraw || reason;\n  }\n\n  allocate(numInstances) {\n    const state = this.userData;\n\n    if (state.isExternalBuffer || state.noAlloc) {\n      // Data is provided through a Buffer object.\n      return false;\n    }\n\n    // Do we need to reallocate the attribute's typed array?\n    const instanceCount = this.getInstanceCount();\n    const needsAlloc = instanceCount === 0 || instanceCount < numInstances;\n    if (needsAlloc && (state.update || state.accessor)) {\n      assert(Number.isFinite(numInstances));\n      // Allocate at least one element to ensure a valid buffer\n      const allocCount = Math.max(numInstances, 1);\n      const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n\n      this.constant = false;\n      this.value = new ArrayType(this.size * allocCount);\n      state.needsUpdate = true;\n      state.allocedInstances = allocCount;\n      return true;\n    }\n\n    return false;\n  }\n\n  updateBuffer({numInstances, data, props, context}) {\n    if (!this.needsUpdate()) {\n      return false;\n    }\n\n    const state = this.userData;\n\n    const {update, accessor} = state;\n\n    let updated = true;\n    if (update) {\n      // Custom updater - typically for non-instanced layers\n      update.call(context, this, {data, props, numInstances});\n      this.update({\n        value: this.value,\n        constant: this.constant\n      });\n      this._checkAttributeArray();\n    } else if (accessor) {\n      // Standard updater\n      this._updateBufferViaStandardAccessor(data, props);\n      this._checkAttributeArray();\n    } else {\n      updated = false;\n    }\n\n    this._updateShaderAttributes();\n\n    state.needsUpdate = false;\n    state.needsRedraw = true;\n\n    return updated;\n  }\n\n  update(props) {\n    super.update(props);\n    this._updateShaderAttributes();\n  }\n\n  // Use generic value\n  // Returns true if successful\n  setGenericValue(value) {\n    const state = this.userData;\n\n    if (value === undefined || typeof value === 'function') {\n      // ignore if this attribute has no accessor\n      // ignore if accessor is function, will be used in updateBuffer\n      state.isExternalBuffer = false;\n      return false;\n    }\n\n    value = this._normalizeValue(value);\n    const hasChanged = !this.constant || !this._areValuesEqual(value, this.value);\n\n    if (hasChanged) {\n      this.update({constant: true, value});\n    }\n    state.needsRedraw = state.needsUpdate || hasChanged;\n    state.needsUpdate = false;\n    state.isExternalBuffer = true;\n    this._updateShaderAttributes();\n    return true;\n  }\n\n  // Use external buffer\n  // Returns true if successful\n  setExternalBuffer(buffer, numInstances) {\n    const state = this.userData;\n\n    if (buffer) {\n      state.isExternalBuffer = true;\n      state.needsUpdate = false;\n\n      if (buffer instanceof Buffer) {\n        if (this.externalBuffer !== buffer) {\n          this.update({constant: false, buffer});\n          state.needsRedraw = true;\n        }\n      } else if (this.value !== buffer) {\n        if (!ArrayBuffer.isView(buffer)) {\n          throw new Error('Attribute prop must be typed array');\n        }\n        if (state.auto && buffer.length <= numInstances * this.size) {\n          throw new Error('Attribute prop array must match length and size');\n        }\n\n        const ArrayType = glArrayFromType(this.type || GL.FLOAT);\n        if (buffer instanceof ArrayType) {\n          this.update({constant: false, value: buffer});\n        } else {\n          log.warn(`Attribute prop ${this.id} is casted to ${ArrayType.name}`)();\n          // Cast to proper type\n          this.update({constant: false, value: new ArrayType(buffer)});\n        }\n        // Save original typed array\n        this.value = buffer;\n        state.needsRedraw = true;\n      }\n      this._updateShaderAttributes();\n      return true;\n    }\n\n    state.isExternalBuffer = false;\n    return false;\n  }\n\n  // PRIVATE HELPER METHODS\n\n  /* check user supplied values and apply fallback */\n  _normalizeValue(value, out = [], start = 0) {\n    const {defaultValue} = this.userData;\n\n    if (!Array.isArray(value) && !ArrayBuffer.isView(value)) {\n      out[start] = Number.isFinite(value) ? value : defaultValue[0];\n      return out;\n    }\n\n    /* eslint-disable no-fallthrough, default-case */\n    switch (this.size) {\n      case 4:\n        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];\n      case 3:\n        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];\n      case 2:\n        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];\n      case 1:\n        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];\n    }\n\n    return out;\n  }\n\n  _areValuesEqual(value1, value2, size = this.size) {\n    for (let i = 0; i < size; i++) {\n      if (value1[i] !== value2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _updateBufferViaStandardAccessor(data, props) {\n    const state = this.userData;\n\n    const {accessor} = state;\n    const {value, size} = this;\n    const accessorFunc = props[accessor];\n\n    assert(typeof accessorFunc === 'function', `accessor \"${accessor}\" is not a function`);\n\n    let i = 0;\n    const {iterable, objectInfo} = createIterable(data);\n    for (const object of iterable) {\n      objectInfo.index++;\n      const objectValue = accessorFunc(object, objectInfo);\n      this._normalizeValue(objectValue, value, i);\n      i += size;\n    }\n    this.update({value});\n  }\n\n  // Validate deck.gl level fields\n  _validateAttributeUpdaters() {\n    const state = this.userData;\n\n    // Check that either 'accessor' or 'update' is a valid function\n    const hasUpdater =\n      state.noAlloc || typeof state.update === 'function' || typeof state.accessor === 'string';\n    if (!hasUpdater) {\n      throw new Error(`Attribute ${this.id} missing update or accessor`);\n    }\n  }\n\n  _checkAttributeArray() {\n    const {value} = this;\n    if (value && value.length >= 4) {\n      const valid =\n        Number.isFinite(value[0]) &&\n        Number.isFinite(value[1]) &&\n        Number.isFinite(value[2]) &&\n        Number.isFinite(value[3]);\n      if (!valid) {\n        throw new Error(`Illegal attribute generated for ${this.id}`);\n      }\n    }\n  }\n\n  _updateShaderAttributes() {\n    const shaderAttributes = this.shaderAttributes;\n    for (const shaderAttributeName in shaderAttributes) {\n      const shaderAttribute = shaderAttributes[shaderAttributeName];\n      shaderAttribute.update({\n        buffer: this.getBuffer(),\n        value: this.value,\n        constant: this.constant\n      });\n    }\n  }\n}\n\n/* eslint-disable complexity */\nexport function glArrayFromType(glType, {clamped = true} = {}) {\n  // Sorted in some order of likelihood to reduce amount of comparisons\n  switch (glType) {\n    case GL.FLOAT:\n      return Float32Array;\n    case GL.UNSIGNED_SHORT:\n    case GL.UNSIGNED_SHORT_5_6_5:\n    case GL.UNSIGNED_SHORT_4_4_4_4:\n    case GL.UNSIGNED_SHORT_5_5_5_1:\n      return Uint16Array;\n    case GL.UNSIGNED_INT:\n      return Uint32Array;\n    case GL.UNSIGNED_BYTE:\n      return clamped ? Uint8ClampedArray : Uint8Array;\n    case GL.BYTE:\n      return Int8Array;\n    case GL.SHORT:\n      return Int16Array;\n    case GL.INT:\n      return Int32Array;\n    default:\n      throw new Error('Failed to deduce type from array');\n  }\n}\n/* eslint-enable complexity */\n"],"file":"attribute.js"}