{"version":3,"sources":["../../../src/lib/base-attribute.js"],"names":["BaseAttribute","gl","opts","id","type","isIndexed","target","FEATURES","ELEMENT_INDEX_UINT32","value","externalBuffer","buffer","userData","update","_validateAttributeDefinition","delete","constant","accessor","divisor","undefined","size","length","Float32Array","index","offset","i","props","Number","isFinite","Buffer","setData","data","_setAccessor","stride","normalized","integer","instanced","isInstanced","log","deprecated"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport GL from '@luma.gl/constants';\nimport {Buffer, hasFeature, FEATURES} from '@luma.gl/core';\nimport {log, uid} from '@luma.gl/core';\n\nexport default class BaseAttribute {\n  constructor(gl, opts = {}) {\n    const {id = uid('attribute'), type, isIndexed = false} = opts;\n\n    // Options that cannot be changed later\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER;\n    this.type = type;\n\n    if (isIndexed && !type) {\n      // If the attribute is indices, auto infer the correct type\n      // WebGL2 and WebGL1 w/ uint32 index extension support accepts Uint32Array, otherwise Uint16Array\n      this.type =\n        gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? GL.UNSIGNED_INT : GL.UNSIGNED_SHORT;\n    }\n\n    // Initialize the attribute descriptor, with WebGL and metadata fields\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {}; // Reserved for application\n    this.update(opts);\n\n    // Check all fields and generate helpful error messages\n    this._validateAttributeDefinition();\n  }\n\n  delete() {\n    if (this.buffer) {\n      this.buffer.delete();\n      this.buffer = null;\n    }\n  }\n\n  /* eslint-disable max-statements */\n  update(opts) {\n    const {value, buffer, constant = this.constant || false} = opts;\n\n    this.constant = constant;\n\n    if (buffer) {\n      this.externalBuffer = buffer;\n      this.constant = false;\n\n      this.type = opts.type || buffer.accessor.type;\n      if (buffer.accessor.divisor !== undefined) {\n        this.divisor = buffer.accessor.divisor;\n      }\n      if (opts.divisor !== undefined) {\n        this.divisor = opts.divisor;\n      }\n    } else if (value) {\n      this.externalBuffer = null;\n\n      const size = this.size || opts.size || 0;\n      if (constant && value.length !== size) {\n        // NOTE(Tarek): Assuming float constants.\n        // This is all we currently use, but we'll\n        // have to update this if we start using int\n        // attributes (WebGL 2-only)\n        this.value = new Float32Array(size);\n        const index = this.offset / 4; // Always 4 bytes/element (float, int or uint)\n        for (let i = 0; i < this.size; ++i) {\n          this.value[i] = value[index + i];\n        }\n      } else {\n        this.value = value;\n      }\n\n      // Create buffer if needed\n      if (!constant && this.gl) {\n        // Move accessor fields to accessor object\n        const props = {\n          ...opts,\n          id: this.id,\n          target: this.target,\n          accessor: {\n            type: this.type\n          }\n        };\n        if (Number.isFinite(props.divisor)) {\n          props.accessor.divisor = props.divisor;\n        }\n        delete props.divisor;\n        if (Number.isFinite(props.size)) {\n          props.accessor.size = props.size;\n        }\n        delete props.size;\n        this.buffer = this.buffer || new Buffer(this.gl, props);\n        this.buffer.setData({data: value});\n        this.type = this.buffer.accessor.type;\n      }\n    }\n\n    this._setAccessor(opts);\n  }\n\n  getBuffer() {\n    if (this.constant) {\n      return null;\n    }\n    return this.externalBuffer || this.buffer;\n  }\n\n  getValue() {\n    if (this.constant) {\n      return this.value;\n    }\n    const buffer = this.externalBuffer || this.buffer;\n    if (buffer) {\n      return [buffer, this];\n    }\n    return null;\n  }\n\n  // Sets all accessor props except type\n  // TODO - store on `this.accessor`\n  _setAccessor(opts) {\n    const {\n      // accessor props\n      size = this.size,\n      offset = this.offset || 0,\n      stride = this.stride || 0,\n      normalized = this.normalized || false,\n      integer = this.integer || false,\n      divisor = this.divisor || 0,\n      instanced,\n      isInstanced\n    } = opts;\n\n    this.size = size;\n    this.offset = offset;\n    this.stride = stride;\n    this.normalized = normalized;\n    this.integer = integer;\n\n    this.divisor = divisor;\n\n    if (isInstanced !== undefined) {\n      log.deprecated('Attribute.isInstanced')();\n      this.divisor = isInstanced ? 1 : 0;\n    }\n    if (instanced !== undefined) {\n      log.deprecated('Attribute.instanced')();\n      this.divisor = instanced ? 1 : 0;\n    }\n  }\n\n  _validateAttributeDefinition() {\n    // Can be undefined for buffers (auto deduced from shaders)\n    // or larger than 4 for uniform arrays\n    // assert(\n    //   this.size >= 1 && this.size <= 4,\n    //   `Attribute definition for ${this.id} invalid size`\n    // );\n  }\n}\n"],"file":"base-attribute.js"}