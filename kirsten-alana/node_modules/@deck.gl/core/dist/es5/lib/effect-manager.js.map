{"version":3,"sources":["../../../src/lib/effect-manager.js"],"names":["EffectManager","effects","_needsRedraw","defaultLightingEffect","LightingEffect","needApplyDefaultLighting","props","length","setEffects","checkLightingEffect","opts","clearRedrawFlags","redraw","slice","push","hasEffect","effect"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;IAEqBA,a;AACnB,2BAAc;AAAA;AACZ,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,YAAL,GAAoB,gBAApB;AACA,SAAKC,qBAAL,GAA6B,IAAIC,uBAAJ,EAA7B;AACA,SAAKC,wBAAL,GAAgC,KAAhC;AACD;;;;6BAEQC,K,EAAO;AACd,UAAI,aAAaA,KAAjB,EAAwB;AACtB,YAAIA,KAAK,CAACL,OAAN,CAAcM,MAAd,KAAyB,KAAKN,OAAL,CAAaM,MAAtC,IAAgD,CAAC,0BAAUD,KAAK,CAACL,OAAhB,EAAyB,KAAKA,OAA9B,CAArD,EAA6F;AAC3F,eAAKO,UAAL,CAAgBF,KAAK,CAACL,OAAtB;AACA,eAAKC,YAAL,GAAoB,iBAApB;AACD;AACF;;AACD,WAAKO,mBAAL;AACD;;;kCAE6C;AAAA,UAAlCC,IAAkC,uEAA3B;AAACC,QAAAA,gBAAgB,EAAE;AAAnB,OAA2B;AAC5C,UAAMC,MAAM,GAAG,KAAKV,YAApB;;AACA,UAAIQ,IAAI,CAACC,gBAAT,EAA2B;AACzB,aAAKT,YAAL,GAAoB,KAApB;AACD;;AACD,aAAOU,MAAP;AACD;;;iCAEY;AACX,UAAIX,OAAO,GAAG,KAAKA,OAAnB;;AACA,UAAI,KAAKI,wBAAT,EAAmC;AACjCJ,QAAAA,OAAO,GAAG,KAAKA,OAAL,CAAaY,KAAb,EAAV;AACAZ,QAAAA,OAAO,CAACa,IAAR,CAAa,KAAKX,qBAAlB;AACD;;AACD,aAAOF,OAAP;AACD;;;iCAGwB;AAAA,UAAdA,OAAc,uEAAJ,EAAI;AACvB,WAAKA,OAAL,GAAeA,OAAf;AACD;;;0CAEqB;AACpB,UAAIc,SAAS,GAAG,KAAhB;AADoB;AAAA;AAAA;;AAAA;AAEpB,6BAAqB,KAAKd,OAA1B,8HAAmC;AAAA,cAAxBe,MAAwB;;AACjC,cAAIA,MAAM,YAAYZ,uBAAtB,EAAsC;AACpCW,YAAAA,SAAS,GAAG,IAAZ;AACA;AACD;AACF;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQpB,WAAKV,wBAAL,GAAgC,CAACU,SAAjC;AACD","sourcesContent":["import {deepEqual} from '../utils/deep-equal';\nimport {default as LightingEffect} from '../effects/lighting/lighting-effect';\n\nexport default class EffectManager {\n  constructor() {\n    this.effects = [];\n    this._needsRedraw = 'Initial render';\n    this.defaultLightingEffect = new LightingEffect();\n    this.needApplyDefaultLighting = false;\n  }\n\n  setProps(props) {\n    if ('effects' in props) {\n      if (props.effects.length !== this.effects.length || !deepEqual(props.effects, this.effects)) {\n        this.setEffects(props.effects);\n        this._needsRedraw = 'effects changed';\n      }\n    }\n    this.checkLightingEffect();\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  getEffects() {\n    let effects = this.effects;\n    if (this.needApplyDefaultLighting) {\n      effects = this.effects.slice();\n      effects.push(this.defaultLightingEffect);\n    }\n    return effects;\n  }\n\n  // Private\n  setEffects(effects = []) {\n    this.effects = effects;\n  }\n\n  checkLightingEffect() {\n    let hasEffect = false;\n    for (const effect of this.effects) {\n      if (effect instanceof LightingEffect) {\n        hasEffect = true;\n        break;\n      }\n    }\n    this.needApplyDefaultLighting = !hasEffect;\n  }\n}\n"],"file":"effect-manager.js"}