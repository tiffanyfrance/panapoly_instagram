{"version":3,"sources":["../../../src/lib/layer.js"],"names":["LOG_PRIORITY_UPDATE","EMPTY_ARRAY","Object","freeze","pickingColorCache","Uint8ClampedArray","defaultProps","data","type","value","async","dataComparator","dataTransform","compare","fetch","url","then","response","json","updateTriggers","numInstances","undefined","visible","pickable","opacity","min","max","onHover","optional","onClick","onDragStart","onDrag","onDragEnd","coordinateSystem","COORDINATE_SYSTEM","LNGLAT","coordinateOrigin","modelMatrix","wrapLongitude","parameters","uniforms","framebuffer","animation","getPolygonOffset","layerIndex","highlightedObjectIndex","autoHighlight","highlightColor","Layer","className","constructor","layerName","name","props","id","updateObject","setChangeFlags","stateChanged","assign","state","setNeedsRedraw","redraw","internalState","needsRedraw","context","layerManager","setNeedsUpdate","String","opts","clearRedrawFlags","_getNeedsRedraw","shouldUpdateState","_getUpdateParams","models","model","attributeManager","layer","object","xyz","viewport","worldPosition","pixelProjectionMatrix","x","y","z","length","xy","Array","isArray","unproject","lngLat","log","deprecated","projectFlat","unprojectFlat","fp64","LNGLAT_DEPRECATED","once","screenPixels","devicePixelRatio","window","info","pickingEvent","i","target","color","Uint8Array","i1","i2","i3","index","Error","oldProps","changeFlags","propsOrDataChanged","getAttributeManager","dataChanged","invalidateAll","getModels","delete","finalize","draw","mode","diffReason","invalidate","getNumInstances","update","transitions","buffers","ignoreUnknownAttributes","changedAttributes","getChangedAttributes","clearChangedFlags","len","_setModelAttributes","updateTransition","time","attribute","size","cacheSize","newPickingColorCache","set","pickingColor","encodePickingColor","subarray","shaderAttributes","excludeAttributes","userData","attributeName","getShaderAttributes","setAttributes","instancePickingColors","attributes","decodePickingColor","pickingColors","_clearPickingColor","_clearInstancePickingColor","colors","_initState","initializeState","propsChanged","viewportChanged","_updateState","getSingleModel","program","stateNeedsUpdate","needsUpdate","updateParams","gl","updateState","error","isComposite","_renderLayers","updateAttributes","_updateBaseUniforms","setInstanceCount","clearChangeFlags","resetOldProps","finalizeState","moduleParameters","picking_uActive","setModuleParameters","animationProps","_setAnimationProps","offsets","polygonOffset","getPickingInfo","flags","updateTriggersChanged","keys","join","somethingChanged","newProps","key","_activeUpdateTrigger","updateModuleSettings","getOldProps","attributeManagerNeedsRedraw","getNeedsRedraw","AttributeManager","stats","_getAttributeManager","addInstanced","calculateInstancePickingColors","LayerState","onAsyncPropUpdated","_onAsyncPropUpdated","bind","setAsyncProps","oldLayer","component","diffProps","setLayerNeedsUpdate","propName","invalidateAttribute","Math","pow","setUniforms","uniformMap","use64bitProjection","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable react/no-direct-mutation-state */\n/* global fetch */\n/* global window */\nimport {COORDINATE_SYSTEM} from './constants';\nimport AttributeManager from './attribute-manager';\nimport {removeLayerInSeer} from './seer-integration';\nimport {diffProps, validateProps} from '../lifecycle/props';\nimport {count} from '../utils/count';\nimport log from '../utils/log';\nimport GL from '@luma.gl/constants';\nimport {withParameters} from '@luma.gl/core';\nimport assert from '../utils/assert';\nimport {projectPosition, getWorldPosition} from '../shaderlib/project/project-functions';\n\nimport Component from '../lifecycle/component';\nimport LayerState from './layer-state';\n\nimport {worldToPixels} from 'viewport-mercator-project';\n\nconst LOG_PRIORITY_UPDATE = 1;\n\nconst EMPTY_ARRAY = Object.freeze([]);\n\nlet pickingColorCache = new Uint8ClampedArray(0);\n\nconst defaultProps = {\n  // data: Special handling for null, see below\n  data: {type: 'data', value: EMPTY_ARRAY, async: true},\n  dataComparator: null,\n  dataTransform: {type: 'function', value: data => data, compare: false},\n  fetch: {\n    type: 'function',\n    value: url => fetch(url).then(response => response.json()),\n    compare: false\n  },\n  updateTriggers: {}, // Update triggers: a core change detection mechanism in deck.gl\n  numInstances: undefined,\n\n  visible: true,\n  pickable: false,\n  opacity: {type: 'number', min: 0, max: 1, value: 0.8},\n\n  onHover: {type: 'function', value: null, compare: false, optional: true},\n  onClick: {type: 'function', value: null, compare: false, optional: true},\n  onDragStart: {type: 'function', value: null, compare: false, optional: true},\n  onDrag: {type: 'function', value: null, compare: false, optional: true},\n  onDragEnd: {type: 'function', value: null, compare: false, optional: true},\n\n  coordinateSystem: COORDINATE_SYSTEM.LNGLAT,\n  coordinateOrigin: {type: 'array', value: [0, 0, 0], compare: true},\n  modelMatrix: {type: 'array', value: null, compare: true, optional: true},\n  wrapLongitude: false,\n\n  parameters: {},\n  uniforms: {},\n  framebuffer: null,\n\n  animation: null, // Passed prop animation functions to evaluate props\n\n  // Offset depth based on layer index to avoid z-fighting.\n  // Negative values pull layer towards the camera\n  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm\n  getPolygonOffset: {\n    type: 'function',\n    value: ({layerIndex}) => [0, -layerIndex * 100],\n    compare: false\n  },\n\n  // Selection/Highlighting\n  highlightedObjectIndex: null,\n  autoHighlight: false,\n  highlightColor: {type: 'color', value: [0, 0, 128, 128]}\n};\n\nexport default class Layer extends Component {\n  toString() {\n    const className = this.constructor.layerName || this.constructor.name;\n    return `${className}({id: '${this.props.id}'})`;\n  }\n\n  // Public API\n\n  // Updates selected state members and marks the object for redraw\n  setState(updateObject) {\n    this.setChangeFlags({stateChanged: true});\n    Object.assign(this.state, updateObject);\n    this.setNeedsRedraw();\n  }\n\n  // Sets the redraw flag for this layer, will trigger a redraw next animation frame\n  setNeedsRedraw(redraw = true) {\n    if (this.internalState) {\n      this.internalState.needsRedraw = redraw;\n    }\n  }\n\n  // This layer needs a deep update\n  // TODO - Need to align with existing needsUpdate before uncommenting\n  // For now async props will call layerManager directly\n  setLayerNeedsUpdate() {\n    this.context.layerManager.setNeedsUpdate(String(this));\n  }\n\n  // Checks state of attributes and model\n  getNeedsRedraw(opts = {clearRedrawFlags: false}) {\n    return this._getNeedsRedraw(opts);\n  }\n\n  // Checks if layer attributes needs updating\n  needsUpdate() {\n    // Call subclass lifecycle method\n    return this.shouldUpdateState(this._getUpdateParams());\n    // End lifecycle method\n  }\n\n  // Returns true if the layer is pickable and visible.\n  isPickable() {\n    return this.props.pickable && this.props.visible;\n  }\n\n  // Return an array of models used by this layer, can be overriden by layer subclass\n  getModels() {\n    return this.state && (this.state.models || (this.state.model ? [this.state.model] : []));\n  }\n\n  // TODO - Gradually phase out, does not support multi model layers\n  getSingleModel() {\n    return this.state && this.state.model;\n  }\n\n  getAttributeManager() {\n    return this.internalState && this.internalState.attributeManager;\n  }\n\n  // Returns the most recent layer that matched to this state\n  // (When reacting to an async event, this layer may no longer be the latest)\n  getCurrentLayer() {\n    return this.internalState && this.internalState.layer;\n  }\n\n  // Use iteration (the only required capability on data) to get first element\n  // deprecated since we are effectively only supporting Arrays\n  getFirstObject() {\n    const {data} = this.props;\n    for (const object of data) {\n      return object;\n    }\n    return null;\n  }\n\n  // PROJECTION METHODS\n\n  // Projects a point with current map state (lat, lon, zoom, pitch, bearing)\n  // From the current layer's coordinate system to screen\n  project(xyz) {\n    const {viewport} = this.context;\n    const worldPosition = getWorldPosition(xyz, {\n      viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n    const [x, y, z] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);\n    return xyz.length === 2 ? [x, y] : [x, y, z];\n  }\n\n  // Note: this does not reverse `project`.\n  // Always unprojects to the viewport's coordinate system\n  unproject(xy) {\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unproject(xy);\n  }\n\n  projectPosition(xyz) {\n    assert(Array.isArray(xyz));\n\n    return projectPosition(xyz, {\n      viewport: this.context.viewport,\n      modelMatrix: this.props.modelMatrix,\n      coordinateOrigin: this.props.coordinateOrigin,\n      coordinateSystem: this.props.coordinateSystem\n    });\n  }\n\n  // DEPRECATE: This does not handle offset modes\n  projectFlat(lngLat) {\n    log.deprecated('layer.projectFlat', 'layer.projectPosition')();\n    const {viewport} = this.context;\n    assert(Array.isArray(lngLat));\n    return viewport.projectFlat(lngLat);\n  }\n\n  // DEPRECATE: This is not meaningful in offset modes\n  unprojectFlat(xy) {\n    log.deprecated('layer.unprojectFlat')();\n    const {viewport} = this.context;\n    assert(Array.isArray(xy));\n    return viewport.unprojectFlat(xy);\n  }\n\n  use64bitProjection() {\n    if (this.props.fp64) {\n      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT_DEPRECATED) {\n        return true;\n      }\n      log.once(\n        0,\n        `Legacy 64-bit mode only works with coordinateSystem set to\n        COORDINATE_SYSTEM.LNGLAT_DEPRECATED. Rendering in 32-bit mode instead`\n      )();\n    }\n\n    return false;\n  }\n\n  use64bitPositions() {\n    return this.props.fp64 || this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT;\n  }\n\n  // TODO - needs to refer to context for devicePixels setting\n  screenToDevicePixels(screenPixels) {\n    log.deprecated('screenToDevicePixels', 'DeckGL prop useDevicePixels for conversion')();\n    const devicePixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n    return screenPixels * devicePixelRatio;\n  }\n\n  // Event handling\n  onHover(info, pickingEvent) {\n    if (this.props.onHover) {\n      return this.props.onHover(info, pickingEvent);\n    }\n    return false;\n  }\n\n  onClick(info, pickingEvent) {\n    if (this.props.onClick) {\n      return this.props.onClick(info, pickingEvent);\n    }\n    return false;\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  // @return {Array} - a black color\n  nullPickingColor() {\n    return [0, 0, 0];\n  }\n\n  // Returns the picking color that doesn't match any subfeature\n  // Use if some graphics do not belong to any pickable subfeature\n  encodePickingColor(i, target = []) {\n    assert(i < 16777215, 'index out of picking color range');\n    target[0] = (i + 1) & 255;\n    target[1] = ((i + 1) >> 8) & 255;\n    target[2] = (((i + 1) >> 8) >> 8) & 255;\n    return target;\n  }\n\n  // Returns the index corresponding to a picking color that doesn't match any subfeature\n  // @param {Uint8Array} color - color array to be decoded\n  // @return {Array} - the decoded picking color\n  decodePickingColor(color) {\n    assert(color instanceof Uint8Array);\n    const [i1, i2, i3] = color;\n    // 1 was added to seperate from no selection\n    const index = i1 + i2 * 256 + i3 * 65536 - 1;\n    return index;\n  }\n\n  // //////////////////////////////////////////////////\n  // LIFECYCLE METHODS, overridden by the layer subclasses\n\n  // Called once to set up the initial state\n  // App can create WebGL resources\n  initializeState() {\n    throw new Error(`Layer ${this} has not defined initializeState`);\n  }\n\n  // Let's layer control if updateState should be called\n  shouldUpdateState({oldProps, props, context, changeFlags}) {\n    return changeFlags.propsOrDataChanged;\n  }\n\n  // Default implementation, all attributes will be invalidated and updated\n  // when data changes\n  updateState({oldProps, props, context, changeFlags}) {\n    const attributeManager = this.getAttributeManager();\n    if (changeFlags.dataChanged && attributeManager) {\n      attributeManager.invalidateAll();\n    }\n  }\n\n  // Called once when layer is no longer matched and state will be discarded\n  // App can destroy WebGL resources here\n  finalizeState() {\n    for (const model of this.getModels()) {\n      model.delete();\n    }\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.finalize();\n    }\n  }\n\n  // If state has a model, draw it with supplied uniforms\n  draw(opts) {\n    for (const model of this.getModels()) {\n      model.draw(opts);\n    }\n  }\n\n  // called to populate the info object that is passed to the event handler\n  // @return null to cancel event\n  getPickingInfo({info, mode}) {\n    const {index} = info;\n\n    if (index >= 0) {\n      // If props.data is an indexable array, get the object\n      if (Array.isArray(this.props.data)) {\n        info.object = this.props.data[index];\n      }\n    }\n\n    return info;\n  }\n\n  // END LIFECYCLE METHODS\n  // //////////////////////////////////////////////////\n\n  // INTERNAL METHODS\n\n  // Default implementation of attribute invalidation, can be redefined\n  invalidateAttribute(name = 'all', diffReason = '') {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    if (name === 'all') {\n      log.log(LOG_PRIORITY_UPDATE, `updateTriggers invalidating all attributes: ${diffReason}`)();\n      attributeManager.invalidateAll();\n    } else {\n      log.log(\n        LOG_PRIORITY_UPDATE,\n        `updateTriggers invalidating attribute ${name}: ${diffReason}`\n      )();\n      attributeManager.invalidate(name);\n    }\n  }\n\n  // Calls attribute manager to update any WebGL attributes\n  updateAttributes(props) {\n    const attributeManager = this.getAttributeManager();\n    if (!attributeManager) {\n      return;\n    }\n\n    // Figure out data length\n    const numInstances = this.getNumInstances(props);\n\n    attributeManager.update({\n      data: props.data,\n      numInstances,\n      props,\n      transitions: props.transitions,\n      buffers: props,\n      context: this,\n      // Don't worry about non-attribute props\n      ignoreUnknownAttributes: true\n    });\n\n    const models = this.getModels();\n\n    if (models.length > 0) {\n      const changedAttributes = attributeManager.getChangedAttributes({clearChangedFlags: true});\n      for (let i = 0, len = models.length; i < len; ++i) {\n        this._setModelAttributes(models[i], changedAttributes);\n      }\n    }\n  }\n\n  // Update attribute transition\n  updateTransition() {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.updateTransition(this.context.time);\n    }\n  }\n\n  calculateInstancePickingColors(attribute, {numInstances}) {\n    const {value, size} = attribute;\n\n    if (value[0] === 1) {\n      // This can happen when data has changed, but the attribute value typed array\n      // has sufficient size and does not need to be re-allocated.\n      // This attribute is already populated, we do not have to recalculate it\n      return;\n    }\n\n    // calculateInstancePickingColors always generates the same sequence.\n    // pickingColorCache saves the largest generated sequence for reuse\n    const cacheSize = pickingColorCache.length / size;\n\n    if (cacheSize < numInstances) {\n      // If the attribute is larger than the cache, resize the cache and populate the missing chunk\n      const newPickingColorCache = new Uint8ClampedArray(numInstances * size);\n      newPickingColorCache.set(pickingColorCache);\n      const pickingColor = [];\n\n      for (let i = cacheSize; i < numInstances; i++) {\n        this.encodePickingColor(i, pickingColor);\n        newPickingColorCache[i * size + 0] = pickingColor[0];\n        newPickingColorCache[i * size + 1] = pickingColor[1];\n        newPickingColorCache[i * size + 2] = pickingColor[2];\n      }\n\n      pickingColorCache = newPickingColorCache;\n    }\n\n    // Copy the last calculated picking color sequence into the attribute\n    value.set(\n      numInstances < cacheSize\n        ? pickingColorCache.subarray(0, numInstances * size)\n        : pickingColorCache\n    );\n  }\n\n  _setModelAttributes(model, changedAttributes) {\n    const shaderAttributes = {};\n    const excludeAttributes = model.userData.excludeAttributes || {};\n    for (const attributeName in changedAttributes) {\n      if (!excludeAttributes[attributeName]) {\n        Object.assign(shaderAttributes, changedAttributes[attributeName].getShaderAttributes());\n      }\n    }\n\n    model.setAttributes(shaderAttributes);\n  }\n\n  // Sets the specified instanced picking color to null picking color. Used for multi picking.\n  _clearInstancePickingColor(color) {\n    const {instancePickingColors} = this.getAttributeManager().attributes;\n    const {value, size} = instancePickingColors;\n\n    const i = this.decodePickingColor(color);\n    value[i * size + 0] = 0;\n    value[i * size + 1] = 0;\n    value[i * size + 2] = 0;\n\n    // TODO: Optimize this to use sub-buffer update!\n    instancePickingColors.update({value});\n  }\n\n  // Sets all occurrences of the specified picking color to null picking color. Used for multi picking.\n  _clearPickingColor(color) {\n    const {pickingColors} = this.getAttributeManager().attributes;\n    const {value} = pickingColors;\n\n    for (let i = 0; i < value.length; i += 3) {\n      if (value[i + 0] === color[0] && value[i + 1] === color[1] && value[i + 2] === color[2]) {\n        value[i + 0] = 0;\n        value[i + 1] = 0;\n        value[i + 2] = 0;\n      }\n    }\n\n    // TODO: Optimize this to use sub-buffer update!\n    pickingColors.update({value});\n  }\n\n  // This method figures out if we use instance colors or not\n  // and calls _clearInstancePickingColor or _clearPickingColor\n  clearPickingColor(color) {\n    if (this.getAttributeManager().attributes.pickingColors) {\n      this._clearPickingColor(color);\n    } else {\n      this._clearInstancePickingColor(color);\n    }\n  }\n\n  copyPickingColors() {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    return new Uint8ClampedArray(colors.value);\n  }\n\n  restorePickingColors(value) {\n    const {pickingColors, instancePickingColors} = this.getAttributeManager().attributes;\n    const colors = pickingColors || instancePickingColors;\n\n    colors.update({value});\n  }\n\n  // Deduces numer of instances. Intention is to support:\n  // - Explicit setting of numInstances\n  // - Auto-deduction for ES6 containers that define a size member\n  // - Auto-deduction for Classic Arrays via the built-in length attribute\n  // - Auto-deduction via arrays\n  getNumInstances(props) {\n    props = props || this.props;\n\n    // First Check if app has provided an explicit value\n    if (props.numInstances !== undefined) {\n      return props.numInstances;\n    }\n\n    // Second check if the layer has set its own value\n    if (this.state && this.state.numInstances !== undefined) {\n      return this.state.numInstances;\n    }\n\n    // Use container library to get a count for any ES6 container or object\n    const {data} = this.props;\n    return count(data);\n  }\n\n  // LAYER MANAGER API\n  // Should only be called by the deck.gl LayerManager class\n\n  // Called by layer manager when a new layer is found\n  /* eslint-disable max-statements */\n  _initialize() {\n    this._initState();\n\n    // Call subclass lifecycle methods\n    this.initializeState(this.context);\n    // End subclass lifecycle methods\n\n    // TODO deprecated, for backwards compatibility with older layers\n    // in case layer resets state\n    this.state.attributeManager = this.getAttributeManager();\n\n    // initializeState callback tends to clear state\n    this.setChangeFlags({dataChanged: true, propsChanged: true, viewportChanged: true});\n\n    this._updateState();\n\n    const model = this.getSingleModel();\n    if (model) {\n      model.id = this.props.id;\n      model.program.id = `${this.props.id}-program`;\n    }\n  }\n\n  // Called by layer manager\n  // if this layer is new (not matched with an existing layer) oldProps will be empty object\n  _update() {\n    // Call subclass lifecycle method\n    const stateNeedsUpdate = this.needsUpdate();\n    // End lifecycle method\n\n    if (stateNeedsUpdate) {\n      this._updateState();\n    }\n  }\n  /* eslint-enable max-statements */\n\n  // Common code for _initialize and _update\n  _updateState() {\n    const updateParams = this._getUpdateParams();\n\n    // Safely call subclass lifecycle methods\n    if (this.context.gl) {\n      this.updateState(updateParams);\n    } else {\n      try {\n        this.updateState(updateParams);\n      } catch (error) {\n        // ignore error if gl context is missing\n      }\n    }\n    // End subclass lifecycle methods\n\n    if (this.isComposite) {\n      // Render or update previously rendered sublayers\n      this._renderLayers(updateParams);\n    } else {\n      this.setNeedsRedraw();\n      // Add any subclass attributes\n      this.updateAttributes(this.props);\n      this._updateBaseUniforms();\n\n      // Note: Automatic instance count update only works for single layers\n      if (this.state.model) {\n        this.state.model.setInstanceCount(this.getNumInstances());\n      }\n    }\n\n    this.clearChangeFlags();\n    this.internalState.resetOldProps();\n  }\n\n  // Called by manager when layer is about to be disposed\n  // Note: not guaranteed to be called on application shutdown\n  _finalize() {\n    assert(this.internalState && this.state);\n\n    // Call subclass lifecycle method\n    this.finalizeState(this.context);\n    // End lifecycle method\n    removeLayerInSeer(this.id);\n  }\n\n  // Calculates uniforms\n  drawLayer({moduleParameters = null, uniforms = {}, parameters = {}}) {\n    if (!uniforms.picking_uActive) {\n      this.updateTransition();\n    }\n\n    // TODO/ib - hack move to luma Model.draw\n    if (moduleParameters) {\n      this.setModuleParameters(moduleParameters);\n    }\n\n    // Hack/ib - define a public luma function\n    const {animationProps} = this.context;\n    if (animationProps) {\n      for (const model of this.getModels()) {\n        model._setAnimationProps(animationProps);\n      }\n    }\n\n    // Apply polygon offset to avoid z-fighting\n    // TODO - move to draw-layers\n    const {getPolygonOffset} = this.props;\n    const offsets = (getPolygonOffset && getPolygonOffset(uniforms)) || [0, 0];\n    parameters.polygonOffset = offsets;\n\n    // Call subclass lifecycle method\n    withParameters(this.context.gl, parameters, () => {\n      this.draw({moduleParameters, uniforms, parameters, context: this.context});\n    });\n    // End lifecycle method\n  }\n\n  // {uniforms = {}, ...opts}\n  pickLayer(opts) {\n    // Call subclass lifecycle method\n    return this.getPickingInfo(opts);\n    // End lifecycle method\n  }\n\n  // Helper methods\n  getChangeFlags() {\n    return this.internalState.changeFlags;\n  }\n\n  // Dirty some change flags, will be handled by updateLayer\n  /* eslint-disable complexity */\n  setChangeFlags(flags) {\n    this.internalState.changeFlags = this.internalState.changeFlags || {};\n    const changeFlags = this.internalState.changeFlags;\n\n    // Update primary flags\n    if (flags.dataChanged && !changeFlags.dataChanged) {\n      changeFlags.dataChanged = flags.dataChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `dataChanged: ${flags.dataChanged} in ${this.id}`)();\n    }\n    if (flags.updateTriggersChanged && !changeFlags.updateTriggersChanged) {\n      changeFlags.updateTriggersChanged =\n        changeFlags.updateTriggersChanged && flags.updateTriggersChanged\n          ? Object.assign({}, flags.updateTriggersChanged, changeFlags.updateTriggersChanged)\n          : flags.updateTriggersChanged || changeFlags.updateTriggersChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 1,\n        () =>\n          'updateTriggersChanged: ' +\n          `${Object.keys(flags.updateTriggersChanged).join(', ')} in ${this.id}`\n      )();\n    }\n    if (flags.propsChanged && !changeFlags.propsChanged) {\n      changeFlags.propsChanged = flags.propsChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `propsChanged: ${flags.propsChanged} in ${this.id}`)();\n    }\n    if (flags.viewportChanged && !changeFlags.viewportChanged) {\n      changeFlags.viewportChanged = flags.viewportChanged;\n      log.log(\n        LOG_PRIORITY_UPDATE + 2,\n        () => `viewportChanged: ${flags.viewportChanged} in ${this.id}`\n      )();\n    }\n    if (flags.stateChanged && !changeFlags.stateChanged) {\n      changeFlags.stateChanged = flags.stateChanged;\n      log.log(LOG_PRIORITY_UPDATE + 1, () => `stateChanged: ${flags.stateChanged} in ${this.id}`)();\n    }\n\n    // Update composite flags\n    const propsOrDataChanged =\n      flags.dataChanged || flags.updateTriggersChanged || flags.propsChanged;\n    changeFlags.propsOrDataChanged = changeFlags.propsOrDataChanged || propsOrDataChanged;\n    changeFlags.somethingChanged =\n      changeFlags.somethingChanged ||\n      propsOrDataChanged ||\n      flags.viewportChanged ||\n      flags.stateChanged;\n  }\n  /* eslint-enable complexity */\n\n  // Clear all changeFlags, typically after an update\n  clearChangeFlags() {\n    this.internalState.changeFlags = {\n      // Primary changeFlags, can be strings stating reason for change\n      dataChanged: false,\n      propsChanged: false,\n      updateTriggersChanged: false,\n      viewportChanged: false,\n      stateChanged: false,\n\n      // Derived changeFlags\n      propsOrDataChanged: false,\n      somethingChanged: false\n    };\n  }\n\n  printChangeFlags() {\n    const flags = this.internalState.changeFlags;\n    return `\\\n${flags.dataChanged ? 'data ' : ''}\\\n${flags.propsChanged ? 'props ' : ''}\\\n${flags.updateTriggersChanged ? 'triggers ' : ''}\\\n${flags.viewportChanged ? 'viewport' : ''}\\\n`;\n  }\n\n  // Compares the layers props with old props from a matched older layer\n  // and extracts change flags that describe what has change so that state\n  // can be update correctly with minimal effort\n  diffProps(newProps, oldProps) {\n    const changeFlags = diffProps(newProps, oldProps);\n\n    // iterate over changedTriggers\n    if (changeFlags.updateTriggersChanged) {\n      for (const key in changeFlags.updateTriggersChanged) {\n        if (changeFlags.updateTriggersChanged[key]) {\n          this._activeUpdateTrigger(key);\n        }\n      }\n    }\n\n    return this.setChangeFlags(changeFlags);\n  }\n\n  // Called by layer manager to validate props (in development)\n  validateProps() {\n    validateProps(this.props);\n  }\n\n  setModuleParameters(moduleParameters) {\n    for (const model of this.getModels()) {\n      model.updateModuleSettings(moduleParameters);\n    }\n  }\n\n  // PRIVATE METHODS\n\n  _getUpdateParams() {\n    return {\n      props: this.props,\n      oldProps: this.internalState.getOldProps(),\n      context: this.context,\n      changeFlags: this.internalState.changeFlags\n    };\n  }\n\n  // Checks state of attributes and model\n  _getNeedsRedraw(opts) {\n    // this method may be called by the render loop as soon a the layer\n    // has been created, so guard against uninitialized state\n    if (!this.internalState) {\n      return false;\n    }\n\n    let redraw = false;\n    redraw = redraw || (this.internalState.needsRedraw && this.id);\n    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;\n\n    // TODO - is attribute manager needed? - Model should be enough.\n    const attributeManager = this.getAttributeManager();\n    const attributeManagerNeedsRedraw = attributeManager && attributeManager.getNeedsRedraw(opts);\n    redraw = redraw || attributeManagerNeedsRedraw;\n\n    return redraw;\n  }\n\n  // Create new attribute manager\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n\n  _initState() {\n    assert(!this.internalState && !this.state);\n\n    const attributeManager = this._getAttributeManager();\n\n    if (attributeManager) {\n      // All instanced layers get instancePickingColors attribute by default\n      // Their shaders can use it to render a picking scene\n      // TODO - this slightly slows down non instanced layers\n      attributeManager.addInstanced({\n        instancePickingColors: {\n          type: GL.UNSIGNED_BYTE,\n          size: 3,\n          update: this.calculateInstancePickingColors\n        }\n      });\n    }\n\n    this.internalState = new LayerState({\n      attributeManager,\n      layer: this\n    });\n\n    this.state = {};\n    // TODO deprecated, for backwards compatibility with older layers\n    this.state.attributeManager = attributeManager;\n\n    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n  }\n\n  // Called by layer manager to transfer state from an old layer\n  _transferState(oldLayer) {\n    const {state, internalState} = oldLayer;\n    assert(state && internalState);\n\n    if (this === oldLayer) {\n      return;\n    }\n\n    // Move internalState\n    this.internalState = internalState;\n    this.internalState.component = this;\n\n    // Move state\n    this.state = state;\n    // Deprecated: layer references on `state`\n    state.layer = this;\n    // We keep the state ref on old layers to support async actions\n    // oldLayer.state = null;\n\n    // Ensure any async props are updated\n    this.internalState.setAsyncProps(this.props);\n\n    // Update model layer reference\n    for (const model of this.getModels()) {\n      model.userData.layer = this;\n    }\n\n    this.diffProps(this.props, this.internalState.getOldProps());\n  }\n\n  _onAsyncPropUpdated() {\n    this.diffProps(this.props, this.internalState.getOldProps());\n    this.setLayerNeedsUpdate();\n  }\n\n  // Operate on each changed triggers, will be called when an updateTrigger changes\n  _activeUpdateTrigger(propName) {\n    this.invalidateAttribute(propName);\n  }\n\n  _updateBaseUniforms() {\n    const uniforms = {\n      // apply gamma to opacity to make it visually \"linear\"\n      opacity:\n        typeof this.props.opacity === 'function'\n          ? animationProps => Math.pow(this.props.opacity(animationProps), 1 / 2.2)\n          : Math.pow(this.props.opacity, 1 / 2.2)\n    };\n    for (const model of this.getModels()) {\n      model.setUniforms(uniforms);\n    }\n  }\n\n  // DEPRECATED METHODS\n\n  // Updates selected state members and marks the object for redraw\n  setUniforms(uniformMap) {\n    for (const model of this.getModels()) {\n      model.setUniforms(uniformMap);\n    }\n\n    // TODO - set needsRedraw on the model(s)?\n    this.setNeedsRedraw();\n    log.deprecated('layer.setUniforms', 'model.setUniforms')();\n  }\n\n  is64bitEnabled() {\n    log.deprecated('is64bitEnabled', 'use64bitProjection')();\n    return this.use64bitProjection();\n  }\n}\n\nLayer.layerName = 'Layer';\nLayer.defaultProps = defaultProps;\n"],"file":"layer.js"}