{"version":3,"sources":["../../../src/lib/deck-renderer.js"],"names":["LOG_PRIORITY_DRAW","DeckRenderer","gl","pixelRatio","layerFilter","drawPickingColors","drawLayersPass","DrawLayersPass","pickLayersPass","PickLayersPass","renderCount","_needsRedraw","props","useDevicePixels","setProps","layers","viewports","activateViewport","views","redrawReason","clearCanvas","effects","pass","stats","layerPass","effectProps","prepareEffects","renderStats","render","onViewportActive","log","priority","forEach","status","logRenderStats","opts","clearRedrawFlags","redraw","effect","Object","assign","prepare","totalCount","visibleCount","compositeCount","pickableCount","primitiveCount","hiddenCount","message","get","add"],"mappings":"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","sourcesContent":["import log from '../utils/log';\nimport DrawLayersPass from '../passes/draw-layers-pass';\nimport PickLayersPass from '../passes/pick-layers-pass';\nimport getPixelRatio from '../utils/get-pixel-ratio';\n\nconst LOG_PRIORITY_DRAW = 2;\n\nexport default class DeckRenderer {\n  constructor(gl) {\n    this.gl = gl;\n    this.pixelRatio = null;\n    this.layerFilter = null;\n    this.drawPickingColors = false;\n    this.drawLayersPass = new DrawLayersPass(gl);\n    this.pickLayersPass = new PickLayersPass(gl);\n    this.renderCount = 0;\n    this._needsRedraw = 'Initial render';\n  }\n\n  setProps(props) {\n    if ('useDevicePixels' in props) {\n      this.pixelRatio = getPixelRatio(props.useDevicePixels);\n    }\n\n    if ('layerFilter' in props) {\n      if (this.layerFilter !== props.layerFilter) {\n        this.layerFilter = props.layerFilter;\n        this._needsRedraw = 'layerFilter changed';\n      }\n    }\n\n    if ('drawPickingColors' in props) {\n      if (this.drawPickingColors !== props.drawPickingColors) {\n        this.drawPickingColors = props.drawPickingColors;\n        this._needsRedraw = 'drawPickingColors changed';\n      }\n    }\n\n    const {pixelRatio, layerFilter} = this;\n\n    this.drawLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n    this.pickLayersPass.setProps({\n      pixelRatio,\n      layerFilter\n    });\n  }\n\n  renderLayers({\n    layers,\n    viewports,\n    activateViewport,\n    views,\n    redrawReason = 'unknown reason',\n    clearCanvas = true,\n    effects = [],\n    pass,\n    stats\n  }) {\n    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;\n    const effectProps = this.prepareEffects(effects);\n    const renderStats = layerPass.render({\n      layers,\n      viewports,\n      views,\n      onViewportActive: activateViewport,\n      redrawReason,\n      clearCanvas,\n      effects,\n      effectProps\n    });\n    this.renderCount++;\n\n    if (log.priority >= LOG_PRIORITY_DRAW) {\n      renderStats.forEach(status => {\n        this.logRenderStats({status, pass, redrawReason, stats});\n      });\n    }\n  }\n\n  needsRedraw(opts = {clearRedrawFlags: false}) {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  // Private\n  prepareEffects(effects) {\n    const effectProps = {};\n\n    for (const effect of effects) {\n      Object.assign(effectProps, effect.prepare());\n    }\n\n    return effectProps;\n  }\n\n  logRenderStats({renderStats, pass, redrawReason, stats}) {\n    const {totalCount, visibleCount, compositeCount, pickableCount} = renderStats;\n    const primitiveCount = totalCount - compositeCount;\n    const hiddenCount = primitiveCount - visibleCount;\n\n    let message = '';\n    message += `RENDER #${this.renderCount} \\\n${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason} `;\n    if (log.priority > LOG_PRIORITY_DRAW) {\n      message += `\\\n(${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`;\n    }\n\n    log.log(LOG_PRIORITY_DRAW, message)();\n\n    if (stats) {\n      stats.get('Redraw Layers').add(visibleCount);\n    }\n  }\n}\n"],"file":"deck-renderer.js"}