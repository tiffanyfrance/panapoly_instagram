{"version":3,"sources":["../../../src/glb/glb-builder.js"],"names":["MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLBBuilder","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","imageData","encodeAsGLB","_createGLBBuffer","key","data","packOptions","jsonData","packTypedArrays","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","_packBinaryChunk","arrayBuffer","totalByteLength","ArrayBuffer","targetArray","Uint8Array","dstByteOffset","i","binChunk","magic","warn","jsonChunkOffset","jsonChunk","_convertObjectToJsonChunk","jsonChunkLength","binChunkOffset","fileLength","glbArrayBuffer","dataView","DataView","setUint32","setUint8","binChunkLengthPadded","jsonChunkString","JSON","stringify","textEncoder","TextEncoder","encode"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {padTo4Bytes, copyArrayBuffer, copyToArray, TextEncoder} from '@loaders.gl/core';\nimport {isImage} from '@loaders.gl/images';\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-type-utils';\n\nimport packBinaryJson from '../packed-json/pack-binary-json';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in Little-Endian ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in Little-Endian ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in Little-Endian ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n  encodeSync(options = {}) {\n    return this.encodeAsGLB(options);\n  }\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  encodeAsGLB(options = {}) {\n    return this._createGLBBuffer(options);\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  _createGLBBuffer(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    const binChunk = this.arrayBuffer;\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n\n    const jsonChunk = this._convertObjectToJsonChunk(this.json);\n    // As body is 4-byte aligned, the scene length must be padded to have a multiple of 4.\n    const jsonChunkLength = padTo4Bytes(jsonChunk.byteLength);\n\n    const binChunkOffset = jsonChunkLength + jsonChunkOffset;\n    const fileLength = binChunkOffset + GLB_CHUNK_HEADER_SIZE + padTo4Bytes(binChunk.byteLength);\n\n    // Length is know, we can create the GLB memory buffer!\n    const glbArrayBuffer = new ArrayBuffer(fileLength);\n    const dataView = new DataView(glbArrayBuffer);\n\n    // GLB Header\n    dataView.setUint32(0, MAGIC_glTF, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(4, 2, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(8, fileLength, LE); // Total byte length of generated file (uint32)\n\n    // Write the JSON chunk\n    dataView.setUint32(12, jsonChunk.byteLength, LE); // Byte length of json chunk (uint32)\n    dataView.setUint32(16, MAGIC_JSON, LE); // Chunk type\n    copyArrayBuffer(glbArrayBuffer, jsonChunk, jsonChunkOffset);\n    for (let i = 0; i < jsonChunkLength - jsonChunk.byteLength; ++i) {\n      // json chunk is padded with spaces (ASCII 0x20)\n      dataView.setUint8(jsonChunkOffset + jsonChunk.byteLength + i, 0x20);\n    }\n\n    // Write the BIN chunk\n    const binChunkLengthPadded = padTo4Bytes(binChunk.byteLength);\n    dataView.setUint32(binChunkOffset + 0, binChunkLengthPadded, LE); // Byte length BIN (uint32)\n    dataView.setUint32(binChunkOffset + 4, MAGIC_BIN, LE); // Chunk type\n    copyArrayBuffer(glbArrayBuffer, binChunk, binChunkOffset + GLB_CHUNK_HEADER_SIZE);\n    for (let i = 0; i < binChunkLengthPadded - binChunk.byteLength; ++i) {\n      // bin chunk is padded with zeroes\n      dataView.setUint8(binChunkOffset + GLB_CHUNK_HEADER_SIZE + binChunk.byteLength + i, 0);\n    }\n\n    return glbArrayBuffer;\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n\n  _convertObjectToJsonChunk(json) {\n    const jsonChunkString = JSON.stringify(json);\n    const textEncoder = new TextEncoder('utf8');\n    return textEncoder.encode(jsonChunkString);\n  }\n}\n"],"file":"glb-builder.js"}