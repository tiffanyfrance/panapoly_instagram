{"version":3,"sources":["../../../src/glb/glb-parser.js"],"names":["assert","parseGLBSync","unpackGLBBuffers","unpackBinaryJson","ATTRIBUTE_TYPE_TO_COMPONENTS","ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE","ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY","MAGIC_glTF","GLBParser","isGLB","arrayBuffer","options","magic","dataView","DataView","magic1","getUint32","parse","parseSync","glbArrayBuffer","binaryByteOffset","packedJson","json","byteOffset","binChunkByteOffset","unpackedBuffers","getApplicationData","key","getJSON","getArrayBuffer","getBinaryByteOffset","getBufferView","glTFBufferView","Uint8Array","byteLength","getBuffer","glTFAccessor","ArrayType","componentType","components","type","bytesPerComponent","length","count","bufferViews","bufferView","getImageData","glTFImage","typedArray","mimeType","getImage","arrayBufferView","blob","Blob","urlCreator","self","URL","webkitURL","imageUrl","createObjectURL","img","Image","src","getImageAsync","Promise","resolve","onload"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {assert} from '@loaders.gl/core';\n\nimport {parseGLBSync} from './parse-glb';\nimport unpackGLBBuffers from './unpack-glb-buffers';\nimport unpackBinaryJson from '../packed-json/unpack-binary-json';\n\nimport {\n  ATTRIBUTE_TYPE_TO_COMPONENTS,\n  ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE,\n  ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY\n} from './gltf-type-utils';\n\nconst MAGIC_glTF = 0x676c5446; // glTF in Big-Endian ASCII\n\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#glb-file-format-specification\nexport default class GLBParser {\n  static isGLB(arrayBuffer, options = {}) {\n    // Check that GLB Header starts with the magic number\n    const {magic = MAGIC_glTF} = options;\n    const dataView = new DataView(arrayBuffer);\n    const magic1 = dataView.getUint32(0, false);\n    return magic1 === magic || magic1 === MAGIC_glTF;\n  }\n\n  // Return the gltf JSON and the original arrayBuffer\n  parse(arrayBuffer, options = {}) {\n    return this.parseSync(arrayBuffer, options);\n  }\n\n  parseSync(arrayBuffer, options = {}) {\n    this.glbArrayBuffer = arrayBuffer;\n\n    this.binaryByteOffset = null;\n    this.packedJson = null;\n    this.json = null;\n\n    // Only parse once\n    if (this.json === null && this.binaryByteOffset === null) {\n      const byteOffset = 0;\n\n      // Populates the supplied object (`this`) with parsed data members.\n      parseGLBSync(this, this.glbArrayBuffer, byteOffset, options);\n\n      // Backwards compat\n      this.binaryByteOffset = this.binChunkByteOffset;\n\n      // Unpack binary JSON\n      this.packedJson = this.json;\n      this.unpackedBuffers = unpackGLBBuffers(\n        this.glbArrayBuffer,\n        this.json,\n        this.binaryByteOffset\n      );\n      this.json = unpackBinaryJson(this.json, this.unpackedBuffers);\n    }\n\n    return this;\n  }\n\n  // Returns application JSON data stored in `key`\n  getApplicationData(key) {\n    return this.json[key];\n  }\n\n  // Returns JSON envelope\n  getJSON() {\n    return this.json;\n  }\n\n  // Return binary chunk\n  getArrayBuffer() {\n    return this.glbArrayBuffer;\n  }\n\n  // Return index into binary chunk\n  getBinaryByteOffset() {\n    return this.binaryByteOffset;\n  }\n\n  // Unpacks a bufferview into a new Uint8Array that is a view into the binary chunk\n  getBufferView(glTFBufferView) {\n    const byteOffset = (glTFBufferView.byteOffset || 0) + this.binaryByteOffset;\n    return new Uint8Array(this.glbArrayBuffer, byteOffset, glTFBufferView.byteLength);\n  }\n\n  // Unpacks a glTF accessor into a new typed array that is a view into the binary chunk\n  getBuffer(glTFAccessor) {\n    // Decode the glTF accessor format\n    const ArrayType = ATTRIBUTE_COMPONENT_TYPE_TO_ARRAY[glTFAccessor.componentType];\n    const components = ATTRIBUTE_TYPE_TO_COMPONENTS[glTFAccessor.type];\n    const bytesPerComponent = ATTRIBUTE_COMPONENT_TYPE_TO_BYTE_SIZE[glTFAccessor.componentType];\n    const length = glTFAccessor.count * components;\n    const byteLength = glTFAccessor.count * components * bytesPerComponent;\n\n    // Get the boundaries of the binary sub-chunk for this bufferView\n    const glTFBufferView = this.json.bufferViews[glTFAccessor.bufferView];\n    assert(byteLength >= 0 && glTFAccessor.byteOffset + byteLength <= glTFBufferView.byteLength);\n\n    const byteOffset = glTFBufferView.byteOffset + this.binaryByteOffset + glTFAccessor.byteOffset;\n    return new ArrayType(this.glbArrayBuffer, byteOffset, length);\n  }\n\n  // Unpacks an image into an HTML image\n  getImageData(glTFImage) {\n    return {\n      typedArray: this.getBufferView(glTFImage.bufferView),\n      mimeType: glTFImage.mimeType || 'image/jpeg'\n    };\n  }\n\n  getImage(glTFImage) {\n    /* global self, Blob, Image */\n    const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n    const mimeType = glTFImage.mimeType || 'image/jpeg';\n    const blob = new Blob([arrayBufferView], {type: mimeType});\n    const urlCreator = self.URL || self.webkitURL;\n    const imageUrl = urlCreator.createObjectURL(blob);\n    const img = new Image();\n    img.src = imageUrl;\n    return img;\n  }\n\n  getImageAsync(glTFImage) {\n    /* global self, Blob, Image */\n    return new Promise(resolve => {\n      const arrayBufferView = this.getBufferView(glTFImage.bufferView);\n      const mimeType = glTFImage.mimeType || 'image/jpeg';\n      const blob = new Blob([arrayBufferView], {type: mimeType});\n      const urlCreator = self.URL || self.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      const img = new Image();\n      img.onload = () => resolve(img);\n      img.src = imageUrl;\n    });\n  }\n}\n"],"file":"glb-parser.js"}