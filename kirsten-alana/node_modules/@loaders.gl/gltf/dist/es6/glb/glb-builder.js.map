{"version":3,"sources":["../../../src/glb/glb-builder.js"],"names":["padTo4Bytes","copyArrayBuffer","copyToArray","TextEncoder","isImage","getAccessorTypeFromSize","getComponentTypeFromArray","packBinaryJson","MAGIC_glTF","MAGIC_JSON","MAGIC_BIN","LE","GLB_FILE_HEADER_SIZE","GLB_CHUNK_HEADER_SIZE","GLBBuilder","constructor","options","byteLength","json","buffers","bufferViews","accessors","images","meshes","sourceBuffers","log","console","getByteLength","imageData","encodeSync","encodeAsGLB","_createGLBBuffer","addApplicationData","key","data","packOptions","jsonData","packTypedArrays","addBuffer","sourceBuffer","accessor","size","bufferViewIndex","addBufferView","accessorDefaults","componentType","count","Math","round","length","addAccessor","Object","assign","buffer","push","byteOffset","bufferView","type","_pack","_packBinaryChunk","arrayBuffer","totalByteLength","ArrayBuffer","targetArray","Uint8Array","dstByteOffset","i","binChunk","magic","warn","jsonChunkOffset","jsonChunk","_convertObjectToJsonChunk","jsonChunkLength","binChunkOffset","fileLength","glbArrayBuffer","dataView","DataView","setUint32","setUint8","binChunkLengthPadded","_getInternalCounts","jsonChunkString","JSON","stringify","textEncoder","encode"],"mappings":"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","sourcesContent":["/* eslint-disable camelcase, max-statements */\nimport {padTo4Bytes, copyArrayBuffer, copyToArray, TextEncoder} from '@loaders.gl/core';\nimport {isImage} from '@loaders.gl/images';\nimport {getAccessorTypeFromSize, getComponentTypeFromArray} from './gltf-type-utils';\n\nimport packBinaryJson from '../packed-json/pack-binary-json';\n\nconst MAGIC_glTF = 0x46546c67; // glTF in Little-Endian ASCII\nconst MAGIC_JSON = 0x4e4f534a; // JSON in Little-Endian ASCII\nconst MAGIC_BIN = 0x004e4942; // BIN\\0 in Little-Endian ASCII\n\nconst LE = true; // Binary GLTF is little endian.\n\nconst GLB_FILE_HEADER_SIZE = 12;\nconst GLB_CHUNK_HEADER_SIZE = 8;\n\nexport default class GLBBuilder {\n  constructor(options = {}) {\n    // Lets us keep track of how large the body will be, as well as the offset for each of the\n    // original buffers.\n    this.byteLength = 0;\n\n    this.json = {\n      buffers: [\n        {\n          // Just the single BIN chunk buffer\n          byteLength: 0 // Updated at end of conversion\n        }\n      ],\n      bufferViews: [],\n      accessors: [],\n      images: [],\n      meshes: []\n    };\n\n    // list of binary buffers to be written to the BIN chunk\n    // (Each call to addBuffer, addImage etc adds an entry here)\n    this.sourceBuffers = [];\n\n    this.log = options.log || console; // eslint-disable-line\n  }\n\n  // ACCESSORS\n\n  getByteLength() {\n    return this.byteLength;\n  }\n\n  // Checks if a binary buffer is a recognized image format (PNG, JPG, GIF, ...)\n  isImage(imageData) {\n    return isImage(imageData);\n  }\n\n  // MODIFERS\n  encodeSync(options = {}) {\n    return this.encodeAsGLB(options);\n  }\n\n  // Encode the full glTF file as a binary GLB file\n  // Returns an ArrayBuffer that represents the complete GLB image that can be saved to file\n  encodeAsGLB(options = {}) {\n    return this._createGLBBuffer(options);\n  }\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.packTypedArrays ? packBinaryJson(data, this, packOptions) : data;\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // Add a binary buffer. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes buffers as glTF accessors, but this could be optimized\n  addBuffer(sourceBuffer, accessor = {size: 3}) {\n    const bufferViewIndex = this.addBufferView(sourceBuffer);\n\n    const accessorDefaults = {\n      size: accessor.size,\n      componentType: getComponentTypeFromArray(sourceBuffer),\n      count: Math.round(sourceBuffer.length / accessor.size)\n    };\n\n    return this.addAccessor(bufferViewIndex, Object.assign(accessorDefaults, accessor));\n  }\n\n  // Basic glTF adders: basic memory buffer/image type fields\n  // Scenegraph specific adders are placed in glTFBuilder\n  // TODO: These should be moved to glTFBuilder once addBuffer\n  // have been rewritten to not depend on these.\n\n  // Add one untyped source buffer, create a matching glTF `bufferView`, and return its index\n  addBufferView(buffer) {\n    const byteLength = buffer.byteLength || buffer.length;\n\n    // Add a bufferView indicating start and length of this binary sub-chunk\n    this.json.bufferViews.push({\n      buffer: 0,\n      // Write offset from the start of the binary body\n      byteOffset: this.byteLength,\n      byteLength\n    });\n\n    // We've now written the contents to the body, so update the total length\n    // Every sub-chunk needs to be 4-byte aligned\n    this.byteLength += padTo4Bytes(byteLength);\n\n    // Add this buffer to the list of buffers to be written to the body.\n    this.sourceBuffers.push(buffer);\n\n    // Return the index to the just created bufferView\n    return this.json.bufferViews.length - 1;\n  }\n\n  // Adds an accessor to a bufferView\n  addAccessor(bufferViewIndex, accessor) {\n    // Add an accessor pointing to the new buffer view\n    this.json.accessors.push({\n      bufferView: bufferViewIndex,\n      type: getAccessorTypeFromSize(accessor.size),\n      componentType: accessor.componentType,\n      count: accessor.count\n    });\n\n    return this.json.accessors.length - 1;\n  }\n\n  // PRIVATE\n\n  // For testing\n  _pack() {\n    this._packBinaryChunk();\n    return {arrayBuffer: this.arrayBuffer, json: this.json};\n  }\n\n  // Pack the binary chunk\n  _packBinaryChunk() {\n    // Already packed\n    if (this.arrayBuffer) {\n      return;\n    }\n\n    // Allocate total array\n    const totalByteLength = this.byteLength;\n    const arrayBuffer = new ArrayBuffer(totalByteLength);\n    const targetArray = new Uint8Array(arrayBuffer);\n\n    // Copy each array into\n    let dstByteOffset = 0;\n    for (let i = 0; i < this.sourceBuffers.length; i++) {\n      const sourceBuffer = this.sourceBuffers[i];\n      dstByteOffset = copyToArray(sourceBuffer, targetArray, dstByteOffset);\n    }\n\n    // Update the glTF BIN CHUNK byte length\n    this.json.buffers[0].byteLength = totalByteLength;\n\n    // Save generated arrayBuffer\n    this.arrayBuffer = arrayBuffer;\n\n    // Clear out sourceBuffers\n    this.sourceBuffers = [];\n  }\n\n  // Encode the full GLB buffer with header etc\n  // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#\n  // glb-file-format-specification\n  _createGLBBuffer(options = {}) {\n    // TODO - avoid double array buffer creation\n    this._packBinaryChunk();\n\n    const binChunk = this.arrayBuffer;\n    if (options.magic) {\n      console.warn('Custom glTF magic number no longer supported'); // eslint-disable-line\n    }\n\n    const jsonChunkOffset = GLB_FILE_HEADER_SIZE + GLB_CHUNK_HEADER_SIZE; // First headers: 20 bytes\n\n    const jsonChunk = this._convertObjectToJsonChunk(this.json);\n    // As body is 4-byte aligned, the scene length must be padded to have a multiple of 4.\n    const jsonChunkLength = padTo4Bytes(jsonChunk.byteLength);\n\n    const binChunkOffset = jsonChunkLength + jsonChunkOffset;\n    const fileLength = binChunkOffset + GLB_CHUNK_HEADER_SIZE + padTo4Bytes(binChunk.byteLength);\n\n    // Length is know, we can create the GLB memory buffer!\n    const glbArrayBuffer = new ArrayBuffer(fileLength);\n    const dataView = new DataView(glbArrayBuffer);\n\n    // GLB Header\n    dataView.setUint32(0, MAGIC_glTF, LE); // Magic number (the ASCII string 'glTF').\n    dataView.setUint32(4, 2, LE); // Version 2 of binary glTF container format uint32\n    dataView.setUint32(8, fileLength, LE); // Total byte length of generated file (uint32)\n\n    // Write the JSON chunk\n    dataView.setUint32(12, jsonChunk.byteLength, LE); // Byte length of json chunk (uint32)\n    dataView.setUint32(16, MAGIC_JSON, LE); // Chunk type\n    copyArrayBuffer(glbArrayBuffer, jsonChunk, jsonChunkOffset);\n    for (let i = 0; i < jsonChunkLength - jsonChunk.byteLength; ++i) {\n      // json chunk is padded with spaces (ASCII 0x20)\n      dataView.setUint8(jsonChunkOffset + jsonChunk.byteLength + i, 0x20);\n    }\n\n    // Write the BIN chunk\n    const binChunkLengthPadded = padTo4Bytes(binChunk.byteLength);\n    dataView.setUint32(binChunkOffset + 0, binChunkLengthPadded, LE); // Byte length BIN (uint32)\n    dataView.setUint32(binChunkOffset + 4, MAGIC_BIN, LE); // Chunk type\n    copyArrayBuffer(glbArrayBuffer, binChunk, binChunkOffset + GLB_CHUNK_HEADER_SIZE);\n    for (let i = 0; i < binChunkLengthPadded - binChunk.byteLength; ++i) {\n      // bin chunk is padded with zeroes\n      dataView.setUint8(binChunkOffset + GLB_CHUNK_HEADER_SIZE + binChunk.byteLength + i, 0);\n    }\n\n    return glbArrayBuffer;\n  }\n\n  // Report internal buffer sizes for debug and testing purposes\n  _getInternalCounts() {\n    return {\n      buffers: this.json.buffers.length,\n      bufferViews: this.json.bufferViews.length,\n      accessors: this.json.accessors.length,\n      images: this.json.images.length\n    };\n  }\n\n  _convertObjectToJsonChunk(json) {\n    const jsonChunkString = JSON.stringify(json);\n    const textEncoder = new TextEncoder('utf8');\n    return textEncoder.encode(jsonChunkString);\n  }\n}\n"],"file":"glb-builder.js"}