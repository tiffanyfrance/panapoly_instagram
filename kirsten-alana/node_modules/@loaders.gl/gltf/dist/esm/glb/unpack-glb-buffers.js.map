{"version":3,"sources":["../../../src/glb/unpack-glb-buffers.js"],"names":["assert","TYPE_COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","COMPONENT_TYPE_BYTE_SIZE","COMPONENT_TYPE_ARRAY","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","unpackGLBBuffers","arrayBuffer","json","binaryByteOffset","getArrayBufferAtOffset","bufferViews","i","length","bufferView","byteLength","accessors","unpackAccessors","images","unpackImages","accessorBuffers","accessor","getArrayTypeAndLength","ArrayType","array","byteOffset","push","imageBuffers","image","imate","componentType","components","type","bytesPerComponent","count","binaryBuffer","ArrayBuffer","sourceArray","binaryArray"],"mappings":"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","sourcesContent":["import {assert} from '@loaders.gl/core';\n\nconst TYPE_COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst COMPONENT_TYPE_BYTE_SIZE = {\n  5120: 1,\n  5121: 1,\n  5122: 2,\n  5123: 2,\n  5125: 4,\n  5126: 4\n};\n\nconst COMPONENT_TYPE_ARRAY = {\n  5120: Int8Array,\n  5121: Uint8Array,\n  5122: Int16Array,\n  5123: Uint16Array,\n  5125: Uint32Array,\n  5126: Float32Array\n};\n\nexport default function unpackGLBBuffers(arrayBuffer, json, binaryByteOffset) {\n  // TODO - really inefficient, should just use the offset into the original array buffer\n  if (binaryByteOffset) {\n    arrayBuffer = getArrayBufferAtOffset(arrayBuffer, binaryByteOffset);\n  }\n\n  const bufferViews = json.bufferViews || [];\n\n  for (let i = 0; i < bufferViews.length; ++i) {\n    const bufferView = bufferViews[i];\n    assert(bufferView.byteLength >= 0);\n  }\n\n  return {\n    // TODO: delete unpackAccessors and use buffer views only?\n    accessors: unpackAccessors(arrayBuffer, bufferViews, json),\n    images: unpackImages(arrayBuffer, bufferViews, json)\n  };\n}\n\nfunction unpackAccessors(arrayBuffer, bufferViews, json) {\n  // unpack accessors\n  const accessors = json.accessors || [];\n\n  const accessorBuffers = [];\n\n  for (let i = 0; i < accessors.length; ++i) {\n    const accessor = accessors[i];\n    assert(accessor);\n\n    const bufferView = bufferViews[accessor.bufferView];\n    // Draco encoded meshes don't have bufferView in accessor\n    if (bufferView) {\n      // Create a new typed array as a view into the combined buffer\n      const {ArrayType, length} = getArrayTypeAndLength(accessor, bufferView);\n      const array = new ArrayType(arrayBuffer, bufferView.byteOffset, length);\n      // Store the metadata on the array (e.g. needed to determine number of components per element)\n      array.accessor = accessor;\n      accessorBuffers.push(array);\n    }\n  }\n\n  return accessorBuffers;\n}\n\nfunction unpackImages(arrayBuffer, bufferViews, json) {\n  // unpack images\n  const images = json.images || [];\n\n  const imageBuffers = [];\n\n  for (let i = 0; i < images.length; ++i) {\n    const image = images[i];\n    assert(image);\n\n    const bufferView = bufferViews[image.bufferView];\n    assert(bufferView);\n\n    // Create a new typed array as a view into the combined buffer\n    const array = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);\n    // Store the metadata on the array (e.g. needed to determine number of components per element)\n    array.imate = image;\n    imageBuffers.push(array);\n  }\n\n  return imageBuffers;\n}\n\n// Helper methods\n\nfunction getArrayTypeAndLength(accessor, bufferView) {\n  const ArrayType = COMPONENT_TYPE_ARRAY[accessor.componentType];\n  const components = TYPE_COMPONENTS[accessor.type];\n  const bytesPerComponent = COMPONENT_TYPE_BYTE_SIZE[accessor.componentType];\n  const length = accessor.count * components;\n  const byteLength = accessor.count * components * bytesPerComponent;\n  assert(byteLength >= 0 && byteLength <= bufferView.byteLength);\n  return {ArrayType, length, byteLength};\n}\n\n// json.accessors = json.accessors || [];\n// json.bufferViews = json.bufferViews || [];\n\n// Creates a new ArrayBuffer starting at the offset, containing all remaining bytes\n// TODO - should not be needed, see above\nfunction getArrayBufferAtOffset(arrayBuffer, byteOffset) {\n  const length = arrayBuffer.byteLength - byteOffset;\n  const binaryBuffer = new ArrayBuffer(length);\n  const sourceArray = new Uint8Array(arrayBuffer);\n  const binaryArray = new Uint8Array(binaryBuffer);\n  for (let i = 0; i < length; i++) {\n    binaryArray[i] = sourceArray[byteOffset + i];\n  }\n  return binaryBuffer;\n}\n"],"file":"unpack-glb-buffers.js"}