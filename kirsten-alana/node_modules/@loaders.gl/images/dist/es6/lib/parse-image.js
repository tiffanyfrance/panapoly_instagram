import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { parseImageNode } from '../node/parse-image-node';
export const canParseImage = parseImageNode || typeof ImageBitmap !== 'undefined';
export function parseImage(arrayBuffer, options) {
  if (parseImageNode) {
    return parseImageNode(arrayBuffer, options);
  }

  return parseToImageBitmap(arrayBuffer);
}
export function loadImage(_x, _x2) {
  return _loadImage.apply(this, arguments);
}

function _loadImage() {
  _loadImage = _asyncToGenerator(function* (url, options) {
    if (typeof Image === 'undefined') {
      const response = yield fetch(url, options);
      const arrayBuffer = yield response.arrayBuffer();
      return parseImage(arrayBuffer);
    }

    return yield loadToHTMLImage(url, options);
  });
  return _loadImage.apply(this, arguments);
}

export function parseToImageBitmap(arrayBuffer) {
  if (typeof createImageBitmap === 'undefined') {
    throw new Error('parseImage');
  }

  const blob = new Blob([new Uint8Array(arrayBuffer)]);
  return createImageBitmap(blob);
}
export function loadToHTMLImage(_x3, _x4) {
  return _loadToHTMLImage.apply(this, arguments);
}

function _loadToHTMLImage() {
  _loadToHTMLImage = _asyncToGenerator(function* (url, options) {
    let src;

    if (/\.svg((\?|#).*)?$/.test(url)) {
      const response = yield fetch(url, options);
      const xml = yield response.text();
      src = "data:image/svg+xml;base64,".concat(btoa(xml));
    } else {
      src = yield url;
    }

    return yield new Promise((resolve, reject) => {
      try {
        const image = new Image();

        image.onload = () => resolve(image);

        image.onerror = err => reject(new Error("Could not load image ".concat(url, ": ").concat(err)));

        image.crossOrigin = options && options.crossOrigin || 'anonymous';
        image.src = src;
      } catch (error) {
        reject(error);
      }
    });
  });
  return _loadToHTMLImage.apply(this, arguments);
}
//# sourceMappingURL=parse-image.js.map