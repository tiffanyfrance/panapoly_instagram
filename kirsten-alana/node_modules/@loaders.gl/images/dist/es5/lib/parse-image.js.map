{"version":3,"sources":["../../../src/lib/parse-image.js"],"names":["canParseImage","parseImageNode","ImageBitmap","parseImage","arrayBuffer","options","parseToImageBitmap","loadImage","url","Image","fetch","response","loadToHTMLImage","createImageBitmap","Error","blob","Blob","Uint8Array","test","text","xml","src","btoa","Promise","resolve","reject","image","onload","onerror","err","crossOrigin","error"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AAEO,IAAMA,aAAa,GAAGC,kCAAkB,OAAOC,WAAP,KAAuB,WAA/D;;;AAGA,SAASC,UAAT,CAAoBC,WAApB,EAAiCC,OAAjC,EAA0C;AAC/C,MAAIJ,8BAAJ,EAAoB;AAClB,WAAO,oCAAeG,WAAf,EAA4BC,OAA5B,CAAP;AACD;;AAED,SAAOC,kBAAkB,CAACF,WAAD,CAAzB;AACD;;SAKqBG,S;;;;;+EAAf,iBAAyBC,GAAzB,EAA8BH,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,OAAOI,KAAP,KAAiB,WADhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEoBC,KAAK,CAACF,GAAD,EAAMH,OAAN,CAFzB;;AAAA;AAEGM,YAAAA,QAFH;AAAA;AAAA,mBAGuBA,QAAQ,CAACP,WAAT,EAHvB;;AAAA;AAGGA,YAAAA,WAHH;AAAA,6CAIID,UAAU,CAACC,WAAD,CAJd;;AAAA;AAAA;AAAA,mBAMQQ,eAAe,CAACJ,GAAD,EAAMH,OAAN,CANvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,SAASC,kBAAT,CAA4BF,WAA5B,EAAyC;AAC9C,MAAI,OAAOS,iBAAP,KAA6B,WAAjC,EAA8C;AAC5C,UAAM,IAAIC,KAAJ,CAAU,YAAV,CAAN;AACD;;AAED,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAAC,IAAIC,UAAJ,CAAeb,WAAf,CAAD,CAAT,CAAb;AACA,SAAOS,iBAAiB,CAACE,IAAD,CAAxB;AACD;;SAGqBH,e;;;;;qFAAf,kBAA+BJ,GAA/B,EAAoCH,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAED,oBAAoBa,IAApB,CAAyBV,GAAzB,CAFC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIoBE,KAAK,CAACF,GAAD,EAAMH,OAAN,CAJzB;;AAAA;AAIGM,YAAAA,QAJH;AAAA;AAAA,mBAKeA,QAAQ,CAACQ,IAAT,EALf;;AAAA;AAKGC,YAAAA,GALH;AAOHC,YAAAA,GAAG,uCAAgCC,IAAI,CAACF,GAAD,CAApC,CAAH;AAPG;AAAA;;AAAA;AAAA;AAAA,mBASSZ,GATT;;AAAA;AASHa,YAAAA,GATG;;AAAA;AAAA;AAAA,mBAYQ,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC5C,kBAAI;AACF,oBAAMC,KAAK,GAAG,IAAIjB,KAAJ,EAAd;;AACAiB,gBAAAA,KAAK,CAACC,MAAN,GAAe;AAAA,yBAAMH,OAAO,CAACE,KAAD,CAAb;AAAA,iBAAf;;AACAA,gBAAAA,KAAK,CAACE,OAAN,GAAgB,UAAAC,GAAG;AAAA,yBAAIJ,MAAM,CAAC,IAAIX,KAAJ,gCAAkCN,GAAlC,eAA0CqB,GAA1C,EAAD,CAAV;AAAA,iBAAnB;;AACAH,gBAAAA,KAAK,CAACI,WAAN,GAAqBzB,OAAO,IAAIA,OAAO,CAACyB,WAApB,IAAoC,WAAxD;AACAJ,gBAAAA,KAAK,CAACL,GAAN,GAAYA,GAAZ;AACD,eAND,CAME,OAAOU,KAAP,EAAc;AACdN,gBAAAA,MAAM,CAACM,KAAD,CAAN;AACD;AACF,aAVY,CAZR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global Image, Blob, createImageBitmap, btoa, fetch */\nimport {parseImageNode} from '../node/parse-image-node';\n\nexport const canParseImage = parseImageNode || typeof ImageBitmap !== 'undefined';\n\n// Parse to platform defined type (ndarray on node, ImageBitmap on browser)\nexport function parseImage(arrayBuffer, options) {\n  if (parseImageNode) {\n    return parseImageNode(arrayBuffer, options);\n  }\n\n  return parseToImageBitmap(arrayBuffer);\n}\n\n// Fallback for older browsers\n// TODO - investigate Image.decode()\n// https://medium.com/dailyjs/image-loading-with-image-decode-b03652e7d2d2\nexport async function loadImage(url, options) {\n  if (typeof Image === 'undefined') {\n    const response = await fetch(url, options);\n    const arrayBuffer = await response.arrayBuffer();\n    return parseImage(arrayBuffer);\n  }\n  return await loadToHTMLImage(url, options);\n}\n\n// Asynchronously parses an array buffer into an ImageBitmap - this contains the decoded data\n// Supported on worker threads\n// Not supported on Edge and Safari\n// https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap#Browser_compatibility\nexport function parseToImageBitmap(arrayBuffer) {\n  if (typeof createImageBitmap === 'undefined') {\n    throw new Error('parseImage');\n  }\n\n  const blob = new Blob([new Uint8Array(arrayBuffer)]);\n  return createImageBitmap(blob);\n}\n\n//\nexport async function loadToHTMLImage(url, options) {\n  let src;\n  if (/\\.svg((\\?|#).*)?$/.test(url)) {\n    // is SVG\n    const response = await fetch(url, options);\n    const xml = await response.text();\n    // base64 encoding is safer. utf-8 fails in some browsers\n    src = `data:image/svg+xml;base64,${btoa(xml)}`;\n  } else {\n    src = await url;\n  }\n\n  return await new Promise((resolve, reject) => {\n    try {\n      const image = new Image();\n      image.onload = () => resolve(image);\n      image.onerror = err => reject(new Error(`Could not load image ${url}: ${err}`));\n      image.crossOrigin = (options && options.crossOrigin) || 'anonymous';\n      image.src = src;\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"],"file":"parse-image.js"}