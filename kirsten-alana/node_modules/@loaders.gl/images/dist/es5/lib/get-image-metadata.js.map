{"version":3,"sources":["../../../src/lib/get-image-metadata.js"],"names":["BIG_ENDIAN","LITTLE_ENDIAN","mimeTypeMap","Map","getPngSize","getJpegSize","getGifSize","getBmpSize","ERR_INVALID_TYPE","Array","from","keys","join","isImage","arrayBuffer","result","guessImageMetadata","mimeType","getImageMetadata","handler","get","Error","entries","supportedMimeType","dataView","toDataView","byteLength","getUint32","width","height","getUint16","getJpegMarkers","tableMarkers","sofMarkers","i","marker","has","Set","add","data","bufferToArrayBuffer","ArrayBuffer","isView","DataView","buffer","getImageSize"],"mappings":"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","sourcesContent":["// Attributions\n// * Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\n// Quarantine references to Buffer to prevent bundler from adding big polyfills\nimport {bufferToArrayBuffer} from '../node/buffer-to-array-buffer';\n\nconst BIG_ENDIAN = false;\nconst LITTLE_ENDIAN = true;\n\nconst mimeTypeMap = new Map([\n  ['image/png', getPngSize],\n  ['image/jpeg', getJpegSize],\n  ['image/gif', getGifSize],\n  ['image/bmp', getBmpSize]\n]);\n\nconst ERR_INVALID_TYPE = `Invalid MIME type. Supported MIME types are: ${Array.from(\n  mimeTypeMap.keys()\n).join(', ')}`;\n\n/**\n * Sniffs the contents of a file to attempt to deduce the image type and extract image type.\n * Supported image types are PNG, JPEG, GIF and BMP.\n */\nexport function isImage(arrayBuffer) {\n  const result = guessImageMetadata(arrayBuffer);\n  return result ? result.mimeType : false;\n}\n\n/**\n * Sniffs the contents of a file to attempt to deduce the image type and size.\n * Supported image types are PNG, JPEG, GIF and BMP.\n * @param {ArrayBuffer} arrayBuffer\n * @param {string} [mimeType]\n */\nexport function getImageMetadata(arrayBuffer, mimeType = null) {\n  // Looking for only a specific MIME type.\n  if (mimeType) {\n    const handler = mimeTypeMap.get(mimeType);\n    if (!handler) {\n      throw new Error(ERR_INVALID_TYPE);\n    }\n\n    const result = handler(arrayBuffer);\n    if (!result) {\n      throw new Error(`invalid image data for type: ${mimeType}`);\n    }\n    return result;\n  }\n\n  const result = guessImageMetadata(arrayBuffer, mimeType);\n  if (!result) {\n    // Seems not :(\n    throw new Error(ERR_INVALID_TYPE);\n  }\n  return result;\n}\n\nfunction guessImageMetadata(arrayBuffer, mimeType) {\n  // Loop through each file type and see if they work.\n  for (const [supportedMimeType, handler] of mimeTypeMap.entries()) {\n    const result = handler(arrayBuffer);\n    if (result) {\n      result.mimeType = supportedMimeType;\n      return result;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Extract size from a binary PNG file\n * @param {Buffer} contents\n */\nfunction getPngSize(arrayBuffer) {\n  const dataView = toDataView(arrayBuffer);\n\n  // Check file contains the first 4 bytes of the PNG signature.\n  if (dataView.byteLength < 24 || dataView.getUint32(0, BIG_ENDIAN) !== 0x89504e47) {\n    return null;\n  }\n\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\n/**\n * Extract size from a binary GIF file\n * @param {Buffer} contents\n * TODO: GIF is not this simple\n */\nfunction getGifSize(arrayBuffer) {\n  const dataView = toDataView(arrayBuffer);\n\n  // Check first 4 bytes of the GIF signature (\"GIF8\").\n  if (dataView.byteLength < 10 || dataView.getUint32(0, BIG_ENDIAN) !== 0x47494638) {\n    return null;\n  }\n\n  // GIF is little endian.\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\n/**\n * @param {Buffer} contents\n * TODO: BMP is not this simple\n */\nfunction getBmpSize(arrayBuffer) {\n  const dataView = toDataView(arrayBuffer);\n\n  // Check magic number is valid (first 2 characters should be \"BM\").\n  if (dataView.getUint16(0, BIG_ENDIAN) !== 0x424d) {\n    return null;\n  }\n\n  // BMP is little endian.\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\n/**\n * Extract size from a binary JPEG file\n * @param {Buffer} contents\n */\nfunction getJpegSize(arrayBuffer) {\n  const dataView = toDataView(arrayBuffer);\n\n  // Check file contains the JPEG \"start of image\" (SOI) marker.\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  const {tableMarkers, sofMarkers} = getJpegMarkers();\n\n  // Exclude the two byte SOI marker.\n  let i = 2;\n  while (i < dataView.byteLength) {\n    const marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    // The frame that contains the width and height of the JPEG image.\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN), // Number of lines\n        width: dataView.getUint16(i + 7, BIG_ENDIAN) // Number of pixels per line\n      };\n    }\n\n    // Miscellaneous tables/data preceding the frame header.\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    // Length includes size of length parameter but not the two byte header.\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  // Tables/misc header markers.\n  // DQT, DHT, DAC, DRI, COM, APP_n\n  const tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n  for (let i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  // SOF markers and DHP marker.\n  // These markers are after tables/misc data.\n  const sofMarkers = new Set([\n    0xffc0,\n    0xffc1,\n    0xffc2,\n    0xffc3,\n    0xffc5,\n    0xffc6,\n    0xffc7,\n    0xffc9,\n    0xffca,\n    0xffcb,\n    0xffcd,\n    0xffce,\n    0xffcf,\n    0xffde\n  ]);\n\n  return {tableMarkers, sofMarkers};\n}\n\nfunction toDataView(data) {\n  if (bufferToArrayBuffer) {\n    data = bufferToArrayBuffer(data);\n  }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer || data);\n  }\n\n  throw new Error('toDataView');\n}\n\n// DEPRECEATED\n\nexport function getImageSize(arrayBuffer, mimeType = null) {\n  return getImageMetadata(arrayBuffer);\n}\n"],"file":"get-image-metadata.js"}