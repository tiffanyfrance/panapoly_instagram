import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { bufferToArrayBuffer } from '../node/buffer-to-array-buffer';
var BIG_ENDIAN = false;
var LITTLE_ENDIAN = true;
var mimeTypeMap = new Map([['image/png', getPngSize], ['image/jpeg', getJpegSize], ['image/gif', getGifSize], ['image/bmp', getBmpSize]]);
var ERR_INVALID_TYPE = "Invalid MIME type. Supported MIME types are: ".concat(Array.from(mimeTypeMap.keys()).join(', '));
export function isImage(arrayBuffer) {
  var result = guessImageMetadata(arrayBuffer);
  return result ? result.mimeType : false;
}
export function getImageMetadata(arrayBuffer) {
  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (mimeType) {
    var handler = mimeTypeMap.get(mimeType);

    if (!handler) {
      throw new Error(ERR_INVALID_TYPE);
    }

    var _result = handler(arrayBuffer);

    if (!_result) {
      throw new Error("invalid image data for type: ".concat(mimeType));
    }

    return _result;
  }

  var result = guessImageMetadata(arrayBuffer, mimeType);

  if (!result) {
    throw new Error(ERR_INVALID_TYPE);
  }

  return result;
}

function guessImageMetadata(arrayBuffer, mimeType) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = mimeTypeMap.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          supportedMimeType = _step$value[0],
          handler = _step$value[1];

      var result = handler(arrayBuffer);

      if (result) {
        result.mimeType = supportedMimeType;
        return result;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}

function getPngSize(arrayBuffer) {
  var dataView = toDataView(arrayBuffer);

  if (dataView.byteLength < 24 || dataView.getUint32(0, BIG_ENDIAN) !== 0x89504e47) {
    return null;
  }

  return {
    width: dataView.getUint32(16, BIG_ENDIAN),
    height: dataView.getUint32(20, BIG_ENDIAN)
  };
}

function getGifSize(arrayBuffer) {
  var dataView = toDataView(arrayBuffer);

  if (dataView.byteLength < 10 || dataView.getUint32(0, BIG_ENDIAN) !== 0x47494638) {
    return null;
  }

  return {
    width: dataView.getUint16(6, LITTLE_ENDIAN),
    height: dataView.getUint16(8, LITTLE_ENDIAN)
  };
}

function getBmpSize(arrayBuffer) {
  var dataView = toDataView(arrayBuffer);

  if (dataView.getUint16(0, BIG_ENDIAN) !== 0x424d) {
    return null;
  }

  return {
    width: dataView.getUint32(18, LITTLE_ENDIAN),
    height: dataView.getUint32(22, LITTLE_ENDIAN)
  };
}

function getJpegSize(arrayBuffer) {
  var dataView = toDataView(arrayBuffer);

  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {
    return null;
  }

  var _getJpegMarkers = getJpegMarkers(),
      tableMarkers = _getJpegMarkers.tableMarkers,
      sofMarkers = _getJpegMarkers.sofMarkers;

  var i = 2;

  while (i < dataView.byteLength) {
    var marker = dataView.getUint16(i, BIG_ENDIAN);

    if (sofMarkers.has(marker)) {
      return {
        height: dataView.getUint16(i + 5, BIG_ENDIAN),
        width: dataView.getUint16(i + 7, BIG_ENDIAN)
      };
    }

    if (!tableMarkers.has(marker)) {
      return null;
    }

    i += 2;
    i += dataView.getUint16(i, BIG_ENDIAN);
  }

  return null;
}

function getJpegMarkers() {
  var tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);

  for (var i = 0xffe0; i < 0xfff0; ++i) {
    tableMarkers.add(i);
  }

  var sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);
  return {
    tableMarkers: tableMarkers,
    sofMarkers: sofMarkers
  };
}

function toDataView(data) {
  if (bufferToArrayBuffer) {
    data = bufferToArrayBuffer(data);
  }

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    return new DataView(data.buffer || data);
  }

  throw new Error('toDataView');
}

export function getImageSize(arrayBuffer) {
  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return getImageMetadata(arrayBuffer);
}
//# sourceMappingURL=get-image-metadata.js.map