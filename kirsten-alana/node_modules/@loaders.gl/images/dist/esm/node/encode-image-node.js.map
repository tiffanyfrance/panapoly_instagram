{"version":3,"sources":["../../../src/node/encode-image-node.js"],"names":["savePixels","ndarray","bufferToArrayBuffer","encodeImageToStreamNode","image","options","type","replace","pixels","data","width","height","encodeImageNode","imageStream","Promise","resolve","buffers","on","buffer","push","Buffer","concat"],"mappings":"AAGA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAWA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,OAAxC,EAAiD;AAEtD,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaC,OAAb,CAAqB,QAArB,EAA+B,EAA/B,CAAf,GAAoD,MAAjE;AACA,MAAMC,MAAM,GAAGP,OAAO,CAACG,KAAK,CAACK,IAAP,EAAa,CAACL,KAAK,CAACM,KAAP,EAAcN,KAAK,CAACO,MAApB,EAA4B,CAA5B,CAAb,EAA6C,CAAC,CAAD,EAAIP,KAAK,CAACM,KAAN,GAAc,CAAlB,EAAqB,CAArB,CAA7C,EAAsE,CAAtE,CAAtB;AAGA,SAAOV,UAAU,CAACQ,MAAD,EAASF,IAAT,EAAeD,OAAf,CAAjB;AACD;AAED,OAAO,SAASO,eAAT,CAAyBR,KAAzB,EAAgCC,OAAhC,EAAyC;AAC9C,MAAMQ,WAAW,GAAGV,uBAAuB,CAACC,KAAD,EAAQC,OAAR,CAA3C;AAEA,SAAO,IAAIS,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5B,QAAMC,OAAO,GAAG,EAAhB;AACAH,IAAAA,WAAW,CAACI,EAAZ,CAAe,MAAf,EAAuB,UAAAC,MAAM;AAAA,aAAIF,OAAO,CAACG,IAAR,CAAaD,MAAb,CAAJ;AAAA,KAA7B;AAEAL,IAAAA,WAAW,CAACI,EAAZ,CAAe,KAAf,EAAsB,YAAM;AAC1B,UAAMC,MAAM,GAAGE,MAAM,CAACC,MAAP,CAAcL,OAAd,CAAf;AACAD,MAAAA,OAAO,CAACb,mBAAmB,CAACgB,MAAD,CAApB,CAAP;AACD,KAHD;AAID,GARM,CAAP;AASD","sourcesContent":["// Use stackgl modules for DOM-less reading and writing of images\n\n/* global Buffer */\nimport savePixels from 'save-pixels';\nimport ndarray from 'ndarray';\nimport {bufferToArrayBuffer} from './buffer-to-array-buffer';\n\n/**\n * Returns data bytes representing a compressed image in PNG or JPG format,\n * This data can be saved using file system (f) methods or\n * used in a request.\n * @param {Image} image to save\n * @param {String} type='png' - png, jpg or image/png, image/jpg are valid\n * @param {String} opt.dataURI= - Whether to include a data URI header\n * @return {*} bytes\n */\nexport function encodeImageToStreamNode(image, options) {\n  // Support MIME type strings\n  const type = options.type ? options.type.replace('image/', '') : 'jpeg';\n  const pixels = ndarray(image.data, [image.width, image.height, 4], [4, image.width * 4, 1], 0);\n\n  // Note: savePixels returns a stream\n  return savePixels(pixels, type, options);\n}\n\nexport function encodeImageNode(image, options) {\n  const imageStream = encodeImageToStreamNode(image, options);\n\n  return new Promise(resolve => {\n    const buffers = [];\n    imageStream.on('data', buffer => buffers.push(buffer));\n    // TODO - convert to arraybuffer?\n    imageStream.on('end', () => {\n      const buffer = Buffer.concat(buffers);\n      resolve(bufferToArrayBuffer(buffer));\n    });\n  });\n}\n"],"file":"encode-image-node.js"}