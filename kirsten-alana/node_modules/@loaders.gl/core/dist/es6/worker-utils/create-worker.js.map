{"version":3,"sources":["../../../src/worker-utils/create-worker.js"],"names":["getTransferList","createWorker","loader","self","onmessage","evt","data","arraybuffer","opts","parser","parseSync","parseTextSync","textDecoder","TextDecoder","decode","Error","name","result","transferList","postMessage","type","error","message"],"mappings":"AACA,OAAOA,eAAP,MAA4B,qBAA5B;AAGA,eAAe,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC3C,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACD;;AAEDA,EAAAA,IAAI,CAACC,SAAL,GAAiBC,GAAG,IAAI;AAAA,sBACMA,GAAG,CAACC,IADV;AAAA,UACfC,WADe,aACfA,WADe;AAAA,UACFC,IADE,aACFA,IADE;;AAEtB,QAAI;AACF,UAAIF,IAAJ;AACA,UAAIG,MAAJ;;AACA,UAAIP,MAAM,CAACQ,SAAX,EAAsB;AACpBJ,QAAAA,IAAI,GAAGC,WAAP;AACAE,QAAAA,MAAM,GAAGP,MAAM,CAACQ,SAAhB;AACD,OAHD,MAGO,IAAIR,MAAM,CAACS,aAAX,EAA0B;AAC/B,cAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACAP,QAAAA,IAAI,GAAGM,WAAW,CAACE,MAAZ,CAAmBP,WAAnB,CAAP;AACAE,QAAAA,MAAM,GAAGP,MAAM,CAACS,aAAhB;AACD,OAJM,MAIA;AACL,cAAM,IAAII,KAAJ,oCAAsCb,MAAM,CAACc,IAA7C,aAAN;AACD;;AAED,YAAMC,MAAM,GAAGR,MAAM,CAACH,IAAD,EAAOE,IAAP,CAArB;AACA,YAAMU,YAAY,GAAGlB,eAAe,CAACiB,MAAD,CAApC;AAEAd,MAAAA,IAAI,CAACgB,WAAL,CAAiB;AAACC,QAAAA,IAAI,EAAE,MAAP;AAAeH,QAAAA;AAAf,OAAjB,EAAyCC,YAAzC;AACD,KAlBD,CAkBE,OAAOG,KAAP,EAAc;AACdlB,MAAAA,IAAI,CAACgB,WAAL,CAAiB;AAACC,QAAAA,IAAI,EAAE,OAAP;AAAgBE,QAAAA,OAAO,EAAED,KAAK,CAACC;AAA/B,OAAjB;AACD;AACF,GAvBD;AAwBD","sourcesContent":["/* global TextDecoder, self */\nimport getTransferList from './get-transfer-list';\n\n// Set up a WebWorkerGlobalScope to talk with the main thread\nexport default function createWorker(loader) {\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  self.onmessage = evt => {\n    const {arraybuffer, opts} = evt.data;\n    try {\n      let data;\n      let parser;\n      if (loader.parseSync) {\n        data = arraybuffer;\n        parser = loader.parseSync;\n      } else if (loader.parseTextSync) {\n        const textDecoder = new TextDecoder();\n        data = textDecoder.decode(arraybuffer);\n        parser = loader.parseTextSync;\n      } else {\n        throw new Error(`Could not load data with ${loader.name} loader`);\n      }\n\n      const result = parser(data, opts);\n      const transferList = getTransferList(result);\n\n      self.postMessage({type: 'done', result}, transferList);\n    } catch (error) {\n      self.postMessage({type: 'error', message: error.message});\n    }\n  };\n}\n"],"file":"create-worker.js"}