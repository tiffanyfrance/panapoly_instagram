import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import fs from 'fs';
import http from 'http';
import https from 'https';
import util from 'util';
import { toArrayBuffer } from '../../javascript-utils/binary-utils';
import { TextDecoder } from '../../javascript-utils/text-encoding';
import { concatenateReadStream } from '../../javascript-utils/stream-utils';
import decodeDataUri from './decode-data-uri';
const DEFAULT_OPTIONS = {
  dataType: 'arrayBuffer'
};
const isNode = Boolean(fs && fs.readFile);

const isDataURL = url => url.startsWith('data:');

const isRequestURL = url => url.startsWith('http:') || url.startsWith('https:');

class NodeHeaders {
  constructor(response) {
    this.reponse = response;
  }

  get(header) {
    if (this.response.httpResponse) {
      return this.response.httpResponse.getHeaders()[header];
    }

    switch (header) {
      case 'Content-Length':
        return this._getContentLength();

      default:
    }

    return undefined;
  }

  _getContentLength() {
    return this._contentLength;
  }

}

class NodeFetchResponse {
  constructor(url, options) {
    this.url = url;
    this.options = options;
    this.bodyUsed = false;
    this._headers = null;
  }

  get headers() {
    this._headers = this._headers || this._getHeaders();
  }

  get body() {
    const url = this.url,
          options = this.options;
    this.bodyUsed = true;
    return createReadStream(url, options);
  }

  arrayBuffer() {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.bodyUsed = true;
      return readFile(_this.url, _this.options);
    })();
  }

  text() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const arrayBuffer = yield _this2.arrayBuffer();
      const textDecoder = new TextDecoder();
      return textDecoder.decode(arrayBuffer);
    })();
  }

  json() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const text = yield _this3.text();
      return JSON.parse(text);
    })();
  }

  _getHeaders() {
    if (isRequestURL(this.url)) {
      return new NodeHeaders(this);
    }

    if (isDataURL(this.url)) {
      return {
        'Content-Length': this.url.length
      };
    }

    if (isRequestURL(this.repsonse.url)) {
      return {};
    }

    const stats = fs.statSync(this.response.url);
    return {
      'Content-Length': stats.size
    };
  }

}

export function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = _asyncToGenerator(function* (url, options) {
    return new NodeFetchResponse(url, options);
  });
  return _fetchFile.apply(this, arguments);
}

export function readFileSync(url) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = getReadFileOptions(options);

  if (isDataURL(url)) {
    return decodeDataUri(url);
  }

  if (!isNode) {
    return null;
  }

  const buffer = fs.readFileSync(url, options, () => {});
  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;
}

function readFile(_x3) {
  return _readFile.apply(this, arguments);
}

function _readFile() {
  _readFile = _asyncToGenerator(function* (url) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    options = getReadFileOptions(options);

    if (isDataURL(url)) {
      return Promise.resolve(decodeDataUri(url));
    }

    if (isRequestURL(url)) {
      return new Promise((resolve, reject) => {
        options = _objectSpread({}, new URL(url), options);
        const request = url.startsWith('https:') ? https.request : http.request;
        request(url, response => concatenateReadStream(response).then(resolve, reject));
      });
    }

    const readFileAsync = util.promisify(fs.readFile);
    const buffer = yield readFileAsync(url, options);
    return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;
  });
  return _readFile.apply(this, arguments);
}

export function createReadStream(_x4, _x5) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(function* (url, options) {
    if (isDataURL(url)) {
      return decodeDataUri(url);
    }

    if (!isRequestURL(url)) {
      return fs.createReadStream(url, options);
    }

    return new Promise((resolve, reject) => {
      options = _objectSpread({}, new URL(url), options);
      const request = url.startsWith('https:') ? https.request : http.request;
      request(url, response => resolve(response));
    });
  });
  return _createReadStream.apply(this, arguments);
}

function getReadFileOptions() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  options.responseType = options.responseType || options.dataType;

  if (fs) {
    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);
  }

  return options;
}
//# sourceMappingURL=fetch-file-node.js.map