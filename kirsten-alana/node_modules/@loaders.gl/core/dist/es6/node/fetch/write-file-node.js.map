{"version":3,"sources":["../../../../src/node/fetch/write-file-node.js"],"names":["fs","promisify","assert","writeFile","filePath","arrayBufferOrString","toBuffer","flag","writeFileSync","binaryData","ArrayBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,SAAQC,SAAR,QAAwB,MAAxB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AAEA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,mBAA7B,EAAkD;AACvD,SAAOJ,SAAS,CAACD,EAAE,CAACG,SAAJ,CAAT,WAA2BC,QAA3B,GAAuCE,QAAQ,CAACD,mBAAD,CAA/C,EAAsE;AAACE,IAAAA,IAAI,EAAE;AAAP,GAAtE,CAAP;AACD;AAED,OAAO,SAASC,aAAT,CAAuBJ,QAAvB,EAAiCC,mBAAjC,EAAsD;AAC3D,SAAOL,EAAE,CAACQ,aAAH,WAAoBJ,QAApB,GAAgCE,QAAQ,CAACD,mBAAD,CAAxC,EAA+D;AAACE,IAAAA,IAAI,EAAE;AAAP,GAA/D,CAAP;AACD;;AAID,SAASD,QAAT,CAAkBG,UAAlB,EAA8B;AAC5B,MAAIC,WAAW,CAACC,MAAZ,CAAmBF,UAAnB,CAAJ,EAAoC;AAClCA,IAAAA,UAAU,GAAGA,UAAU,CAACG,MAAxB;AACD;;AAED,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCJ,UAAU,YAAYC,WAA3D,EAAwE;AAEtE,UAAME,MAAM,GAAG,IAAIC,MAAJ,CAAWJ,UAAU,CAACK,UAAtB,CAAf;AACA,UAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAeP,UAAf,CAAb;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCL,MAAAA,MAAM,CAACK,CAAD,CAAN,GAAYF,IAAI,CAACE,CAAD,CAAhB;AACD;;AACD,WAAOL,MAAP;AACD;;AAED,SAAOV,MAAM,CAAC,KAAD,CAAb;AACD","sourcesContent":["import fs from 'fs';\nimport {promisify} from 'util';\nimport assert from '../../utils/assert';\n\nexport function writeFile(filePath, arrayBufferOrString) {\n  return promisify(fs.writeFile)(`${filePath}`, toBuffer(arrayBufferOrString), {flag: 'w'});\n}\n\nexport function writeFileSync(filePath, arrayBufferOrString) {\n  return fs.writeFileSync(`${filePath}`, toBuffer(arrayBufferOrString), {flag: 'w'});\n}\n\n// Convert (copy) ArrayBuffer to Buffer\n// EXPORTED FOR TEST ONLY\nfunction toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  return assert(false);\n}\n"],"file":"write-file-node.js"}