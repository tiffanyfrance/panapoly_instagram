{"version":3,"sources":["../../../../src/node/fetch/fetch-file-node.js"],"names":["fs","http","https","util","toArrayBuffer","TextDecoder","concatenateReadStream","decodeDataUri","DEFAULT_OPTIONS","dataType","isNode","Boolean","readFile","isDataURL","url","startsWith","isRequestURL","NodeHeaders","constructor","response","reponse","get","header","httpResponse","getHeaders","_getContentLength","undefined","_contentLength","NodeFetchResponse","options","bodyUsed","_headers","headers","_getHeaders","body","createReadStream","arrayBuffer","text","textDecoder","decode","json","JSON","parse","length","repsonse","stats","statSync","size","fetchFile","readFileSync","getReadFileOptions","buffer","Buffer","Promise","resolve","reject","URL","request","then","readFileAsync","promisify","Object","assign","responseType","encoding"],"mappings":"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","sourcesContent":["/* global URL */\n/* global Buffer */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\n\nimport {toArrayBuffer} from '../../javascript-utils/binary-utils';\nimport {TextDecoder} from '../../javascript-utils/text-encoding';\nimport {concatenateReadStream} from '../../javascript-utils/stream-utils';\nimport decodeDataUri from './decode-data-uri';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arrayBuffer'\n};\n\nconst isNode = Boolean(fs && fs.readFile);\nconst isDataURL = url => url.startsWith('data:');\nconst isRequestURL = url => url.startsWith('http:') || url.startsWith('https:');\n\n// Under Node.js we return a mock \"fetch response object\"\n// so that apps can use the same API as in the browser.\n//\n// Note: This is intended to be a lightweight implementation and will have limitations.\n// Apps that require more complete fech emulation in Node\n// are encouraged to use dedicated fetch polyfill modules.\nclass NodeHeaders {\n  constructor(response) {\n    this.reponse = response;\n  }\n\n  get(header) {\n    if (this.response.httpResponse) {\n      return this.response.httpResponse.getHeaders()[header];\n    }\n    switch (header) {\n      case 'Content-Length':\n        return this._getContentLength();\n      default:\n    }\n    return undefined;\n  }\n\n  _getContentLength() {\n    return this._contentLength;\n  }\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/API/Response\nclass NodeFetchResponse {\n  constructor(url, options) {\n    this.url = url;\n    this.options = options;\n    this.bodyUsed = false;\n    this._headers = null;\n  }\n\n  // Subset of Properties\n\n  // get url()\n  get headers() {\n    this._headers = this._headers || this._getHeaders();\n  }\n\n  // Returns a readable stream to the \"body\" of the response (or file)\n  get body() {\n    const {url, options} = this;\n    this.bodyUsed = true;\n    return createReadStream(url, options);\n  }\n\n  // Subset of Methods\n\n  async arrayBuffer() {\n    this.bodyUsed = true;\n    return readFile(this.url, this.options);\n  }\n\n  async text() {\n    const arrayBuffer = await this.arrayBuffer();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(arrayBuffer);\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  // PRIVATE\n\n  _getHeaders() {\n    if (isRequestURL(this.url)) {\n      return new NodeHeaders(this);\n    }\n\n    if (isDataURL(this.url)) {\n      return {\n        'Content-Length': this.url.length\n      };\n    }\n    if (isRequestURL(this.repsonse.url)) {\n      return {};\n    }\n\n    // File URL\n    // TODO - how to handle non-existing file, this presumably just throws\n    const stats = fs.statSync(this.response.url);\n    return {\n      'Content-Length': stats.size\n    };\n  }\n}\n\nexport async function fetchFile(url, options) {\n  return new NodeFetchResponse(url, options);\n}\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(url, options = {}) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return decodeDataUri(url);\n  }\n\n  if (!isNode) {\n    return null; // throw new Error('Cant load URI synchronously');\n  }\n\n  const buffer = fs.readFileSync(url, options, () => {});\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nasync function readFile(url, options = {}) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return Promise.resolve(decodeDataUri(url));\n  }\n\n  if (isRequestURL(url)) {\n    return new Promise((resolve, reject) => {\n      options = {...new URL(url), ...options};\n      const request = url.startsWith('https:') ? https.request : http.request;\n      request(url, response => concatenateReadStream(response).then(resolve, reject));\n    });\n  }\n\n  const readFileAsync = util.promisify(fs.readFile);\n  const buffer = await readFileAsync(url, options);\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// Returns a promise that resolves to a readable stream\nexport async function createReadStream(url, options) {\n  // Handle data urls in node, to match `fetch``\n  if (isDataURL(url)) {\n    // TODO - need to return a stream wrapper\n    return decodeDataUri(url);\n  }\n\n  // Handle file streams in node\n  if (!isRequestURL(url)) {\n    return fs.createReadStream(url, options);\n  }\n\n  // HANDLE HTTP/HTTPS REQUESTS IN NODE\n  return new Promise((resolve, reject) => {\n    /* TODO - URL not available in Node.js v8? */\n    options = {...new URL(url), ...options};\n    const request = url.startsWith('https:') ? https.request : http.request;\n    request(url, response => resolve(response));\n  });\n}\n\n// HELPERS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  if (fs) {\n    // set encoding for fs.readFile\n    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);\n  }\n  return options;\n}\n"],"file":"fetch-file-node.js"}