{"version":3,"sources":["../../../src/lib/load.js"],"names":["fetchFile","isLoaderObject","autoDetectLoader","parse","parseInBatches","getRegisteredLoaders","loadInBatches","url","loaders","options","response","load","Array","isArray","loader","loadAndParse"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,SAAQC,cAAR,QAA6B,iCAA7B;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;AAEA,SAAQC,KAAR,EAAeC,cAAf,QAAoC,SAApC;AACA,SAAQC,oBAAR,QAAmC,oBAAnC;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;qCAAO,WAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,OAA3C,EAAoD;AACzD,UAAMC,QAAQ,SAASV,SAAS,CAACO,GAAD,EAAME,OAAN,CAAhC;AACA,WAAOL,cAAc,CAACM,QAAD,EAAWF,OAAX,EAAoBC,OAApB,EAA6BF,GAA7B,CAArB;AACD,G;;;;AAED,gBAAsBI,IAAtB;AAAA;AAAA;;;4BAAO,WAAoBJ,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;AAGhD,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,CAACP,cAAc,CAACO,OAAD,CAA9C,EAAyD;AACvDC,MAAAA,OAAO,GAAGD,OAAV;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AAEDA,IAAAA,OAAO,GAAGA,OAAO,IAAIH,oBAAoB,EAAzC;AACA,UAAMS,MAAM,GAAGF,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBN,gBAAgB,CAACK,GAAD,EAAM,IAAN,EAAYC,OAAZ,CAAzC,GAAgEA,OAA/E;;AAGA,QAAIM,MAAM,IAAIA,MAAM,CAACC,YAArB,EAAmC;AACjC,mBAAaD,MAAM,CAACC,YAAP,CAAoBR,GAApB,EAAyBE,OAAzB,CAAb;AACD;;AAGD,UAAMC,QAAQ,SAASV,SAAS,CAACO,GAAD,EAAME,OAAN,CAAhC;AACA,WAAON,KAAK,CAACO,QAAD,EAAWF,OAAX,EAAoBC,OAApB,EAA6BF,GAA7B,CAAZ;AACD,G","sourcesContent":["import {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {autoDetectLoader} from './loader-utils/auto-detect-loader';\n\nimport {parse, parseInBatches} from './parse';\nimport {getRegisteredLoaders} from './register-loaders';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader && loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n\n  // at this point, data can be binary or text\n  const response = await fetchFile(url, options);\n  return parse(response, loaders, options, url);\n}\n"],"file":"load.js"}