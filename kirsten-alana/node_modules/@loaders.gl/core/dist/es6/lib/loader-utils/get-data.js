import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { isFetchResponse, isReadableStream, isAsyncIterable, isIterable, isIterator } from '../../javascript-utils/is-type';
import { getStreamIterator } from '../../javascript-utils/stream-utils';
import { TextDecoder } from '../../javascript-utils/text-encoding';
const ERR_DATA = 'Cannot convert supplied data type';
export function getUrlFromData(data) {
  return isFetchResponse(data) ? data.url : null;
}
export function getSizeFromData(data) {
  return isFetchResponse(data) ? data.headers.get('Content-Length') : null;
}
export function getArrayBufferOrStringFromDataSync(data, loader) {
  if (loader.text && typeof data === 'string') {
    return data;
  }

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    const arrayBuffer = data.buffer || data;

    if (loader.text && !loader.binary) {
      const textDecoder = new TextDecoder('utf8');
      return textDecoder.decode(arrayBuffer);
    }

    return arrayBuffer;
  }

  throw new Error(ERR_DATA);
}
export function getArrayBufferOrStringFromData(_x, _x2) {
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

function _getArrayBufferOrStringFromData() {
  _getArrayBufferOrStringFromData = _asyncToGenerator(function* (data, loader) {
    data = yield data;
    const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);

    if (typeof data === 'string' || isArrayBuffer) {
      return getArrayBufferOrStringFromDataSync(data, loader);
    }

    if (isFetchResponse(data)) {
      return loader.binary ? yield data.arrayBuffer() : data.text();
    }

    throw new Error(ERR_DATA);
  });
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

export function getAsyncIteratorFromData(_x3, _x4) {
  return _getAsyncIteratorFromData.apply(this, arguments);
}

function _getAsyncIteratorFromData() {
  _getAsyncIteratorFromData = _asyncToGenerator(function* (data, loader) {
    if (isIterator(data)) {
      return data;
    }

    if (isFetchResponse(data)) {
      return getStreamIterator(data.body);
    }

    if (isReadableStream(data)) {
      return getStreamIterator(data);
    }

    if (isAsyncIterable(data)) {
      return data[Symbol.asyncIterator]();
    }

    return getIteratorFromData(data, loader);
  });
  return _getAsyncIteratorFromData.apply(this, arguments);
}

export function getIteratorFromData(_x5, _x6) {
  return _getIteratorFromData.apply(this, arguments);
}

function _getIteratorFromData() {
  _getIteratorFromData = _asyncToGenerator(function* (data, loader) {
    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
      return function* oneChunk() {
        yield data.buffer || data;
      }();
    }

    if (isIterator(data)) {
      return data;
    }

    if (isIterable(data)) {
      return data[Symbol.iterator]();
    }

    throw new Error(ERR_DATA);
  });
  return _getIteratorFromData.apply(this, arguments);
}
//# sourceMappingURL=get-data.js.map