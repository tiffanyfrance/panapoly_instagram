import _objectSpread from "@babel/runtime/helpers/esm/objectSpread";
import assert from '../../utils/assert';
export function isLoaderObject(loader) {
  if (!loader) {
    return false;
  }

  if (Array.isArray(loader)) {
    loader = loader[0];
  }

  const hasParser = loader.parseTextSync || loader.parseSync || loader.parse || loader.loadAndParse || loader.parseStream || loader.parseInBatches || loader.worker;
  return hasParser;
}
export function normalizeLoader(loader) {
  assert(isLoaderObject(loader));
  let options;

  if (Array.isArray(loader)) {
    loader = loader[0];
    options = loader[1];
    loader = _objectSpread({}, loader, {
      options: _objectSpread({}, loader.options, {
        options
      })
    });
  }

  if (loader.extension) {
    loader.extensions = loader.extensions || [loader.extension];
    delete loader.extension;
  }

  if (!Array.isArray(loader.extensions)) {
    loader.extensions = [loader.extensions];
  }

  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);

  if (loader.parseTextSync) {
    loader.text = true;
  }

  if (!loader.text) {
    loader.binary = true;
  }

  return loader;
}
//# sourceMappingURL=normalize-loader.js.map