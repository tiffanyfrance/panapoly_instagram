import { normalizeLoader } from './normalize-loader';
const EXT_PATTERN = /[^\.]+$/;
export function autoDetectLoader() {
  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  let text = arguments.length > 1 ? arguments[1] : undefined;
  let loaders = arguments.length > 2 ? arguments[2] : undefined;
  const match = url.match(EXT_PATTERN);

  if (match && match[0]) {
    const extension = match[0];
    const loader = findLoaderByExtension(loaders, extension);

    if (loader) {
      return loader;
    }
  }

  const loader = findLoaderByExamingInitialData(loaders, text);

  if (loader) {
    return loader;
  }

  return null;
}

function findLoaderByExtension(loaders, extension) {
  extension = extension.toLowerCase();

  for (const loader of loaders) {
    normalizeLoader(loader);

    for (const loaderExtension of loader.extensions) {
      if (loaderExtension.toLowerCase() === extension) {
        return loader;
      }
    }
  }

  return null;
}

function findLoaderByExamingInitialData(loaders, text) {
  for (const loader of loaders) {
    if (loader.testText && loader.testText(text)) {
      return loader;
    }
  }

  return null;
}
//# sourceMappingURL=auto-detect-loader.js.map