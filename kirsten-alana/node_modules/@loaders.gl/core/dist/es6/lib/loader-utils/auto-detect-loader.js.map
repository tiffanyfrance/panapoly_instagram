{"version":3,"sources":["../../../../src/lib/loader-utils/auto-detect-loader.js"],"names":["normalizeLoader","EXT_PATTERN","autoDetectLoader","url","text","loaders","match","extension","loader","findLoaderByExtension","findLoaderByExamingInitialData","toLowerCase","loaderExtension","extensions","testText"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,MAAMC,WAAW,GAAG,SAApB;AAIA,OAAO,SAASC,gBAAT,GAAmD;AAAA,MAAzBC,GAAyB,uEAAnB,EAAmB;AAAA,MAAfC,IAAe;AAAA,MAATC,OAAS;AAIxD,QAAMC,KAAK,GAAGH,GAAG,CAACG,KAAJ,CAAUL,WAAV,CAAd;;AACA,MAAIK,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAlB,EAAuB;AACrB,UAAMC,SAAS,GAAGD,KAAK,CAAC,CAAD,CAAvB;AACA,UAAME,MAAM,GAAGC,qBAAqB,CAACJ,OAAD,EAAUE,SAAV,CAApC;;AACA,QAAIC,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD;AACF;;AAED,QAAMA,MAAM,GAAGE,8BAA8B,CAACL,OAAD,EAAUD,IAAV,CAA7C;;AACA,MAAII,MAAJ,EAAY;AACV,WAAOA,MAAP;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASC,qBAAT,CAA+BJ,OAA/B,EAAwCE,SAAxC,EAAmD;AACjDA,EAAAA,SAAS,GAAGA,SAAS,CAACI,WAAV,EAAZ;;AAEA,OAAK,MAAMH,MAAX,IAAqBH,OAArB,EAA8B;AAC5BL,IAAAA,eAAe,CAACQ,MAAD,CAAf;;AACA,SAAK,MAAMI,eAAX,IAA8BJ,MAAM,CAACK,UAArC,EAAiD;AAC/C,UAAID,eAAe,CAACD,WAAhB,OAAkCJ,SAAtC,EAAiD;AAC/C,eAAOC,MAAP;AACD;AACF;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASE,8BAAT,CAAwCL,OAAxC,EAAiDD,IAAjD,EAAuD;AACrD,OAAK,MAAMI,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,QAAIG,MAAM,CAACM,QAAP,IAAmBN,MAAM,CAACM,QAAP,CAAgBV,IAAhB,CAAvB,EAA8C;AAC5C,aAAOI,MAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import {normalizeLoader} from './normalize-loader';\n\nconst EXT_PATTERN = /[^\\.]+$/;\n\n// Find a loader that works for extension/text\n// Search the loaders array argument for a loader that matches extension or text\nexport function autoDetectLoader(url = '', text, loaders) {\n  // Get extension\n  // TODO - Would be nice to support http://example.com/file.glb?parameter=1\n  // E.g: x = new URL('http://example.com/file.glb?load=1'; x.pathname\n  const match = url.match(EXT_PATTERN);\n  if (match && match[0]) {\n    const extension = match[0];\n    const loader = findLoaderByExtension(loaders, extension);\n    if (loader) {\n      return loader;\n    }\n  }\n\n  const loader = findLoaderByExamingInitialData(loaders, text);\n  if (loader) {\n    return loader;\n  }\n\n  return null;\n}\n\nfunction findLoaderByExtension(loaders, extension) {\n  extension = extension.toLowerCase();\n\n  for (const loader of loaders) {\n    normalizeLoader(loader);\n    for (const loaderExtension of loader.extensions) {\n      if (loaderExtension.toLowerCase() === extension) {\n        return loader;\n      }\n    }\n  }\n  return null;\n}\n\nfunction findLoaderByExamingInitialData(loaders, text) {\n  for (const loader of loaders) {\n    if (loader.testText && loader.testText(text)) {\n      return loader;\n    }\n  }\n  return null;\n}\n"],"file":"auto-detect-loader.js"}