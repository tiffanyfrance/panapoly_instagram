{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["isBrowser","node","fetchFile","browserFetchFile","readFileSync","browserReadFileSync","createReadStream","browserCreateReadStream","resolvePath","url","options","func"],"mappings":";AAAA,SAAQA,SAAR,QAAwB,qBAAxB;AAGA,OAAO,KAAKC,IAAZ,MAAsB,kCAAtB;AAGA,SACEC,SAAS,IAAIC,gBADf,EAEEC,YAAY,IAAIC,mBAFlB,EAGEC,gBAAgB,IAAIC,uBAHtB,QAIO,sBAJP;AAMA,SAAQC,WAAR,QAA0B,gBAA1B;AAOA,gBAAsBN,SAAtB;AAAA;AAAA;;;iCAAO,WAAyBO,GAAzB,EAA8BC,OAA9B,EAAuC;AAC5CD,IAAAA,GAAG,GAAGD,WAAW,CAACC,GAAD,CAAjB;AACA,UAAME,IAAI,GAAGX,SAAS,GAAGG,gBAAH,GAAsBF,IAAI,CAACC,SAAjD;AACA,WAAOS,IAAI,CAACF,GAAD,EAAMC,OAAN,CAAX;AACD,G;;;;AAGD,OAAO,SAASN,YAAT,CAAsBK,GAAtB,EAAyC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9CD,EAAAA,GAAG,GAAGD,WAAW,CAACC,GAAD,CAAjB;AACA,QAAME,IAAI,GAAGX,SAAS,GAAGK,mBAAH,GAAyBJ,IAAI,CAACG,YAApD;AACA,SAAOO,IAAI,CAACF,GAAD,EAAMC,OAAN,CAAX;AACD;AAKD,gBAAsBJ,gBAAtB;AAAA;AAAA;;;wCAAO,WAAgCG,GAAhC,EAAqCC,OAArC,EAA8C;AACnDD,IAAAA,GAAG,GAAGD,WAAW,CAACC,GAAD,CAAjB;AACA,UAAME,IAAI,GAAGX,SAAS,GAAGO,uBAAH,GAA6BN,IAAI,CAACK,gBAAxD;AACA,WAAOK,IAAI,CAACF,GAAD,EAAMC,OAAN,CAAX;AACD,G","sourcesContent":["import {isBrowser} from '../../utils/globals';\n\n// fetch-file-node is excluded from build under browser so don't do indivdual imports\nimport * as node from '../../node/fetch/fetch-file-node';\n\n// Import individual symbols for browser version to ensure tree-shaking is enabled\nimport {\n  fetchFile as browserFetchFile,\n  readFileSync as browserReadFileSync,\n  createReadStream as browserCreateReadStream\n} from './fetch-file-browser';\n\nimport {resolvePath} from './file-aliases';\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nexport async function fetchFile(url, options) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserFetchFile : node.fetchFile;\n  return func(url, options);\n}\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(url, options = {}) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserReadFileSync : node.readFileSync;\n  return func(url, options);\n}\n\n// DEPRECATED\n\n// Returns a promise that resolves to a readable stream\nexport async function createReadStream(url, options) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserCreateReadStream : node.createReadStream;\n  return func(url, options);\n}\n"],"file":"fetch-file.js"}