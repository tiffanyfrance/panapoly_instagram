import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { isBrowser } from '../../utils/globals';
import * as node from '../../node/fetch/fetch-file-node';
import { fetchFile as browserFetchFile, readFileSync as browserReadFileSync, createReadStream as browserCreateReadStream } from './fetch-file-browser';
import { resolvePath } from './file-aliases';
export function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = _asyncToGenerator(function* (url, options) {
    url = resolvePath(url);
    const func = isBrowser ? browserFetchFile : node.fetchFile;
    return func(url, options);
  });
  return _fetchFile.apply(this, arguments);
}

export function readFileSync(url) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  url = resolvePath(url);
  const func = isBrowser ? browserReadFileSync : node.readFileSync;
  return func(url, options);
}
export function createReadStream(_x3, _x4) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(function* (url, options) {
    url = resolvePath(url);
    const func = isBrowser ? browserCreateReadStream : node.createReadStream;
    return func(url, options);
  });
  return _createReadStream.apply(this, arguments);
}
//# sourceMappingURL=fetch-file.js.map