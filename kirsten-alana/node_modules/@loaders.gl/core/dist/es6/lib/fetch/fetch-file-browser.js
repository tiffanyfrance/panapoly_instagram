import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../../utils/assert';
const DEFAULT_OPTIONS = {
  dataType: 'arrayBuffer',
  nothrow: true
};

const isDataURL = url => url.startsWith('data:');

export function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = _asyncToGenerator(function* (url, options) {
    return yield fetch(url, options);
  });
  return _fetchFile.apply(this, arguments);
}

export function readFileSync(uri) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = getReadFileOptions(options);

  if (isDataURL(uri)) {}

  if (!options.nothrow) {
    assert(false);
  }

  return null;
}
export function createReadStream(_x3, _x4) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(function* (url, options) {
    return fetch(url, options).then(res => res.body);
  });
  return _createReadStream.apply(this, arguments);
}

function getReadFileOptions() {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  options.responseType = options.responseType || options.dataType;
  return options;
}
//# sourceMappingURL=fetch-file-browser.js.map