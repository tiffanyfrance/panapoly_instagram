import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import parseWithWorker from './parse-with-worker';
import { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData, getUrlFromData } from './loader-utils/get-data';
export function parseWithLoader(_x, _x2) {
  return _parseWithLoader.apply(this, arguments);
}

function _parseWithLoader() {
  _parseWithLoader = _asyncToGenerator(function* (data, loader) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let url = arguments.length > 3 ? arguments[3] : undefined;
    url = url || getUrlFromData(data);
    data = yield getArrayBufferOrStringFromData(data, loader);

    if (loader.parseTextSync && typeof data === 'string') {
      options.dataType = 'text';
      return loader.parseTextSync(data, options, url, loader);
    }

    if (loader.parseSync) {
      return loader.parseSync(data, options, url, loader);
    }

    if (loader.parse) {
      return yield loader.parse(data, options, url, loader);
    }

    if (loader.worker) {
      return yield parseWithWorker(loader.worker, data, options);
    }

    return assert(false);
  });
  return _parseWithLoader.apply(this, arguments);
}

export function parseWithLoaderSync(data, loader) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let url = arguments.length > 3 ? arguments[3] : undefined;
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  return assert(false);
}
export function parseWithLoaderInBatches(_x3, _x4) {
  return _parseWithLoaderInBatches.apply(this, arguments);
}

function _parseWithLoaderInBatches() {
  _parseWithLoaderInBatches = _asyncToGenerator(function* (data, loader) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let url = arguments.length > 3 ? arguments[3] : undefined;

    if (loader.parseInBatches) {
      const inputIterator = yield getAsyncIteratorFromData(data);
      const outputIterator = loader.parseInBatches(inputIterator, options, url, loader);
      return outputIterator;
    }

    return null;
  });
  return _parseWithLoaderInBatches.apply(this, arguments);
}

export function parseWithLoaderInBatchesSync(_x5, _x6) {
  return _parseWithLoaderInBatchesSync.apply(this, arguments);
}

function _parseWithLoaderInBatchesSync() {
  _parseWithLoaderInBatchesSync = _asyncToGenerator(function* (data, loader) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let url = arguments.length > 3 ? arguments[3] : undefined;

    if (loader.parseInBatchesSync) {
      const inputIterator = getIteratorFromData(data);
      const outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);
      return outputIterator;
    }

    return assert(false);
  });
  return _parseWithLoaderInBatchesSync.apply(this, arguments);
}
//# sourceMappingURL=parse-with-loader.js.map