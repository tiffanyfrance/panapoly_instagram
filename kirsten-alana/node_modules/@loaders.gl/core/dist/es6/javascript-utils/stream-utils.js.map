{"version":3,"sources":["../../../src/javascript-utils/stream-utils.js"],"names":["isBrowser","concatenateArrayBuffers","getStreamIterator","stream","Symbol","asyncIterator","getIterator","makeBrowserStreamIterator","makeNodeStreamIterator","reader","getReader","read","done","value","releaseLock","data","_readableState","ended","onceReadable","Promise","resolve","once","concatenateReadStream","readStream","arrayBuffer","ArrayBuffer","string","reject","chunk","on","error","complete"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,kBAAxB;AACA,SAAQC,uBAAR,QAAsC,qBAAtC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AAExC,MAAI,OAAOA,MAAM,CAACC,MAAM,CAACC,aAAR,CAAb,KAAwC,UAA5C,EAAwD;AACtD,WAAOF,MAAP;AACD;;AAGD,MAAI,OAAOA,MAAM,CAACG,WAAd,KAA8B,UAAlC,EAA8C;AAC5C,WAAOH,MAAM,CAACG,WAAP,EAAP;AACD;;AAED,SAAON,SAAS,GAAGO,yBAAyB,CAACJ,MAAD,CAA5B,GAAuCK,sBAAsB,CAACL,MAAD,CAA7E;AACD;;SAKeI,yB;;;;;mDAAhB,WAA0CJ,MAA1C,EAAkD;AAEhD,UAAMM,MAAM,GAAGN,MAAM,CAACO,SAAP,EAAf;;AAEA,QAAI;AAEF,aAAO,IAAP,EAAa;AAAA,gDAEiBD,MAAM,CAACE,IAAP,EAFjB;AAAA,cAEJC,IAFI,QAEJA,IAFI;AAAA,cAEEC,KAFF,QAEEA,KAFF;;AAIX,YAAID,IAAJ,EAAU;AACR;AACD;;AAED,cAAMC,KAAN;AACD;AACF,KAZD,SAYU;AACRJ,MAAAA,MAAM,CAACK,WAAP;AACD;AACF,G;;;;SAKeN,sB;;;;;gDAAhB,WAAuCL,MAAvC,EAA+C;AAE7CA,IAAAA,MAAM,8BAASA,MAAT,CAAN;;AAGA,WAAO,IAAP,EAAa;AACX,YAAMY,IAAI,GAAGZ,MAAM,CAACQ,IAAP,EAAb;;AACA,UAAII,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAMA,IAAN;AAEA;AACD;;AACD,UAAIZ,MAAM,CAACa,cAAP,CAAsBC,KAA1B,EAAiC;AAC/B;AACD;;AACD,iCAAMC,YAAY,CAACf,MAAD,CAAlB;AACD;AACF,G;;;;SAEce,Y;;;;;oCAAf,WAA4Bf,MAA5B,EAAoC;AAClC,WAAO,IAAIgB,OAAJ,CAAYC,OAAO,IAAI;AAC5BjB,MAAAA,MAAM,CAACkB,IAAP,CAAY,UAAZ,EAAwBD,OAAxB;AACD,KAFM,CAAP;AAGD,G;;;;AAGD,OAAO,SAASE,qBAAT,CAA+BC,UAA/B,EAA2C;AAChD,MAAIC,WAAW,GAAG,IAAIC,WAAJ,EAAlB;AACA,MAAIC,MAAM,GAAG,EAAb;AAEA,SAAO,IAAIP,OAAJ,CAAY,CAACC,OAAD,EAAUO,MAAV,KAAqB;AACtCJ,IAAAA,UAAU,CAACR,IAAX,CAAgBa,KAAK,IAAI;AACvB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BF,QAAAA,MAAM,IAAIE,KAAV;AACD,OAFD,MAEO;AACLJ,QAAAA,WAAW,GAAGvB,uBAAuB,CAACuB,WAAD,EAAcI,KAAd,CAArC;AACD;AACF,KAND;AAOAL,IAAAA,UAAU,CAACM,EAAX,CAAc,OAAd,EAAuBC,KAAK,IAAIH,MAAM,CAACG,KAAD,CAAtC;AAEAP,IAAAA,UAAU,CAACM,EAAX,CAAc,KAAd,EAAqB,MAAM;AACzB,UAAIN,UAAU,CAACQ,QAAf,EAAyB;AACvBX,QAAAA,OAAO,CAACI,WAAW,IAAIE,MAAhB,CAAP;AACD,OAFD,MAEO;AACLC,QAAAA,MAAM,CAAC,sEAAD,CAAN;AACD;AACF,KAND;AAOD,GAjBM,CAAP;AAkBD","sourcesContent":["import {isBrowser} from '../utils/globals';\nimport {concatenateArrayBuffers} from './memory-copy-utils';\n\nexport function getStreamIterator(stream) {\n  // NODE 10+: stream is an asyncIterator\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return stream;\n  }\n\n  // WhatWG: stream is supposed to have a `getIterator` method\n  if (typeof stream.getIterator === 'function') {\n    return stream.getIterator();\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\n// BROWSER IMPLEMENTATION\n// See https://jakearchibald.com/2017/async-iterators-and-generators/#making-streams-iterate\n\nasync function* makeBrowserStreamIterator(stream) {\n  // In the brower, we first need to get a lock on the stream\n  const reader = stream.getReader();\n\n  try {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Read from the stream\n      const {done, value} = await reader.read();\n      // Exit if we're done\n      if (done) {\n        return;\n      }\n      // Else yield the chunk\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\n// NODE <10 IMPLEMENTATION\n// See https://github.com/bustle/streaming-iterables, MIT license\n\nasync function* makeNodeStreamIterator(stream) {\n  // Node createStream will return promises to handle http requests\n  stream = await stream;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const data = stream.read();\n    if (data !== null) {\n      yield data;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (stream._readableState.ended) {\n      return;\n    }\n    await onceReadable(stream);\n  }\n}\n\nasync function onceReadable(stream) {\n  return new Promise(resolve => {\n    stream.once('readable', resolve);\n  });\n}\n\n// TODO - remove? can this be handled via corresponding AsyncIterator function?\nexport function concatenateReadStream(readStream) {\n  let arrayBuffer = new ArrayBuffer();\n  let string = '';\n\n  return new Promise((resolve, reject) => {\n    readStream.data(chunk => {\n      if (typeof chunk === 'string') {\n        string += chunk;\n      } else {\n        arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n      }\n    });\n    readStream.on('error', error => reject(error));\n\n    readStream.on('end', () => {\n      if (readStream.complete) {\n        resolve(arrayBuffer || string);\n      } else {\n        reject('The connection was terminated while the message was still being sent');\n      }\n    });\n  });\n}\n"],"file":"stream-utils.js"}