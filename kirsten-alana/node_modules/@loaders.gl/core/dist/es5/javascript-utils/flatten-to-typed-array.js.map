{"version":3,"sources":["../../../src/javascript-utils/flatten-to-typed-array.js"],"names":["flattenToTypedArray","nestedArray","ArrayType","Float32Array","length","checkVertices","count","countVertices","typedArray","flattenVerticesInPlace","flatten","array","filter","map","x","result","Array","isArray","flattenArray","index","value","push","dimensions","nestedCount","localCount","ArrayBuffer","isView","flattenVertices","vertexLength","predicate","Number","isFinite","flattenVerticesInPlaceRecursive","insert"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport function flattenToTypedArray(nestedArray, ArrayType = Float32Array) {\n  if (nestedArray.length === 0) {\n    return new Float32Array(0);\n  }\n\n  if (!checkVertices(nestedArray)) {\n    return null;\n  }\n\n  const count = countVertices(nestedArray);\n\n  const typedArray = new ArrayType(count);\n  flattenVerticesInPlace(nestedArray, typedArray);\n  return typedArray;\n}\n\n/**\n * Flattens a nested array into a single level array,\n * or a single value into an array with one value\n * @example flatten([[1, [2]], [3], 4]) => [1, 2, 3, 4]\n * @example flatten(1) => [1]\n * @param {Array} array The array to flatten.\n * @param {Function} filter= - Optional predicate called on each `value` to\n *   determine if it should be included (pushed onto) the resulting array.\n * @param {Function} map= - Optional transform applied to each array elements.\n * @param {Array} result=[] - Optional array to push value into\n * @return {Array} Returns the new flattened array (new array or `result` if provided)\n */\nexport function flatten(array, {filter = () => true, map = x => x, result = []} = {}) {\n  // Wrap single object in array\n  if (!Array.isArray(array)) {\n    return filter(array) ? [map(array)] : [];\n  }\n  // Deep flatten and filter the array\n  return flattenArray(array, filter, map, result);\n}\n\n// Deep flattens an array. Helper to `flatten`, see its parameters\nfunction flattenArray(array, filter, map, result) {\n  let index = -1;\n  while (++index < array.length) {\n    const value = array[index];\n    if (Array.isArray(value)) {\n      flattenArray(value, filter, map, result);\n    } else if (filter(value)) {\n      result.push(map(value));\n    }\n  }\n  return result;\n}\n\nexport function countVertices(nestedArray, dimensions = 3) {\n  let nestedCount = 0;\n  let localCount = 0;\n  let index = -1;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      nestedCount += countVertices(value);\n    } else {\n      localCount++;\n    }\n  }\n  return nestedCount + (nestedCount === 0 && localCount < dimensions ? dimensions : localCount);\n}\n\n// Flattens nested array of vertices, padding third coordinate as needed\nexport function flattenVertices(nestedArray, {result = [], dimensions = 3} = {}) {\n  let index = -1;\n  let vertexLength = 0;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      flattenVertices(value, {result, dimensions});\n    } else {\n      // eslint-disable-next-line\n      if (vertexLength < dimensions) {\n        result.push(value);\n        vertexLength++;\n      }\n    }\n  }\n  // Add a third coordinate if needed\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result.push(0);\n  }\n  return result;\n}\n\nfunction checkVertices(nestedArray, predicate = Number.isFinite) {\n  let index = -1;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      if (!checkVertices(value, predicate)) {\n        return false;\n      }\n    } else if (!predicate(value)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction flattenVerticesInPlace(nestedArray, result, dimensions = 3) {\n  flattenVerticesInPlaceRecursive(nestedArray, result, dimensions, 0);\n  return result;\n}\n\n// Flattens nested array of vertices, padding third coordinate as needed\nfunction flattenVerticesInPlaceRecursive(nestedArray, result, dimensions, insert) {\n  let index = -1;\n  let vertexLength = 0;\n  while (++index < nestedArray.length) {\n    const value = nestedArray[index];\n    if (Array.isArray(value) || ArrayBuffer.isView(value)) {\n      insert = flattenVerticesInPlaceRecursive(value, result, dimensions, insert);\n    } else {\n      // eslint-disable-next-line\n      if (vertexLength < dimensions) {\n        result[insert++] = value;\n        vertexLength++;\n      }\n    }\n  }\n  // Add a third coordinate if needed\n  if (vertexLength > 0 && vertexLength < dimensions) {\n    result[insert++] = 0;\n  }\n  return insert;\n}\n"],"file":"flatten-to-typed-array.js"}