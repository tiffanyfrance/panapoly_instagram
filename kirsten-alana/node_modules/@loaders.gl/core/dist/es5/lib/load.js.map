{"version":3,"sources":["../../../src/lib/load.js"],"names":["loadInBatches","url","loaders","options","response","load","Array","isArray","loader","loadAndParse"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AACA;;SAEsBA,a;;;;;mFAAf,iBAA6BC,GAA7B,EAAkCC,OAAlC,EAA2CC,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkB,0BAAUF,GAAV,EAAeE,OAAf,CADlB;;AAAA;AACCC,YAAAA,QADD;AAAA,6CAEE,2BAAeA,QAAf,EAAyBF,OAAzB,EAAkCC,OAAlC,EAA2CF,GAA3C,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAKeI,I;;;;;0EAAf,kBAAoBJ,GAApB,EAAyBC,OAAzB,EAAkCC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGL,gBAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,IAA2B,CAAC,qCAAeA,OAAf,CAAhC,EAAyD;AACvDC,cAAAA,OAAO,GAAGD,OAAV;AACAA,cAAAA,OAAO,GAAG,IAAV;AACD;;AAEDA,YAAAA,OAAO,GAAGA,OAAO,IAAI,4CAArB;AACMM,YAAAA,MATD,GASUF,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyB,wCAAiBD,GAAjB,EAAsB,IAAtB,EAA4BC,OAA5B,CAAzB,GAAgEA,OAT1E;;AAAA,kBAYDM,MAAM,IAAIA,MAAM,CAACC,YAZhB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaUD,MAAM,CAACC,YAAP,CAAoBR,GAApB,EAAyBE,OAAzB,CAbV;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBkB,0BAAUF,GAAV,EAAeE,OAAf,CAjBlB;;AAAA;AAiBCC,YAAAA,QAjBD;AAAA,8CAkBE,kBAAMA,QAAN,EAAgBF,OAAhB,EAAyBC,OAAzB,EAAkCF,GAAlC,CAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {fetchFile} from './fetch/fetch-file';\nimport {isLoaderObject} from './loader-utils/normalize-loader';\nimport {autoDetectLoader} from './loader-utils/auto-detect-loader';\n\nimport {parse, parseInBatches} from './parse';\nimport {getRegisteredLoaders} from './register-loaders';\n\nexport async function loadInBatches(url, loaders, options) {\n  const response = await fetchFile(url, options);\n  return parseInBatches(response, loaders, options, url);\n}\n\nexport async function load(url, loaders, options) {\n  // Signature: load(url, options)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    options = loaders;\n    loaders = null;\n  }\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n\n  // Some loaders can not separate reading and parsing of data (e.g ImageLoader)\n  if (loader && loader.loadAndParse) {\n    return await loader.loadAndParse(url, options);\n  }\n\n  // at this point, data can be binary or text\n  const response = await fetchFile(url, options);\n  return parse(response, loaders, options, url);\n}\n"],"file":"load.js"}