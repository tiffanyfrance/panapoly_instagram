"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.parseSync = parseSync;
exports.parseInBatches = parseInBatches;
exports.parseInBatchesSync = parseInBatchesSync;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _autoDetectLoader = require("./loader-utils/auto-detect-loader");

var _normalizeLoader = require("./loader-utils/normalize-loader");

var _nullLog = _interopRequireDefault(require("./loader-utils/null-log"));

var _registerLoaders = require("./register-loaders");

var _parseWithLoader = require("./parse-with-loader");

function parse(_x, _x2, _x3, _x4) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data, loaders, options, url) {
    var loader;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || (0, _registerLoaders.getRegisteredLoaders)();
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, data, loaders) : loaders;

            if (loader) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", null);

          case 5:
            (0, _normalizeLoader.normalizeLoader)(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            _context.next = 9;
            return (0, _parseWithLoader.parseWithLoader)(data, loader, options, url);

          case 9:
            return _context.abrupt("return", _context.sent);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

function parseSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  loaders = loaders || (0, _registerLoaders.getRegisteredLoaders)();
  var loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, data, loaders) : loaders;
  (0, _normalizeLoader.normalizeLoader)(loader);
  options = mergeLoaderAndUserOptions(options, loader);
  return (0, _parseWithLoader.parseWithLoaderSync)(data, loader, options, url);
}

function parseInBatches(_x5, _x6, _x7, _x8) {
  return _parseInBatches.apply(this, arguments);
}

function _parseInBatches() {
  _parseInBatches = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(data, loaders, options, url) {
    var loader;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || (0, _registerLoaders.getRegisteredLoaders)();
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, null, loaders) : loaders;
            (0, _normalizeLoader.normalizeLoader)(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            return _context2.abrupt("return", (0, _parseWithLoader.parseWithLoaderInBatches)(data, loader, options, url));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseInBatches.apply(this, arguments);
}

function parseInBatchesSync(_x9, _x10, _x11, _x12) {
  return _parseInBatchesSync.apply(this, arguments);
}

function _parseInBatchesSync() {
  _parseInBatchesSync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3(data, loaders, options, url) {
    var loader;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!Array.isArray(loaders) && !(0, _normalizeLoader.isLoaderObject)(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || (0, _registerLoaders.getRegisteredLoaders)();
            loader = Array.isArray(loaders) ? (0, _autoDetectLoader.autoDetectLoader)(url, null, loaders) : loaders;
            (0, _normalizeLoader.normalizeLoader)(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            return _context3.abrupt("return", (0, _parseWithLoader.parseWithLoaderInBatches)(data, loader, options, url));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseInBatchesSync.apply(this, arguments);
}

function mergeLoaderAndUserOptions(options, loader) {
  options = Object.assign({}, loader.DEFAULT_OPTIONS, loader.options, options, {
    dataType: 'arraybuffer'
  });

  if (options.log === null) {
    options.log = new _nullLog["default"]();
  }

  if (!('log' in options)) {
    options.log = console;
  }

  return options;
}
//# sourceMappingURL=parse.js.map