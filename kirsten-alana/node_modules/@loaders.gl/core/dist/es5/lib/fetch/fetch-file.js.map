{"version":3,"sources":["../../../../src/lib/fetch/fetch-file.js"],"names":["fetchFile","url","options","func","isBrowser","browserFetchFile","node","readFileSync","browserReadFileSync","createReadStream","browserCreateReadStream"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AAGA;;AAGA;;AAMA;;SAOsBA,S;;;;;+EAAf,iBAAyBC,GAAzB,EAA8BC,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,YAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;AACME,YAAAA,IAFD,GAEQC,qBAAYC,2BAAZ,GAA+BC,IAAI,CAACN,SAF5C;AAAA,6CAGEG,IAAI,CAACF,GAAD,EAAMC,OAAN,CAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAOA,SAASK,YAAT,CAAsBN,GAAtB,EAAyC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC9CD,EAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;AACA,MAAME,IAAI,GAAGC,qBAAYI,8BAAZ,GAAkCF,IAAI,CAACC,YAApD;AACA,SAAOJ,IAAI,CAACF,GAAD,EAAMC,OAAN,CAAX;AACD;;SAKqBO,gB;;;;;sFAAf,kBAAgCR,GAAhC,EAAqCC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLD,YAAAA,GAAG,GAAG,8BAAYA,GAAZ,CAAN;AACME,YAAAA,IAFD,GAEQC,qBAAYM,kCAAZ,GAAsCJ,IAAI,CAACG,gBAFnD;AAAA,8CAGEN,IAAI,CAACF,GAAD,EAAMC,OAAN,CAHN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {isBrowser} from '../../utils/globals';\n\n// fetch-file-node is excluded from build under browser so don't do indivdual imports\nimport * as node from '../../node/fetch/fetch-file-node';\n\n// Import individual symbols for browser version to ensure tree-shaking is enabled\nimport {\n  fetchFile as browserFetchFile,\n  readFileSync as browserReadFileSync,\n  createReadStream as browserCreateReadStream\n} from './fetch-file-browser';\n\nimport {resolvePath} from './file-aliases';\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nexport async function fetchFile(url, options) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserFetchFile : node.fetchFile;\n  return func(url, options);\n}\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(url, options = {}) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserReadFileSync : node.readFileSync;\n  return func(url, options);\n}\n\n// DEPRECATED\n\n// Returns a promise that resolves to a readable stream\nexport async function createReadStream(url, options) {\n  url = resolvePath(url);\n  const func = isBrowser ? browserCreateReadStream : node.createReadStream;\n  return func(url, options);\n}\n"],"file":"fetch-file.js"}