"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchFile = fetchFile;
exports.readFileSync = readFileSync;
exports.createReadStream = createReadStream;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _globals = require("../../utils/globals");

var node = _interopRequireWildcard(require("../../node/fetch/fetch-file-node"));

var _fetchFileBrowser = require("./fetch-file-browser");

var _fileAliases = require("./file-aliases");

function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(url, options) {
    var func;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = (0, _fileAliases.resolvePath)(url);
            func = _globals.isBrowser ? _fetchFileBrowser.fetchFile : node.fetchFile;
            return _context.abrupt("return", func(url, options));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchFile.apply(this, arguments);
}

function readFileSync(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  url = (0, _fileAliases.resolvePath)(url);
  var func = _globals.isBrowser ? _fetchFileBrowser.readFileSync : node.readFileSync;
  return func(url, options);
}

function createReadStream(_x3, _x4) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(url, options) {
    var func;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = (0, _fileAliases.resolvePath)(url);
            func = _globals.isBrowser ? _fetchFileBrowser.createReadStream : node.createReadStream;
            return _context2.abrupt("return", func(url, options));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createReadStream.apply(this, arguments);
}
//# sourceMappingURL=fetch-file.js.map