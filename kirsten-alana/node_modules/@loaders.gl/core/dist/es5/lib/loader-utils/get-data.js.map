{"version":3,"sources":["../../../../src/lib/loader-utils/get-data.js"],"names":["ERR_DATA","getUrlFromData","data","url","getSizeFromData","headers","get","getArrayBufferOrStringFromDataSync","loader","text","ArrayBuffer","isView","arrayBuffer","buffer","binary","textDecoder","TextDecoder","decode","Error","getArrayBufferOrStringFromData","isArrayBuffer","getAsyncIteratorFromData","body","Symbol","asyncIterator","getIteratorFromData","oneChunk","iterator"],"mappings":"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","sourcesContent":["import {\n  isFetchResponse,\n  isReadableStream,\n  isAsyncIterable,\n  isIterable,\n  isIterator\n} from '../../javascript-utils/is-type';\nimport {getStreamIterator} from '../../javascript-utils/stream-utils';\nimport {TextDecoder} from '../../javascript-utils/text-encoding';\n\nconst ERR_DATA = 'Cannot convert supplied data type';\n\nexport function getUrlFromData(data) {\n  return isFetchResponse(data) ? data.url : null;\n}\n\nexport function getSizeFromData(data) {\n  return isFetchResponse(data) ? data.headers.get('Content-Length') : null;\n}\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    const arrayBuffer = data.buffer || data;\n    if (loader.text && !loader.binary) {\n      const textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\n\n// Convert async iterator to a promise\nexport async function getArrayBufferOrStringFromData(data, loader) {\n  // Resolve any promise\n  data = await data;\n\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n  if (typeof data === 'string' || isArrayBuffer) {\n    return getArrayBufferOrStringFromDataSync(data, loader);\n  }\n\n  if (isFetchResponse(data)) {\n    return loader.binary ? await data.arrayBuffer() : data.text();\n  }\n\n  // if (isIterable(data) || isAsyncIterable(data)) {\n  // }\n\n  // Assume arrayBuffer iterator - attempt to concatenate\n  // return concatenateAsyncIterator(data);\n\n  throw new Error(ERR_DATA);\n}\n\nexport async function getAsyncIteratorFromData(data, loader) {\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isFetchResponse(data)) {\n    return getStreamIterator(data.body);\n  }\n\n  if (isReadableStream(data)) {\n    return getStreamIterator(data);\n  }\n\n  if (isAsyncIterable(data)) {\n    return data[Symbol.asyncIterator]();\n  }\n\n  return getIteratorFromData(data, loader);\n}\n\nexport async function getIteratorFromData(data, loader) {\n  // generate an iterator that emits a single chunk\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return (function* oneChunk() {\n      yield data.buffer || data;\n    })();\n  }\n\n  if (isIterator(data)) {\n    return data;\n  }\n\n  if (isIterable(data)) {\n    return data[Symbol.iterator]();\n  }\n\n  throw new Error(ERR_DATA);\n}\n"],"file":"get-data.js"}