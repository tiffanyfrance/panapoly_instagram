"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLoaderObject = isLoaderObject;
exports.normalizeLoader = normalizeLoader;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _assert = _interopRequireDefault(require("../../utils/assert"));

function isLoaderObject(loader) {
  if (!loader) {
    return false;
  }

  if (Array.isArray(loader)) {
    loader = loader[0];
  }

  var hasParser = loader.parseTextSync || loader.parseSync || loader.parse || loader.loadAndParse || loader.parseStream || loader.parseInBatches || loader.worker;
  return hasParser;
}

function normalizeLoader(loader) {
  (0, _assert["default"])(isLoaderObject(loader));
  var options;

  if (Array.isArray(loader)) {
    loader = loader[0];
    options = loader[1];
    loader = (0, _objectSpread2["default"])({}, loader, {
      options: (0, _objectSpread2["default"])({}, loader.options, {
        options: options
      })
    });
  }

  if (loader.extension) {
    loader.extensions = loader.extensions || [loader.extension];
    delete loader.extension;
  }

  if (!Array.isArray(loader.extensions)) {
    loader.extensions = [loader.extensions];
  }

  (0, _assert["default"])(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);

  if (loader.parseTextSync) {
    loader.text = true;
  }

  if (!loader.text) {
    loader.binary = true;
  }

  return loader;
}
//# sourceMappingURL=normalize-loader.js.map