"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchFile = fetchFile;
exports.readFileSync = readFileSync;
exports.createReadStream = createReadStream;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _fs = _interopRequireDefault(require("fs"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _util = _interopRequireDefault(require("util"));

var _binaryUtils = require("../../javascript-utils/binary-utils");

var _textEncoding = require("../../javascript-utils/text-encoding");

var _streamUtils = require("../../javascript-utils/stream-utils");

var _decodeDataUri = _interopRequireDefault(require("./decode-data-uri"));

var DEFAULT_OPTIONS = {
  dataType: 'arrayBuffer'
};
var isNode = Boolean(_fs["default"] && _fs["default"].readFile);

var isDataURL = function isDataURL(url) {
  return url.startsWith('data:');
};

var isRequestURL = function isRequestURL(url) {
  return url.startsWith('http:') || url.startsWith('https:');
};

var NodeHeaders = function () {
  function NodeHeaders(response) {
    (0, _classCallCheck2["default"])(this, NodeHeaders);
    this.reponse = response;
  }

  (0, _createClass2["default"])(NodeHeaders, [{
    key: "get",
    value: function get(header) {
      if (this.response.httpResponse) {
        return this.response.httpResponse.getHeaders()[header];
      }

      switch (header) {
        case 'Content-Length':
          return this._getContentLength();

        default:
      }

      return undefined;
    }
  }, {
    key: "_getContentLength",
    value: function _getContentLength() {
      return this._contentLength;
    }
  }]);
  return NodeHeaders;
}();

var NodeFetchResponse = function () {
  function NodeFetchResponse(url, options) {
    (0, _classCallCheck2["default"])(this, NodeFetchResponse);
    this.url = url;
    this.options = options;
    this.bodyUsed = false;
    this._headers = null;
  }

  (0, _createClass2["default"])(NodeFetchResponse, [{
    key: "arrayBuffer",
    value: function () {
      var _arrayBuffer = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.bodyUsed = true;
                return _context.abrupt("return", readFile(this.url, this.options));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function arrayBuffer() {
        return _arrayBuffer.apply(this, arguments);
      }

      return arrayBuffer;
    }()
  }, {
    key: "text",
    value: function () {
      var _text = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
        var arrayBuffer, textDecoder;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.arrayBuffer();

              case 2:
                arrayBuffer = _context2.sent;
                textDecoder = new _textEncoding.TextDecoder();
                return _context2.abrupt("return", textDecoder.decode(arrayBuffer));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function text() {
        return _text.apply(this, arguments);
      }

      return text;
    }()
  }, {
    key: "json",
    value: function () {
      var _json = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
        var text;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.text();

              case 2:
                text = _context3.sent;
                return _context3.abrupt("return", JSON.parse(text));

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function json() {
        return _json.apply(this, arguments);
      }

      return json;
    }()
  }, {
    key: "_getHeaders",
    value: function _getHeaders() {
      if (isRequestURL(this.url)) {
        return new NodeHeaders(this);
      }

      if (isDataURL(this.url)) {
        return {
          'Content-Length': this.url.length
        };
      }

      if (isRequestURL(this.repsonse.url)) {
        return {};
      }

      var stats = _fs["default"].statSync(this.response.url);

      return {
        'Content-Length': stats.size
      };
    }
  }, {
    key: "headers",
    get: function get() {
      this._headers = this._headers || this._getHeaders();
    }
  }, {
    key: "body",
    get: function get() {
      var url = this.url,
          options = this.options;
      this.bodyUsed = true;
      return createReadStream(url, options);
    }
  }]);
  return NodeFetchResponse;
}();

function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4(url, options) {
    return _regenerator["default"].wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", new NodeFetchResponse(url, options));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _fetchFile.apply(this, arguments);
}

function readFileSync(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = getReadFileOptions(options);

  if (isDataURL(url)) {
    return (0, _decodeDataUri["default"])(url);
  }

  if (!isNode) {
    return null;
  }

  var buffer = _fs["default"].readFileSync(url, options, function () {});

  return buffer instanceof Buffer ? (0, _binaryUtils.toArrayBuffer)(buffer) : buffer;
}

function readFile(_x3) {
  return _readFile.apply(this, arguments);
}

function _readFile() {
  _readFile = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee5(url) {
    var options,
        readFileAsync,
        buffer,
        _args5 = arguments;
    return _regenerator["default"].wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
            options = getReadFileOptions(options);

            if (!isDataURL(url)) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt("return", Promise.resolve((0, _decodeDataUri["default"])(url)));

          case 4:
            if (!isRequestURL(url)) {
              _context5.next = 6;
              break;
            }

            return _context5.abrupt("return", new Promise(function (resolve, reject) {
              options = (0, _objectSpread2["default"])({}, new URL(url), options);
              var request = url.startsWith('https:') ? _https["default"].request : _http["default"].request;
              request(url, function (response) {
                return (0, _streamUtils.concatenateReadStream)(response).then(resolve, reject);
              });
            }));

          case 6:
            readFileAsync = _util["default"].promisify(_fs["default"].readFile);
            _context5.next = 9;
            return readFileAsync(url, options);

          case 9:
            buffer = _context5.sent;
            return _context5.abrupt("return", buffer instanceof Buffer ? (0, _binaryUtils.toArrayBuffer)(buffer) : buffer);

          case 11:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _readFile.apply(this, arguments);
}

function createReadStream(_x4, _x5) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee6(url, options) {
    return _regenerator["default"].wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (!isDataURL(url)) {
              _context6.next = 2;
              break;
            }

            return _context6.abrupt("return", (0, _decodeDataUri["default"])(url));

          case 2:
            if (isRequestURL(url)) {
              _context6.next = 4;
              break;
            }

            return _context6.abrupt("return", _fs["default"].createReadStream(url, options));

          case 4:
            return _context6.abrupt("return", new Promise(function (resolve, reject) {
              options = (0, _objectSpread2["default"])({}, new URL(url), options);
              var request = url.startsWith('https:') ? _https["default"].request : _http["default"].request;
              request(url, function (response) {
                return resolve(response);
              });
            }));

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _createReadStream.apply(this, arguments);
}

function getReadFileOptions() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = Object.assign({}, DEFAULT_OPTIONS, options);
  options.responseType = options.responseType || options.dataType;

  if (_fs["default"]) {
    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);
  }

  return options;
}
//# sourceMappingURL=fetch-file-node.js.map