import assert from '../utils/assert';
import { TextEncoder } from './text-encoding';
export var isArrayBuffer = function isArrayBuffer(x) {
  return x && x instanceof ArrayBuffer;
};
export var isBlob = function isBlob(x) {
  return x && typeof Blob !== 'undefined' && x instanceof Blob;
};
export var isBuffer = function isBuffer(x) {
  return x && x instanceof Buffer;
};
export function toArrayBuffer(data) {
  if (isArrayBuffer(data)) {
    return data;
  }

  if (isBuffer(data)) {
    var typedArray = new Uint8Array(data);
    return typedArray.buffer;
  }

  if (ArrayBuffer.isView(data)) {
    return data.buffer;
  }

  if (typeof data === 'string') {
    var text = data;
    var uint8Array = new TextEncoder().encode(text);
    return uint8Array.buffer;
  }

  return assert(false);
}
export function blobToArrayBuffer(blob) {
  return new Promise(function (resolve, reject) {
    var arrayBuffer;
    var fileReader = new FileReader();

    fileReader.onload = function (event) {
      arrayBuffer = event.target.result;
    };

    fileReader.onloadend = function (event) {
      return resolve(arrayBuffer);
    };

    fileReader.onerror = reject;
    fileReader.readAsArrayBuffer(blob);
  });
}
export function toDataView(buffer) {
  return new DataView(toArrayBuffer(buffer));
}
//# sourceMappingURL=binary-utils.js.map