export { setPathPrefix, getPathPrefix, resolvePath } from './lib/fetch/file-aliases.js';
export { fetchFile, readFileSync } from './lib/fetch/fetch-file';
export { writeFile, writeFileSync } from './lib/fetch/write-file';
export { registerLoaders } from './lib/register-loaders';
export { parse, parseSync, parseInBatches, parseInBatchesSync } from './lib/parse';
export { load, loadInBatches } from './lib/load';
export { encode, encodeSync, encodeInBatches } from './lib/encode';
export { save, saveSync } from './lib/save';
export { isPromise, isIterable, isAsyncIterable, isIterator, isFetchResponse, isReadableStream, isWritableStream } from './javascript-utils/is-type';
export { isArrayBuffer, isBlob, toArrayBuffer, blobToArrayBuffer, toDataView } from './javascript-utils/binary-utils';
export { padTo4Bytes, copyToArray, copyArrayBuffer } from './javascript-utils/memory-copy-utils';
export { flattenToTypedArray } from './javascript-utils/flatten-to-typed-array';
export { TextDecoder, TextEncoder } from './javascript-utils/text-encoding';
export { getStreamIterator } from './javascript-utils/stream-utils';
export { forEach, concatenateAsyncIterator, lineAsyncIterator, textDecoderAsyncIterator, numberedLineAsyncIterator } from './javascript-utils/async-iterator-utils';
export { default as createWorker } from './worker-utils/create-worker';
export { isBrowser, self, window, global, document } from './utils/globals';
export { default as assert } from './utils/assert';
export { getMeshSize as _getMeshSize } from './categories/mesh/mesh-utils';
export { createReadStream } from './lib/fetch/fetch-file';
import { parse, parseSync } from './lib/parse';
import { load } from './lib/load';
export function parseFile() {
  console.warn('parse() deprecated, use parse()');
  return parse.apply(void 0, arguments);
}
export function parseFileSync() {
  console.warn('parseSync() deprecated, use parseSync()');
  return parseSync.apply(void 0, arguments);
}
export function loadFile() {
  console.warn('loadFile() deprecated, use load()');
  return load.apply(void 0, arguments);
}
//# sourceMappingURL=index.js.map