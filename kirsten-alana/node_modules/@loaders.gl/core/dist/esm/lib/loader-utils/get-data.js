import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { isFetchResponse, isReadableStream, isAsyncIterable, isIterable, isIterator } from '../../javascript-utils/is-type';
import { getStreamIterator } from '../../javascript-utils/stream-utils';
import { TextDecoder } from '../../javascript-utils/text-encoding';
var ERR_DATA = 'Cannot convert supplied data type';
export function getUrlFromData(data) {
  return isFetchResponse(data) ? data.url : null;
}
export function getSizeFromData(data) {
  return isFetchResponse(data) ? data.headers.get('Content-Length') : null;
}
export function getArrayBufferOrStringFromDataSync(data, loader) {
  if (loader.text && typeof data === 'string') {
    return data;
  }

  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
    var arrayBuffer = data.buffer || data;

    if (loader.text && !loader.binary) {
      var textDecoder = new TextDecoder('utf8');
      return textDecoder.decode(arrayBuffer);
    }

    return arrayBuffer;
  }

  throw new Error(ERR_DATA);
}
export function getArrayBufferOrStringFromData(_x, _x2) {
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

function _getArrayBufferOrStringFromData() {
  _getArrayBufferOrStringFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {
    var isArrayBuffer;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return data;

          case 2:
            data = _context.sent;
            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);

            if (!(typeof data === 'string' || isArrayBuffer)) {
              _context.next = 6;
              break;
            }

            return _context.abrupt("return", getArrayBufferOrStringFromDataSync(data, loader));

          case 6:
            if (!isFetchResponse(data)) {
              _context.next = 15;
              break;
            }

            if (!loader.binary) {
              _context.next = 13;
              break;
            }

            _context.next = 10;
            return data.arrayBuffer();

          case 10:
            _context.t0 = _context.sent;
            _context.next = 14;
            break;

          case 13:
            _context.t0 = data.text();

          case 14:
            return _context.abrupt("return", _context.t0);

          case 15:
            throw new Error(ERR_DATA);

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getArrayBufferOrStringFromData.apply(this, arguments);
}

export function getAsyncIteratorFromData(_x3, _x4) {
  return _getAsyncIteratorFromData.apply(this, arguments);
}

function _getAsyncIteratorFromData() {
  _getAsyncIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loader) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!isIterator(data)) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", data);

          case 2:
            if (!isFetchResponse(data)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", getStreamIterator(data.body));

          case 4:
            if (!isReadableStream(data)) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt("return", getStreamIterator(data));

          case 6:
            if (!isAsyncIterable(data)) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", data[Symbol.asyncIterator]());

          case 8:
            return _context2.abrupt("return", getIteratorFromData(data, loader));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getAsyncIteratorFromData.apply(this, arguments);
}

export function getIteratorFromData(_x5, _x6) {
  return _getIteratorFromData.apply(this, arguments);
}

function _getIteratorFromData() {
  _getIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loader) {
    return _regeneratorRuntime.wrap(function _callee3$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!(data instanceof ArrayBuffer || ArrayBuffer.isView(data))) {
              _context4.next = 2;
              break;
            }

            return _context4.abrupt("return", _regeneratorRuntime.mark(function oneChunk() {
              return _regeneratorRuntime.wrap(function oneChunk$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      _context3.next = 2;
                      return data.buffer || data;

                    case 2:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, oneChunk);
            })());

          case 2:
            if (!isIterator(data)) {
              _context4.next = 4;
              break;
            }

            return _context4.abrupt("return", data);

          case 4:
            if (!isIterable(data)) {
              _context4.next = 6;
              break;
            }

            return _context4.abrupt("return", data[Symbol.iterator]());

          case 6:
            throw new Error(ERR_DATA);

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee3);
  }));
  return _getIteratorFromData.apply(this, arguments);
}
//# sourceMappingURL=get-data.js.map