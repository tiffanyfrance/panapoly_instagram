import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { autoDetectLoader } from './loader-utils/auto-detect-loader';
import { normalizeLoader, isLoaderObject } from './loader-utils/normalize-loader';
import NullLog from './loader-utils/null-log';
import { getRegisteredLoaders } from './register-loaders';
import { parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync } from './parse-with-loader';
export function parse(_x, _x2, _x3, _x4) {
  return _parse.apply(this, arguments);
}

function _parse() {
  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {
    var loader;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || getRegisteredLoaders();
            loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;

            if (loader) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return", null);

          case 5:
            normalizeLoader(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            _context.next = 9;
            return parseWithLoader(data, loader, options, url);

          case 9:
            return _context.abrupt("return", _context.sent);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parse.apply(this, arguments);
}

export function parseSync(data, loaders, options, url) {
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    url = options;
    options = loaders;
    loaders = null;
  }

  loaders = loaders || getRegisteredLoaders();
  var loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;
  normalizeLoader(loader);
  options = mergeLoaderAndUserOptions(options, loader);
  return parseWithLoaderSync(data, loader, options, url);
}
export function parseInBatches(_x5, _x6, _x7, _x8) {
  return _parseInBatches.apply(this, arguments);
}

function _parseInBatches() {
  _parseInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loaders, options, url) {
    var loader;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || getRegisteredLoaders();
            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;
            normalizeLoader(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            return _context2.abrupt("return", parseWithLoaderInBatches(data, loader, options, url));

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseInBatches.apply(this, arguments);
}

export function parseInBatchesSync(_x9, _x10, _x11, _x12) {
  return _parseInBatchesSync.apply(this, arguments);
}

function _parseInBatchesSync() {
  _parseInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loaders, options, url) {
    var loader;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
              url = options;
              options = loaders;
              loaders = null;
            }

            loaders = loaders || getRegisteredLoaders();
            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;
            normalizeLoader(loader);
            options = mergeLoaderAndUserOptions(options, loader);
            return _context3.abrupt("return", parseWithLoaderInBatches(data, loader, options, url));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseInBatchesSync.apply(this, arguments);
}

function mergeLoaderAndUserOptions(options, loader) {
  options = Object.assign({}, loader.DEFAULT_OPTIONS, loader.options, options, {
    dataType: 'arraybuffer'
  });

  if (options.log === null) {
    options.log = new NullLog();
  }

  if (!('log' in options)) {
    options.log = console;
  }

  return options;
}
//# sourceMappingURL=parse.js.map