import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import parseWithWorker from './parse-with-worker';
import { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData, getUrlFromData } from './loader-utils/get-data';
export function parseWithLoader(_x, _x2) {
  return _parseWithLoader.apply(this, arguments);
}

function _parseWithLoader() {
  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {
    var options,
        url,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
            url = _args.length > 3 ? _args[3] : undefined;
            url = url || getUrlFromData(data);
            _context.next = 5;
            return getArrayBufferOrStringFromData(data, loader);

          case 5:
            data = _context.sent;

            if (!(loader.parseTextSync && typeof data === 'string')) {
              _context.next = 9;
              break;
            }

            options.dataType = 'text';
            return _context.abrupt("return", loader.parseTextSync(data, options, url, loader));

          case 9:
            if (!loader.parseSync) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", loader.parseSync(data, options, url, loader));

          case 11:
            if (!loader.parse) {
              _context.next = 15;
              break;
            }

            _context.next = 14;
            return loader.parse(data, options, url, loader);

          case 14:
            return _context.abrupt("return", _context.sent);

          case 15:
            if (!loader.worker) {
              _context.next = 19;
              break;
            }

            _context.next = 18;
            return parseWithWorker(loader.worker, data, options);

          case 18:
            return _context.abrupt("return", _context.sent);

          case 19:
            return _context.abrupt("return", assert(false));

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseWithLoader.apply(this, arguments);
}

export function parseWithLoaderSync(data, loader) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var url = arguments.length > 3 ? arguments[3] : undefined;
  data = getArrayBufferOrStringFromDataSync(data, loader);

  if (loader.parseTextSync && typeof data === 'string') {
    return loader.parseTextSync(data, options, url, loader);
  }

  if (loader.parseSync) {
    return loader.parseSync(data, options, url, loader);
  }

  return assert(false);
}
export function parseWithLoaderInBatches(_x3, _x4) {
  return _parseWithLoaderInBatches.apply(this, arguments);
}

function _parseWithLoaderInBatches() {
  _parseWithLoaderInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loader) {
    var options,
        url,
        inputIterator,
        outputIterator,
        _args2 = arguments;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};
            url = _args2.length > 3 ? _args2[3] : undefined;

            if (!loader.parseInBatches) {
              _context2.next = 8;
              break;
            }

            _context2.next = 5;
            return getAsyncIteratorFromData(data);

          case 5:
            inputIterator = _context2.sent;
            outputIterator = loader.parseInBatches(inputIterator, options, url, loader);
            return _context2.abrupt("return", outputIterator);

          case 8:
            return _context2.abrupt("return", null);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseWithLoaderInBatches.apply(this, arguments);
}

export function parseWithLoaderInBatchesSync(_x5, _x6) {
  return _parseWithLoaderInBatchesSync.apply(this, arguments);
}

function _parseWithLoaderInBatchesSync() {
  _parseWithLoaderInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loader) {
    var options,
        url,
        inputIterator,
        outputIterator,
        _args3 = arguments;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};
            url = _args3.length > 3 ? _args3[3] : undefined;

            if (!loader.parseInBatchesSync) {
              _context3.next = 6;
              break;
            }

            inputIterator = getIteratorFromData(data);
            outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);
            return _context3.abrupt("return", outputIterator);

          case 6:
            return _context3.abrupt("return", assert(false));

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseWithLoaderInBatchesSync.apply(this, arguments);
}
//# sourceMappingURL=parse-with-loader.js.map