import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { isBrowser } from '../../utils/globals';
import * as node from '../../node/fetch/fetch-file-node';
import { fetchFile as browserFetchFile, readFileSync as browserReadFileSync, createReadStream as browserCreateReadStream } from './fetch-file-browser';
import { resolvePath } from './file-aliases';
export function fetchFile(_x, _x2) {
  return _fetchFile.apply(this, arguments);
}

function _fetchFile() {
  _fetchFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, options) {
    var func;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = resolvePath(url);
            func = isBrowser ? browserFetchFile : node.fetchFile;
            return _context.abrupt("return", func(url, options));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchFile.apply(this, arguments);
}

export function readFileSync(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  url = resolvePath(url);
  var func = isBrowser ? browserReadFileSync : node.readFileSync;
  return func(url, options);
}
export function createReadStream(_x3, _x4) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, options) {
    var func;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            url = resolvePath(url);
            func = isBrowser ? browserCreateReadStream : node.createReadStream;
            return _context2.abrupt("return", func(url, options));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _createReadStream.apply(this, arguments);
}
//# sourceMappingURL=fetch-file.js.map