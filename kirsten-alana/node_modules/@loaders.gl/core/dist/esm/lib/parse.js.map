{"version":3,"sources":["../../../src/lib/parse.js"],"names":["autoDetectLoader","normalizeLoader","isLoaderObject","NullLog","getRegisteredLoaders","parseWithLoader","parseWithLoaderInBatches","parseWithLoaderSync","parse","data","loaders","options","url","Array","isArray","loader","mergeLoaderAndUserOptions","parseSync","parseInBatches","parseInBatchesSync","Object","assign","DEFAULT_OPTIONS","dataType","log","console"],"mappings":"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","sourcesContent":["import {autoDetectLoader} from './loader-utils/auto-detect-loader';\nimport {normalizeLoader, isLoaderObject} from './loader-utils/normalize-loader';\nimport NullLog from './loader-utils/null-log';\nimport {getRegisteredLoaders} from './register-loaders';\nimport {parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync} from './parse-with-loader';\n\nexport async function parse(data, loaders, options, url) {\n  // Signature: parse(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;\n  if (!loader) {\n    // no loader available\n    // TODO: throw error?\n    return null;\n  }\n\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return await parseWithLoader(data, loader, options, url);\n}\n\nexport function parseSync(data, loaders, options, url) {\n  // Signature: parseSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderSync(data, loader, options, url);\n}\n\nexport async function parseInBatches(data, loaders, options, url) {\n  // Signature: parseInBatches(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n\nexport async function parseInBatchesSync(data, loaders, options, url) {\n  // Signature: parseInBatchesSync(data, options, url)\n  // Uses registered loaders\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  // Choose loader and normalize it\n  loaders = loaders || getRegisteredLoaders();\n  const loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n  normalizeLoader(loader);\n\n  // Normalize options\n  options = mergeLoaderAndUserOptions(options, loader);\n\n  return parseWithLoaderInBatches(data, loader, options, url);\n}\n\nfunction mergeLoaderAndUserOptions(options, loader) {\n  // TODO - explain why this optionb is needed for parsing\n  options = Object.assign({}, loader.DEFAULT_OPTIONS, loader.options, options, {\n    dataType: 'arraybuffer'\n  });\n\n  // LOGGING\n\n  // options.log can be set to `null` to defeat logging\n  if (options.log === null) {\n    options.log = new NullLog();\n  }\n  // log defaults to console\n  if (!('log' in options)) {\n    /* global console */\n    options.log = console;\n  }\n\n  return options;\n}\n"],"file":"parse.js"}