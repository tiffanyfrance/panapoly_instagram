{"version":3,"sources":["../../../../src/node/fetch/fetch-file-node.js"],"names":["fs","http","https","util","toArrayBuffer","TextDecoder","concatenateReadStream","decodeDataUri","DEFAULT_OPTIONS","dataType","isNode","Boolean","readFile","isDataURL","url","startsWith","isRequestURL","NodeHeaders","response","reponse","header","httpResponse","getHeaders","_getContentLength","undefined","_contentLength","NodeFetchResponse","options","bodyUsed","_headers","arrayBuffer","textDecoder","decode","text","JSON","parse","length","repsonse","stats","statSync","size","_getHeaders","createReadStream","fetchFile","readFileSync","getReadFileOptions","buffer","Buffer","Promise","resolve","reject","URL","request","then","readFileAsync","promisify","Object","assign","responseType","encoding"],"mappings":"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","sourcesContent":["/* global URL */\n/* global Buffer */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\n\nimport {toArrayBuffer} from '../../javascript-utils/binary-utils';\nimport {TextDecoder} from '../../javascript-utils/text-encoding';\nimport {concatenateReadStream} from '../../javascript-utils/stream-utils';\nimport decodeDataUri from './decode-data-uri';\n\nconst DEFAULT_OPTIONS = {\n  dataType: 'arrayBuffer'\n};\n\nconst isNode = Boolean(fs && fs.readFile);\nconst isDataURL = url => url.startsWith('data:');\nconst isRequestURL = url => url.startsWith('http:') || url.startsWith('https:');\n\n// Under Node.js we return a mock \"fetch response object\"\n// so that apps can use the same API as in the browser.\n//\n// Note: This is intended to be a lightweight implementation and will have limitations.\n// Apps that require more complete fech emulation in Node\n// are encouraged to use dedicated fetch polyfill modules.\nclass NodeHeaders {\n  constructor(response) {\n    this.reponse = response;\n  }\n\n  get(header) {\n    if (this.response.httpResponse) {\n      return this.response.httpResponse.getHeaders()[header];\n    }\n    switch (header) {\n      case 'Content-Length':\n        return this._getContentLength();\n      default:\n    }\n    return undefined;\n  }\n\n  _getContentLength() {\n    return this._contentLength;\n  }\n}\n\n// See https://developer.mozilla.org/en-US/docs/Web/API/Response\nclass NodeFetchResponse {\n  constructor(url, options) {\n    this.url = url;\n    this.options = options;\n    this.bodyUsed = false;\n    this._headers = null;\n  }\n\n  // Subset of Properties\n\n  // get url()\n  get headers() {\n    this._headers = this._headers || this._getHeaders();\n  }\n\n  // Returns a readable stream to the \"body\" of the response (or file)\n  get body() {\n    const {url, options} = this;\n    this.bodyUsed = true;\n    return createReadStream(url, options);\n  }\n\n  // Subset of Methods\n\n  async arrayBuffer() {\n    this.bodyUsed = true;\n    return readFile(this.url, this.options);\n  }\n\n  async text() {\n    const arrayBuffer = await this.arrayBuffer();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(arrayBuffer);\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  // PRIVATE\n\n  _getHeaders() {\n    if (isRequestURL(this.url)) {\n      return new NodeHeaders(this);\n    }\n\n    if (isDataURL(this.url)) {\n      return {\n        'Content-Length': this.url.length\n      };\n    }\n    if (isRequestURL(this.repsonse.url)) {\n      return {};\n    }\n\n    // File URL\n    // TODO - how to handle non-existing file, this presumably just throws\n    const stats = fs.statSync(this.response.url);\n    return {\n      'Content-Length': stats.size\n    };\n  }\n}\n\nexport async function fetchFile(url, options) {\n  return new NodeFetchResponse(url, options);\n}\n\n// In a few cases (data URIs, node.js) \"files\" can be read synchronously\nexport function readFileSync(url, options = {}) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return decodeDataUri(url);\n  }\n\n  if (!isNode) {\n    return null; // throw new Error('Cant load URI synchronously');\n  }\n\n  const buffer = fs.readFileSync(url, options, () => {});\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// Reads raw file data from:\n// * http/http urls\n// * data urls\n// * File/Blob objects\n// etc?\nasync function readFile(url, options = {}) {\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return Promise.resolve(decodeDataUri(url));\n  }\n\n  if (isRequestURL(url)) {\n    return new Promise((resolve, reject) => {\n      options = {...new URL(url), ...options};\n      const request = url.startsWith('https:') ? https.request : http.request;\n      request(url, response => concatenateReadStream(response).then(resolve, reject));\n    });\n  }\n\n  const readFileAsync = util.promisify(fs.readFile);\n  const buffer = await readFileAsync(url, options);\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\n// Returns a promise that resolves to a readable stream\nexport async function createReadStream(url, options) {\n  // Handle data urls in node, to match `fetch``\n  if (isDataURL(url)) {\n    // TODO - need to return a stream wrapper\n    return decodeDataUri(url);\n  }\n\n  // Handle file streams in node\n  if (!isRequestURL(url)) {\n    return fs.createReadStream(url, options);\n  }\n\n  // HANDLE HTTP/HTTPS REQUESTS IN NODE\n  return new Promise((resolve, reject) => {\n    /* TODO - URL not available in Node.js v8? */\n    options = {...new URL(url), ...options};\n    const request = url.startsWith('https:') ? https.request : http.request;\n    request(url, response => resolve(response));\n  });\n}\n\n// HELPERS\n\nfunction getReadFileOptions(options = {}) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n  if (fs) {\n    // set encoding for fs.readFile\n    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);\n  }\n  return options;\n}\n"],"file":"fetch-file-node.js"}