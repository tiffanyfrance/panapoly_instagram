{"version":3,"sources":["../../../../src/node/fetch/decode-data-uri.js"],"names":["decodeDataUri","uri","dataIndex","indexOf","buffer","mimeType","slice","Buffer","trim","decodeURIComponent"],"mappings":"AAeA,eAAe,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACzC,MAAMC,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAlB;AAEA,MAAIC,MAAJ;AACA,MAAIC,QAAJ;;AACA,MAAIJ,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,EAAyBA,SAAzB,MAAwC,SAA5C,EAAuD;AACrDE,IAAAA,MAAM,GAAG,IAAIG,MAAJ,CAAWN,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,CAAX,EAAqC,QAArC,CAAT;AACAG,IAAAA,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaJ,SAAS,GAAG,CAAzB,EAA4BM,IAA5B,EAAX;AACD,GAHD,MAGO;AACLJ,IAAAA,MAAM,GAAG,IAAIG,MAAJ,CAAWE,kBAAkB,CAACR,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,CAAD,CAA7B,CAAT;AACAG,IAAAA,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaJ,SAAb,EAAwBM,IAAxB,EAAX;AACD;;AAED,MAAI,CAACH,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,6BAAX;AACD,GAFD,MAEO,IAAIA,QAAQ,CAAC,CAAD,CAAR,KAAgB,GAApB,EAAyB;AAC9BA,IAAAA,QAAQ,uBAAgBA,QAAhB,CAAR;AACD;;AAED,SAAO;AAACD,IAAAA,MAAM,EAANA,MAAD;AAASC,IAAAA,QAAQ,EAARA;AAAT,GAAP;AACD","sourcesContent":["// Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n// import path from 'path';\n// const fs = module.require && module.require('fs');\n\n// TODO consolidate with core-node\n// TODO - remove dependency on Buffer\n\n/* global Buffer */\n\n/**\n * Parses a data URI into a buffer, as well as retrieving its declared MIME type.\n *\n * @param {string} uri - a data URI (assumed to be valid)\n * @returns {Object} { buffer, mimeType }\n */\nexport default function decodeDataUri(uri) {\n  const dataIndex = uri.indexOf(',');\n\n  let buffer;\n  let mimeType;\n  if (uri.slice(dataIndex - 7, dataIndex) === ';base64') {\n    buffer = new Buffer(uri.slice(dataIndex + 1), 'base64');\n    mimeType = uri.slice(5, dataIndex - 7).trim();\n  } else {\n    buffer = new Buffer(decodeURIComponent(uri.slice(dataIndex + 1)));\n    mimeType = uri.slice(5, dataIndex).trim();\n  }\n\n  if (!mimeType) {\n    mimeType = 'text/plain;charset=US-ASCII';\n  } else if (mimeType[0] === ';') {\n    mimeType = `text/plain${mimeType}`;\n  }\n\n  return {buffer, mimeType};\n}\n"],"file":"decode-data-uri.js"}