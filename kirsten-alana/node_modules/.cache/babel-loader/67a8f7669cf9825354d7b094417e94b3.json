{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { PhongMaterial } from '@luma.gl/core';\nimport { CompositeLayer } from '@deck.gl/core';\nimport GPUGridCellLayer from './gpu-grid-cell-layer';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport { pointToDensityGridData } from '../utils/gpu-grid-aggregation/grid-aggregation-utils';\nvar MINCOLOR = [0, 0, 0, 255];\nvar MAXCOLOR = [0, 255, 0, 255];\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  fp64: false,\n  pickable: false,\n  material: defaultMaterial,\n  gpuAggregation: true\n};\n\nvar GPUGridLayer = function (_CompositeLayer) {\n  _inherits(GPUGridLayer, _CompositeLayer);\n\n  function GPUGridLayer() {\n    _classCallCheck(this, GPUGridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GPUGridLayer).apply(this, arguments));\n  }\n\n  _createClass(GPUGridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var gl = this.context.gl;\n      var options = {\n        id: \"\".concat(this.id, \"-gpu-aggregator\"),\n        shaderCache: this.context.shaderCache\n      };\n      this.state = {\n        gpuGridAggregator: new GPUGridAggregator(gl, options)\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(opts) {\n      var aggregationFlags = this.getAggregationFlags(opts);\n\n      if (aggregationFlags) {\n        this.getLayerData(aggregationFlags);\n      }\n    }\n  }, {\n    key: \"getAggregationFlags\",\n    value: function getAggregationFlags(_ref) {\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var aggregationFlags = null;\n\n      if (changeFlags.dataChanged || oldProps.gpuAggregation !== props.gpuAggregation || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition)) {\n        aggregationFlags = Object.assign({}, aggregationFlags, {\n          dataChanged: true\n        });\n      }\n\n      if (oldProps.cellSize !== props.cellSize) {\n        aggregationFlags = Object.assign({}, aggregationFlags, {\n          cellSizeChanged: true\n        });\n      }\n\n      return aggregationFlags;\n    }\n  }, {\n    key: \"getLayerData\",\n    value: function getLayerData(aggregationFlags) {\n      var _this$props = this.props,\n          data = _this$props.data,\n          cellSizeMeters = _this$props.cellSize,\n          getPosition = _this$props.getPosition,\n          gpuAggregation = _this$props.gpuAggregation;\n\n      var _pointToDensityGridDa = pointToDensityGridData({\n        data: data,\n        cellSizeMeters: cellSizeMeters,\n        getPosition: getPosition,\n        gpuAggregation: gpuAggregation,\n        gpuGridAggregator: this.state.gpuGridAggregator,\n        boundingBox: this.state.boundingBox,\n        aggregationFlags: aggregationFlags\n      }),\n          countsBuffer = _pointToDensityGridDa.countsBuffer,\n          maxCountBuffer = _pointToDensityGridDa.maxCountBuffer,\n          gridSize = _pointToDensityGridDa.gridSize,\n          gridOrigin = _pointToDensityGridDa.gridOrigin,\n          cellSize = _pointToDensityGridDa.cellSize,\n          boundingBox = _pointToDensityGridDa.boundingBox;\n\n      this.setState({\n        countsBuffer: countsBuffer,\n        maxCountBuffer: maxCountBuffer,\n        gridSize: gridSize,\n        gridOrigin: gridOrigin,\n        cellSize: cellSize,\n        boundingBox: boundingBox\n      });\n    }\n  }, {\n    key: \"getSubLayerProps\",\n    value: function getSubLayerProps() {\n      var _this$props2 = this.props,\n          elevationScale = _this$props2.elevationScale,\n          fp64 = _this$props2.fp64,\n          extruded = _this$props2.extruded,\n          cellSizeMeters = _this$props2.cellSize,\n          coverage = _this$props2.coverage,\n          material = _this$props2.material;\n      var _this$state = this.state,\n          countsBuffer = _this$state.countsBuffer,\n          maxCountBuffer = _this$state.maxCountBuffer,\n          gridSize = _this$state.gridSize,\n          gridOrigin = _this$state.gridOrigin,\n          cellSize = _this$state.cellSize;\n      var minColor = MINCOLOR;\n      var maxColor = MAXCOLOR;\n      return _get(_getPrototypeOf(GPUGridLayer.prototype), \"getSubLayerProps\", this).call(this, {\n        id: 'grid-cell',\n        data: this.state.layerData,\n        countsBuffer: countsBuffer,\n        maxCountBuffer: maxCountBuffer,\n        gridSize: gridSize,\n        gridOrigin: gridOrigin,\n        gridOffset: cellSize,\n        numInstances: gridSize[0] * gridSize[1],\n        minColor: minColor,\n        maxColor: maxColor,\n        fp64: fp64,\n        cellSize: cellSizeMeters,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        pickable: false\n      });\n    }\n  }, {\n    key: \"getSubLayerClass\",\n    value: function getSubLayerClass() {\n      return GPUGridCellLayer;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var SubLayerClass = this.getSubLayerClass();\n      return new SubLayerClass(this.getSubLayerProps());\n    }\n  }]);\n\n  return GPUGridLayer;\n}(CompositeLayer);\n\nexport { GPUGridLayer as default };\nGPUGridLayer.layerName = 'GPUGridLayer';\nGPUGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}