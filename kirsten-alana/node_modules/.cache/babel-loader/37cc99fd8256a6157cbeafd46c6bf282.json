{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar defaultGetValue = function defaultGetValue(points) {\n  return points.length;\n};\n\nvar BinSorter = function () {\n  function BinSorter() {\n    var bins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var getValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultGetValue;\n\n    _classCallCheck(this, BinSorter);\n\n    this.sortedBins = this.getSortedBins(bins, getValue);\n    this.maxCount = this.getMaxCount();\n    this.binMap = this.getBinMap();\n  }\n\n  _createClass(BinSorter, [{\n    key: \"getSortedBins\",\n    value: function getSortedBins(bins, getValue) {\n      return bins.reduce(function (accu, h, i) {\n        var value = getValue(h.points);\n\n        if (value !== null && value !== undefined) {\n          accu.push({\n            i: Number.isFinite(h.index) ? h.index : i,\n            value: value,\n            counts: h.points.length\n          });\n        }\n\n        return accu;\n      }, []).sort(function (a, b) {\n        return a.value - b.value;\n      });\n    }\n  }, {\n    key: \"getValueRange\",\n    value: function getValueRange(_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          lower = _ref2[0],\n          upper = _ref2[1];\n\n      var len = this.sortedBins.length;\n\n      if (!len) {\n        return [0, 0];\n      }\n\n      var lowerIdx = Math.ceil(lower / 100 * (len - 1));\n      var upperIdx = Math.floor(upper / 100 * (len - 1));\n      return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n    }\n  }, {\n    key: \"getMaxCount\",\n    value: function getMaxCount() {\n      var maxCount = 0;\n      this.sortedBins.forEach(function (x) {\n        return maxCount = maxCount > x.counts ? maxCount : x.counts;\n      });\n      return maxCount;\n    }\n  }, {\n    key: \"getBinMap\",\n    value: function getBinMap() {\n      return this.sortedBins.reduce(function (mapper, curr) {\n        return Object.assign(mapper, _defineProperty({}, curr.i, curr));\n      }, {});\n    }\n  }]);\n\n  return BinSorter;\n}();\n\nexport { BinSorter as default };","map":null,"metadata":{},"sourceType":"module"}