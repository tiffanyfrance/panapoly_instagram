{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nexport var TRANSITION_STATE = {\n  NONE: 'none',\n  PENDING: 'pending',\n  IN_PROGRESS: 'in_progress',\n  ENDED: 'ended'\n};\n\nfunction noop() {}\n\nvar Transition = function () {\n  function Transition(props) {\n    _classCallCheck(this, Transition);\n\n    this._startTime = null;\n    this._state = TRANSITION_STATE.NONE;\n    this.duration = 1;\n\n    this.easing = function (t) {\n      return t;\n    };\n\n    this.onStart = noop;\n    this.onUpdate = noop;\n    this.onInterrupt = noop;\n    this.onEnd = noop;\n    Object.assign(this, props);\n  }\n\n  _createClass(Transition, [{\n    key: \"start\",\n    value: function start(props) {\n      if (this.inProgress) {\n        this.onInterrupt(this);\n      }\n\n      Object.assign(this, props);\n\n      this._setState(TRANSITION_STATE.PENDING);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.inProgress) {\n        this.onInterrupt(this);\n\n        this._setState(TRANSITION_STATE.NONE);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(currentTime) {\n      if (this.state === TRANSITION_STATE.PENDING) {\n        this._startTime = currentTime;\n\n        this._setState(TRANSITION_STATE.IN_PROGRESS);\n      }\n\n      if (this.state === TRANSITION_STATE.IN_PROGRESS) {\n        var shouldEnd = false;\n        var time = (currentTime - this._startTime) / this.duration;\n\n        if (time >= 1) {\n          time = 1;\n          shouldEnd = true;\n        }\n\n        this.time = this.easing(time);\n        this.onUpdate(this);\n\n        if (shouldEnd) {\n          this._setState(TRANSITION_STATE.ENDED);\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_setState\",\n    value: function _setState(newState) {\n      if (this._state === newState) {\n        return;\n      }\n\n      this._state = newState;\n\n      switch (newState) {\n        case TRANSITION_STATE.PENDING:\n          this.onStart(this);\n          break;\n\n        case TRANSITION_STATE.ENDED:\n          this.onEnd(this);\n          break;\n\n        default:\n      }\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"inProgress\",\n    get: function get() {\n      return this._state === TRANSITION_STATE.PENDING || this._state === TRANSITION_STATE.IN_PROGRESS;\n    }\n  }]);\n\n  return Transition;\n}();\n\nexport { Transition as default };","map":null,"metadata":{},"sourceType":"module"}