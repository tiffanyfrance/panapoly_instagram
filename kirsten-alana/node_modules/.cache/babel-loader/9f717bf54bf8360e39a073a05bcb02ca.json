{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { h3SetToMultiPolygon } from 'h3-js';\nimport { CompositeLayer, createIterable } from '@deck.gl/core';\nimport { PolygonLayer } from '@deck.gl/layers';\nvar defaultProps = Object.assign({\n  getHexagons: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.hexagons;\n    }\n  }\n}, PolygonLayer.defaultProps);\n\nvar H3ClusterLayer = function (_CompositeLayer) {\n  _inherits(H3ClusterLayer, _CompositeLayer);\n\n  function H3ClusterLayer() {\n    _classCallCheck(this, H3ClusterLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(H3ClusterLayer).apply(this, arguments));\n  }\n\n  _createClass(H3ClusterLayer, [{\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (changeFlags.dataChanged || changeFlags.updateTriggers && changeFlags.updateTriggers.getHexagons) {\n        var data = props.data,\n            getHexagons = props.getHexagons;\n        var polygons = [];\n\n        var _createIterable = createIterable(data),\n            iterable = _createIterable.iterable,\n            objectInfo = _createIterable.objectInfo;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var object = _step.value;\n            objectInfo.index++;\n            var hexagons = getHexagons(object, objectInfo);\n            var multiPolygon = h3SetToMultiPolygon(hexagons, true);\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = multiPolygon[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var polygon = _step2.value;\n                polygons.push({\n                  polygon: polygon,\n                  object: object,\n                  index: objectInfo.index\n                });\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        this.setState({\n          polygons: polygons\n        });\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      return Object.assign(info, {\n        object: info.object && info.object.object,\n        index: info.object && info.object.index\n      });\n    }\n  }, {\n    key: \"getSubLayerAccessor\",\n    value: function getSubLayerAccessor(accessor) {\n      if (typeof accessor !== 'function') return accessor;\n      return function (object, objectInfo) {\n        return accessor(object.object, objectInfo);\n      };\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props = this.props,\n          elevationScale = _this$props.elevationScale,\n          extruded = _this$props.extruded,\n          wireframe = _this$props.wireframe,\n          filled = _this$props.filled,\n          stroked = _this$props.stroked,\n          lineWidthScale = _this$props.lineWidthScale,\n          lineWidthMinPixels = _this$props.lineWidthMinPixels,\n          lineWidthMaxPixels = _this$props.lineWidthMaxPixels,\n          lineJointRounded = _this$props.lineJointRounded,\n          lineMiterLimit = _this$props.lineMiterLimit,\n          lineDashJustified = _this$props.lineDashJustified,\n          fp64 = _this$props.fp64,\n          material = _this$props.material,\n          getFillColor = _this$props.getFillColor,\n          getLineColor = _this$props.getLineColor,\n          getLineWidth = _this$props.getLineWidth,\n          getLineDashArray = _this$props.getLineDashArray,\n          getElevation = _this$props.getElevation,\n          updateTriggers = _this$props.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('cluster-region', PolygonLayer);\n      return new SubLayerClass({\n        fp64: fp64,\n        filled: filled,\n        wireframe: wireframe,\n        extruded: extruded,\n        elevationScale: elevationScale,\n        stroked: stroked,\n        lineWidthScale: lineWidthScale,\n        lineWidthMinPixels: lineWidthMinPixels,\n        lineWidthMaxPixels: lineWidthMaxPixels,\n        lineJointRounded: lineJointRounded,\n        lineMiterLimit: lineMiterLimit,\n        lineDashJustified: lineDashJustified,\n        material: material,\n        getFillColor: this.getSubLayerAccessor(getFillColor),\n        getLineColor: this.getSubLayerAccessor(getLineColor),\n        getLineWidth: this.getSubLayerAccessor(getLineWidth),\n        getLineDashArray: this.getSubLayerAccessor(getLineDashArray),\n        getElevation: this.getSubLayerAccessor(getElevation)\n      }, this.getSubLayerProps({\n        id: 'cluster-region',\n        updateTriggers: updateTriggers\n      }), {\n        data: this.state.polygons,\n        getPolygon: function getPolygon(d) {\n          return d.polygon;\n        }\n      });\n    }\n  }]);\n\n  return H3ClusterLayer;\n}(CompositeLayer);\n\nexport { H3ClusterLayer as default };\nH3ClusterLayer.defaultProps = defaultProps;\nH3ClusterLayer.layerName = 'H3ClusterLayer';","map":null,"metadata":{},"sourceType":"module"}