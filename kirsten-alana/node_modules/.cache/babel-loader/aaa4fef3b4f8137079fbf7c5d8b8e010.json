{"ast":null,"code":"import { getCode, getVertices, CONTOUR_TYPE } from './marching-squares';\nexport function generateContours(_ref) {\n  var thresholdData = _ref.thresholdData,\n      colors = _ref.colors,\n      cellWeights = _ref.cellWeights,\n      gridSize = _ref.gridSize,\n      gridOrigin = _ref.gridOrigin,\n      cellSize = _ref.cellSize;\n  var contourSegments = [];\n  var contourPolygons = [];\n  var width = gridSize[0];\n  var height = gridSize[1];\n  thresholdData.forEach(function (data, index) {\n    var threshold = data.threshold;\n\n    for (var x = -1; x < width; x++) {\n      for (var y = -1; y < height; y++) {\n        var _getCode = getCode({\n          cellWeights: cellWeights,\n          threshold: threshold,\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        }),\n            code = _getCode.code,\n            meanCode = _getCode.meanCode;\n\n        var opts = {\n          gridOrigin: gridOrigin,\n          cellSize: cellSize,\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          code: code,\n          meanCode: meanCode,\n          thresholdData: data\n        };\n\n        if (Array.isArray(threshold)) {\n          opts.type = CONTOUR_TYPE.ISO_BANDS;\n          var polygons = getVertices(opts);\n          polygons.forEach(function (polygon) {\n            contourPolygons.push({\n              vertices: polygon,\n              threshold: threshold\n            });\n          });\n        } else {\n          opts.type = CONTOUR_TYPE.ISO_LINES;\n          var vertices = getVertices(opts);\n\n          for (var i = 0; i < vertices.length; i += 2) {\n            contourSegments.push({\n              start: vertices[i],\n              end: vertices[i + 1],\n              threshold: threshold\n            });\n          }\n        }\n      }\n    }\n  });\n  return {\n    contourSegments: contourSegments,\n    contourPolygons: contourPolygons\n  };\n}","map":null,"metadata":{},"sourceType":"module"}