{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { PhongMaterial } from '@luma.gl/core';\nimport { CompositeLayer } from '@deck.gl/core';\nimport { GridCellLayer } from '@deck.gl/layers';\nimport BinSorter from '../utils/bin-sorter';\nimport { defaultColorRange } from '../utils/color-utils';\nimport { getQuantizeScale, getLinearScale } from '../utils/scale-utils';\nimport { pointToDensityGridData } from './grid-aggregator';\n\nfunction nop() {}\n\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  colorDomain: null,\n  colorRange: defaultColorRange,\n  getColorValue: {\n    type: 'accessor',\n    value: function value(points) {\n      return points.length;\n    }\n  },\n  lowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  upperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  onSetColorDomain: nop,\n  elevationDomain: null,\n  elevationRange: [0, 1000],\n  getElevationValue: {\n    type: 'accessor',\n    value: function value(points) {\n      return points.length;\n    }\n  },\n  elevationLowerPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 0\n  },\n  elevationUpperPercentile: {\n    type: 'number',\n    min: 0,\n    max: 100,\n    value: 100\n  },\n  elevationScale: 1,\n  onSetElevationDomain: nop,\n  cellSize: {\n    type: 'number',\n    min: 0,\n    max: 1000,\n    value: 1000\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  extruded: false,\n  fp64: false,\n  material: defaultMaterial\n};\n\nvar GridLayer = function (_CompositeLayer) {\n  _inherits(GridLayer, _CompositeLayer);\n\n  function GridLayer() {\n    _classCallCheck(this, GridLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GridLayer).apply(this, arguments));\n  }\n\n  _createClass(GridLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        layerData: [],\n        sortedColorBins: null,\n        sortedElevationBins: null,\n        colorValueDomain: null,\n        elevationValueDomain: null,\n        colorScaleFunc: nop,\n        elevationScaleFunc: nop,\n        dimensionUpdaters: this.getDimensionUpdaters()\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var _this = this;\n\n      var oldProps = _ref.oldProps,\n          props = _ref.props,\n          changeFlags = _ref.changeFlags;\n      var reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);\n\n      if (changeFlags.dataChanged || reprojectNeeded) {\n        this.getLayerData();\n      } else {\n        var dimensionChanges = this.getDimensionChanges(oldProps, props) || [];\n        dimensionChanges.forEach(function (f) {\n          return typeof f === 'function' && f.apply(_this);\n        });\n      }\n    }\n  }, {\n    key: \"needsReProjectPoints\",\n    value: function needsReProjectPoints(oldProps, props, changeFlags) {\n      return oldProps.cellSize !== props.cellSize || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition);\n    }\n  }, {\n    key: \"getDimensionUpdaters\",\n    value: function getDimensionUpdaters() {\n      return {\n        getColor: [{\n          id: 'value',\n          triggers: ['getColorValue'],\n          updater: this.getSortedColorBins\n        }, {\n          id: 'domain',\n          triggers: ['lowerPercentile', 'upperPercentile'],\n          updater: this.getColorValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['colorDomain', 'colorRange'],\n          updater: this.getColorScale\n        }],\n        getElevation: [{\n          id: 'value',\n          triggers: ['getElevationValue'],\n          updater: this.getSortedElevationBins\n        }, {\n          id: 'domain',\n          triggers: ['elevationLowerPercentile', 'elevationUpperPercentile'],\n          updater: this.getElevationValueDomain\n        }, {\n          id: 'scaleFunc',\n          triggers: ['elevationDomain', 'elevationRange'],\n          updater: this.getElevationScale\n        }]\n      };\n    }\n  }, {\n    key: \"getDimensionChanges\",\n    value: function getDimensionChanges(oldProps, props) {\n      var dimensionUpdaters = this.state.dimensionUpdaters;\n      var updaters = [];\n\n      for (var dimensionKey in dimensionUpdaters) {\n        var needUpdate = dimensionUpdaters[dimensionKey].find(function (item) {\n          return item.triggers.some(function (t) {\n            return oldProps[t] !== props[t];\n          });\n        });\n\n        if (needUpdate) {\n          updaters.push(needUpdate.updater);\n        }\n      }\n\n      return updaters.length ? updaters : null;\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref2) {\n      var info = _ref2.info;\n      var _this$state = this.state,\n          sortedColorBins = _this$state.sortedColorBins,\n          sortedElevationBins = _this$state.sortedElevationBins;\n      var isPicked = info.picked && info.index > -1;\n      var object = null;\n\n      if (isPicked) {\n        var cell = this.state.layerData[info.index];\n        var colorValue = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n        var elevationValue = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n        object = Object.assign({\n          colorValue: colorValue,\n          elevationValue: elevationValue\n        }, cell);\n      }\n\n      return Object.assign(info, {\n        picked: Boolean(object),\n        object: object\n      });\n    }\n  }, {\n    key: \"getUpdateTriggers\",\n    value: function getUpdateTriggers() {\n      var _this2 = this;\n\n      var dimensionUpdaters = this.state.dimensionUpdaters;\n      var updateTriggers = {};\n\n      var _loop = function _loop(dimensionKey) {\n        updateTriggers[dimensionKey] = {};\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = dimensionUpdaters[dimensionKey][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var step = _step.value;\n            step.triggers.forEach(function (prop) {\n              updateTriggers[dimensionKey][prop] = _this2.props[prop];\n            });\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      for (var dimensionKey in dimensionUpdaters) {\n        _loop(dimensionKey);\n      }\n\n      return updateTriggers;\n    }\n  }, {\n    key: \"getLayerData\",\n    value: function getLayerData() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          cellSize = _this$props.cellSize,\n          getPosition = _this$props.getPosition;\n\n      var _pointToDensityGridDa = pointToDensityGridData(data, cellSize, getPosition),\n          layerData = _pointToDensityGridDa.layerData;\n\n      this.setState({\n        layerData: layerData\n      });\n      this.getSortedBins();\n    }\n  }, {\n    key: \"getValueDomain\",\n    value: function getValueDomain() {\n      this.getColorValueDomain();\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: \"getSortedBins\",\n    value: function getSortedBins() {\n      this.getSortedColorBins();\n      this.getSortedElevationBins();\n    }\n  }, {\n    key: \"getSortedColorBins\",\n    value: function getSortedColorBins() {\n      var getColorValue = this.props.getColorValue;\n      var sortedColorBins = new BinSorter(this.state.layerData || [], getColorValue);\n      this.setState({\n        sortedColorBins: sortedColorBins\n      });\n      this.getColorValueDomain();\n    }\n  }, {\n    key: \"getSortedElevationBins\",\n    value: function getSortedElevationBins() {\n      var getElevationValue = this.props.getElevationValue;\n      var sortedElevationBins = new BinSorter(this.state.layerData || [], getElevationValue);\n      this.setState({\n        sortedElevationBins: sortedElevationBins\n      });\n      this.getElevationValueDomain();\n    }\n  }, {\n    key: \"getColorValueDomain\",\n    value: function getColorValueDomain() {\n      var _this$props2 = this.props,\n          lowerPercentile = _this$props2.lowerPercentile,\n          upperPercentile = _this$props2.upperPercentile,\n          onSetColorDomain = _this$props2.onSetColorDomain;\n      this.state.colorValueDomain = this.state.sortedColorBins.getValueRange([lowerPercentile, upperPercentile]);\n\n      if (typeof onSetColorDomain === 'function') {\n        onSetColorDomain(this.state.colorValueDomain);\n      }\n\n      this.getColorScale();\n    }\n  }, {\n    key: \"getElevationValueDomain\",\n    value: function getElevationValueDomain() {\n      var _this$props3 = this.props,\n          elevationLowerPercentile = _this$props3.elevationLowerPercentile,\n          elevationUpperPercentile = _this$props3.elevationUpperPercentile,\n          onSetElevationDomain = _this$props3.onSetElevationDomain;\n      this.state.elevationValueDomain = this.state.sortedElevationBins.getValueRange([elevationLowerPercentile, elevationUpperPercentile]);\n\n      if (typeof onSetElevationDomain === 'function') {\n        onSetElevationDomain(this.state.elevationValueDomain);\n      }\n\n      this.getElevationScale();\n    }\n  }, {\n    key: \"getColorScale\",\n    value: function getColorScale() {\n      var colorRange = this.props.colorRange;\n      var colorDomain = this.props.colorDomain || this.state.colorValueDomain;\n      this.state.colorScaleFunc = getQuantizeScale(colorDomain, colorRange);\n    }\n  }, {\n    key: \"getElevationScale\",\n    value: function getElevationScale() {\n      var elevationRange = this.props.elevationRange;\n      var elevationDomain = this.props.elevationDomain || this.state.elevationValueDomain;\n      this.state.elevationScaleFunc = getLinearScale(elevationDomain, elevationRange);\n    }\n  }, {\n    key: \"_onGetSublayerColor\",\n    value: function _onGetSublayerColor(cell) {\n      var _this$state2 = this.state,\n          sortedColorBins = _this$state2.sortedColorBins,\n          colorScaleFunc = _this$state2.colorScaleFunc,\n          colorValueDomain = _this$state2.colorValueDomain;\n      var cv = sortedColorBins.binMap[cell.index] && sortedColorBins.binMap[cell.index].value;\n      var colorDomain = this.props.colorDomain || colorValueDomain;\n      var isColorValueInDomain = cv >= colorDomain[0] && cv <= colorDomain[colorDomain.length - 1];\n      var color = isColorValueInDomain ? colorScaleFunc(cv) : [0, 0, 0, 0];\n      color[3] = Number.isFinite(color[3]) ? color[3] : 255;\n      return color;\n    }\n  }, {\n    key: \"_onGetSublayerElevation\",\n    value: function _onGetSublayerElevation(cell) {\n      var _this$state3 = this.state,\n          sortedElevationBins = _this$state3.sortedElevationBins,\n          elevationScaleFunc = _this$state3.elevationScaleFunc,\n          elevationValueDomain = _this$state3.elevationValueDomain;\n      var ev = sortedElevationBins.binMap[cell.index] && sortedElevationBins.binMap[cell.index].value;\n      var elevationDomain = this.props.elevationDomain || elevationValueDomain;\n      var isElevationValueInDomain = ev >= elevationDomain[0] && ev <= elevationDomain[elevationDomain.length - 1];\n      return isElevationValueInDomain ? elevationScaleFunc(ev) : -1;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this$props4 = this.props,\n          elevationScale = _this$props4.elevationScale,\n          fp64 = _this$props4.fp64,\n          extruded = _this$props4.extruded,\n          cellSize = _this$props4.cellSize,\n          coverage = _this$props4.coverage,\n          material = _this$props4.material,\n          transitions = _this$props4.transitions;\n      var SubLayerClass = this.getSubLayerClass('grid-cell', GridCellLayer);\n      return new SubLayerClass({\n        fp64: fp64,\n        cellSize: cellSize,\n        coverage: coverage,\n        material: material,\n        elevationScale: elevationScale,\n        extruded: extruded,\n        getColor: this._onGetSublayerColor.bind(this),\n        getElevation: this._onGetSublayerElevation.bind(this),\n        transitions: transitions && {\n          getColor: transitions.getColorValue,\n          getElevation: transitions.getElevationValue\n        }\n      }, this.getSubLayerProps({\n        id: 'grid-cell',\n        updateTriggers: this.getUpdateTriggers()\n      }), {\n        data: this.state.layerData\n      });\n    }\n  }]);\n\n  return GridLayer;\n}(CompositeLayer);\n\nexport { GridLayer as default };\nGridLayer.layerName = 'GridLayer';\nGridLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}