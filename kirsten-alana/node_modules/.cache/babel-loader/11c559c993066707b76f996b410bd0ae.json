{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport { parseUniformName, getUniformSetter } from './uniforms';\nimport { VertexShader, FragmentShader } from './shader';\nimport ProgramConfiguration from './program-configuration';\nimport { checkUniformValues, areUniformsEqual, getUniformCopy } from './uniforms';\nimport { withParameters } from '../context';\nimport { assertWebGL2Context, isWebGL2, getKey } from '../webgl-utils';\nimport { getPrimitiveDrawMode } from '../webgl-utils/attribute-utils';\nimport { log, uid, assert } from '../utils';\nvar LOG_PROGRAM_PERF_PRIORITY = 4;\nvar GL_SEPARATE_ATTRIBS = 0x8c8d;\nvar V6_DEPRECATED_METHODS = ['setVertexArray', 'setAttributes', 'setBuffers', 'unsetBuffers', 'use', 'getUniformCount', 'getUniformInfo', 'getUniformLocation', 'getUniformValue', 'getVarying', 'getFragDataLocation', 'getAttachedShaders', 'getAttributeCount', 'getAttributeLocation', 'getAttributeInfo'];\n\nvar Program = function (_Resource) {\n  _inherits(Program, _Resource);\n\n  function Program(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Program);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Program).call(this, gl, props));\n\n    _this.stubRemovedMethods('Program', 'v6.0', V6_DEPRECATED_METHODS);\n\n    _this._isCached = false;\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n\n    _this._setId(props.id);\n\n    return _this;\n  }\n\n  _createClass(Program, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var vs = props.vs,\n          fs = props.fs,\n          varyings = props.varyings,\n          _props$bufferMode = props.bufferMode,\n          bufferMode = _props$bufferMode === void 0 ? GL_SEPARATE_ATTRIBS : _props$bufferMode;\n      this.vs = typeof vs === 'string' ? new VertexShader(this.gl, {\n        id: \"\".concat(props.id, \"-vs\"),\n        source: vs\n      }) : vs;\n      this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, {\n        id: \"\".concat(props.id, \"-fs\"),\n        source: fs\n      }) : fs;\n      assert(this.vs instanceof VertexShader);\n      assert(this.fs instanceof FragmentShader);\n      this.uniforms = {};\n\n      if (varyings) {\n        assertWebGL2Context(this.gl);\n        this.varyings = varyings;\n        this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      }\n\n      this._compileAndLink();\n\n      this._readUniformLocationsFromLinkedProgram();\n\n      this.configuration = new ProgramConfiguration(this);\n      return this.setProps(props);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (this._isCached) {\n        return this;\n      }\n\n      return _get(_getPrototypeOf(Program.prototype), \"delete\", this).call(this, options);\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('uniforms' in props) {\n        this.setUniforms(props.uniforms);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref) {\n      var _this2 = this;\n\n      var logPriority = _ref.logPriority,\n          _ref$drawMode = _ref.drawMode,\n          drawMode = _ref$drawMode === void 0 ? 4 : _ref$drawMode,\n          vertexCount = _ref.vertexCount,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          start = _ref.start,\n          end = _ref.end,\n          _ref$isIndexed = _ref.isIndexed,\n          isIndexed = _ref$isIndexed === void 0 ? false : _ref$isIndexed,\n          _ref$indexType = _ref.indexType,\n          indexType = _ref$indexType === void 0 ? 5123 : _ref$indexType,\n          _ref$isInstanced = _ref.isInstanced,\n          isInstanced = _ref$isInstanced === void 0 ? false : _ref$isInstanced,\n          _ref$instanceCount = _ref.instanceCount,\n          instanceCount = _ref$instanceCount === void 0 ? 0 : _ref$instanceCount,\n          _ref$vertexArray = _ref.vertexArray,\n          vertexArray = _ref$vertexArray === void 0 ? null : _ref$vertexArray,\n          transformFeedback = _ref.transformFeedback,\n          framebuffer = _ref.framebuffer,\n          _ref$parameters = _ref.parameters,\n          parameters = _ref$parameters === void 0 ? {} : _ref$parameters,\n          uniforms = _ref.uniforms,\n          samplers = _ref.samplers;\n\n      if (uniforms || samplers) {\n        log.deprecated('Program.draw({uniforms})', 'Program.setUniforms(uniforms)')();\n        this.setUniforms(uniforms || {});\n      }\n\n      if (logPriority !== undefined) {\n        var fb = framebuffer ? framebuffer.id : 'default';\n        var message = \"mode=\".concat(getKey(this.gl, drawMode), \" verts=\").concat(vertexCount, \" \") + \"instances=\".concat(instanceCount, \" indexType=\").concat(getKey(this.gl, indexType), \" \") + \"isInstanced=\".concat(isInstanced, \" isIndexed=\").concat(isIndexed, \" \") + \"Framebuffer=\".concat(fb);\n        log.log(logPriority, message)();\n      }\n\n      assert(vertexArray);\n      this.gl.useProgram(this.handle);\n\n      if (!this._areTexturesRenderable()) {\n        return false;\n      }\n\n      vertexArray.bindForDraw(vertexCount, instanceCount, function () {\n        if (framebuffer !== undefined) {\n          parameters = Object.assign({}, parameters, {\n            framebuffer: framebuffer\n          });\n        }\n\n        if (transformFeedback) {\n          var primitiveMode = getPrimitiveDrawMode(drawMode);\n          transformFeedback.begin(primitiveMode);\n        }\n\n        _this2._bindTextures();\n\n        withParameters(_this2.gl, parameters, function () {\n          if (isIndexed && isInstanced) {\n            _this2.gl.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(_this2.gl) && !isNaN(start) && !isNaN(end)) {\n            _this2.gl.drawRangeElements(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            _this2.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            _this2.gl.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            _this2.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        });\n\n        if (transformFeedback) {\n          transformFeedback.end();\n        }\n      });\n      return true;\n    }\n  }, {\n    key: \"setUniforms\",\n    value: function setUniforms() {\n      var uniforms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _onChangeCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n\n      var somethingChanged = false;\n      var changedUniforms = {};\n\n      for (var key in uniforms) {\n        if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n          somethingChanged = true;\n          changedUniforms[key] = uniforms[key];\n          this.uniforms[key] = getUniformCopy(uniforms[key]);\n        }\n      }\n\n      if (somethingChanged) {\n        _onChangeCallback();\n\n        checkUniformValues(changedUniforms, this.id, this._uniformSetters);\n\n        this._setUniforms(changedUniforms);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }, {\n    key: \"_areTexturesRenderable\",\n    value: function _areTexturesRenderable() {\n      var texturesRenderable = true;\n\n      for (var uniformName in this.uniforms) {\n        var uniformSetter = this._uniformSetters[uniformName];\n\n        if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n          var uniform = this.uniforms[uniformName];\n\n          if (uniform instanceof Framebuffer) {\n            var framebuffer = uniform;\n            uniform = framebuffer.texture;\n          }\n\n          if (uniform instanceof Texture) {\n            var texture = uniform;\n            texturesRenderable = texturesRenderable && texture.loaded;\n          }\n        }\n      }\n\n      return texturesRenderable;\n    }\n  }, {\n    key: \"_bindTextures\",\n    value: function _bindTextures() {\n      for (var uniformName in this.uniforms) {\n        var uniformSetter = this._uniformSetters[uniformName];\n\n        if (uniformSetter && uniformSetter.textureIndex !== undefined) {\n          var uniform = this.uniforms[uniformName];\n\n          if (uniform instanceof Framebuffer) {\n            uniform = uniform.texture;\n          }\n\n          if (uniform instanceof Texture) {\n            var texture = uniform;\n            texture.bind(uniformSetter.textureIndex);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_setUniforms\",\n    value: function _setUniforms(uniforms) {\n      this.gl.useProgram(this.handle);\n\n      for (var uniformName in uniforms) {\n        var uniform = uniforms[uniformName];\n        var uniformSetter = this._uniformSetters[uniformName];\n\n        if (uniformSetter) {\n          if (uniform instanceof Framebuffer) {\n            uniform = uniform.texture;\n          }\n\n          if (uniform instanceof Texture) {\n            if (uniformSetter.textureIndex === undefined) {\n              uniformSetter.textureIndex = this._textureIndexCounter++;\n            }\n\n            var texture = uniform;\n            var textureIndex = uniformSetter.textureIndex;\n            texture.bind(textureIndex);\n            uniformSetter(textureIndex);\n          } else {\n            uniformSetter(uniform);\n          }\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createProgram();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteProgram(this.handle);\n    }\n  }, {\n    key: \"_getOptionsFromHandle\",\n    value: function _getOptionsFromHandle(handle) {\n      var shaderHandles = this.gl.getAttachedShaders(handle);\n      var opts = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = shaderHandles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var shaderHandle = _step.value;\n          var type = this.gl.getShaderParameter(this.handle, 35663);\n\n          switch (type) {\n            case 35633:\n              opts.vs = new VertexShader({\n                handle: shaderHandle\n              });\n              break;\n\n            case 35632:\n              opts.fs = new FragmentShader({\n                handle: shaderHandle\n              });\n              break;\n\n            default:\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return opts;\n    }\n  }, {\n    key: \"_getParameter\",\n    value: function _getParameter(pname) {\n      return this.gl.getProgramParameter(this.handle, pname);\n    }\n  }, {\n    key: \"_setId\",\n    value: function _setId(id) {\n      if (!id) {\n        var programName = this._getName();\n\n        this.id = uid(programName);\n      }\n    }\n  }, {\n    key: \"_getName\",\n    value: function _getName() {\n      var programName = this.vs.getName() || this.fs.getName();\n      programName = programName.replace(/shader/i, '');\n      programName = programName ? \"\".concat(programName, \"-program\") : 'program';\n      return programName;\n    }\n  }, {\n    key: \"_compileAndLink\",\n    value: function _compileAndLink() {\n      var gl = this.gl;\n      gl.attachShader(this.handle, this.vs.handle);\n      gl.attachShader(this.handle, this.fs.handle);\n      log.time(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n      gl.linkProgram(this.handle);\n      log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, \"linkProgram for \".concat(this._getName()))();\n\n      if (gl.debug || log.priority > 0) {\n        gl.validateProgram(this.handle);\n        var linked = gl.getProgramParameter(this.handle, 35714);\n\n        if (!linked) {\n          throw new Error(\"Error linking: \".concat(gl.getProgramInfoLog(this.handle)));\n        }\n      }\n    }\n  }, {\n    key: \"_readUniformLocationsFromLinkedProgram\",\n    value: function _readUniformLocationsFromLinkedProgram() {\n      var gl = this.gl;\n      this._uniformSetters = {};\n      this._uniformCount = this._getParameter(35718);\n\n      for (var i = 0; i < this._uniformCount; i++) {\n        var info = this.gl.getActiveUniform(this.handle, i);\n\n        var _parseUniformName = parseUniformName(info.name),\n            name = _parseUniformName.name,\n            isArray = _parseUniformName.isArray;\n\n        var location = gl.getUniformLocation(this.handle, name);\n        this._uniformSetters[name] = getUniformSetter(gl, location, info, isArray);\n      }\n\n      this._textureIndexCounter = 0;\n    }\n  }, {\n    key: \"getActiveUniforms\",\n    value: function getActiveUniforms(uniformIndices, pname) {\n      return this.gl.getActiveUniforms(this.handle, uniformIndices, pname);\n    }\n  }, {\n    key: \"getUniformBlockIndex\",\n    value: function getUniformBlockIndex(blockName) {\n      return this.gl.getUniformBlockIndex(this.handle, blockName);\n    }\n  }, {\n    key: \"getActiveUniformBlockParameter\",\n    value: function getActiveUniformBlockParameter(blockIndex, pname) {\n      return this.gl.getActiveUniformBlockParameter(this.handle, blockIndex, pname);\n    }\n  }, {\n    key: \"uniformBlockBinding\",\n    value: function uniformBlockBinding(blockIndex, blockBinding) {\n      this.gl.uniformBlockBinding(this.handle, blockIndex, blockBinding);\n    }\n  }]);\n\n  return Program;\n}(Resource);\n\nexport { Program as default };","map":null,"metadata":{},"sourceType":"module"}