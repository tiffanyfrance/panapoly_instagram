{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport TransitionManager from './transition-manager';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\nvar NO_TRANSITION_PROPS = {\n  transitionDuration: 0\n};\nvar ZOOM_ACCEL = 0.01;\nvar EVENT_TYPES = {\n  WHEEL: ['wheel'],\n  PAN: ['panstart', 'panmove', 'panend'],\n  PINCH: ['pinchstart', 'pinchmove', 'pinchend'],\n  DOUBLE_TAP: ['doubletap'],\n  KEYBOARD: ['keydown']\n};\n\nvar Controller = function () {\n  function Controller(ControllerState) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Controller);\n\n    assert(ControllerState);\n    this.ControllerState = ControllerState;\n    this.controllerState = null;\n    this.controllerStateProps = null;\n    this.eventManager = null;\n    this.transitionManager = new TransitionManager(ControllerState, options);\n    this._events = null;\n    this._state = {\n      isDragging: false\n    };\n    this.events = [];\n    this.onViewStateChange = null;\n    this.onStateChange = null;\n    this.invertPan = false;\n    this.handleEvent = this.handleEvent.bind(this);\n    this.setProps(options);\n  }\n\n  _createClass(Controller, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var eventName in this._events) {\n        if (this._events[eventName]) {\n          this.eventManager.off(eventName, this.handleEvent);\n        }\n      }\n\n      this.transitionManager.finalize();\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var ControllerState = this.ControllerState;\n      this.controllerState = new ControllerState(Object.assign({}, this.controllerStateProps, this._state));\n\n      switch (event.type) {\n        case 'panstart':\n          return this._onPanStart(event);\n\n        case 'panmove':\n          return this._onPan(event);\n\n        case 'panend':\n          return this._onPanEnd(event);\n\n        case 'pinchstart':\n          return this._onPinchStart(event);\n\n        case 'pinchmove':\n          return this._onPinch(event);\n\n        case 'pinchend':\n          return this._onPinchEnd(event);\n\n        case 'doubletap':\n          return this._onDoubleTap(event);\n\n        case 'wheel':\n          return this._onWheel(event);\n\n        case 'keydown':\n          return this._onKeyDown(event);\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(event) {\n      var _this$controllerState = this.controllerStateProps,\n          x = _this$controllerState.x,\n          y = _this$controllerState.y;\n      var offsetCenter = event.offsetCenter;\n      return [offsetCenter.x - x, offsetCenter.y - y];\n    }\n  }, {\n    key: \"isPointInBounds\",\n    value: function isPointInBounds(pos) {\n      var _this$controllerState2 = this.controllerStateProps,\n          width = _this$controllerState2.width,\n          height = _this$controllerState2.height;\n      return pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;\n    }\n  }, {\n    key: \"isFunctionKeyPressed\",\n    value: function isFunctionKeyPressed(event) {\n      var srcEvent = event.srcEvent;\n      return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return this._state.isDragging;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('onViewportChange' in props) {\n        log.removed('onViewportChange')();\n      }\n\n      if ('onViewStateChange' in props) {\n        this.onViewStateChange = props.onViewStateChange;\n      }\n\n      if ('onStateChange' in props) {\n        this.onStateChange = props.onStateChange;\n      }\n\n      this.controllerStateProps = props;\n\n      if ('eventManager' in props && this.eventManager !== props.eventManager) {\n        this.eventManager = props.eventManager;\n        this._events = {};\n        this.toggleEvents(this.events, true);\n      }\n\n      this.transitionManager.processViewStateChange(this.controllerStateProps);\n      var _props$scrollZoom = props.scrollZoom,\n          scrollZoom = _props$scrollZoom === void 0 ? true : _props$scrollZoom,\n          _props$dragPan = props.dragPan,\n          dragPan = _props$dragPan === void 0 ? true : _props$dragPan,\n          _props$dragRotate = props.dragRotate,\n          dragRotate = _props$dragRotate === void 0 ? true : _props$dragRotate,\n          _props$doubleClickZoo = props.doubleClickZoom,\n          doubleClickZoom = _props$doubleClickZoo === void 0 ? true : _props$doubleClickZoo,\n          _props$touchZoom = props.touchZoom,\n          touchZoom = _props$touchZoom === void 0 ? true : _props$touchZoom,\n          _props$touchRotate = props.touchRotate,\n          touchRotate = _props$touchRotate === void 0 ? false : _props$touchRotate,\n          _props$keyboard = props.keyboard,\n          keyboard = _props$keyboard === void 0 ? true : _props$keyboard;\n      var isInteractive = Boolean(this.onViewStateChange);\n      this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);\n      this.toggleEvents(EVENT_TYPES.PAN, isInteractive && (dragPan || dragRotate));\n      this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));\n      this.toggleEvents(EVENT_TYPES.DOUBLE_TAP, isInteractive && doubleClickZoom);\n      this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);\n      this.scrollZoom = scrollZoom;\n      this.dragPan = dragPan;\n      this.dragRotate = dragRotate;\n      this.doubleClickZoom = doubleClickZoom;\n      this.touchZoom = touchZoom;\n      this.touchRotate = touchRotate;\n      this.keyboard = keyboard;\n    }\n  }, {\n    key: \"updateTransition\",\n    value: function updateTransition(timestamp) {\n      this.transitionManager.updateTransition(timestamp);\n    }\n  }, {\n    key: \"toggleEvents\",\n    value: function toggleEvents(eventNames, enabled) {\n      var _this = this;\n\n      if (this.eventManager) {\n        eventNames.forEach(function (eventName) {\n          if (_this._events[eventName] !== enabled) {\n            _this._events[eventName] = enabled;\n\n            if (enabled) {\n              _this.eventManager.on(eventName, _this.handleEvent);\n            } else {\n              _this.eventManager.off(eventName, _this.handleEvent);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(props) {\n      return this.setProps(props);\n    }\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(newControllerState) {\n      var extraProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var interactionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var viewState = Object.assign({}, newControllerState.getViewportProps(), extraProps);\n      var changed = this.controllerState !== newControllerState;\n\n      if (changed) {\n        var oldViewState = this.controllerState ? this.controllerState.getViewportProps() : null;\n\n        if (this.onViewStateChange) {\n          this.onViewStateChange({\n            viewState: viewState,\n            interactionState: interactionState,\n            oldViewState: oldViewState\n          });\n        }\n      }\n\n      Object.assign(this._state, Object.assign({}, newControllerState.getInteractiveState(), interactionState));\n\n      if (this.onStateChange) {\n        this.onStateChange(this._state);\n      }\n    }\n  }, {\n    key: \"_onPanStart\",\n    value: function _onPanStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.panStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n    }\n  }, {\n    key: \"_onPan\",\n    value: function _onPan(event) {\n      var alternateMode = this.isFunctionKeyPressed(event) || event.rightButton;\n      alternateMode = this.invertPan ? !alternateMode : alternateMode;\n      return alternateMode ? this._onPanMove(event) : this._onPanRotate(event);\n    }\n  }, {\n    key: \"_onPanEnd\",\n    value: function _onPanEnd(event) {\n      var newControllerState = this.controllerState.panEnd().rotateEnd();\n      return this.updateViewport(newControllerState, null, {\n        isDragging: false\n      });\n    }\n  }, {\n    key: \"_onPanMove\",\n    value: function _onPanMove(event) {\n      if (!this.dragPan) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n\n      if (!this.isDragging()) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.pan({\n        pos: pos\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n    }\n  }, {\n    key: \"_onPanRotate\",\n    value: function _onPanRotate(event) {\n      if (!this.dragRotate) {\n        return false;\n      }\n\n      var deltaX = event.deltaX,\n          deltaY = event.deltaY;\n\n      var _this$controllerState3 = this.controllerState.getViewportProps(),\n          width = _this$controllerState3.width,\n          height = _this$controllerState3.height;\n\n      var deltaScaleX = deltaX / width;\n      var deltaScaleY = deltaY / height;\n      var newControllerState = this.controllerState.rotate({\n        deltaScaleX: deltaScaleX,\n        deltaScaleY: deltaScaleY\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n    }\n  }, {\n    key: \"_onWheel\",\n    value: function _onWheel(event) {\n      if (!this.scrollZoom) {\n        return false;\n      }\n\n      event.preventDefault();\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos)) {\n        return false;\n      }\n\n      var delta = event.delta;\n      var scale = 2 / (1 + Math.exp(-Math.abs(delta * ZOOM_ACCEL)));\n\n      if (delta < 0 && scale !== 0) {\n        scale = 1 / scale;\n      }\n\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: scale\n      });\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS);\n    }\n  }, {\n    key: \"_onPinchStart\",\n    value: function _onPinchStart(event) {\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos)) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState.zoomStart({\n        pos: pos\n      }).rotateStart({\n        pos: pos\n      });\n      this._state.startPinchRotation = event.rotation;\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n    }\n  }, {\n    key: \"_onPinch\",\n    value: function _onPinch(event) {\n      if (!this.touchZoom && !this.touchRotate) {\n        return false;\n      }\n\n      var newControllerState = this.controllerState;\n\n      if (this.touchZoom) {\n        var scale = event.scale;\n        var pos = this.getCenter(event);\n        newControllerState = newControllerState.zoom({\n          pos: pos,\n          scale: scale\n        });\n      }\n\n      if (this.touchRotate) {\n        var rotation = event.rotation;\n        var startPinchRotation = this._state.startPinchRotation;\n        newControllerState = newControllerState.rotate({\n          deltaScaleX: -(rotation - startPinchRotation) / 180\n        });\n      }\n\n      return this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {\n        isDragging: true\n      });\n    }\n  }, {\n    key: \"_onPinchEnd\",\n    value: function _onPinchEnd(event) {\n      var newControllerState = this.controllerState.zoomEnd().rotateEnd();\n      this._state.startPinchRotation = 0;\n      return this.updateViewport(newControllerState, null, {\n        isDragging: false\n      });\n    }\n  }, {\n    key: \"_onDoubleTap\",\n    value: function _onDoubleTap(event) {\n      if (!this.doubleClickZoom) {\n        return false;\n      }\n\n      var pos = this.getCenter(event);\n\n      if (!this.isPointInBounds(pos)) {\n        return false;\n      }\n\n      var isZoomOut = this.isFunctionKeyPressed(event);\n      var newControllerState = this.controllerState.zoom({\n        pos: pos,\n        scale: isZoomOut ? 0.5 : 2\n      });\n      return this.updateViewport(newControllerState, this._getTransitionProps());\n    }\n  }, {\n    key: \"_onKeyDown\",\n    value: function _onKeyDown(event) {\n      if (!this.keyboard) {\n        return false;\n      }\n\n      var funcKey = this.isFunctionKeyPressed(event);\n      var controllerState = this.controllerState;\n      var newControllerState;\n\n      switch (event.srcEvent.keyCode) {\n        case 189:\n          newControllerState = funcKey ? controllerState.zoomOut().zoomOut() : controllerState.zoomOut();\n          break;\n\n        case 187:\n          newControllerState = funcKey ? controllerState.zoomIn().zoomIn() : controllerState.zoomIn();\n          break;\n\n        case 37:\n          newControllerState = funcKey ? controllerState.rotateLeft() : controllerState.moveLeft();\n          break;\n\n        case 39:\n          newControllerState = funcKey ? controllerState.rotateRight() : controllerState.moveRight();\n          break;\n\n        case 38:\n          newControllerState = funcKey ? controllerState.rotateUp() : controllerState.moveUp();\n          break;\n\n        case 40:\n          newControllerState = funcKey ? controllerState.rotateDown() : controllerState.moveDown();\n          break;\n\n        default:\n          return false;\n      }\n\n      return this.updateViewport(newControllerState, this._getTransitionProps());\n    }\n  }, {\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return NO_TRANSITION_PROPS;\n    }\n  }]);\n\n  return Controller;\n}();\n\nexport { Controller as default };","map":null,"metadata":{},"sourceType":"module"}