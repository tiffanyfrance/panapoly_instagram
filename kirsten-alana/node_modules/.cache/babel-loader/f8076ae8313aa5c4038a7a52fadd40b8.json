{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL, { ScreenGridLayer } from 'deck.gl';\nimport { isWebGL2 } from '@luma.gl/core'; // Set your mapbox token here\n\nconst MAPBOX_TOKEN = process.env.MapboxAccessToken; // eslint-disable-line\n// Source data CSV\n\nconst DATA_URL = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nexport const INITIAL_VIEW_STATE = {\n  longitude: -73.75,\n  latitude: 40.73,\n  zoom: 9.6,\n  maxZoom: 16,\n  pitch: 0,\n  bearing: 0\n};\nconst colorRange = [[255, 255, 178, 25], [254, 217, 118, 85], [254, 178, 76, 127], [253, 141, 60, 170], [240, 59, 32, 212], [189, 0, 38, 255]];\nexport class App extends Component {\n  _renderLayers() {\n    const _this$props = this.props,\n          _this$props$data = _this$props.data,\n          data = _this$props$data === void 0 ? DATA_URL : _this$props$data,\n          _this$props$cellSize = _this$props.cellSize,\n          cellSize = _this$props$cellSize === void 0 ? 20 : _this$props$cellSize,\n          _this$props$gpuAggreg = _this$props.gpuAggregation,\n          gpuAggregation = _this$props$gpuAggreg === void 0 ? true : _this$props$gpuAggreg,\n          _this$props$aggregati = _this$props.aggregation,\n          aggregation = _this$props$aggregati === void 0 ? 'Sum' : _this$props$aggregati;\n    return [new ScreenGridLayer({\n      id: 'grid',\n      data,\n      getPosition: d => [d[0], d[1]],\n      getWeight: d => d[2],\n      cellSizePixels: cellSize,\n      colorRange,\n      gpuAggregation,\n      aggregation\n    })];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          viewState = _this$props2.viewState,\n          _this$props2$controll = _this$props2.controller,\n          controller = _this$props2$controll === void 0 ? true : _this$props2$controll,\n          _this$props2$baseMap = _this$props2.baseMap,\n          baseMap = _this$props2$baseMap === void 0 ? true : _this$props2$baseMap;\n    return React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      onWebGLInitialized: this._onInitialized.bind(this),\n      viewState: viewState,\n      controller: controller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, baseMap && React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  }\n\n}\nexport function renderToDOM(container) {\n  render(React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), container);\n}","map":{"version":3,"sources":["/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js"],"names":["React","Component","render","StaticMap","DeckGL","ScreenGridLayer","isWebGL2","MAPBOX_TOKEN","process","env","MapboxAccessToken","DATA_URL","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","colorRange","App","_renderLayers","props","data","cellSize","gpuAggregation","aggregation","id","getPosition","d","getWeight","cellSizePixels","_onInitialized","gl","console","warn","disableGPUAggregation","viewState","controller","baseMap","bind","renderToDOM","container"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL, {ScreenGridLayer} from 'deck.gl';\nimport {isWebGL2} from '@luma.gl/core';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = process.env.MapboxAccessToken; // eslint-disable-line\n\n// Source data CSV\nconst DATA_URL =\n  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nexport const INITIAL_VIEW_STATE = {\n  longitude: -73.75,\n  latitude: 40.73,\n  zoom: 9.6,\n  maxZoom: 16,\n  pitch: 0,\n  bearing: 0\n};\n\nconst colorRange = [\n  [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n];\n\nexport class App extends Component {\n  _renderLayers() {\n    const {data = DATA_URL, cellSize = 20, gpuAggregation = true, aggregation = 'Sum'} = this.props;\n\n    return [\n      new ScreenGridLayer({\n        id: 'grid',\n        data,\n        getPosition: d => [d[0], d[1]],\n        getWeight: d => d[2],\n        cellSizePixels: cellSize,\n        colorRange,\n        gpuAggregation,\n        aggregation\n      })\n    ];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const {viewState, controller = true, baseMap = true} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        initialViewState={INITIAL_VIEW_STATE}\n        onWebGLInitialized={this._onInitialized.bind(this)}\n        viewState={viewState}\n        controller={controller}\n      >\n        {baseMap && (\n          <StaticMap\n            reuseMaps\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n\nexport function renderToDOM(container) {\n  render(<App />, container);\n}\n"]},"metadata":{},"sourceType":"module"}