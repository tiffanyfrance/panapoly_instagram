{"ast":null,"code":"import { toArrayBuffer } from '../javascript-utils/binary-utils';\nvar workerCache = new Map();\n\nfunction getWorker(workerSource) {\n  var workerURL = workerCache.get(workerSource);\n\n  if (!workerURL) {\n    var blob = new Blob([workerSource], {\n      type: 'application/javascript'\n    });\n    workerURL = URL.createObjectURL(blob);\n    workerCache.set(workerSource, workerURL);\n  }\n\n  return new Worker(workerURL);\n}\n\nexport default function parseWithWorker(workerSource, data, options) {\n  var worker = getWorker(workerSource);\n  options = removeNontransferableOptions(options);\n\n  var parse = function parse(rawData, opts) {\n    return new Promise(function (resolve, reject) {\n      worker.onmessage = function (evt) {\n        switch (evt.data.type) {\n          case 'done':\n            resolve(evt.data.result);\n            worker.terminate();\n            break;\n\n          case 'error':\n            reject(new Error(evt.data.message));\n            break;\n\n          default:\n        }\n      };\n\n      var arraybuffer = toArrayBuffer(rawData);\n      worker.postMessage({\n        arraybuffer: arraybuffer,\n        opts: opts\n      }, [arraybuffer]);\n    });\n  };\n\n  return data ? parse(data, options) : parse;\n}\n\nfunction removeNontransferableOptions(options) {\n  options = Object.assign({}, options);\n\n  if (options.log !== null) {\n    delete options.log;\n  }\n\n  return options;\n}","map":null,"metadata":{},"sourceType":"module"}