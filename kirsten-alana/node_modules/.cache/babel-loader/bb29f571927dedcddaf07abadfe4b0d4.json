{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Buffer, Transform } from '@luma.gl/core';\nimport { getShaders, getBuffers, padBuffer } from './attribute-transition-utils';\nimport Attribute from './attribute';\nimport BaseAttribute from './base-attribute';\nimport Transition from '../transitions/transition';\nimport log from '../utils/log';\nimport assert from '../utils/assert';\n\nvar noop = function noop() {};\n\nvar DEFAULT_TRANSITION_SETTINGS = {\n  duration: 0,\n  easing: function easing(t) {\n    return t;\n  },\n  onStart: noop,\n  onEnd: noop,\n  onInterrupt: noop\n};\n\nvar AttributeTransitionManager = function () {\n  function AttributeTransitionManager(gl, _ref) {\n    var id = _ref.id;\n\n    _classCallCheck(this, AttributeTransitionManager);\n\n    this.id = id;\n    this.gl = gl;\n    this.attributeTransitions = {};\n    this.needsRedraw = false;\n    this.transform = null;\n    this.numInstances = 0;\n\n    if (Transform.isSupported(gl)) {\n      this.isSupported = true;\n    } else if (gl) {\n      log.warn('WebGL2 not supported by this browser. Transition animation is disabled.')();\n    }\n  }\n\n  _createClass(AttributeTransitionManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      if (this.transform) {\n        this.transform.delete();\n      }\n\n      for (var attributeName in this.attributeTransitions) {\n        this._removeTransition(attributeName);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref2) {\n      var attributes = _ref2.attributes,\n          _ref2$transitions = _ref2.transitions,\n          transitions = _ref2$transitions === void 0 ? {} : _ref2$transitions,\n          numInstances = _ref2.numInstances;\n      this.opts = transitions;\n      this.numInstances = numInstances || 1;\n\n      if (!this.isSupported) {\n        return;\n      }\n\n      var attributeTransitions = this.attributeTransitions;\n      var changedTransitions = {};\n\n      for (var attributeName in attributes) {\n        var hasChanged = this._updateAttribute(attributeName, attributes[attributeName]);\n\n        if (hasChanged) {\n          changedTransitions[attributeName] = attributeTransitions[attributeName];\n        }\n      }\n\n      for (var _attributeName in attributeTransitions) {\n        var attribute = attributes[_attributeName];\n\n        if (!attribute || !attribute.supportsTransition()) {\n          this._removeTransition(_attributeName);\n        }\n      }\n\n      if (!this.transform) {\n        this._createModel();\n      } else if (this.transform) {\n        var _getBuffers = getBuffers(changedTransitions),\n            sourceBuffers = _getBuffers.sourceBuffers,\n            feedbackBuffers = _getBuffers.feedbackBuffers;\n\n        this.transform.update({\n          elementCount: this.numInstances,\n          sourceBuffers: sourceBuffers,\n          feedbackBuffers: feedbackBuffers\n        });\n      }\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(attributeName) {\n      return attributeName in this.attributeTransitions;\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      var animatedAttributes = {};\n\n      for (var attributeName in this.attributeTransitions) {\n        var transition = this.attributeTransitions[attributeName];\n\n        if (transition.buffer) {\n          animatedAttributes[attributeName] = transition.attributeInTransition;\n        }\n      }\n\n      return animatedAttributes;\n    }\n  }, {\n    key: \"setCurrentTime\",\n    value: function setCurrentTime(currentTime) {\n      if (!this.transform || this.numInstances === 0) {\n        return false;\n      }\n\n      var uniforms = {};\n      var needsRedraw = this.needsRedraw;\n      this.needsRedraw = false;\n\n      for (var attributeName in this.attributeTransitions) {\n        var transition = this.attributeTransitions[attributeName];\n        var updated = transition.update(currentTime);\n\n        if (updated) {\n          uniforms[\"\".concat(attributeName, \"Time\")] = transition.time;\n          needsRedraw = true;\n        }\n      }\n\n      if (needsRedraw) {\n        this.transform.run({\n          uniforms: uniforms\n        });\n      }\n\n      return needsRedraw;\n    }\n  }, {\n    key: \"_createTransition\",\n    value: function _createTransition(attributeName, attribute) {\n      var transition = this.attributeTransitions[attributeName];\n\n      if (!transition) {\n        transition = new Transition({\n          name: attributeName,\n          attribute: attribute,\n          attributeInTransition: new Attribute(this.gl, attribute),\n          bufferLayout: attribute.bufferLayout\n        });\n        this.attributeTransitions[attributeName] = transition;\n\n        this._invalidateModel();\n\n        return transition;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_removeTransition\",\n    value: function _removeTransition(attributeName) {\n      var transition = this.attributeTransitions[attributeName];\n\n      if (transition) {\n        if (transition.buffer) {\n          transition.buffer.delete();\n        }\n\n        if (transition._swapBuffer) {\n          transition._swapBuffer.delete();\n        }\n\n        delete this.attributeTransitions[attributeName];\n\n        this._invalidateModel();\n      }\n    }\n  }, {\n    key: \"_updateAttribute\",\n    value: function _updateAttribute(attributeName, attribute) {\n      var settings = attribute.getTransitionSetting(this.opts);\n\n      if (settings) {\n        var hasChanged;\n        var transition = this.attributeTransitions[attributeName];\n\n        if (transition) {\n          hasChanged = attribute.needsRedraw();\n        } else {\n          transition = this._createTransition(attributeName, attribute);\n          hasChanged = true;\n        }\n\n        if (hasChanged) {\n          this._triggerTransition(transition, settings);\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_invalidateModel\",\n    value: function _invalidateModel() {\n      if (this.transform) {\n        this.transform.delete();\n        this.transform = null;\n      }\n    }\n  }, {\n    key: \"_createModel\",\n    value: function _createModel() {\n      if (Object.keys(this.attributeTransitions).length === 0) {\n        return;\n      }\n\n      this.transform = new Transform(this.gl, Object.assign({\n        elementCount: this.numInstances\n      }, getBuffers(this.attributeTransitions), getShaders(this.attributeTransitions)));\n    }\n  }, {\n    key: \"_getNextTransitionStates\",\n    value: function _getNextTransitionStates(transition, settings) {\n      var attribute = transition.attribute;\n      var size = attribute.size;\n      var toState;\n\n      if (attribute.constant) {\n        toState = new BaseAttribute(this.gl, {\n          constant: true,\n          value: attribute.value,\n          size: size\n        });\n      } else {\n        toState = new BaseAttribute(this.gl, {\n          constant: false,\n          buffer: attribute.getBuffer(),\n          divisor: 0,\n          size: size,\n          value: attribute.externalBuffer ? null : attribute.value\n        });\n      }\n\n      var fromState = transition.buffer || toState;\n      var toLength = this.numInstances * size;\n      var fromLength = fromState instanceof Buffer && fromState.getElementCount() || toLength;\n      var buffer = transition._swapBuffer;\n      transition._swapBuffer = transition.buffer;\n\n      if (!buffer) {\n        buffer = new Buffer(this.gl, {\n          data: new Float32Array(toLength),\n          usage: 35050\n        });\n      } else if (buffer.getElementCount() < toLength) {\n        buffer.setData({\n          data: new Float32Array(toLength)\n        });\n      }\n\n      transition.attributeInTransition.update({\n        buffer: buffer\n      });\n      padBuffer({\n        fromState: fromState,\n        toState: toState,\n        fromLength: fromLength,\n        toLength: toLength,\n        fromBufferLayout: transition.bufferLayout,\n        toBufferLayout: attribute.bufferLayout,\n        getData: settings.enter\n      });\n      transition.bufferLayout = attribute.bufferLayout;\n      return {\n        fromState: fromState,\n        toState: toState,\n        buffer: buffer\n      };\n    }\n  }, {\n    key: \"_triggerTransition\",\n    value: function _triggerTransition(transition, settings) {\n      assert(settings && settings.duration > 0);\n      this.needsRedraw = true;\n      var transitionSettings = Object.assign({}, DEFAULT_TRANSITION_SETTINGS, settings);\n      transition.start(Object.assign({}, this._getNextTransitionStates(transition, settings), transitionSettings));\n    }\n  }]);\n\n  return AttributeTransitionManager;\n}();\n\nexport { AttributeTransitionManager as default };","map":null,"metadata":{},"sourceType":"module"}