{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer } from '@deck.gl/core';\nimport { GeoJsonLayer } from '@deck.gl/layers';\nimport TileCache from './utils/tile-cache';\nvar defaultProps = {\n  renderSubLayers: {\n    type: 'function',\n    value: function value(props) {\n      return new GeoJsonLayer(props);\n    }\n  },\n  getTileData: {\n    type: 'function',\n    value: function value(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          z = _ref.z;\n      return Promise.resolve(null);\n    }\n  },\n  onViewportLoaded: {\n    type: 'function',\n    value: function value() {}\n  },\n  onTileError: {\n    type: 'function',\n    value: function value(err) {\n      return console.error(err);\n    }\n  },\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null\n};\n\nvar TileLayer = function (_CompositeLayer) {\n  _inherits(TileLayer, _CompositeLayer);\n\n  function TileLayer() {\n    _classCallCheck(this, TileLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TileLayer).apply(this, arguments));\n  }\n\n  _createClass(TileLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      var _this$props = this.props,\n          maxZoom = _this$props.maxZoom,\n          minZoom = _this$props.minZoom,\n          getTileData = _this$props.getTileData,\n          onTileError = _this$props.onTileError;\n      this.state = {\n        tiles: [],\n        tileCache: new TileCache({\n          getTileData: getTileData,\n          maxZoom: maxZoom,\n          minZoom: minZoom,\n          onTileError: onTileError\n        }),\n        isLoaded: false\n      };\n    }\n  }, {\n    key: \"shouldUpdateState\",\n    value: function shouldUpdateState(_ref2) {\n      var changeFlags = _ref2.changeFlags;\n      return changeFlags.somethingChanged;\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref3) {\n      var _this = this;\n\n      var props = _ref3.props,\n          oldProps = _ref3.oldProps,\n          context = _ref3.context,\n          changeFlags = _ref3.changeFlags;\n      var onViewportLoaded = props.onViewportLoaded,\n          onTileError = props.onTileError;\n\n      if (changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData)) {\n        var getTileData = props.getTileData,\n            maxZoom = props.maxZoom,\n            minZoom = props.minZoom,\n            maxCacheSize = props.maxCacheSize;\n        this.state.tileCache.finalize();\n        this.setState({\n          tileCache: new TileCache({\n            getTileData: getTileData,\n            maxSize: maxCacheSize,\n            maxZoom: maxZoom,\n            minZoom: minZoom,\n            onTileError: onTileError\n          })\n        });\n      }\n\n      if (changeFlags.viewportChanged) {\n        var viewport = context.viewport;\n        var z = this.getLayerZoomLevel();\n\n        if (viewport.id !== 'DEFAULT-INITIAL-VIEWPORT') {\n          this.state.tileCache.update(viewport, function (tiles) {\n            var currTiles = tiles.filter(function (tile) {\n              return tile.z === z;\n            });\n            var allCurrTilesLoaded = currTiles.every(function (tile) {\n              return tile.isLoaded;\n            });\n\n            _this.setState({\n              tiles: tiles,\n              isLoaded: allCurrTilesLoaded\n            });\n\n            if (!allCurrTilesLoaded) {\n              Promise.all(currTiles.map(function (tile) {\n                return tile.data;\n              })).then(function () {\n                _this.setState({\n                  isLoaded: true\n                });\n\n                onViewportLoaded(currTiles.filter(function (tile) {\n                  return tile._data;\n                }).map(function (tile) {\n                  return tile._data;\n                }));\n              });\n            } else {\n              onViewportLoaded(currTiles.filter(function (tile) {\n                return tile._data;\n              }).map(function (tile) {\n                return tile._data;\n              }));\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref4) {\n      var info = _ref4.info,\n          sourceLayer = _ref4.sourceLayer;\n      info.sourceLayer = sourceLayer;\n      info.tile = sourceLayer.props.tile;\n      return info;\n    }\n  }, {\n    key: \"getLayerZoomLevel\",\n    value: function getLayerZoomLevel() {\n      var z = Math.floor(this.context.viewport.zoom);\n      var _this$props2 = this.props,\n          maxZoom = _this$props2.maxZoom,\n          minZoom = _this$props2.minZoom;\n\n      if (maxZoom && parseInt(maxZoom, 10) === maxZoom && z > maxZoom) {\n        return maxZoom;\n      } else if (minZoom && parseInt(minZoom, 10) === minZoom && z < minZoom) {\n        return minZoom;\n      }\n\n      return z;\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          renderSubLayers = _this$props3.renderSubLayers,\n          visible = _this$props3.visible;\n      var z = this.getLayerZoomLevel();\n      return this.state.tiles.map(function (tile) {\n        return renderSubLayers(Object.assign({}, _this2.props, {\n          id: \"\".concat(_this2.id, \"-\").concat(tile.x, \"-\").concat(tile.y, \"-\").concat(tile.z),\n          data: tile.data,\n          visible: visible && (!_this2.state.isLoaded || tile.z === z),\n          tile: tile\n        }));\n      });\n    }\n  }]);\n\n  return TileLayer;\n}(CompositeLayer);\n\nexport { TileLayer as default };\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}