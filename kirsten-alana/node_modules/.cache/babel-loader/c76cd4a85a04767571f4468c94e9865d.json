{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport Tile from './tile';\nimport { getTileIndices } from './viewport-util';\n\nvar TileCache = function () {\n  function TileCache(_ref) {\n    var getTileData = _ref.getTileData,\n        maxSize = _ref.maxSize,\n        maxZoom = _ref.maxZoom,\n        minZoom = _ref.minZoom,\n        onTileError = _ref.onTileError;\n\n    _classCallCheck(this, TileCache);\n\n    this._getTileData = getTileData;\n    this._maxSize = maxSize;\n    this.onTileError = onTileError;\n    this._cache = new Map();\n\n    if (maxZoom && parseInt(maxZoom, 10) === maxZoom) {\n      this._maxZoom = maxZoom;\n    }\n\n    if (minZoom && parseInt(minZoom, 10) === minZoom) {\n      this._minZoom = minZoom;\n    }\n  }\n\n  _createClass(TileCache, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this._cache.clear();\n    }\n  }, {\n    key: \"update\",\n    value: function update(viewport, onUpdate) {\n      var _cache = this._cache,\n          _getTileData = this._getTileData,\n          _maxSize = this._maxSize,\n          _maxZoom = this._maxZoom,\n          _minZoom = this._minZoom;\n\n      this._markOldTiles();\n\n      var tileIndices = getTileIndices(viewport, _maxZoom, _minZoom);\n\n      if (!tileIndices || tileIndices.length === 0) {\n        onUpdate(tileIndices);\n        return;\n      }\n\n      var viewportTiles = new Set();\n\n      _cache.forEach(function (cachedTile) {\n        if (tileIndices.some(function (tile) {\n          return cachedTile.isOverlapped(tile);\n        })) {\n          cachedTile.isVisible = true;\n          viewportTiles.add(cachedTile);\n        }\n      });\n\n      for (var i = 0; i < tileIndices.length; i++) {\n        var tileIndex = tileIndices[i];\n        var x = tileIndex.x,\n            y = tileIndex.y,\n            z = tileIndex.z;\n\n        var tile = this._getTile(x, y, z);\n\n        if (!tile) {\n          tile = new Tile({\n            getTileData: _getTileData,\n            x: x,\n            y: y,\n            z: z,\n            onTileError: this.onTileError\n          });\n        }\n\n        var tileId = this._getTileId(x, y, z);\n\n        _cache.set(tileId, tile);\n\n        viewportTiles.add(tile);\n      }\n\n      var commonZoomRange = 5;\n\n      this._resizeCache(_maxSize || commonZoomRange * tileIndices.length);\n\n      var viewportTilesArray = Array.from(viewportTiles).sort(function (t1, t2) {\n        return t1.z - t2.z;\n      });\n      onUpdate(viewportTilesArray);\n    }\n  }, {\n    key: \"_resizeCache\",\n    value: function _resizeCache(maxSize) {\n      var _cache = this._cache;\n\n      if (_cache.size > maxSize) {\n        var iterator = _cache[Symbol.iterator]();\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = iterator[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var cachedTile = _step.value;\n\n            if (_cache.size <= maxSize) {\n              break;\n            }\n\n            var tileId = cachedTile[0];\n            var tile = cachedTile[1];\n\n            if (!tile.isVisible) {\n              _cache.delete(tileId);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_markOldTiles\",\n    value: function _markOldTiles() {\n      this._cache.forEach(function (cachedTile) {\n        cachedTile.isVisible = false;\n      });\n    }\n  }, {\n    key: \"_getTile\",\n    value: function _getTile(x, y, z) {\n      var tileId = this._getTileId(x, y, z);\n\n      return this._cache.get(tileId);\n    }\n  }, {\n    key: \"_getTileId\",\n    value: function _getTileId(x, y, z) {\n      return \"\".concat(z, \"-\").concat(x, \"-\").concat(y);\n    }\n  }]);\n\n  return TileCache;\n}();\n\nexport { TileCache as default };","map":null,"metadata":{},"sourceType":"module"}