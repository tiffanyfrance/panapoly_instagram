{"ast":null,"code":"export default function assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"deck.gl: \".concat(message));\n  }\n}\nexport function getGeojsonFeatures(geojson) {\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      return [geojson];\n\n    case 'FeatureCollection':\n      assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n\n    default:\n      return [{\n        geometry: geojson\n      }];\n  }\n}\nexport function separateGeojsonFeatures(features) {\n  var separated = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n\n  for (var featureIndex = 0; featureIndex < features.length; featureIndex++) {\n    var feature = features[featureIndex];\n    assert(feature && feature.geometry, 'GeoJSON does not have geometry');\n    var geometry = feature.geometry;\n    var sourceFeature = {\n      feature: feature,\n      index: featureIndex\n    };\n\n    if (geometry.type === 'GeometryCollection') {\n      assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      var geometries = geometry.geometries;\n\n      for (var i = 0; i < geometries.length; i++) {\n        var subGeometry = geometries[i];\n        separateGeometry(subGeometry, separated, sourceFeature);\n      }\n    } else {\n      separateGeometry(geometry, separated, sourceFeature);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(geometry, separated, sourceFeature) {\n  var type = geometry.type,\n      coordinates = geometry.coordinates;\n  var pointFeatures = separated.pointFeatures,\n      lineFeatures = separated.lineFeatures,\n      polygonFeatures = separated.polygonFeatures,\n      polygonOutlineFeatures = separated.polygonOutlineFeatures;\n  checkCoordinates(type, coordinates);\n\n  switch (type) {\n    case 'Point':\n      pointFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiPoint':\n      coordinates.forEach(function (point) {\n        pointFeatures.push({\n          geometry: {\n            type: 'Point',\n            coordinates: point\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'LineString':\n      lineFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      break;\n\n    case 'MultiLineString':\n      coordinates.forEach(function (path) {\n        lineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'Polygon':\n      polygonFeatures.push({\n        geometry: geometry,\n        sourceFeature: sourceFeature\n      });\n      coordinates.forEach(function (path) {\n        polygonOutlineFeatures.push({\n          geometry: {\n            type: 'LineString',\n            coordinates: path\n          },\n          sourceFeature: sourceFeature\n        });\n      });\n      break;\n\n    case 'MultiPolygon':\n      coordinates.forEach(function (polygon) {\n        polygonFeatures.push({\n          geometry: {\n            type: 'Polygon',\n            coordinates: polygon\n          },\n          sourceFeature: sourceFeature\n        });\n        polygon.forEach(function (path) {\n          polygonOutlineFeatures.push({\n            geometry: {\n              type: 'LineString',\n              coordinates: path\n            },\n            sourceFeature: sourceFeature\n          });\n        });\n      });\n      break;\n\n    default:\n  }\n}\n\nexport function unwrapSourceFeature(wrappedFeature) {\n  return wrappedFeature.sourceFeature.feature;\n}\nexport function unwrapSourceFeatureIndex(wrappedFeature) {\n  return wrappedFeature.sourceFeature.index;\n}\nvar COORDINATE_NEST_LEVEL = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nfunction checkCoordinates(type, coordinates) {\n  var nestLevel = COORDINATE_NEST_LEVEL[type];\n  assert(nestLevel, \"Unknown GeoJSON type \".concat(type));\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  assert(coordinates && Number.isFinite(coordinates[0]), \"\".concat(type, \" coordinates are malformed\"));\n}","map":null,"metadata":{},"sourceType":"module"}