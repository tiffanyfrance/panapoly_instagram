{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isFetchResponse, isReadableStream, isAsyncIterable, isIterable, isIterator } from '../../javascript-utils/is-type';\nimport { getStreamIterator } from '../../javascript-utils/stream-utils';\nimport { TextDecoder } from '../../javascript-utils/text-encoding';\nvar ERR_DATA = 'Cannot convert supplied data type';\nexport function getUrlFromData(data) {\n  return isFetchResponse(data) ? data.url : null;\n}\nexport function getSizeFromData(data) {\n  return isFetchResponse(data) ? data.headers.get('Content-Length') : null;\n}\nexport function getArrayBufferOrStringFromDataSync(data, loader) {\n  if (loader.text && typeof data === 'string') {\n    return data;\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    var arrayBuffer = data.buffer || data;\n\n    if (loader.text && !loader.binary) {\n      var textDecoder = new TextDecoder('utf8');\n      return textDecoder.decode(arrayBuffer);\n    }\n\n    return arrayBuffer;\n  }\n\n  throw new Error(ERR_DATA);\n}\nexport function getArrayBufferOrStringFromData(_x, _x2) {\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nfunction _getArrayBufferOrStringFromData() {\n  _getArrayBufferOrStringFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {\n    var isArrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return data;\n\n          case 2:\n            data = _context.sent;\n            isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\n\n            if (!(typeof data === 'string' || isArrayBuffer)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", getArrayBufferOrStringFromDataSync(data, loader));\n\n          case 6:\n            if (!isFetchResponse(data)) {\n              _context.next = 15;\n              break;\n            }\n\n            if (!loader.binary) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 10;\n            return data.arrayBuffer();\n\n          case 10:\n            _context.t0 = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 13:\n            _context.t0 = data.text();\n\n          case 14:\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 15:\n            throw new Error(ERR_DATA);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getArrayBufferOrStringFromData.apply(this, arguments);\n}\n\nexport function getAsyncIteratorFromData(_x3, _x4) {\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\n\nfunction _getAsyncIteratorFromData() {\n  _getAsyncIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loader) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isIterator(data)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", data);\n\n          case 2:\n            if (!isFetchResponse(data)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", getStreamIterator(data.body));\n\n          case 4:\n            if (!isReadableStream(data)) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", getStreamIterator(data));\n\n          case 6:\n            if (!isAsyncIterable(data)) {\n              _context2.next = 8;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", data[Symbol.asyncIterator]());\n\n          case 8:\n            return _context2.abrupt(\"return\", getIteratorFromData(data, loader));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAsyncIteratorFromData.apply(this, arguments);\n}\n\nexport function getIteratorFromData(_x5, _x6) {\n  return _getIteratorFromData.apply(this, arguments);\n}\n\nfunction _getIteratorFromData() {\n  _getIteratorFromData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loader) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(data instanceof ArrayBuffer || ArrayBuffer.isView(data))) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", _regeneratorRuntime.mark(function oneChunk() {\n              return _regeneratorRuntime.wrap(function oneChunk$(_context3) {\n                while (1) {\n                  switch (_context3.prev = _context3.next) {\n                    case 0:\n                      _context3.next = 2;\n                      return data.buffer || data;\n\n                    case 2:\n                    case \"end\":\n                      return _context3.stop();\n                  }\n                }\n              }, oneChunk);\n            })());\n\n          case 2:\n            if (!isIterator(data)) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data);\n\n          case 4:\n            if (!isIterable(data)) {\n              _context4.next = 6;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", data[Symbol.iterator]());\n\n          case 6:\n            throw new Error(ERR_DATA);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getIteratorFromData.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}