{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport MathArray from './lib/math-array';\nimport { validateVector } from './lib/validators';\nimport { checkNumber } from './lib/common';\nimport Vector2 from './vector2';\nimport Vector3 from './vector3';\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nvar IDENTITY = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nexport function validateMatrix3(m) {\n  return m.length === 9 && Number.isFinite(m[0]) && Number.isFinite(m[1]) && Number.isFinite(m[2]) && Number.isFinite(m[3]) && Number.isFinite(m[4]) && Number.isFinite(m[5]) && Number.isFinite(m[6]) && Number.isFinite(m[7]) && Number.isFinite(m[8]);\n}\n\nvar Matrix3 = function (_MathArray) {\n  _inherits(Matrix3, _MathArray);\n\n  function Matrix3() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, Matrix3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Matrix3).call(this));\n\n    if (Array.isArray(args[0]) && arguments.length === 1) {\n      _this.copy(args[0]);\n    } else {\n      _this.identity();\n    }\n\n    return _this;\n  }\n\n  _createClass(Matrix3, [{\n    key: \"setRowMajor\",\n    value: function setRowMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m10 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m11 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      var m12 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var m20 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m21 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m22 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m01;\n      this[4] = m11;\n      this[5] = m21;\n      this[6] = m02;\n      this[7] = m12;\n      this[8] = m22;\n      return this.check();\n    }\n  }, {\n    key: \"setColumnMajor\",\n    value: function setColumnMajor() {\n      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var m10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var m20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var m01 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var m11 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n      var m21 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var m02 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var m12 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var m22 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n      this[0] = m00;\n      this[1] = m10;\n      this[2] = m20;\n      this[3] = m01;\n      this[4] = m11;\n      this[5] = m21;\n      this[6] = m02;\n      this[7] = m12;\n      this[8] = m22;\n      return this.check();\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(array) {\n      return this.setColumnMajor.apply(this, _toConsumableArray(array));\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      return this.setColumnMajor.apply(this, arguments);\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(i, j) {\n      var columnMajor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return columnMajor ? this[i * 3 + j] : this[j * 3 + i];\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(i, j, value) {\n      var columnMajor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (columnMajor) {\n        this[i * 3 + j] = checkNumber(value);\n      } else {\n        this[j * 3 + i] = checkNumber(value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      return mat3.determinant(this);\n    }\n  }, {\n    key: \"identity\",\n    value: function identity() {\n      for (var i = 0; i < IDENTITY.length; ++i) {\n        this[i] = IDENTITY[i];\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"fromQuaternion\",\n    value: function fromQuaternion(q) {\n      mat3.fromQuat(this, q);\n      return this.check();\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      mat3.transpose(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      mat3.invert(this, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyLeft\",\n    value: function multiplyLeft(a) {\n      mat3.multiply(this, a, this);\n      return this.check();\n    }\n  }, {\n    key: \"multiplyRight\",\n    value: function multiplyRight(a) {\n      mat3.multiply(this, this, a);\n      return this.check();\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(radians) {\n      mat3.rotate(this, this, radians);\n      return this.check();\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(factor) {\n      if (Array.isArray(factor)) {\n        mat3.scale(this, this, factor);\n      } else {\n        mat3.scale(this, this, [factor, factor, factor]);\n      }\n\n      return this.check();\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(vec) {\n      mat3.translate(this, this, vec);\n      return this.check();\n    }\n  }, {\n    key: \"transformVector2\",\n    value: function transformVector2(vector, out) {\n      out = out || new Vector2();\n      vec2.transformMat3(out, vector, this);\n      validateVector(out, 2);\n      return out;\n    }\n  }, {\n    key: \"transformVector3\",\n    value: function transformVector3(vector, out) {\n      out = out || new Vector3();\n      vec3.transformMat3(out, vector, this);\n      validateVector(out, 3);\n      return out;\n    }\n  }, {\n    key: \"transformVector\",\n    value: function transformVector(vector, out) {\n      switch (vector.length) {\n        case 2:\n          return this.transformVector2(vector, out);\n\n        case 3:\n          return this.transformVector3(vector, out);\n\n        default:\n          throw new Error('Illegal vector');\n      }\n    }\n  }, {\n    key: \"ELEMENTS\",\n    get: function get() {\n      return 9;\n    }\n  }]);\n\n  return Matrix3;\n}(MathArray);\n\nexport { Matrix3 as default };","map":null,"metadata":{},"sourceType":"module"}