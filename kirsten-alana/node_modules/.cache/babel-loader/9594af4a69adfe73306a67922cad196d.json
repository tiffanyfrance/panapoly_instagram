{"ast":null,"code":"import assert from '../utils/assert';\nimport { TextEncoder } from './text-encoding';\nexport var isArrayBuffer = function isArrayBuffer(x) {\n  return x && x instanceof ArrayBuffer;\n};\nexport var isBlob = function isBlob(x) {\n  return x && typeof Blob !== 'undefined' && x instanceof Blob;\n};\nexport var isBuffer = function isBuffer(x) {\n  return x && x instanceof Buffer;\n};\nexport function toArrayBuffer(data) {\n  if (isArrayBuffer(data)) {\n    return data;\n  }\n\n  if (isBuffer(data)) {\n    var typedArray = new Uint8Array(data);\n    return typedArray.buffer;\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    var text = data;\n    var uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  return assert(false);\n}\nexport function blobToArrayBuffer(blob) {\n  return new Promise(function (resolve, reject) {\n    var arrayBuffer;\n    var fileReader = new FileReader();\n\n    fileReader.onload = function (event) {\n      arrayBuffer = event.target.result;\n    };\n\n    fileReader.onloadend = function (event) {\n      return resolve(arrayBuffer);\n    };\n\n    fileReader.onerror = reject;\n    fileReader.readAsArrayBuffer(blob);\n  });\n}\nexport function toDataView(buffer) {\n  return new DataView(toArrayBuffer(buffer));\n}","map":null,"metadata":{},"sourceType":"module"}