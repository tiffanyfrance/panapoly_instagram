{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4 } from 'math.gl';\nimport { assert, uid } from '../../utils';\n\nvar ScenegraphNode = function () {\n  function ScenegraphNode(props) {\n    _classCallCheck(this, ScenegraphNode);\n\n    var id = props.id;\n    this.id = id || uid(this.constructor.name);\n    this.display = true;\n    this.position = new Vector3();\n    this.rotation = new Vector3();\n    this.scale = new Vector3(1, 1, 1);\n    this.matrix = new Matrix4();\n    this.userData = {};\n    this.props = {};\n\n    this._setScenegraphNodeProps(props);\n  }\n\n  _createClass(ScenegraphNode, [{\n    key: \"delete\",\n    value: function _delete() {}\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this._setScenegraphNodeProps(props);\n\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{type: ScenegraphNode, id: \".concat(this.id, \")}\");\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(position) {\n      assert(position.length === 3, 'setPosition requires vector argument');\n      this.position = position;\n      return this;\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      assert(rotation.length === 3, 'setRotation requires vector argument');\n      this.rotation = rotation;\n      return this;\n    }\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      assert(scale.length === 3, 'setScale requires vector argument');\n      this.scale = scale;\n      return this;\n    }\n  }, {\n    key: \"setMatrix\",\n    value: function setMatrix(matrix) {\n      var copyMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (copyMatrix) {\n        this.matrix.copy(matrix);\n      } else {\n        this.matrix = matrix;\n      }\n    }\n  }, {\n    key: \"setMatrixComponents\",\n    value: function setMatrixComponents(_ref) {\n      var position = _ref.position,\n          rotation = _ref.rotation,\n          scale = _ref.scale,\n          _ref$update = _ref.update,\n          update = _ref$update === void 0 ? true : _ref$update;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      if (update) {\n        this.updateMatrix();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"updateMatrix\",\n    value: function updateMatrix() {\n      var pos = this.position;\n      var rot = this.rotation;\n      var scale = this.scale;\n      this.matrix.identity();\n      this.matrix.translate(pos);\n      this.matrix.rotateXYZ(rot);\n      this.matrix.scale(scale);\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          position = _ref2.position,\n          rotation = _ref2.rotation,\n          scale = _ref2.scale;\n\n      if (position) {\n        this.setPosition(position);\n      }\n\n      if (rotation) {\n        this.setRotation(rotation);\n      }\n\n      if (scale) {\n        this.setScale(scale);\n      }\n\n      this.updateMatrix();\n      return this;\n    }\n  }, {\n    key: \"getCoordinateUniforms\",\n    value: function getCoordinateUniforms(viewMatrix, modelMatrix) {\n      assert(viewMatrix);\n      modelMatrix = modelMatrix || this.matrix;\n      var worldMatrix = new Matrix4(viewMatrix).multiplyRight(modelMatrix);\n      var worldInverse = worldMatrix.invert();\n      var worldInverseTranspose = worldInverse.transpose();\n      return {\n        viewMatrix: viewMatrix,\n        modelMatrix: modelMatrix,\n        objectMatrix: modelMatrix,\n        worldMatrix: worldMatrix,\n        worldInverseMatrix: worldInverse,\n        worldInverseTransposeMatrix: worldInverseTranspose\n      };\n    }\n  }, {\n    key: \"transform\",\n    value: function transform() {\n      if (!this.parent) {\n        this.endPosition.set(this.position);\n        this.endRotation.set(this.rotation);\n        this.endScale.set(this.scale);\n      } else {\n        var parent = this.parent;\n        this.endPosition.set(this.position.add(parent.endPosition));\n        this.endRotation.set(this.rotation.add(parent.endRotation));\n        this.endScale.set(this.scale.add(parent.endScale));\n      }\n\n      var ch = this.children;\n\n      for (var i = 0; i < ch.length; ++i) {\n        ch[i].transform();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_setScenegraphNodeProps\",\n    value: function _setScenegraphNodeProps(props) {\n      if ('display' in props) {\n        this.display = props.display;\n      }\n\n      if ('position' in props) {\n        this.setPosition(props.position);\n      }\n\n      if ('rotation' in props) {\n        this.setPosition(props.rotation);\n      }\n\n      if ('scale' in props) {\n        this.setScale(props.scale);\n      }\n\n      if ('matrix' in props) {\n        this.setPosition(props.matrix);\n      }\n\n      Object.assign(this.props, props);\n    }\n  }]);\n\n  return ScenegraphNode;\n}();\n\nexport { ScenegraphNode as default };","map":null,"metadata":{},"sourceType":"module"}