{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isBrowser } from '../../utils/globals';\nimport * as node from '../../node/fetch/fetch-file-node';\nimport { fetchFile as browserFetchFile, readFileSync as browserReadFileSync, createReadStream as browserCreateReadStream } from './fetch-file-browser';\nimport { resolvePath } from './file-aliases';\nexport function fetchFile(_x, _x2) {\n  return _fetchFile.apply(this, arguments);\n}\n\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, options) {\n    var func;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = resolvePath(url);\n            func = isBrowser ? browserFetchFile : node.fetchFile;\n            return _context.abrupt(\"return\", func(url, options));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchFile.apply(this, arguments);\n}\n\nexport function readFileSync(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  url = resolvePath(url);\n  var func = isBrowser ? browserReadFileSync : node.readFileSync;\n  return func(url, options);\n}\nexport function createReadStream(_x3, _x4) {\n  return _createReadStream.apply(this, arguments);\n}\n\nfunction _createReadStream() {\n  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, options) {\n    var func;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = resolvePath(url);\n            func = isBrowser ? browserCreateReadStream : node.createReadStream;\n            return _context2.abrupt(\"return\", func(url, options));\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createReadStream.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}