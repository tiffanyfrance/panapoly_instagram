{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { autoDetectLoader } from './loader-utils/auto-detect-loader';\nimport { normalizeLoader, isLoaderObject } from './loader-utils/normalize-loader';\nimport NullLog from './loader-utils/null-log';\nimport { getRegisteredLoaders } from './register-loaders';\nimport { parseWithLoader, parseWithLoaderInBatches, parseWithLoaderSync } from './parse-with-loader';\nexport function parse(_x, _x2, _x3, _x4) {\n  return _parse.apply(this, arguments);\n}\n\nfunction _parse() {\n  _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loaders, options, url) {\n    var loader;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loaders = loaders || getRegisteredLoaders();\n            loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;\n\n            if (loader) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n            normalizeLoader(loader);\n            options = mergeLoaderAndUserOptions(options, loader);\n            _context.next = 9;\n            return parseWithLoader(data, loader, options, url);\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parse.apply(this, arguments);\n}\n\nexport function parseSync(data, loaders, options, url) {\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    url = options;\n    options = loaders;\n    loaders = null;\n  }\n\n  loaders = loaders || getRegisteredLoaders();\n  var loader = Array.isArray(loaders) ? autoDetectLoader(url, data, loaders) : loaders;\n  normalizeLoader(loader);\n  options = mergeLoaderAndUserOptions(options, loader);\n  return parseWithLoaderSync(data, loader, options, url);\n}\nexport function parseInBatches(_x5, _x6, _x7, _x8) {\n  return _parseInBatches.apply(this, arguments);\n}\n\nfunction _parseInBatches() {\n  _parseInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loaders, options, url) {\n    var loader;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loaders = loaders || getRegisteredLoaders();\n            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n            normalizeLoader(loader);\n            options = mergeLoaderAndUserOptions(options, loader);\n            return _context2.abrupt(\"return\", parseWithLoaderInBatches(data, loader, options, url));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseInBatches.apply(this, arguments);\n}\n\nexport function parseInBatchesSync(_x9, _x10, _x11, _x12) {\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction _parseInBatchesSync() {\n  _parseInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loaders, options, url) {\n    var loader;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              url = options;\n              options = loaders;\n              loaders = null;\n            }\n\n            loaders = loaders || getRegisteredLoaders();\n            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n            normalizeLoader(loader);\n            options = mergeLoaderAndUserOptions(options, loader);\n            return _context3.abrupt(\"return\", parseWithLoaderInBatches(data, loader, options, url));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseInBatchesSync.apply(this, arguments);\n}\n\nfunction mergeLoaderAndUserOptions(options, loader) {\n  options = Object.assign({}, loader.DEFAULT_OPTIONS, loader.options, options, {\n    dataType: 'arraybuffer'\n  });\n\n  if (options.log === null) {\n    options.log = new NullLog();\n  }\n\n  if (!('log' in options)) {\n    options.log = console;\n  }\n\n  return options;\n}","map":null,"metadata":{},"sourceType":"module"}