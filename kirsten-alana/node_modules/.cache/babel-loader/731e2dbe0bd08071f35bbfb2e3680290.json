{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { parseImageNode } from '../node/parse-image-node';\nexport var canParseImage = parseImageNode || typeof ImageBitmap !== 'undefined';\nexport function parseImage(arrayBuffer, options) {\n  if (parseImageNode) {\n    return parseImageNode(arrayBuffer, options);\n  }\n\n  return parseToImageBitmap(arrayBuffer);\n}\nexport function loadImage(_x, _x2) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, options) {\n    var response, arrayBuffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof Image === 'undefined')) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 3;\n            return fetch(url, options);\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.arrayBuffer();\n\n          case 6:\n            arrayBuffer = _context.sent;\n            return _context.abrupt(\"return\", parseImage(arrayBuffer));\n\n          case 8:\n            _context.next = 10;\n            return loadToHTMLImage(url, options);\n\n          case 10:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImage.apply(this, arguments);\n}\n\nexport function parseToImageBitmap(arrayBuffer) {\n  if (typeof createImageBitmap === 'undefined') {\n    throw new Error('parseImage');\n  }\n\n  var blob = new Blob([new Uint8Array(arrayBuffer)]);\n  return createImageBitmap(blob);\n}\nexport function loadToHTMLImage(_x3, _x4) {\n  return _loadToHTMLImage.apply(this, arguments);\n}\n\nfunction _loadToHTMLImage() {\n  _loadToHTMLImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, options) {\n    var src, response, xml;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!/\\.svg((\\?|#).*)?$/.test(url)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 3;\n            return fetch(url, options);\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return response.text();\n\n          case 6:\n            xml = _context2.sent;\n            src = \"data:image/svg+xml;base64,\".concat(btoa(xml));\n            _context2.next = 13;\n            break;\n\n          case 10:\n            _context2.next = 12;\n            return url;\n\n          case 12:\n            src = _context2.sent;\n\n          case 13:\n            _context2.next = 15;\n            return new Promise(function (resolve, reject) {\n              try {\n                var image = new Image();\n\n                image.onload = function () {\n                  return resolve(image);\n                };\n\n                image.onerror = function (err) {\n                  return reject(new Error(\"Could not load image \".concat(url, \": \").concat(err)));\n                };\n\n                image.crossOrigin = options && options.crossOrigin || 'anonymous';\n                image.src = src;\n              } catch (error) {\n                reject(error);\n              }\n            });\n\n          case 15:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _loadToHTMLImage.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}