{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isWebGL2 } from '../webgl-utils';\nimport WEBGL_LIMITS from './webgl-limits-table';\nimport { getContextDebugInfo } from '../debug/get-context-debug-info';\nexport function getContextLimits(gl) {\n  gl.luma = gl.luma || {};\n\n  if (!gl.luma.limits) {\n    gl.luma.limits = {};\n    gl.luma.webgl1MinLimits = {};\n    gl.luma.webgl2MinLimits = {};\n    var isWebgl2 = isWebGL2(gl);\n\n    for (var parameter in WEBGL_LIMITS) {\n      var limit = WEBGL_LIMITS[parameter];\n      var webgl1MinLimit = limit.gl1;\n      var webgl2MinLimit = 'gl2' in limit ? limit.gl2 : limit.gl1;\n      var minLimit = isWebgl2 ? webgl2MinLimit : webgl1MinLimit;\n      var limitNotAvailable = 'gl2' in limit && !isWebgl2 || 'extension' in limit && !gl.getExtension(limit.extension);\n      var value = limitNotAvailable ? minLimit : gl.getParameter(parameter);\n      gl.luma.limits[parameter] = value;\n      gl.luma.webgl1MinLimits[parameter] = webgl1MinLimit;\n      gl.luma.webgl2MinLimits[parameter] = webgl2MinLimit;\n    }\n  }\n\n  return gl.luma.limits;\n}\nexport function getGLContextInfo(gl) {\n  gl.luma = gl.luma || {};\n  var info = getContextDebugInfo(gl);\n\n  if (!gl.luma.info) {\n    var _gl$luma$info;\n\n    gl.luma.info = (_gl$luma$info = {}, _defineProperty(_gl$luma$info, 37445, info.vendor), _defineProperty(_gl$luma$info, 37446, info.renderer), _defineProperty(_gl$luma$info, 7936, info.vendorMasked), _defineProperty(_gl$luma$info, 7937, info.rendererMasked), _defineProperty(_gl$luma$info, 7938, info.version), _defineProperty(_gl$luma$info, 35724, info.shadingLanguageVersion), _gl$luma$info);\n  }\n\n  return gl.luma.info;\n}\nexport function getContextInfo(gl) {\n  return Object.assign(getContextDebugInfo(gl), {\n    limits: getContextLimits(gl),\n    info: getGLContextInfo(gl),\n    webgl1MinLimits: gl.luma.webgl1MinLimits,\n    webgl2MinLimits: gl.luma.webgl2MinLimits\n  });\n}","map":null,"metadata":{},"sourceType":"module"}