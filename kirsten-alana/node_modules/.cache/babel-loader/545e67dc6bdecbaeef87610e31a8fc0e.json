{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { withParameters } from '../context';\nimport { isWebGL2, assertWebGL2Context } from '../webgl-utils';\nimport Texture from './texture';\nimport { DATA_FORMAT_CHANNELS, TYPE_SIZES } from './texture-formats';\nimport Buffer from './buffer';\n\nvar Texture3D = function (_Texture) {\n  _inherits(Texture3D, _Texture);\n\n  _createClass(Texture3D, null, [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      return isWebGL2(gl);\n    }\n  }]);\n\n  function Texture3D(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Texture3D);\n\n    assertWebGL2Context(gl);\n    props = Object.assign({\n      depth: 1\n    }, props, {\n      target: 32879,\n      unpackFlipY: false\n    });\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Texture3D).call(this, gl, props));\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Texture3D, [{\n    key: \"setImageData\",\n    value: function setImageData(_ref) {\n      var _this2 = this;\n\n      var _ref$level = _ref.level,\n          level = _ref$level === void 0 ? 0 : _ref$level,\n          _ref$dataFormat = _ref.dataFormat,\n          dataFormat = _ref$dataFormat === void 0 ? 6408 : _ref$dataFormat,\n          width = _ref.width,\n          height = _ref.height,\n          _ref$depth = _ref.depth,\n          depth = _ref$depth === void 0 ? 1 : _ref$depth,\n          _ref$border = _ref.border,\n          border = _ref$border === void 0 ? 0 : _ref$border,\n          format = _ref.format,\n          _ref$type = _ref.type,\n          type = _ref$type === void 0 ? 5121 : _ref$type,\n          _ref$offset = _ref.offset,\n          offset = _ref$offset === void 0 ? 0 : _ref$offset,\n          data = _ref.data,\n          _ref$parameters = _ref.parameters,\n          parameters = _ref$parameters === void 0 ? {} : _ref$parameters;\n\n      this._trackDeallocatedMemory('Texture');\n\n      this.gl.bindTexture(this.target, this.handle);\n      withParameters(this.gl, parameters, function () {\n        if (ArrayBuffer.isView(data)) {\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, data);\n        }\n\n        if (data instanceof Buffer) {\n          _this2.gl.bindBuffer(35052, data.handle);\n\n          _this2.gl.texImage3D(_this2.target, level, dataFormat, width, height, depth, border, format, type, offset);\n        }\n      });\n\n      if (data && data.byteLength) {\n        this._trackAllocatedMemory(data.byteLength, 'Texture');\n      } else {\n        var channels = DATA_FORMAT_CHANNELS[this.dataFormat] || 4;\n        var channelSize = TYPE_SIZES[this.type] || 1;\n\n        this._trackAllocatedMemory(this.width * this.height * this.depth * channels * channelSize, 'Texture');\n      }\n\n      this.loaded = true;\n      return this;\n    }\n  }]);\n\n  return Texture3D;\n}(Texture);\n\nexport { Texture3D as default };","map":null,"metadata":{},"sourceType":"module"}