{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { Buffer, hasFeature, FEATURES } from '@luma.gl/core';\nimport { log, uid } from '@luma.gl/core';\n\nvar BaseAttribute = function () {\n  function BaseAttribute(gl) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BaseAttribute);\n\n    var _opts$id = opts.id,\n        id = _opts$id === void 0 ? uid('attribute') : _opts$id,\n        type = opts.type,\n        _opts$isIndexed = opts.isIndexed,\n        isIndexed = _opts$isIndexed === void 0 ? false : _opts$isIndexed;\n    this.gl = gl;\n    this.id = id;\n    this.isIndexed = isIndexed;\n    this.target = isIndexed ? 34963 : 34962;\n    this.type = type;\n\n    if (isIndexed && !type) {\n      this.type = gl && hasFeature(gl, FEATURES.ELEMENT_INDEX_UINT32) ? 5125 : 5123;\n    }\n\n    this.value = null;\n    this.externalBuffer = null;\n    this.buffer = null;\n    this.userData = {};\n    this.update(opts);\n\n    this._validateAttributeDefinition();\n  }\n\n  _createClass(BaseAttribute, [{\n    key: \"delete\",\n    value: function _delete() {\n      if (this.buffer) {\n        this.buffer.delete();\n        this.buffer = null;\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(opts) {\n      var value = opts.value,\n          buffer = opts.buffer,\n          _opts$constant = opts.constant,\n          constant = _opts$constant === void 0 ? this.constant || false : _opts$constant;\n      this.constant = constant;\n\n      if (buffer) {\n        this.externalBuffer = buffer;\n        this.constant = false;\n        this.type = opts.type || buffer.accessor.type;\n\n        if (buffer.accessor.divisor !== undefined) {\n          this.divisor = buffer.accessor.divisor;\n        }\n\n        if (opts.divisor !== undefined) {\n          this.divisor = opts.divisor;\n        }\n      } else if (value) {\n        this.externalBuffer = null;\n        var size = this.size || opts.size || 0;\n\n        if (constant && value.length !== size) {\n          this.value = new Float32Array(size);\n          var index = this.offset / 4;\n\n          for (var i = 0; i < this.size; ++i) {\n            this.value[i] = value[index + i];\n          }\n        } else {\n          this.value = value;\n        }\n\n        if (!constant && this.gl) {\n          var props = _objectSpread({}, opts, {\n            id: this.id,\n            target: this.target,\n            accessor: {\n              type: this.type\n            }\n          });\n\n          if (Number.isFinite(props.divisor)) {\n            props.accessor.divisor = props.divisor;\n          }\n\n          delete props.divisor;\n\n          if (Number.isFinite(props.size)) {\n            props.accessor.size = props.size;\n          }\n\n          delete props.size;\n          this.buffer = this.buffer || new Buffer(this.gl, props);\n          this.buffer.setData({\n            data: value\n          });\n          this.type = this.buffer.accessor.type;\n        }\n      }\n\n      this._setAccessor(opts);\n    }\n  }, {\n    key: \"getBuffer\",\n    value: function getBuffer() {\n      if (this.constant) {\n        return null;\n      }\n\n      return this.externalBuffer || this.buffer;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      if (this.constant) {\n        return this.value;\n      }\n\n      var buffer = this.externalBuffer || this.buffer;\n\n      if (buffer) {\n        return [buffer, this];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_setAccessor\",\n    value: function _setAccessor(opts) {\n      var _opts$size = opts.size,\n          size = _opts$size === void 0 ? this.size : _opts$size,\n          _opts$offset = opts.offset,\n          offset = _opts$offset === void 0 ? this.offset || 0 : _opts$offset,\n          _opts$stride = opts.stride,\n          stride = _opts$stride === void 0 ? this.stride || 0 : _opts$stride,\n          _opts$normalized = opts.normalized,\n          normalized = _opts$normalized === void 0 ? this.normalized || false : _opts$normalized,\n          _opts$integer = opts.integer,\n          integer = _opts$integer === void 0 ? this.integer || false : _opts$integer,\n          _opts$divisor = opts.divisor,\n          divisor = _opts$divisor === void 0 ? this.divisor || 0 : _opts$divisor,\n          instanced = opts.instanced,\n          isInstanced = opts.isInstanced;\n      this.size = size;\n      this.offset = offset;\n      this.stride = stride;\n      this.normalized = normalized;\n      this.integer = integer;\n      this.divisor = divisor;\n\n      if (isInstanced !== undefined) {\n        log.deprecated('Attribute.isInstanced')();\n        this.divisor = isInstanced ? 1 : 0;\n      }\n\n      if (instanced !== undefined) {\n        log.deprecated('Attribute.instanced')();\n        this.divisor = instanced ? 1 : 0;\n      }\n    }\n  }, {\n    key: \"_validateAttributeDefinition\",\n    value: function _validateAttributeDefinition() {}\n  }]);\n\n  return BaseAttribute;\n}();\n\nexport { BaseAttribute as default };","map":null,"metadata":{},"sourceType":"module"}