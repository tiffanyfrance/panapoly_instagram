{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js\";\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { ScreenGridLayer } from 'deck.gl';\nimport { StaticMap } from 'react-map-gl';\nimport { isWebGL2 } from '@luma.gl/core';\nimport 'mapbox-gl/dist/mapbox-gl.css'; // Set your mapbox access token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow'; // Source data CSV\n// const DATA_URL =\n//   'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nconst DATA_URL = 'https://raw.githubusercontent.com/tiffylou/panoply/master/data.json'; // eslint-disable-line\n\nconsole.log(DATA_URL); // Initial viewport settings\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.859,\n  latitude: 40.4599,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\nconst colorRange = [// [255, 255, 178, 25],\n[254, 217, 118, 85], [254, 178, 76, 127], [253, 141, 60, 170], [240, 59, 32, 212], [189, 0, 38, 255]];\n\nclass App extends React.Component {\n  _renderTooltip() {\n    const _ref = this.state || {},\n          hoveredObject = _ref.hoveredObject,\n          pointerX = _ref.pointerX,\n          pointerY = _ref.pointerY;\n\n    return hoveredObject && React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        zIndex: 1,\n        pointerEvents: 'none',\n        left: pointerX,\n        top: pointerY\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, hoveredObject.message);\n  }\n\n  _renderLayers() {\n    const _this$props = this.props,\n          _this$props$data = _this$props.data,\n          data = _this$props$data === void 0 ? DATA_URL : _this$props$data,\n          _this$props$cellSize = _this$props.cellSize,\n          cellSize = _this$props$cellSize === void 0 ? 8 : _this$props$cellSize,\n          _this$props$gpuAggreg = _this$props.gpuAggregation,\n          gpuAggregation = _this$props$gpuAggreg === void 0 ? true : _this$props$gpuAggreg,\n          _this$props$aggregati = _this$props.aggregation,\n          aggregation = _this$props$aggregati === void 0 ? 'Sum' : _this$props$aggregati;\n    return [new ScreenGridLayer({\n      id: 'grid',\n      data,\n      getPosition: d => [d[2], d[1]],\n      getWeight: d => d[0],\n      cellSizePixels: cellSize,\n      colorRange,\n      // gpuAggregation,\n      // aggregation,\n      // Enable picking\n      pickable: true,\n      // Update tooltip\n      // onHover: d => setTooltip(d, d.x, d.y)\n      onHover: info => this.setState({\n        hoveredObject: info.object,\n        pointerX: info.x,\n        pointerY: info.y\n      })\n    })];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          viewState = _this$props2.viewState,\n          _this$props2$controll = _this$props2.controller,\n          controller = _this$props2$controll === void 0 ? true : _this$props2$controll,\n          _this$props2$baseMap = _this$props2.baseMap,\n          baseMap = _this$props2$baseMap === void 0 ? true : _this$props2$baseMap;\n    return React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      onWebGLInitialized: this._onInitialized.bind(this),\n      viewState: viewState,\n      controller: controller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, baseMap && React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), this._renderTooltip());\n  }\n\n} // function setTooltip(object, x, y) {\n//   const el = document.getElementById('tooltip');\n//   if (object) {\n//     el.innerHTML = object[3];\n//     el.style.display = 'block';\n//     // el.style.left = x + 'px';\n//     // el.style.top = y + 'px';\n//   } else {\n//     el.style.display = 'none';\n//   }\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js"],"names":["React","DeckGL","ScreenGridLayer","StaticMap","isWebGL2","MAPBOX_TOKEN","DATA_URL","console","log","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","colorRange","App","Component","_renderTooltip","state","hoveredObject","pointerX","pointerY","position","zIndex","pointerEvents","left","top","message","_renderLayers","props","data","cellSize","gpuAggregation","aggregation","id","getPosition","d","getWeight","cellSizePixels","pickable","onHover","info","setState","object","x","y","_onInitialized","gl","warn","disableGPUAggregation","render","viewState","controller","baseMap","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {ScreenGridLayer} from 'deck.gl';\nimport {StaticMap} from 'react-map-gl';\nimport {isWebGL2} from '@luma.gl/core';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// Set your mapbox access token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow';\n\n// Source data CSV\n// const DATA_URL =\n//   'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nconst DATA_URL = 'https://raw.githubusercontent.com/tiffylou/panoply/master/data.json'; // eslint-disable-line\nconsole.log(DATA_URL)\n\n// Initial viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.859,\n  latitude: 40.4599,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\n\nconst colorRange = [\n  // [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n];\n\nclass App extends React.Component {\n  _renderTooltip() {\n    const {hoveredObject, pointerX, pointerY} = this.state || {};\n    return hoveredObject && (\n      <div style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n        { hoveredObject.message }\n      </div>\n    );\n  }\n\n  _renderLayers() {\n    const {data = DATA_URL, cellSize = 8, gpuAggregation = true, aggregation = 'Sum'} = this.props;\n\n    return [\n      new ScreenGridLayer({\n        id: 'grid',\n        data,\n        getPosition: d => [d[2], d[1]],\n        getWeight: d => d[0],\n        cellSizePixels: cellSize,\n        colorRange,\n        // gpuAggregation,\n        // aggregation,\n        // Enable picking\n        pickable: true,\n        // Update tooltip\n        // onHover: d => setTooltip(d, d.x, d.y)\n        onHover: info => this.setState({\n          hoveredObject: info.object,\n          pointerX: info.x,\n          pointerY: info.y\n        })\n      })\n    ];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const {viewState, controller = true, baseMap = true} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        initialViewState={INITIAL_VIEW_STATE}\n        onWebGLInitialized={this._onInitialized.bind(this)}\n        viewState={viewState}\n        controller={controller}\n      >\n        {baseMap && (\n          <StaticMap\n            reuseMaps\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          />\n        )}\n        {this._renderTooltip()}\n      </DeckGL>\n    );\n  }\n}\n\n// function setTooltip(object, x, y) {\n//   const el = document.getElementById('tooltip');\n//   if (object) {\n//     el.innerHTML = object[3];\n//     el.style.display = 'block';\n//     // el.style.left = x + 'px';\n//     // el.style.top = y + 'px';\n//   } else {\n//     el.style.display = 'none';\n//   }\n// }\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}