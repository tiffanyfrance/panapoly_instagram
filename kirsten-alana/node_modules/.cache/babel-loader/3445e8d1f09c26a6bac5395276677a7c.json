{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fetchFile } from './fetch/fetch-file';\nimport { isLoaderObject } from './loader-utils/normalize-loader';\nimport { autoDetectLoader } from './loader-utils/auto-detect-loader';\nimport { parse, parseInBatches } from './parse';\nimport { getRegisteredLoaders } from './register-loaders';\nexport function loadInBatches(_x, _x2, _x3) {\n  return _loadInBatches.apply(this, arguments);\n}\n\nfunction _loadInBatches() {\n  _loadInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, loaders, options) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetchFile(url, options);\n\n          case 2:\n            response = _context.sent;\n            return _context.abrupt(\"return\", parseInBatches(response, loaders, options, url));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadInBatches.apply(this, arguments);\n}\n\nexport function load(_x4, _x5, _x6) {\n  return _load.apply(this, arguments);\n}\n\nfunction _load() {\n  _load = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(url, loaders, options) {\n    var loader, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n              options = loaders;\n              loaders = null;\n            }\n\n            loaders = loaders || getRegisteredLoaders();\n            loader = Array.isArray(loaders) ? autoDetectLoader(url, null, loaders) : loaders;\n\n            if (!(loader && loader.loadAndParse)) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 6;\n            return loader.loadAndParse(url, options);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n            _context2.next = 9;\n            return fetchFile(url, options);\n\n          case 9:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", parse(response, loaders, options, url));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _load.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}