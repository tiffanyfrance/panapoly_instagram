{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport { Layer } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, fp64 } from '@luma.gl/core';\nimport { loadImage } from '@loaders.gl/images';\nvar fp64LowPart = fp64.fp64LowPart;\nimport vs from './bitmap-layer-vertex';\nimport fs from './bitmap-layer-fragment';\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9987), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\nvar defaultProps = {\n  image: null,\n  bounds: {\n    type: 'array',\n    value: [1, 0, 0, 1],\n    compare: true\n  },\n  fp64: false,\n  desaturate: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 0\n  },\n  transparentColor: {\n    type: 'color',\n    value: [0, 0, 0, 0]\n  },\n  tintColor: {\n    type: 'color',\n    value: [255, 255, 255]\n  }\n};\n\nvar BitmapLayer = function (_Layer) {\n  _inherits(BitmapLayer, _Layer);\n\n  function BitmapLayer() {\n    _classCallCheck(this, BitmapLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BitmapLayer).apply(this, arguments));\n  }\n\n  _createClass(BitmapLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n      return {\n        vs: vs,\n        fs: fs,\n        modules: [projectModule, 'picking']\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      var positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0];\n      attributeManager.add({\n        positions: {\n          size: 3,\n          update: this.calculatePositions,\n          value: new Float32Array(positions)\n        },\n        positions64xyLow: {\n          size: 3,\n          update: this.calculatePositions64xyLow,\n          value: new Float32Array(positions)\n        }\n      });\n      this.setState({\n        numInstances: 1\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n\n      if (props.fp64 !== oldProps.fp64) {\n        var gl = this.context.gl;\n\n        if (this.state.model) {\n          this.state.model.delete();\n        }\n\n        this.setState({\n          model: this._getModel(gl)\n        });\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (props.image !== oldProps.image) {\n        this.loadTexture();\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (props.bounds !== oldProps.bounds) {\n        this.setState({\n          positions: this._getPositionsFromBounds(props.bounds)\n        });\n        attributeManager.invalidate('positions');\n        attributeManager.invalidate('positions64xyLow');\n      }\n    }\n  }, {\n    key: \"_getPositionsFromBounds\",\n    value: function _getPositionsFromBounds(bounds) {\n      var positions = new Array(12);\n\n      if (Number.isFinite(bounds[0])) {\n        positions[0] = bounds[0];\n        positions[1] = bounds[1];\n        positions[2] = 0;\n        positions[3] = bounds[0];\n        positions[4] = bounds[3];\n        positions[5] = 0;\n        positions[6] = bounds[2];\n        positions[7] = bounds[3];\n        positions[8] = 0;\n        positions[9] = bounds[2];\n        positions[10] = bounds[1];\n        positions[11] = 0;\n      } else {\n        for (var i = 0; i < bounds.length; i++) {\n          positions[i * 3 + 0] = bounds[i][0];\n          positions[i * 3 + 1] = bounds[i][1];\n          positions[i * 3 + 2] = bounds[i][2] || 0;\n        }\n      }\n\n      return positions;\n    }\n  }, {\n    key: \"_getModel\",\n    value: function _getModel(gl) {\n      if (!gl) {\n        return null;\n      }\n\n      return new Model(gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        shaderCache: this.context.shaderCache,\n        geometry: new Geometry({\n          drawMode: 6,\n          vertexCount: 4,\n          attributes: {\n            texCoords: new Float32Array([0, 0, 0, 1, 1, 1, 1, 0])\n          }\n        }),\n        isInstanced: false\n      }));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref2) {\n      var uniforms = _ref2.uniforms;\n      var _this$state = this.state,\n          bitmapTexture = _this$state.bitmapTexture,\n          model = _this$state.model;\n      var _this$props = this.props,\n          desaturate = _this$props.desaturate,\n          transparentColor = _this$props.transparentColor,\n          tintColor = _this$props.tintColor;\n\n      if (bitmapTexture && model) {\n        model.setUniforms(Object.assign({}, uniforms, {\n          bitmapTexture: bitmapTexture,\n          desaturate: desaturate,\n          transparentColor: transparentColor,\n          tintColor: tintColor\n        })).draw();\n      }\n    }\n  }, {\n    key: \"loadTexture\",\n    value: function loadTexture() {\n      var _this = this;\n\n      var gl = this.context.gl;\n      var image = this.props.image;\n\n      if (typeof image === 'string') {\n        loadImage(image).then(function (data) {\n          _this.setState({\n            bitmapTexture: new Texture2D(gl, {\n              data: data,\n              parameters: DEFAULT_TEXTURE_PARAMETERS\n            })\n          });\n        });\n      } else if (image instanceof Texture2D) {\n        this.setState({\n          bitmapTexture: image\n        });\n      } else if (image instanceof Image || image instanceof HTMLCanvasElement) {\n        this.setState({\n          bitmapTexture: new Texture2D(gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          })\n        });\n      }\n    }\n  }, {\n    key: \"calculatePositions\",\n    value: function calculatePositions(_ref3) {\n      var value = _ref3.value;\n      var positions = this.state.positions;\n      value.set(positions);\n    }\n  }, {\n    key: \"calculatePositions64xyLow\",\n    value: function calculatePositions64xyLow(attribute) {\n      var isFP64 = this.use64bitPositions();\n      attribute.constant = !isFP64;\n\n      if (!isFP64) {\n        attribute.value = new Float32Array(4);\n        return;\n      }\n\n      var value = attribute.value;\n      value.set(this.state.positions.map(fp64LowPart));\n    }\n  }]);\n\n  return BitmapLayer;\n}(Layer);\n\nexport { BitmapLayer as default };\nBitmapLayer.layerName = 'BitmapLayer';\nBitmapLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}