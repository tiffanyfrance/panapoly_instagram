{"ast":null,"code":"var arrayBuffer = null;\nexport function getScratchArrayBuffer(byteLength) {\n  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {\n    arrayBuffer = new ArrayBuffer(byteLength);\n  }\n\n  return arrayBuffer;\n}\nexport function getScratchArray(Type, length) {\n  var scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);\n  return new Type(scratchArrayBuffer, 0, length);\n}\nexport function fillArray(_ref) {\n  var target = _ref.target,\n      source = _ref.source,\n      _ref$start = _ref.start,\n      start = _ref$start === void 0 ? 0 : _ref$start,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 1 : _ref$count;\n  var length = source.length;\n  var total = count * length;\n  var copied = 0;\n\n  for (var i = start; copied < length; copied++) {\n    target[i++] = source[copied];\n  }\n\n  while (copied < total) {\n    if (copied < total - copied) {\n      target.copyWithin(start + copied, start, start + copied);\n      copied *= 2;\n    } else {\n      target.copyWithin(start + copied, start, start + total - copied);\n      copied = total;\n    }\n  }\n\n  return target;\n}","map":null,"metadata":{},"sourceType":"module"}