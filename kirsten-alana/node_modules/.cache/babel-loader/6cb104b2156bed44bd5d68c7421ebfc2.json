{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport OrthographicController from '../controllers/orthographic-controller';\nvar viewMatrix = new Matrix4().lookAt({\n  eye: [0, 0, 1]\n});\n\nfunction getProjectionMatrix(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      near = _ref.near,\n      far = _ref.far;\n  width = width || 1;\n  height = height || 1;\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: height / 2,\n    top: -height / 2,\n    near: near,\n    far: far\n  });\n}\n\nvar OrthographicViewport = function (_Viewport) {\n  _inherits(OrthographicViewport, _Viewport);\n\n  function OrthographicViewport(_ref2) {\n    var _this;\n\n    var id = _ref2.id,\n        x = _ref2.x,\n        y = _ref2.y,\n        width = _ref2.width,\n        height = _ref2.height,\n        _ref2$near = _ref2.near,\n        near = _ref2$near === void 0 ? 0.1 : _ref2$near,\n        _ref2$far = _ref2.far,\n        far = _ref2$far === void 0 ? 1000 : _ref2$far,\n        _ref2$zoom = _ref2.zoom,\n        zoom = _ref2$zoom === void 0 ? 0 : _ref2$zoom,\n        _ref2$target = _ref2.target,\n        target = _ref2$target === void 0 ? [0, 0, 0] : _ref2$target;\n\n    _classCallCheck(this, OrthographicViewport);\n\n    return _possibleConstructorReturn(_this, new Viewport({\n      id: id,\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      position: target,\n      viewMatrix: viewMatrix,\n      projectionMatrix: getProjectionMatrix({\n        width: width,\n        height: height,\n        near: near,\n        far: far\n      }),\n      zoom: zoom\n    }));\n  }\n\n  return OrthographicViewport;\n}(Viewport);\n\nvar OrthographicView = function (_View) {\n  _inherits(OrthographicView, _View);\n\n  function OrthographicView() {\n    _classCallCheck(this, OrthographicView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrthographicView).apply(this, arguments));\n  }\n\n  _createClass(OrthographicView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          width = _ref3.width,\n          height = _ref3.height,\n          viewState = _ref3.viewState;\n      return new OrthographicViewport(Object.assign({\n        id: this.id,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }, this.props, viewState));\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrthographicController,\n        ViewportType: OrthographicViewport\n      });\n    }\n  }]);\n\n  return OrthographicView;\n}(View);\n\nexport { OrthographicView as default };\nOrthographicView.displayName = 'OrthographicView';","map":null,"metadata":{},"sourceType":"module"}