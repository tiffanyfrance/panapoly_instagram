{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport assert from '../utils/assert';\nimport { deepEqual } from '../utils/deep-equal';\nimport View from '../views/view';\nimport Viewport from '../viewports/viewport';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\n\nvar ViewManager = function () {\n  function ViewManager() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, ViewManager);\n\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'Initial render';\n    this._needsUpdate = true;\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractiveStateChange: props.onInteractiveStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n\n  _createClass(ViewManager, [{\n    key: \"finalize\",\n    value: function finalize() {\n      for (var key in this.controllers) {\n        if (this.controllers[key]) {\n          this.controllers[key].finalize();\n        }\n      }\n\n      this.controllers = {};\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      return redraw;\n    }\n  }, {\n    key: \"setNeedsUpdate\",\n    value: function setNeedsUpdate(reason) {\n      this._needsUpdate = this._needsUpdate || reason;\n      this._needsRedraw = this._needsRedraw || reason;\n    }\n  }, {\n    key: \"updateViewStates\",\n    value: function updateViewStates() {\n      var animationProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if ('time' in animationProps) {\n        for (var viewId in this.controllers) {\n          var controller = this.controllers[viewId];\n\n          if (controller) {\n            controller.updateTransition(animationProps.time);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      if (rect) {\n        return this._viewports.filter(function (viewport) {\n          return viewport.containsPixel(rect);\n        });\n      }\n\n      return this._viewports;\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      var viewMap = {};\n      this.views.forEach(function (view) {\n        viewMap[view.id] = view;\n      });\n      return viewMap;\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(viewOrViewId) {\n      return typeof viewOrViewId === 'string' ? this.views.find(function (view) {\n        return view.id === viewOrViewId;\n      }) : viewOrViewId;\n    }\n  }, {\n    key: \"getViewState\",\n    value: function getViewState(viewId) {\n      var view = this.getView(viewId);\n      var viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n      return view ? view.filterViewState(viewState) : viewState;\n    }\n  }, {\n    key: \"getViewport\",\n    value: function getViewport(viewId) {\n      return this._viewportMap[viewId];\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        topLeft: true\n      };\n      var viewports = this.getViewports();\n\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n\n        if (viewport.contains(xyz, opts)) {\n          return viewport.project(xyz, opts);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz, opts) {\n      var viewports = this.getViewports();\n\n      for (var i = viewports.length - 1; i >= 0; --i) {\n        var viewport = viewports[i];\n\n        if (viewport.containsPixel(xyz, opts)) {\n          return viewport.unproject(xyz);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      if ('views' in props) {\n        this._setViews(props.views);\n      }\n\n      if ('viewState' in props) {\n        this._setViewState(props.viewState);\n      }\n\n      if ('width' in props || 'height' in props) {\n        this._setSize(props.width, props.height);\n      }\n\n      if (!this._isUpdating) {\n        this._update();\n      }\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._isUpdating = true;\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      if (this._needsUpdate) {\n        this._needsUpdate = false;\n\n        this._rebuildViewports();\n      }\n\n      this._isUpdating = false;\n    }\n  }, {\n    key: \"_setSize\",\n    value: function _setSize(width, height) {\n      assert(Number.isFinite(width) && Number.isFinite(height));\n\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n        this.setNeedsUpdate('Size changed');\n      }\n    }\n  }, {\n    key: \"_setViews\",\n    value: function _setViews(views) {\n      views = flatten(views, {\n        filter: Boolean\n      }).map(function (view) {\n        return view instanceof Viewport ? new View({\n          viewportInstance: view\n        }) : view;\n      });\n\n      var viewsChanged = this._diffViews(views, this.views);\n\n      if (viewsChanged) {\n        this.setNeedsUpdate('views changed');\n      }\n\n      this.views = views;\n    }\n  }, {\n    key: \"_setViewState\",\n    value: function _setViewState(viewState) {\n      if (viewState) {\n        var viewStateChanged = !deepEqual(viewState, this.viewState);\n\n        if (viewStateChanged) {\n          this.setNeedsUpdate('viewState changed');\n        }\n\n        this.viewState = viewState;\n      } else {\n        log.warn('setting null viewState')();\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(viewId, event) {\n      event.viewId = viewId;\n\n      this._eventCallbacks.onViewStateChange(event);\n    }\n  }, {\n    key: \"_createController\",\n    value: function _createController(props) {\n      var Controller = props.type;\n      var controller = new Controller(Object.assign({\n        eventManager: this._eventManager,\n        onViewStateChange: this._onViewStateChange.bind(this, props.id),\n        onStateChange: this._eventCallbacks.onInteractiveStateChange\n      }, props));\n      return controller;\n    }\n  }, {\n    key: \"_updateController\",\n    value: function _updateController(view, viewState, viewport, controller) {\n      if (view.controller) {\n        var controllerProps = Object.assign({}, view.controller, viewState, {\n          id: view.id,\n          x: viewport.x,\n          y: viewport.y,\n          width: viewport.width,\n          height: viewport.height\n        });\n\n        if (controller) {\n          controller.setProps(controllerProps);\n        } else {\n          controller = this._createController(controllerProps);\n        }\n\n        return controller;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_rebuildViewports\",\n    value: function _rebuildViewports() {\n      var _this = this;\n\n      var width = this.width,\n          height = this.height,\n          views = this.views;\n      var oldControllers = this.controllers;\n      this.controllers = {};\n      this._viewports = views.map(function (view) {\n        var viewState = _this.getViewState(view);\n\n        var viewport = view.makeViewport({\n          width: width,\n          height: height,\n          viewState: viewState\n        });\n        _this.controllers[view.id] = _this._updateController(view, viewState, viewport, oldControllers[view.id]);\n        return viewport;\n      });\n\n      for (var id in oldControllers) {\n        if (oldControllers[id] && !this.controllers[id]) {\n          oldControllers[id].finalize();\n        }\n      }\n\n      this._buildViewportMap();\n    }\n  }, {\n    key: \"_buildViewportMap\",\n    value: function _buildViewportMap() {\n      var _this2 = this;\n\n      this._viewportMap = {};\n\n      this._viewports.forEach(function (viewport) {\n        if (viewport.id) {\n          _this2._viewportMap[viewport.id] = _this2._viewportMap[viewport.id] || viewport;\n        }\n      });\n    }\n  }, {\n    key: \"_diffViews\",\n    value: function _diffViews(newViews, oldViews) {\n      if (newViews.length !== oldViews.length) {\n        return true;\n      }\n\n      return newViews.some(function (_, i) {\n        return !newViews[i].equals(oldViews[i]);\n      });\n    }\n  }]);\n\n  return ViewManager;\n}();\n\nexport { ViewManager as default };","map":null,"metadata":{},"sourceType":"module"}