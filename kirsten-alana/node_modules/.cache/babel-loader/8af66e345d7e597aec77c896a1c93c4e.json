{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { CompositeLayer, log, createIterable } from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, { DEFAULT_CHAR_SET, DEFAULT_FONT_FAMILY, DEFAULT_FONT_WEIGHT, DEFAULT_FONT_SIZE, DEFAULT_BUFFER, DEFAULT_RADIUS, DEFAULT_CUTOFF } from './font-atlas-manager';\nvar DEFAULT_FONT_SETTINGS = {\n  fontSize: DEFAULT_FONT_SIZE,\n  buffer: DEFAULT_BUFFER,\n  sdf: false,\n  radius: DEFAULT_RADIUS,\n  cutoff: DEFAULT_CUTOFF\n};\nvar TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n};\nvar ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n};\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar MISSING_CHAR_WIDTH = 32;\nvar FONT_SETTINGS_PROPS = ['fontSize', 'buffer', 'sdf', 'radius', 'cutoff'];\nvar defaultProps = {\n  fp64: false,\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  characterSet: DEFAULT_CHAR_SET,\n  fontFamily: DEFAULT_FONT_FAMILY,\n  fontWeight: DEFAULT_FONT_WEIGHT,\n  fontSettings: {},\n  getText: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.text;\n    }\n  },\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getSize: {\n    type: 'accessor',\n    value: 32\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getTextAnchor: {\n    type: 'accessor',\n    value: 'middle'\n  },\n  getAlignmentBaseline: {\n    type: 'accessor',\n    value: 'center'\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\n\nvar TextLayer = function (_CompositeLayer) {\n  _inherits(TextLayer, _CompositeLayer);\n\n  function TextLayer() {\n    _classCallCheck(this, TextLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextLayer).apply(this, arguments));\n  }\n\n  _createClass(TextLayer, [{\n    key: \"initializeState\",\n    value: function initializeState() {\n      this.state = {\n        fontAtlasManager: new FontAtlasManager(this.context.gl)\n      };\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref) {\n      var props = _ref.props,\n          oldProps = _ref.oldProps,\n          changeFlags = _ref.changeFlags;\n      var fontChanged = this.fontChanged(oldProps, props);\n\n      if (fontChanged) {\n        this.updateFontAtlas({\n          oldProps: oldProps,\n          props: props\n        });\n      }\n\n      if (changeFlags.dataChanged || fontChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText)) {\n        this.transformStringToLetters();\n      }\n    }\n  }, {\n    key: \"updateFontAtlas\",\n    value: function updateFontAtlas(_ref2) {\n      var oldProps = _ref2.oldProps,\n          props = _ref2.props;\n      var characterSet = props.characterSet,\n          fontSettings = props.fontSettings,\n          fontFamily = props.fontFamily,\n          fontWeight = props.fontWeight;\n      var fontAtlasManager = this.state.fontAtlasManager;\n      fontAtlasManager.setProps(Object.assign({}, DEFAULT_FONT_SETTINGS, fontSettings, {\n        characterSet: characterSet,\n        fontFamily: fontFamily,\n        fontWeight: fontWeight\n      }));\n      var scale = fontAtlasManager.scale,\n          texture = fontAtlasManager.texture,\n          mapping = fontAtlasManager.mapping;\n      this.setState({\n        scale: scale,\n        iconAtlas: texture,\n        iconMapping: mapping\n      });\n      this.setNeedsRedraw(true);\n    }\n  }, {\n    key: \"fontChanged\",\n    value: function fontChanged(oldProps, props) {\n      if (oldProps.fontFamily !== props.fontFamily || oldProps.characterSet !== props.characterSet || oldProps.fontWeight !== props.fontWeight) {\n        return true;\n      }\n\n      if (oldProps.fontSettings === props.fontSettings) {\n        return false;\n      }\n\n      var oldFontSettings = oldProps.fontSettings || {};\n      var fontSettings = props.fontSettings || {};\n      return FONT_SETTINGS_PROPS.some(function (prop) {\n        return oldFontSettings[prop] !== fontSettings[prop];\n      });\n    }\n  }, {\n    key: \"getPickingInfo\",\n    value: function getPickingInfo(_ref3) {\n      var info = _ref3.info;\n      return Object.assign(info, {\n        object: info.index >= 0 ? this.props.data[info.index] : null\n      });\n    }\n  }, {\n    key: \"transformStringToLetters\",\n    value: function transformStringToLetters() {\n      var _this$props = this.props,\n          data = _this$props.data,\n          getText = _this$props.getText;\n      var iconMapping = this.state.iconMapping;\n      var transformedData = [];\n\n      var _createIterable = createIterable(data),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var object = _step.value;\n          objectInfo.index++;\n          var text = getText(object, objectInfo);\n\n          if (text) {\n            var letters = Array.from(text);\n            var offsets = [0];\n            var offsetLeft = 0;\n            letters.forEach(function (letter, i) {\n              var datum = {\n                text: letter,\n                index: i,\n                offsets: offsets,\n                len: text.length,\n                object: object,\n                objectIndex: objectInfo.index\n              };\n              var frame = iconMapping[letter];\n\n              if (frame) {\n                offsetLeft += frame.width;\n              } else {\n                log.warn(\"Missing character: \".concat(letter))();\n                offsetLeft += MISSING_CHAR_WIDTH;\n              }\n\n              offsets.push(offsetLeft);\n              transformedData.push(datum);\n            });\n          }\n        };\n\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.setState({\n        data: transformedData\n      });\n    }\n  }, {\n    key: \"getLetterOffset\",\n    value: function getLetterOffset(datum) {\n      return datum.offsets[datum.index];\n    }\n  }, {\n    key: \"getTextLength\",\n    value: function getTextLength(datum) {\n      return datum.offsets[datum.offsets.length - 1];\n    }\n  }, {\n    key: \"_getAccessor\",\n    value: function _getAccessor(accessor) {\n      if (typeof accessor === 'function') {\n        return function (x) {\n          return accessor(x.object);\n        };\n      }\n\n      return accessor;\n    }\n  }, {\n    key: \"getAnchorXFromTextAnchor\",\n    value: function getAnchorXFromTextAnchor(getTextAnchor) {\n      return function (x) {\n        var textAnchor = typeof getTextAnchor === 'function' ? getTextAnchor(x.object) : getTextAnchor;\n\n        if (!TEXT_ANCHOR.hasOwnProperty(textAnchor)) {\n          throw new Error(\"Invalid text anchor parameter: \".concat(textAnchor));\n        }\n\n        return TEXT_ANCHOR[textAnchor];\n      };\n    }\n  }, {\n    key: \"getAnchorYFromAlignmentBaseline\",\n    value: function getAnchorYFromAlignmentBaseline(getAlignmentBaseline) {\n      return function (x) {\n        var alignmentBaseline = typeof getAlignmentBaseline === 'function' ? getAlignmentBaseline(x.object) : getAlignmentBaseline;\n\n        if (!ALIGNMENT_BASELINE.hasOwnProperty(alignmentBaseline)) {\n          throw new Error(\"Invalid alignment baseline parameter: \".concat(alignmentBaseline));\n        }\n\n        return ALIGNMENT_BASELINE[alignmentBaseline];\n      };\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      var _this = this;\n\n      var _this$state = this.state,\n          data = _this$state.data,\n          scale = _this$state.scale,\n          iconAtlas = _this$state.iconAtlas,\n          iconMapping = _this$state.iconMapping;\n      var _this$props2 = this.props,\n          _getPosition = _this$props2.getPosition,\n          getColor = _this$props2.getColor,\n          getSize = _this$props2.getSize,\n          getAngle = _this$props2.getAngle,\n          getTextAnchor = _this$props2.getTextAnchor,\n          getAlignmentBaseline = _this$props2.getAlignmentBaseline,\n          getPixelOffset = _this$props2.getPixelOffset,\n          fp64 = _this$props2.fp64,\n          billboard = _this$props2.billboard,\n          sdf = _this$props2.sdf,\n          sizeScale = _this$props2.sizeScale,\n          sizeUnits = _this$props2.sizeUnits,\n          sizeMinPixels = _this$props2.sizeMinPixels,\n          sizeMaxPixels = _this$props2.sizeMaxPixels,\n          transitions = _this$props2.transitions,\n          updateTriggers = _this$props2.updateTriggers;\n      var SubLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n      return new SubLayerClass({\n        sdf: sdf,\n        iconAtlas: iconAtlas,\n        iconMapping: iconMapping,\n        getPosition: function getPosition(d) {\n          return _getPosition(d.object);\n        },\n        getColor: this._getAccessor(getColor),\n        getSize: this._getAccessor(getSize),\n        getAngle: this._getAccessor(getAngle),\n        getAnchorX: this.getAnchorXFromTextAnchor(getTextAnchor),\n        getAnchorY: this.getAnchorYFromAlignmentBaseline(getAlignmentBaseline),\n        getPixelOffset: this._getAccessor(getPixelOffset),\n        fp64: fp64,\n        billboard: billboard,\n        sizeScale: sizeScale * scale,\n        sizeUnits: sizeUnits,\n        sizeMinPixels: sizeMinPixels * scale,\n        sizeMaxPixels: sizeMaxPixels * scale,\n        transitions: transitions && {\n          getPosition: transitions.getPosition,\n          getAngle: transitions.getAngle,\n          getColor: transitions.getColor,\n          getSize: transitions.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset\n        }\n      }, this.getSubLayerProps({\n        id: 'characters',\n        updateTriggers: {\n          getPosition: updateTriggers.getPosition,\n          getAngle: updateTriggers.getAngle,\n          getColor: updateTriggers.getColor,\n          getSize: updateTriggers.getSize,\n          getPixelOffset: updateTriggers.getPixelOffset,\n          getAnchorX: updateTriggers.getTextAnchor,\n          getAnchorY: updateTriggers.getAlignmentBaseline\n        }\n      }), {\n        data: data,\n        getIcon: function getIcon(d) {\n          return d.text;\n        },\n        getShiftInQueue: function getShiftInQueue(d) {\n          return _this.getLetterOffset(d);\n        },\n        getLengthOfQueue: function getLengthOfQueue(d) {\n          return _this.getTextLength(d);\n        }\n      });\n    }\n  }]);\n\n  return TextLayer;\n}(CompositeLayer);\n\nexport { TextLayer as default };\nTextLayer.layerName = 'TextLayer';\nTextLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}