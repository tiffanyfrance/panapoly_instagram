{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js\";\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { LineLayer } from '@deck.gl/layers';\nimport { StaticMap } from 'react-map-gl';\nimport { isWebGL2 } from '@luma.gl/core'; // Set your mapbox access token here\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow'; // Source data CSV\n\nconst DATA_URL = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n// Initial viewport settings\n\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\nconst colorRange = [[255, 255, 178, 25], [254, 217, 118, 85], [254, 178, 76, 127], [253, 141, 60, 170], [240, 59, 32, 212], [189, 0, 38, 255]]; // Data to be used by the LineLayer\n\nconst data = [{\n  sourcePosition: [-122.41669, 37.7853],\n  targetPosition: [-122.41669, 37.781]\n}];\n\nclass App extends React.Component {\n  _renderLayers() {\n    const _this$props = this.props,\n          _this$props$data = _this$props.data,\n          data = _this$props$data === void 0 ? DATA_URL : _this$props$data,\n          _this$props$cellSize = _this$props.cellSize,\n          cellSize = _this$props$cellSize === void 0 ? 20 : _this$props$cellSize,\n          _this$props$gpuAggreg = _this$props.gpuAggregation,\n          gpuAggregation = _this$props$gpuAggreg === void 0 ? true : _this$props$gpuAggreg,\n          _this$props$aggregati = _this$props.aggregation,\n          aggregation = _this$props$aggregati === void 0 ? 'Sum' : _this$props$aggregati;\n    return [new ScreenGridLayer({\n      id: 'grid',\n      data,\n      getPosition: d => [d[0], d[1]],\n      getWeight: d => d[2],\n      cellSizePixels: cellSize,\n      colorRange,\n      gpuAggregation,\n      aggregation\n    })];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          viewState = _this$props2.viewState,\n          _this$props2$controll = _this$props2.controller,\n          controller = _this$props2$controll === void 0 ? true : _this$props2$controll,\n          _this$props2$baseMap = _this$props2.baseMap,\n          baseMap = _this$props2$baseMap === void 0 ? true : _this$props2$baseMap;\n    return React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      onWebGLInitialized: this._onInitialized.bind(this),\n      viewState: viewState,\n      controller: controller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, baseMap && React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js"],"names":["React","DeckGL","LineLayer","StaticMap","isWebGL2","MAPBOX_ACCESS_TOKEN","DATA_URL","initialViewState","longitude","latitude","zoom","pitch","bearing","colorRange","data","sourcePosition","targetPosition","App","Component","_renderLayers","props","cellSize","gpuAggregation","aggregation","ScreenGridLayer","id","getPosition","d","getWeight","cellSizePixels","_onInitialized","gl","console","warn","disableGPUAggregation","render","viewState","controller","baseMap","INITIAL_VIEW_STATE","bind","MAPBOX_TOKEN"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {LineLayer} from '@deck.gl/layers';\nimport {StaticMap} from 'react-map-gl';\nimport {isWebGL2} from '@luma.gl/core';\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow';\n\n// Source data CSV\nconst DATA_URL =\n  'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\n\n// Initial viewport settings\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\n\nconst colorRange = [\n  [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n];\n\n// Data to be used by the LineLayer\nconst data = [{sourcePosition: [-122.41669, 37.7853], targetPosition: [-122.41669, 37.781]}];\n\nclass App extends React.Component {\n  _renderLayers() {\n    const {data = DATA_URL, cellSize = 20, gpuAggregation = true, aggregation = 'Sum'} = this.props;\n\n    return [\n      new ScreenGridLayer({\n        id: 'grid',\n        data,\n        getPosition: d => [d[0], d[1]],\n        getWeight: d => d[2],\n        cellSizePixels: cellSize,\n        colorRange,\n        gpuAggregation,\n        aggregation\n      })\n    ];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const {viewState, controller = true, baseMap = true} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        initialViewState={INITIAL_VIEW_STATE}\n        onWebGLInitialized={this._onInitialized.bind(this)}\n        viewState={viewState}\n        controller={controller}\n      >\n        {baseMap && (\n          <StaticMap\n            reuseMaps\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}