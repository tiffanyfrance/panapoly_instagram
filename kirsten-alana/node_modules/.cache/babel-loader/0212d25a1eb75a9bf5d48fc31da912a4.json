{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js\";\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { ScreenGridLayer } from 'deck.gl';\nimport { StaticMap } from 'react-map-gl';\nimport { isWebGL2 } from '@luma.gl/core';\nimport 'mapbox-gl/dist/mapbox-gl.css'; // Set your mapbox access token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow'; // Source data CSV\n// const DATA_URL =\n//   'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nconst DATA_URL = 'https://raw.githubusercontent.com/tiffylou/panoply/master/data.json'; // eslint-disable-line\n// Initial viewport settings\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.859,\n  latitude: 40.4599,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\nconst colorRange = [// [255, 255, 178, 25],\n[254, 217, 118, 85], [254, 178, 76, 127], [253, 141, 60, 170], [240, 59, 32, 212], [189, 0, 38, 255]];\n\nclass App extends React.Component {\n  _renderLayers() {\n    const _this$props = this.props,\n          _this$props$data = _this$props.data,\n          data = _this$props$data === void 0 ? DATA_URL : _this$props$data,\n          _this$props$cellSize = _this$props.cellSize,\n          cellSize = _this$props$cellSize === void 0 ? 8 : _this$props$cellSize,\n          _this$props$gpuAggreg = _this$props.gpuAggregation,\n          gpuAggregation = _this$props$gpuAggreg === void 0 ? true : _this$props$gpuAggreg,\n          _this$props$aggregati = _this$props.aggregation,\n          aggregation = _this$props$aggregati === void 0 ? 'Sum' : _this$props$aggregati;\n    return [new ScreenGridLayer({\n      id: 'grid',\n      data,\n      getPosition: d => [d.longitude, d.latitude],\n      getWeight: d => d.likes_count,\n      cellSizePixels: cellSize,\n      colorRange,\n      // gpuAggregation,\n      // aggregation,\n      // Enable picking\n      pickable: true,\n      // Update tooltip\n      // onHover: d => setTooltip(d, d.x, d.y)\n      onHover: info => setTooltip(info, info.x, info.y)\n    })];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          viewState = _this$props2.viewState,\n          _this$props2$controll = _this$props2.controller,\n          controller = _this$props2$controll === void 0 ? true : _this$props2$controll,\n          _this$props2$baseMap = _this$props2.baseMap,\n          baseMap = _this$props2$baseMap === void 0 ? true : _this$props2$baseMap;\n    return React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      onWebGLInitialized: this._onInitialized.bind(this),\n      viewState: viewState,\n      controller: controller,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, baseMap && React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction setTooltip(object, x, y) {\n  const el = document.getElementById('tooltip');\n  console.log(object);\n\n  if (object) {\n    console.log(\"0\", object.object);\n    if (object.object) console.log(\"a\", object.object.name);\n    el.innerHTML = object.name;\n    el.style.display = 'block';\n    el.style.left = x + 'px';\n    el.style.top = y + 'px';\n  } else {\n    el.style.display = 'none';\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tiffanyfrance/Projects/panoply/kirsten-alana/src/App.js"],"names":["React","DeckGL","ScreenGridLayer","StaticMap","isWebGL2","MAPBOX_TOKEN","DATA_URL","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","colorRange","App","Component","_renderLayers","props","data","cellSize","gpuAggregation","aggregation","id","getPosition","d","getWeight","likes_count","cellSizePixels","pickable","onHover","info","setTooltip","x","y","_onInitialized","gl","console","warn","disableGPUAggregation","render","viewState","controller","baseMap","bind","object","el","document","getElementById","log","name","innerHTML","style","display","left","top"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAAQC,eAAR,QAA8B,SAA9B;AACA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,QAAR,QAAuB,eAAvB;AACA,OAAO,8BAAP,C,CAEA;;AACA,MAAMC,YAAY,GAAG,4FAArB,C,CAEA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAG,qEAAjB,C,CAAwF;AAExF;;AACA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,CAAC,MADa;AAEzBC,EAAAA,QAAQ,EAAE,OAFe;AAGzBC,EAAAA,IAAI,EAAE,CAHmB;AAIzBC,EAAAA,KAAK,EAAE,CAJkB;AAKzBC,EAAAA,OAAO,EAAE;AALgB,CAA3B;AAQA,MAAMC,UAAU,GAAG,CACjB;AACA,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,EAAhB,CAFiB,EAGjB,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,EAAe,GAAf,CAHiB,EAIjB,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,EAAe,GAAf,CAJiB,EAKjB,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,GAAd,CALiB,EAMjB,CAAC,GAAD,EAAM,CAAN,EAAS,EAAT,EAAa,GAAb,CANiB,CAAnB;;AASA,MAAMC,GAAN,SAAkBd,KAAK,CAACe,SAAxB,CAAkC;AAChCC,EAAAA,aAAa,GAAG;AAAA,wBACsE,KAAKC,KAD3E;AAAA,yCACPC,IADO;AAAA,UACPA,IADO,iCACAZ,QADA;AAAA,6CACUa,QADV;AAAA,UACUA,QADV,qCACqB,CADrB;AAAA,8CACwBC,cADxB;AAAA,UACwBA,cADxB,sCACyC,IADzC;AAAA,8CAC+CC,WAD/C;AAAA,UAC+CA,WAD/C,sCAC6D,KAD7D;AAGd,WAAO,CACL,IAAInB,eAAJ,CAAoB;AAClBoB,MAAAA,EAAE,EAAE,MADc;AAElBJ,MAAAA,IAFkB;AAGlBK,MAAAA,WAAW,EAAEC,CAAC,IAAI,CAACA,CAAC,CAAChB,SAAH,EAAcgB,CAAC,CAACf,QAAhB,CAHA;AAIlBgB,MAAAA,SAAS,EAAED,CAAC,IAAIA,CAAC,CAACE,WAJA;AAKlBC,MAAAA,cAAc,EAAER,QALE;AAMlBN,MAAAA,UANkB;AAOlB;AACA;AACA;AACAe,MAAAA,QAAQ,EAAE,IAVQ;AAWlB;AACA;AACAC,MAAAA,OAAO,EAAEC,IAAI,IAAIC,UAAU,CAACD,IAAD,EAAOA,IAAI,CAACE,CAAZ,EAAeF,IAAI,CAACG,CAApB;AAbT,KAApB,CADK,CAAP;AAiBD;;AAEDC,EAAAA,cAAc,CAACC,EAAD,EAAK;AACjB,QAAI,CAAC/B,QAAQ,CAAC+B,EAAD,CAAb,EAAmB;AACjBC,MAAAA,OAAO,CAACC,IAAR,CAAa,kCAAb,EADiB,CACiC;;AAClD,UAAI,KAAKpB,KAAL,CAAWqB,qBAAf,EAAsC;AACpC,aAAKrB,KAAL,CAAWqB,qBAAX;AACD;AACF;AACF;;AAEDC,EAAAA,MAAM,GAAG;AAAA,yBACgD,KAAKtB,KADrD;AAAA,UACAuB,SADA,gBACAA,SADA;AAAA,+CACWC,UADX;AAAA,UACWA,UADX,sCACwB,IADxB;AAAA,8CAC8BC,OAD9B;AAAA,UAC8BA,OAD9B,qCACwC,IADxC;AAGP,WACE,oBAAC,MAAD;AACE,MAAA,MAAM,EAAE,KAAK1B,aAAL,EADV;AAEE,MAAA,gBAAgB,EAAET,kBAFpB;AAGE,MAAA,kBAAkB,EAAE,KAAK2B,cAAL,CAAoBS,IAApB,CAAyB,IAAzB,CAHtB;AAIE,MAAA,SAAS,EAAEH,SAJb;AAKE,MAAA,UAAU,EAAEC,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGC,OAAO,IACN,oBAAC,SAAD;AACE,MAAA,SAAS,MADX;AAEE,MAAA,QAAQ,EAAC,gCAFX;AAGE,MAAA,mBAAmB,EAAE,IAHvB;AAIE,MAAA,oBAAoB,EAAErC,YAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADF;AAkBD;;AArD+B;;AAwDlC,SAAS0B,UAAT,CAAoBa,MAApB,EAA4BZ,CAA5B,EAA+BC,CAA/B,EAAkC;AAChC,QAAMY,EAAE,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAX;AACAX,EAAAA,OAAO,CAACY,GAAR,CAAYJ,MAAZ;;AACA,MAAIA,MAAJ,EAAY;AACVR,IAAAA,OAAO,CAACY,GAAR,CAAY,GAAZ,EAAiBJ,MAAM,CAACA,MAAxB;AACA,QAAGA,MAAM,CAACA,MAAV,EACER,OAAO,CAACY,GAAR,CAAY,GAAZ,EAAiBJ,MAAM,CAACA,MAAP,CAAcK,IAA/B;AACFJ,IAAAA,EAAE,CAACK,SAAH,GAAeN,MAAM,CAACK,IAAtB;AACAJ,IAAAA,EAAE,CAACM,KAAH,CAASC,OAAT,GAAmB,OAAnB;AACAP,IAAAA,EAAE,CAACM,KAAH,CAASE,IAAT,GAAgBrB,CAAC,GAAG,IAApB;AACAa,IAAAA,EAAE,CAACM,KAAH,CAASG,GAAT,GAAerB,CAAC,GAAG,IAAnB;AACD,GARD,MAQO;AACLY,IAAAA,EAAE,CAACM,KAAH,CAASC,OAAT,GAAmB,MAAnB;AACD;AACF;;AAGD,eAAetC,GAAf","sourcesContent":["import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {ScreenGridLayer} from 'deck.gl';\nimport {StaticMap} from 'react-map-gl';\nimport {isWebGL2} from '@luma.gl/core';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// Set your mapbox access token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoidGlmZnlsb3UiLCJhIjoiY2p2MWRncG5oMXQ4azRkcXhkb2VoZmlpeCJ9.aMZp7-Gw5-goacW4MOnmow';\n\n// Source data CSV\n// const DATA_URL =\n//   'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/screen-grid/uber-pickup-locations.json'; // eslint-disable-line\n\nconst DATA_URL = 'https://raw.githubusercontent.com/tiffylou/panoply/master/data.json'; // eslint-disable-line\n\n// Initial viewport settings\nconst INITIAL_VIEW_STATE = {\n  longitude: -74.859,\n  latitude: 40.4599,\n  zoom: 5,\n  pitch: 0,\n  bearing: 0\n};\n\nconst colorRange = [\n  // [255, 255, 178, 25],\n  [254, 217, 118, 85],\n  [254, 178, 76, 127],\n  [253, 141, 60, 170],\n  [240, 59, 32, 212],\n  [189, 0, 38, 255]\n];\n\nclass App extends React.Component {\n  _renderLayers() {\n    const {data = DATA_URL, cellSize = 8, gpuAggregation = true, aggregation = 'Sum'} = this.props;\n    \n    return [\n      new ScreenGridLayer({\n        id: 'grid',\n        data,\n        getPosition: d => [d.longitude, d.latitude],\n        getWeight: d => d.likes_count,\n        cellSizePixels: cellSize,\n        colorRange,\n        // gpuAggregation,\n        // aggregation,\n        // Enable picking\n        pickable: true,\n        // Update tooltip\n        // onHover: d => setTooltip(d, d.x, d.y)\n        onHover: info => setTooltip(info, info.x, info.y)\n      })\n    ];\n  }\n\n  _onInitialized(gl) {\n    if (!isWebGL2(gl)) {\n      console.warn('GPU aggregation is not supported'); // eslint-disable-line\n      if (this.props.disableGPUAggregation) {\n        this.props.disableGPUAggregation();\n      }\n    }\n  }\n\n  render() {\n    const {viewState, controller = true, baseMap = true} = this.props;\n\n    return (\n      <DeckGL\n        layers={this._renderLayers()}\n        initialViewState={INITIAL_VIEW_STATE}\n        onWebGLInitialized={this._onInitialized.bind(this)}\n        viewState={viewState}\n        controller={controller}\n      >\n        {baseMap && (\n          <StaticMap\n            reuseMaps\n            mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n            preventStyleDiffing={true}\n            mapboxApiAccessToken={MAPBOX_TOKEN}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n\nfunction setTooltip(object, x, y) {\n  const el = document.getElementById('tooltip');\n  console.log(object)\n  if (object) {\n    console.log(\"0\", object.object)\n    if(object.object) \n      console.log(\"a\", object.object.name)\n    el.innerHTML = object.name;\n    el.style.display = 'block';\n    el.style.left = x + 'px';\n    el.style.top = y + 'px';\n  } else {\n    el.style.display = 'none';\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}