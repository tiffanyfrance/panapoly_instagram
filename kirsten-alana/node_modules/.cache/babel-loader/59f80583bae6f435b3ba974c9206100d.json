{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { COORDINATE_SYSTEM } from '../../lib/constants';\nimport { LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD } from './viewport-uniforms';\nimport * as vec4 from 'gl-matrix/vec4';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { getDistanceScales, addMetersToLngLat } from 'viewport-mercator-project';\n\nfunction lngLatZToWorldPosition(lngLatZ, viewport) {\n  var offsetMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      _lngLatZ$ = _lngLatZ[2],\n      z = _lngLatZ$ === void 0 ? 0 : _lngLatZ$;\n\n  var _viewport$projectFlat = viewport.projectFlat(lngLatZ),\n      _viewport$projectFlat2 = _slicedToArray(_viewport$projectFlat, 2),\n      X = _viewport$projectFlat2[0],\n      Y = _viewport$projectFlat2[1];\n\n  var distanceScales = offsetMode ? getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    scale: viewport.scale\n  }) : viewport.getDistanceScales();\n  var Z = z * distanceScales.pixelsPerMeter[2];\n  return [X, Y, Z];\n}\n\nfunction normalizeParameters(opts) {\n  var normalizedParams = Object.assign({}, opts);\n  var viewport = opts.viewport,\n      coordinateSystem = opts.coordinateSystem,\n      coordinateOrigin = opts.coordinateOrigin,\n      fromCoordinateSystem = opts.fromCoordinateSystem,\n      fromCoordinateOrigin = opts.fromCoordinateOrigin;\n\n  if (fromCoordinateSystem === undefined) {\n    normalizedParams.fromCoordinateSystem = coordinateSystem;\n  }\n\n  if (fromCoordinateOrigin === undefined) {\n    normalizedParams.fromCoordinateOrigin = coordinateOrigin;\n  }\n\n  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.zoom >= LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD) {\n    normalizedParams.coordinateSystem = COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n    normalizedParams.coordinateOrigin = [Math.fround(viewport.longitude), Math.fround(viewport.latitude)];\n  }\n\n  return normalizedParams;\n}\n\nexport function getWorldPosition(position, _ref) {\n  var viewport = _ref.viewport,\n      modelMatrix = _ref.modelMatrix,\n      coordinateSystem = _ref.coordinateSystem,\n      coordinateOrigin = _ref.coordinateOrigin,\n      offsetMode = _ref.offsetMode;\n\n  var _position = _slicedToArray(position, 3),\n      x = _position[0],\n      y = _position[1],\n      z = _position[2];\n\n  if (modelMatrix) {\n    var _vec4$transformMat = vec4.transformMat4([], [x, y, z, 1.0], modelMatrix);\n\n    var _vec4$transformMat2 = _slicedToArray(_vec4$transformMat, 3);\n\n    x = _vec4$transformMat2[0];\n    y = _vec4$transformMat2[1];\n    z = _vec4$transformMat2[2];\n  }\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      return lngLatZToWorldPosition([x, y, z], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return lngLatZToWorldPosition([x + coordinateOrigin[0], y + coordinateOrigin[1], z + (coordinateOrigin[2] || 0)], viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x, y, z]), viewport, offsetMode);\n\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return viewport.projectPosition([x, y, z]);\n  }\n}\nexport function projectPosition(position, params) {\n  var _normalizeParameters = normalizeParameters(params),\n      viewport = _normalizeParameters.viewport,\n      coordinateSystem = _normalizeParameters.coordinateSystem,\n      coordinateOrigin = _normalizeParameters.coordinateOrigin,\n      modelMatrix = _normalizeParameters.modelMatrix,\n      fromCoordinateSystem = _normalizeParameters.fromCoordinateSystem,\n      fromCoordinateOrigin = _normalizeParameters.fromCoordinateOrigin;\n\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n      {\n        var worldPosition = getWorldPosition(position, {\n          viewport: viewport,\n          modelMatrix: modelMatrix,\n          coordinateSystem: fromCoordinateSystem,\n          coordinateOrigin: fromCoordinateOrigin,\n          offsetMode: true\n        });\n        var originWorld = lngLatZToWorldPosition(coordinateOrigin, viewport, true);\n        vec3.sub(worldPosition, worldPosition, originWorld);\n        return worldPosition;\n      }\n\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n    case COORDINATE_SYSTEM.IDENTITY:\n    default:\n      return getWorldPosition(position, {\n        viewport: viewport,\n        modelMatrix: modelMatrix,\n        coordinateSystem: fromCoordinateSystem,\n        coordinateOrigin: fromCoordinateOrigin,\n        offsetMode: false\n      });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}