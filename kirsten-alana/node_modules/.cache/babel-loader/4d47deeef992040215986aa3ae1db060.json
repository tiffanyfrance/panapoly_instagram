{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { clamp, Vector2 } from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { TRANSITION_EVENTS } from './transition-manager';\nvar MOVEMENT_SPEED = 50;\nvar DEFAULT_STATE = {\n  orbitAxis: 'Z',\n  rotationX: 0,\n  rotationOrbit: 0,\n  fovy: 50,\n  zoom: 0,\n  target: [0, 0, 0],\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\nvar LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: function transitionEasing(t) {\n    return t;\n  },\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\nvar zoom2Scale = function zoom2Scale(zoom) {\n  return Math.pow(2, zoom);\n};\n\nexport var OrbitState = function (_ViewState) {\n  _inherits(OrbitState, _ViewState);\n\n  function OrbitState(_ref) {\n    var _this;\n\n    var ViewportType = _ref.ViewportType,\n        width = _ref.width,\n        height = _ref.height,\n        _ref$orbitAxis = _ref.orbitAxis,\n        orbitAxis = _ref$orbitAxis === void 0 ? DEFAULT_STATE.orbitAxis : _ref$orbitAxis,\n        _ref$rotationX = _ref.rotationX,\n        rotationX = _ref$rotationX === void 0 ? DEFAULT_STATE.rotationX : _ref$rotationX,\n        _ref$rotationOrbit = _ref.rotationOrbit,\n        rotationOrbit = _ref$rotationOrbit === void 0 ? DEFAULT_STATE.rotationOrbit : _ref$rotationOrbit,\n        _ref$target = _ref.target,\n        target = _ref$target === void 0 ? DEFAULT_STATE.target : _ref$target,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? DEFAULT_STATE.zoom : _ref$zoom,\n        _ref$fovy = _ref.fovy,\n        fovy = _ref$fovy === void 0 ? DEFAULT_STATE.fovy : _ref$fovy,\n        _ref$minZoom = _ref.minZoom,\n        minZoom = _ref$minZoom === void 0 ? DEFAULT_STATE.minZoom : _ref$minZoom,\n        _ref$maxZoom = _ref.maxZoom,\n        maxZoom = _ref$maxZoom === void 0 ? DEFAULT_STATE.maxZoom : _ref$maxZoom,\n        startPanPosition = _ref.startPanPosition,\n        startTarget = _ref.startTarget,\n        startRotationX = _ref.startRotationX,\n        startRotationOrbit = _ref.startRotationOrbit,\n        startZoomPosition = _ref.startZoomPosition,\n        startZoom = _ref.startZoom;\n\n    _classCallCheck(this, OrbitState);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrbitState).call(this, {\n      width: width,\n      height: height,\n      orbitAxis: orbitAxis,\n      rotationX: rotationX,\n      rotationOrbit: rotationOrbit,\n      target: target,\n      fovy: fovy,\n      zoom: zoom,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    }));\n    _this._interactiveState = {\n      startPanPosition: startPanPosition,\n      startTarget: startTarget,\n      startRotationX: startRotationX,\n      startRotationOrbit: startRotationOrbit,\n      startZoomPosition: startZoomPosition,\n      startZoom: startZoom\n    };\n    _this.ViewportType = ViewportType;\n    return _this;\n  }\n\n  _createClass(OrbitState, [{\n    key: \"getViewportProps\",\n    value: function getViewportProps() {\n      return this._viewportProps;\n    }\n  }, {\n    key: \"getInteractiveState\",\n    value: function getInteractiveState() {\n      return this._interactiveState;\n    }\n  }, {\n    key: \"panStart\",\n    value: function panStart(_ref2) {\n      var pos = _ref2.pos;\n      var target = this._viewportProps.target;\n      return this._getUpdatedState({\n        startPanPosition: pos,\n        startTarget: target\n      });\n    }\n  }, {\n    key: \"pan\",\n    value: function pan(_ref3) {\n      var pos = _ref3.pos,\n          startPos = _ref3.startPos;\n      var _this$_interactiveSta = this._interactiveState,\n          startPanPosition = _this$_interactiveSta.startPanPosition,\n          startTarget = _this$_interactiveSta.startTarget;\n      var delta = new Vector2(pos).subtract(startPanPosition);\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          pixelOffset: delta\n        })\n      });\n    }\n  }, {\n    key: \"panEnd\",\n    value: function panEnd() {\n      return this._getUpdatedState({\n        startPanPosition: null,\n        startTarget: null\n      });\n    }\n  }, {\n    key: \"rotateStart\",\n    value: function rotateStart(_ref4) {\n      var pos = _ref4.pos;\n      return this._getUpdatedState({\n        startRotationX: this._viewportProps.rotationX,\n        startRotationOrbit: this._viewportProps.rotationOrbit\n      });\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(_ref5) {\n      var deltaScaleX = _ref5.deltaScaleX,\n          deltaScaleY = _ref5.deltaScaleY;\n      var _this$_interactiveSta2 = this._interactiveState,\n          startRotationX = _this$_interactiveSta2.startRotationX,\n          startRotationOrbit = _this$_interactiveSta2.startRotationOrbit;\n\n      if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n        return this;\n      }\n\n      var newRotationX = clamp(startRotationX + deltaScaleY * 180, -89.999, 89.999);\n      var newRotationOrbit = (startRotationOrbit + deltaScaleX * 180) % 360;\n      return this._getUpdatedState({\n        rotationX: newRotationX,\n        rotationOrbit: newRotationOrbit,\n        isRotating: true\n      });\n    }\n  }, {\n    key: \"rotateEnd\",\n    value: function rotateEnd() {\n      return this._getUpdatedState({\n        startRotationX: null,\n        startRotationOrbit: null\n      });\n    }\n  }, {\n    key: \"shortestPathFrom\",\n    value: function shortestPathFrom(viewState) {\n      var props = Object.assign({}, this._viewportProps);\n      return props;\n    }\n  }, {\n    key: \"zoomStart\",\n    value: function zoomStart(_ref6) {\n      var pos = _ref6.pos;\n      return this._getUpdatedState({\n        startZoomPosition: pos,\n        startTarget: this._viewportProps.target,\n        startZoom: this._viewportProps.zoom\n      });\n    }\n  }, {\n    key: \"zoom\",\n    value: function zoom(_ref7) {\n      var pos = _ref7.pos,\n          startPos = _ref7.startPos,\n          scale = _ref7.scale;\n      var _this$_viewportProps = this._viewportProps,\n          zoom = _this$_viewportProps.zoom,\n          width = _this$_viewportProps.width,\n          height = _this$_viewportProps.height,\n          target = _this$_viewportProps.target;\n      var _this$_interactiveSta3 = this._interactiveState,\n          startZoom = _this$_interactiveSta3.startZoom,\n          startZoomPosition = _this$_interactiveSta3.startZoomPosition,\n          startTarget = _this$_interactiveSta3.startTarget;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = zoom;\n        startTarget = target;\n        startZoomPosition = startPos || pos;\n      }\n\n      var newZoom = this._calculateNewZoom({\n        scale: scale,\n        startZoom: startZoom\n      });\n\n      var startScale = zoom2Scale(startZoom);\n      var newScale = zoom2Scale(newZoom);\n      var dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n      var dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n      return this._getUpdatedState({\n        zoom: newZoom,\n        target: this._calculateNewTarget({\n          startTarget: startTarget,\n          zoom: newZoom,\n          pixelOffset: [dX, dY]\n        })\n      });\n    }\n  }, {\n    key: \"zoomEnd\",\n    value: function zoomEnd() {\n      return this._getUpdatedState({\n        startZoomPosition: null,\n        startTarget: null,\n        startZoom: null\n      });\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 2\n        })\n      });\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      return this._getUpdatedState({\n        zoom: this._calculateNewZoom({\n          scale: 0.5\n        })\n      });\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft() {\n      var pixelOffset = [-MOVEMENT_SPEED, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight() {\n      var pixelOffset = [MOVEMENT_SPEED, 0];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp() {\n      var pixelOffset = [0, -MOVEMENT_SPEED];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown() {\n      var pixelOffset = [0, MOVEMENT_SPEED];\n      return this._getUpdatedState({\n        target: this._calculateNewTarget({\n          pixelOffset: pixelOffset\n        })\n      });\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit - 15\n      });\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      return this._getUpdatedState({\n        rotationOrbit: this._viewportProps.rotationOrbit + 15\n      });\n    }\n  }, {\n    key: \"rotateUp\",\n    value: function rotateUp() {\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX - 10\n      });\n    }\n  }, {\n    key: \"rotateDown\",\n    value: function rotateDown() {\n      return this._getUpdatedState({\n        rotationX: this._viewportProps.rotationX + 10\n      });\n    }\n  }, {\n    key: \"_calculateNewZoom\",\n    value: function _calculateNewZoom(_ref8) {\n      var scale = _ref8.scale,\n          startZoom = _ref8.startZoom;\n      var _this$_viewportProps2 = this._viewportProps,\n          maxZoom = _this$_viewportProps2.maxZoom,\n          minZoom = _this$_viewportProps2.minZoom;\n\n      if (!Number.isFinite(startZoom)) {\n        startZoom = this._viewportProps.zoom;\n      }\n\n      var zoom = startZoom + Math.log2(scale);\n      return clamp(zoom, minZoom, maxZoom);\n    }\n  }, {\n    key: \"_calculateNewTarget\",\n    value: function _calculateNewTarget(_ref9) {\n      var startTarget = _ref9.startTarget,\n          zoom = _ref9.zoom,\n          pixelOffset = _ref9.pixelOffset;\n      var viewportProps = Object.assign({}, this._viewportProps);\n\n      if (Number.isFinite(zoom)) {\n        viewportProps.zoom = zoom;\n      }\n\n      if (startTarget) {\n        viewportProps.target = startTarget;\n      }\n\n      var viewport = new this.ViewportType(viewportProps);\n      var center = viewport.project(viewportProps.target);\n      return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n    }\n  }, {\n    key: \"_getUpdatedState\",\n    value: function _getUpdatedState(newProps) {\n      return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n    }\n  }, {\n    key: \"_applyConstraints\",\n    value: function _applyConstraints(props) {\n      var maxZoom = props.maxZoom,\n          minZoom = props.minZoom,\n          zoom = props.zoom;\n      props.zoom = zoom > maxZoom ? maxZoom : zoom;\n      props.zoom = zoom < minZoom ? minZoom : zoom;\n      return props;\n    }\n  }]);\n\n  return OrbitState;\n}(ViewState);\n\nvar OrbitController = function (_Controller) {\n  _inherits(OrbitController, _Controller);\n\n  function OrbitController(props) {\n    _classCallCheck(this, OrbitController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitController).call(this, OrbitState, props));\n  }\n\n  _createClass(OrbitController, [{\n    key: \"_getTransitionProps\",\n    value: function _getTransitionProps() {\n      return LINEAR_TRANSITION_PROPS;\n    }\n  }]);\n\n  return OrbitController;\n}(Controller);\n\nexport { OrbitController as default };","map":null,"metadata":{},"sourceType":"module"}