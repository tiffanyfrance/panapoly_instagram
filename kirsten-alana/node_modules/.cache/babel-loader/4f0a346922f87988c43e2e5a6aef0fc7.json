{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Geometry from '../geometry/geometry';\nimport { unpackIndexedGeometry } from '../geometry/geometry-utils';\nimport { uid } from '../utils';\n\nvar PlaneGeometry = function (_Geometry) {\n  _inherits(PlaneGeometry, _Geometry);\n\n  function PlaneGeometry() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PlaneGeometry);\n\n    var _props$id = props.id,\n        id = _props$id === void 0 ? uid('plane-geometry') : _props$id;\n\n    var _tesselatePlane = tesselatePlane(props),\n        indices = _tesselatePlane.indices,\n        attributes = _tesselatePlane.attributes;\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlaneGeometry).call(this, _objectSpread({}, props, {\n      id: id,\n      indices: indices,\n      attributes: _objectSpread({}, attributes, props.attributes)\n    })));\n  }\n\n  return PlaneGeometry;\n}(Geometry);\n\nexport { PlaneGeometry as default };\n\nfunction tesselatePlane(props) {\n  var _props$type = props.type,\n      type = _props$type === void 0 ? 'x,y' : _props$type,\n      _props$offset = props.offset,\n      offset = _props$offset === void 0 ? 0 : _props$offset,\n      _props$flipCull = props.flipCull,\n      flipCull = _props$flipCull === void 0 ? false : _props$flipCull,\n      _props$unpack = props.unpack,\n      unpack = _props$unpack === void 0 ? false : _props$unpack;\n  var coords = type.split(',');\n  var c1len = props[\"\".concat(coords[0], \"len\")];\n  var c2len = props[\"\".concat(coords[1], \"len\")];\n  var subdivisions1 = props[\"n\".concat(coords[0])] || 1;\n  var subdivisions2 = props[\"n\".concat(coords[1])] || 1;\n  var numVertices = (subdivisions1 + 1) * (subdivisions2 + 1);\n  var positions = new Float32Array(numVertices * 3);\n  var normals = new Float32Array(numVertices * 3);\n  var texCoords = new Float32Array(numVertices * 2);\n\n  if (flipCull) {\n    c1len = -c1len;\n  }\n\n  var i2 = 0;\n  var i3 = 0;\n\n  for (var z = 0; z <= subdivisions2; z++) {\n    for (var x = 0; x <= subdivisions1; x++) {\n      var u = x / subdivisions1;\n      var v = z / subdivisions2;\n      texCoords[i2 + 0] = flipCull ? 1 - u : u;\n      texCoords[i2 + 1] = v;\n\n      switch (type) {\n        case 'x,y':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = c2len * v - c2len * 0.5;\n          positions[i3 + 2] = offset;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = flipCull ? 1 : -1;\n          break;\n\n        case 'x,z':\n          positions[i3 + 0] = c1len * u - c1len * 0.5;\n          positions[i3 + 1] = offset;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = 0;\n          normals[i3 + 1] = flipCull ? 1 : -1;\n          normals[i3 + 2] = 0;\n          break;\n\n        case 'y,z':\n          positions[i3 + 0] = offset;\n          positions[i3 + 1] = c1len * u - c1len * 0.5;\n          positions[i3 + 2] = c2len * v - c2len * 0.5;\n          normals[i3 + 0] = flipCull ? 1 : -1;\n          normals[i3 + 1] = 0;\n          normals[i3 + 2] = 0;\n          break;\n\n        default:\n          break;\n      }\n\n      i2 += 2;\n      i3 += 3;\n    }\n  }\n\n  var numVertsAcross = subdivisions1 + 1;\n  var indices = new Uint16Array(subdivisions1 * subdivisions2 * 6);\n\n  for (var _z = 0; _z < subdivisions2; _z++) {\n    for (var _x = 0; _x < subdivisions1; _x++) {\n      var index = (_z * subdivisions1 + _x) * 6;\n      indices[index + 0] = (_z + 0) * numVertsAcross + _x;\n      indices[index + 1] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 2] = (_z + 0) * numVertsAcross + _x + 1;\n      indices[index + 3] = (_z + 1) * numVertsAcross + _x;\n      indices[index + 4] = (_z + 1) * numVertsAcross + _x + 1;\n      indices[index + 5] = (_z + 0) * numVertsAcross + _x + 1;\n    }\n  }\n\n  var geometry = {\n    indices: {\n      size: 1,\n      value: indices\n    },\n    attributes: {\n      POSITION: {\n        size: 3,\n        value: positions\n      },\n      NORMAL: {\n        size: 3,\n        value: normals\n      },\n      TEXCOORD_0: {\n        size: 2,\n        value: texCoords\n      }\n    }\n  };\n  return unpack ? unpackIndexedGeometry(geometry) : geometry;\n}","map":null,"metadata":{},"sourceType":"module"}