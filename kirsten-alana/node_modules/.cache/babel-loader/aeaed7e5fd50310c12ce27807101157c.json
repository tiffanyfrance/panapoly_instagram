{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { bufferToArrayBuffer } from '../node/buffer-to-array-buffer';\nvar BIG_ENDIAN = false;\nvar LITTLE_ENDIAN = true;\nvar mimeTypeMap = new Map([['image/png', getPngSize], ['image/jpeg', getJpegSize], ['image/gif', getGifSize], ['image/bmp', getBmpSize]]);\nvar ERR_INVALID_TYPE = \"Invalid MIME type. Supported MIME types are: \".concat(Array.from(mimeTypeMap.keys()).join(', '));\nexport function isImage(arrayBuffer) {\n  var result = guessImageMetadata(arrayBuffer);\n  return result ? result.mimeType : false;\n}\nexport function getImageMetadata(arrayBuffer) {\n  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (mimeType) {\n    var handler = mimeTypeMap.get(mimeType);\n\n    if (!handler) {\n      throw new Error(ERR_INVALID_TYPE);\n    }\n\n    var _result = handler(arrayBuffer);\n\n    if (!_result) {\n      throw new Error(\"invalid image data for type: \".concat(mimeType));\n    }\n\n    return _result;\n  }\n\n  var result = guessImageMetadata(arrayBuffer, mimeType);\n\n  if (!result) {\n    throw new Error(ERR_INVALID_TYPE);\n  }\n\n  return result;\n}\n\nfunction guessImageMetadata(arrayBuffer, mimeType) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = mimeTypeMap.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          supportedMimeType = _step$value[0],\n          handler = _step$value[1];\n\n      var result = handler(arrayBuffer);\n\n      if (result) {\n        result.mimeType = supportedMimeType;\n        return result;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n        _iterator[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction getPngSize(arrayBuffer) {\n  var dataView = toDataView(arrayBuffer);\n\n  if (dataView.byteLength < 24 || dataView.getUint32(0, BIG_ENDIAN) !== 0x89504e47) {\n    return null;\n  }\n\n  return {\n    width: dataView.getUint32(16, BIG_ENDIAN),\n    height: dataView.getUint32(20, BIG_ENDIAN)\n  };\n}\n\nfunction getGifSize(arrayBuffer) {\n  var dataView = toDataView(arrayBuffer);\n\n  if (dataView.byteLength < 10 || dataView.getUint32(0, BIG_ENDIAN) !== 0x47494638) {\n    return null;\n  }\n\n  return {\n    width: dataView.getUint16(6, LITTLE_ENDIAN),\n    height: dataView.getUint16(8, LITTLE_ENDIAN)\n  };\n}\n\nfunction getBmpSize(arrayBuffer) {\n  var dataView = toDataView(arrayBuffer);\n\n  if (dataView.getUint16(0, BIG_ENDIAN) !== 0x424d) {\n    return null;\n  }\n\n  return {\n    width: dataView.getUint32(18, LITTLE_ENDIAN),\n    height: dataView.getUint32(22, LITTLE_ENDIAN)\n  };\n}\n\nfunction getJpegSize(arrayBuffer) {\n  var dataView = toDataView(arrayBuffer);\n\n  if (dataView.byteLength < 2 || dataView.getUint16(0, BIG_ENDIAN) !== 0xffd8) {\n    return null;\n  }\n\n  var _getJpegMarkers = getJpegMarkers(),\n      tableMarkers = _getJpegMarkers.tableMarkers,\n      sofMarkers = _getJpegMarkers.sofMarkers;\n\n  var i = 2;\n\n  while (i < dataView.byteLength) {\n    var marker = dataView.getUint16(i, BIG_ENDIAN);\n\n    if (sofMarkers.has(marker)) {\n      return {\n        height: dataView.getUint16(i + 5, BIG_ENDIAN),\n        width: dataView.getUint16(i + 7, BIG_ENDIAN)\n      };\n    }\n\n    if (!tableMarkers.has(marker)) {\n      return null;\n    }\n\n    i += 2;\n    i += dataView.getUint16(i, BIG_ENDIAN);\n  }\n\n  return null;\n}\n\nfunction getJpegMarkers() {\n  var tableMarkers = new Set([0xffdb, 0xffc4, 0xffcc, 0xffdd, 0xfffe]);\n\n  for (var i = 0xffe0; i < 0xfff0; ++i) {\n    tableMarkers.add(i);\n  }\n\n  var sofMarkers = new Set([0xffc0, 0xffc1, 0xffc2, 0xffc3, 0xffc5, 0xffc6, 0xffc7, 0xffc9, 0xffca, 0xffcb, 0xffcd, 0xffce, 0xffcf, 0xffde]);\n  return {\n    tableMarkers: tableMarkers,\n    sofMarkers: sofMarkers\n  };\n}\n\nfunction toDataView(data) {\n  if (bufferToArrayBuffer) {\n    data = bufferToArrayBuffer(data);\n  }\n\n  if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n    return new DataView(data.buffer || data);\n  }\n\n  throw new Error('toDataView');\n}\n\nexport function getImageSize(arrayBuffer) {\n  var mimeType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return getImageMetadata(arrayBuffer);\n}","map":null,"metadata":{},"sourceType":"module"}