{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport fs from 'fs';\nimport http from 'http';\nimport https from 'https';\nimport util from 'util';\nimport { toArrayBuffer } from '../../javascript-utils/binary-utils';\nimport { TextDecoder } from '../../javascript-utils/text-encoding';\nimport { concatenateReadStream } from '../../javascript-utils/stream-utils';\nimport decodeDataUri from './decode-data-uri';\nvar DEFAULT_OPTIONS = {\n  dataType: 'arrayBuffer'\n};\nvar isNode = Boolean(fs && fs.readFile);\n\nvar isDataURL = function isDataURL(url) {\n  return url.startsWith('data:');\n};\n\nvar isRequestURL = function isRequestURL(url) {\n  return url.startsWith('http:') || url.startsWith('https:');\n};\n\nvar NodeHeaders = function () {\n  function NodeHeaders(response) {\n    _classCallCheck(this, NodeHeaders);\n\n    this.reponse = response;\n  }\n\n  _createClass(NodeHeaders, [{\n    key: \"get\",\n    value: function get(header) {\n      if (this.response.httpResponse) {\n        return this.response.httpResponse.getHeaders()[header];\n      }\n\n      switch (header) {\n        case 'Content-Length':\n          return this._getContentLength();\n\n        default:\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"_getContentLength\",\n    value: function _getContentLength() {\n      return this._contentLength;\n    }\n  }]);\n\n  return NodeHeaders;\n}();\n\nvar NodeFetchResponse = function () {\n  function NodeFetchResponse(url, options) {\n    _classCallCheck(this, NodeFetchResponse);\n\n    this.url = url;\n    this.options = options;\n    this.bodyUsed = false;\n    this._headers = null;\n  }\n\n  _createClass(NodeFetchResponse, [{\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.bodyUsed = true;\n                return _context.abrupt(\"return\", readFile(this.url, this.options));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n\n      return arrayBuffer;\n    }()\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n        var arrayBuffer, textDecoder;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.arrayBuffer();\n\n              case 2:\n                arrayBuffer = _context2.sent;\n                textDecoder = new TextDecoder();\n                return _context2.abrupt(\"return\", textDecoder.decode(arrayBuffer));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function text() {\n        return _text.apply(this, arguments);\n      }\n\n      return text;\n    }()\n  }, {\n    key: \"json\",\n    value: function () {\n      var _json = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {\n        var text;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.text();\n\n              case 2:\n                text = _context3.sent;\n                return _context3.abrupt(\"return\", JSON.parse(text));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function json() {\n        return _json.apply(this, arguments);\n      }\n\n      return json;\n    }()\n  }, {\n    key: \"_getHeaders\",\n    value: function _getHeaders() {\n      if (isRequestURL(this.url)) {\n        return new NodeHeaders(this);\n      }\n\n      if (isDataURL(this.url)) {\n        return {\n          'Content-Length': this.url.length\n        };\n      }\n\n      if (isRequestURL(this.repsonse.url)) {\n        return {};\n      }\n\n      var stats = fs.statSync(this.response.url);\n      return {\n        'Content-Length': stats.size\n      };\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      this._headers = this._headers || this._getHeaders();\n    }\n  }, {\n    key: \"body\",\n    get: function get() {\n      var url = this.url,\n          options = this.options;\n      this.bodyUsed = true;\n      return createReadStream(url, options);\n    }\n  }]);\n\n  return NodeFetchResponse;\n}();\n\nexport function fetchFile(_x, _x2) {\n  return _fetchFile.apply(this, arguments);\n}\n\nfunction _fetchFile() {\n  _fetchFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee4(url, options) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", new NodeFetchResponse(url, options));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _fetchFile.apply(this, arguments);\n}\n\nexport function readFileSync(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = getReadFileOptions(options);\n\n  if (isDataURL(url)) {\n    return decodeDataUri(url);\n  }\n\n  if (!isNode) {\n    return null;\n  }\n\n  var buffer = fs.readFileSync(url, options, function () {});\n  return buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer;\n}\n\nfunction readFile(_x3) {\n  return _readFile.apply(this, arguments);\n}\n\nfunction _readFile() {\n  _readFile = _asyncToGenerator(_regeneratorRuntime.mark(function _callee5(url) {\n    var options,\n        readFileAsync,\n        buffer,\n        _args5 = arguments;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n            options = getReadFileOptions(options);\n\n            if (!isDataURL(url)) {\n              _context5.next = 4;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", Promise.resolve(decodeDataUri(url)));\n\n          case 4:\n            if (!isRequestURL(url)) {\n              _context5.next = 6;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n              options = _objectSpread({}, new URL(url), options);\n              var request = url.startsWith('https:') ? https.request : http.request;\n              request(url, function (response) {\n                return concatenateReadStream(response).then(resolve, reject);\n              });\n            }));\n\n          case 6:\n            readFileAsync = util.promisify(fs.readFile);\n            _context5.next = 9;\n            return readFileAsync(url, options);\n\n          case 9:\n            buffer = _context5.sent;\n            return _context5.abrupt(\"return\", buffer instanceof Buffer ? toArrayBuffer(buffer) : buffer);\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _readFile.apply(this, arguments);\n}\n\nexport function createReadStream(_x4, _x5) {\n  return _createReadStream.apply(this, arguments);\n}\n\nfunction _createReadStream() {\n  _createReadStream = _asyncToGenerator(_regeneratorRuntime.mark(function _callee6(url, options) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!isDataURL(url)) {\n              _context6.next = 2;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", decodeDataUri(url));\n\n          case 2:\n            if (isRequestURL(url)) {\n              _context6.next = 4;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", fs.createReadStream(url, options));\n\n          case 4:\n            return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n              options = _objectSpread({}, new URL(url), options);\n              var request = url.startsWith('https:') ? https.request : http.request;\n              request(url, function (response) {\n                return resolve(response);\n              });\n            }));\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _createReadStream.apply(this, arguments);\n}\n\nfunction getReadFileOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n  options.responseType = options.responseType || options.dataType;\n\n  if (fs) {\n    options.encoding = options.encoding || (options.dataType === 'text' ? 'utf8' : null);\n  }\n\n  return options;\n}","map":null,"metadata":{},"sourceType":"module"}