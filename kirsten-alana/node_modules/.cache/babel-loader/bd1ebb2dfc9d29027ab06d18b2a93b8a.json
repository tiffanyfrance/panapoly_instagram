{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport LayerManager from './layer-manager';\nimport ViewManager from './view-manager';\nimport MapView from '../views/map-view';\nimport EffectManager from './effect-manager';\nimport Effect from './effect';\nimport DeckRenderer from './deck-renderer';\nimport DeckPicker from './deck-picker';\nimport log from '../utils/log';\nimport { AnimationLoop, createGLContext, trackContextState, setParameters } from '@luma.gl/core';\nimport { Stats } from 'probe.gl';\nimport { EventManager } from 'mjolnir.js';\nimport assert from '../utils/assert';\nimport { EVENTS } from './constants';\n\nfunction noop() {}\n\nvar getCursor = function getCursor(_ref) {\n  var isDragging = _ref.isDragging;\n  return isDragging ? 'grabbing' : 'grab';\n};\n\nfunction getPropTypes(PropTypes) {\n  return {\n    id: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    layers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    layerFilter: PropTypes.func,\n    views: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    viewState: PropTypes.object,\n    effects: PropTypes.arrayOf(PropTypes.instanceOf(Effect)),\n    controller: PropTypes.oneOfType([PropTypes.func, PropTypes.bool, PropTypes.object]),\n    gl: PropTypes.object,\n    glOptions: PropTypes.object,\n    parameters: PropTypes.object,\n    pickingRadius: PropTypes.number,\n    useDevicePixels: PropTypes.bool,\n    onWebGLInitialized: PropTypes.func,\n    onResize: PropTypes.func,\n    onViewStateChange: PropTypes.func,\n    onBeforeRender: PropTypes.func,\n    onAfterRender: PropTypes.func,\n    onLoad: PropTypes.func,\n    debug: PropTypes.bool,\n    drawPickingColors: PropTypes.bool,\n    _animate: PropTypes.bool\n  };\n}\n\nvar defaultProps = {\n  id: 'deckgl-overlay',\n  width: '100%',\n  height: '100%',\n  pickingRadius: 0,\n  layerFilter: null,\n  glOptions: {},\n  gl: null,\n  layers: [],\n  effects: [],\n  views: null,\n  controller: null,\n  useDevicePixels: true,\n  _animate: false,\n  onWebGLInitialized: noop,\n  onResize: noop,\n  onViewStateChange: noop,\n  onBeforeRender: noop,\n  onAfterRender: noop,\n  onLoad: noop,\n  _onMetrics: null,\n  getCursor: getCursor,\n  debug: false,\n  drawPickingColors: false\n};\n\nvar Deck = function () {\n  function Deck(props) {\n    _classCallCheck(this, Deck);\n\n    props = Object.assign({}, defaultProps, props);\n    this.width = 0;\n    this.height = 0;\n    this.viewManager = null;\n    this.layerManager = null;\n    this.effectManager = null;\n    this.deckRenderer = null;\n    this.deckPicker = null;\n    this._needsRedraw = true;\n    this._pickRequest = {};\n    this.viewState = props.initialViewState || null;\n    this.interactiveState = {\n      isDragging: false\n    };\n    this._onEvent = this._onEvent.bind(this);\n    this._onPointerDown = this._onPointerDown.bind(this);\n    this._onPointerMove = this._onPointerMove.bind(this);\n    this._onPointerLeave = this._onPointerLeave.bind(this);\n    this._pickAndCallback = this._pickAndCallback.bind(this);\n    this._onRendererInitialized = this._onRendererInitialized.bind(this);\n    this._onRenderFrame = this._onRenderFrame.bind(this);\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n    this._onInteractiveStateChange = this._onInteractiveStateChange.bind(this);\n\n    if (!props.gl) {\n      if (typeof document !== 'undefined') {\n        this.canvas = this._createCanvas(props);\n      }\n    }\n\n    this.animationLoop = this._createAnimationLoop(props);\n    this.stats = new Stats({\n      id: 'deck.gl'\n    });\n    this.setProps(props);\n    this.animationLoop.start();\n  }\n\n  _createClass(Deck, [{\n    key: \"finalize\",\n    value: function finalize() {\n      this.animationLoop.stop();\n      this.animationLoop = null;\n\n      if (this.layerManager) {\n        this.layerManager.finalize();\n        this.layerManager = null;\n      }\n\n      if (this.viewManager) {\n        this.viewManager.finalize();\n        this.viewManager = null;\n      }\n\n      if (this.eventManager) {\n        this.eventManager.destroy();\n      }\n\n      if (!this.props.canvas && !this.props.gl && this.canvas) {\n        this.canvas.parentElement.removeChild(this.canvas);\n        this.canvas = null;\n      }\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      this.stats.get('setProps Time').timeStart();\n\n      if ('onLayerHover' in props) {\n        log.removed('onLayerHover', 'onHover')();\n      }\n\n      if ('onLayerClick' in props) {\n        log.removed('onLayerClick', 'onClick')();\n      }\n\n      props = Object.assign({}, this.props, props);\n      this.props = props;\n\n      this._setCanvasSize(props);\n\n      var newProps = Object.assign({}, props, {\n        views: this._getViews(props),\n        width: this.width,\n        height: this.height\n      });\n\n      var viewState = this._getViewState(props);\n\n      if (viewState) {\n        newProps.viewState = viewState;\n      }\n\n      if (this.viewManager) {\n        this.viewManager.setProps(newProps);\n      }\n\n      if (this.layerManager) {\n        this.layerManager.setProps(newProps);\n      }\n\n      if (this.effectManager) {\n        this.effectManager.setProps(newProps);\n      }\n\n      if (this.animationLoop) {\n        this.animationLoop.setProps(newProps);\n      }\n\n      if (this.deckRenderer) {\n        this.deckRenderer.setProps(newProps);\n      }\n\n      if (this.deckPicker) {\n        this.deckPicker.setProps(newProps);\n      }\n\n      this.stats.get('setProps Time').timeEnd();\n    }\n  }, {\n    key: \"needsRedraw\",\n    value: function needsRedraw() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        clearRedrawFlags: false\n      };\n\n      if (this.props._animate) {\n        return 'Deck._animate';\n      }\n\n      var redraw = this._needsRedraw;\n\n      if (opts.clearRedrawFlags) {\n        this._needsRedraw = false;\n      }\n\n      var viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);\n      var layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);\n      var effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);\n      var deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);\n      redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;\n      return redraw;\n    }\n  }, {\n    key: \"redraw\",\n    value: function redraw(force) {\n      if (!this.layerManager) {\n        return;\n      }\n\n      var redrawReason = force || this.needsRedraw({\n        clearRedrawFlags: true\n      });\n\n      if (!redrawReason) {\n        return;\n      }\n\n      this.stats.get('Redraw Count').incrementCount();\n\n      if (this.props._customRender) {\n        this.props._customRender(redrawReason);\n      } else {\n        this._drawLayers(redrawReason);\n      }\n    }\n  }, {\n    key: \"getViews\",\n    value: function getViews() {\n      return this.viewManager.views;\n    }\n  }, {\n    key: \"getViewports\",\n    value: function getViewports(rect) {\n      return this.viewManager.getViewports(rect);\n    }\n  }, {\n    key: \"pickObject\",\n    value: function pickObject(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          _ref2$radius = _ref2.radius,\n          radius = _ref2$radius === void 0 ? 0 : _ref2$radius,\n          _ref2$layerIds = _ref2.layerIds,\n          layerIds = _ref2$layerIds === void 0 ? null : _ref2$layerIds;\n      this.stats.get('pickObject Time').timeStart();\n      var layers = this.layerManager.getLayers({\n        layerIds: layerIds\n      });\n      var activateViewport = this.layerManager.activateViewport;\n      var selectedInfos = this.deckPicker.pickObject({\n        x: x,\n        y: y,\n        radius: radius,\n        layers: layers,\n        viewports: this.getViewports({\n          x: x,\n          y: y\n        }),\n        activateViewport: activateViewport,\n        mode: 'query',\n        depth: 1\n      }).result;\n      this.stats.get('pickObject Time').timeEnd();\n      return selectedInfos.length ? selectedInfos[0] : null;\n    }\n  }, {\n    key: \"pickMultipleObjects\",\n    value: function pickMultipleObjects(_ref3) {\n      var x = _ref3.x,\n          y = _ref3.y,\n          _ref3$radius = _ref3.radius,\n          radius = _ref3$radius === void 0 ? 0 : _ref3$radius,\n          _ref3$layerIds = _ref3.layerIds,\n          layerIds = _ref3$layerIds === void 0 ? null : _ref3$layerIds,\n          _ref3$depth = _ref3.depth,\n          depth = _ref3$depth === void 0 ? 10 : _ref3$depth;\n      this.stats.get('pickMultipleObjects Time').timeStart();\n      var layers = this.layerManager.getLayers({\n        layerIds: layerIds\n      });\n      var activateViewport = this.layerManager.activateViewport;\n      var selectedInfos = this.deckPicker.pickObject({\n        x: x,\n        y: y,\n        radius: radius,\n        layers: layers,\n        viewports: this.getViewports({\n          x: x,\n          y: y\n        }),\n        activateViewport: activateViewport,\n        mode: 'query',\n        depth: depth\n      }).result;\n      this.stats.get('pickMultipleObjects Time').timeEnd();\n      return selectedInfos;\n    }\n  }, {\n    key: \"pickObjects\",\n    value: function pickObjects(_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y,\n          _ref4$width = _ref4.width,\n          width = _ref4$width === void 0 ? 1 : _ref4$width,\n          _ref4$height = _ref4.height,\n          height = _ref4$height === void 0 ? 1 : _ref4$height,\n          _ref4$layerIds = _ref4.layerIds,\n          layerIds = _ref4$layerIds === void 0 ? null : _ref4$layerIds;\n      this.stats.get('pickObjects Time').timeStart();\n      var layers = this.layerManager.getLayers({\n        layerIds: layerIds\n      });\n      var activateViewport = this.layerManager.activateViewport;\n      var infos = this.deckPicker.pickObjects({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        layers: layers,\n        viewports: this.getViewports({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        }),\n        activateViewport: activateViewport\n      });\n      this.stats.get('pickObjects Time').timeEnd();\n      return infos;\n    }\n  }, {\n    key: \"_createCanvas\",\n    value: function _createCanvas(props) {\n      var canvas = props.canvas;\n\n      if (typeof canvas === 'string') {\n        canvas = document.getElementById(canvas);\n        assert(canvas);\n      }\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        var parent = props.parent || document.body;\n        parent.appendChild(canvas);\n      }\n\n      var id = props.id,\n          style = props.style;\n      canvas.id = id;\n      Object.assign(canvas.style, style);\n      return canvas;\n    }\n  }, {\n    key: \"_setCanvasSize\",\n    value: function _setCanvasSize(props) {\n      if (!this.canvas) {\n        return;\n      }\n\n      var width = props.width,\n          height = props.height;\n\n      if (width || width === 0) {\n        width = Number.isFinite(width) ? \"\".concat(width, \"px\") : width;\n        this.canvas.style.width = width;\n      }\n\n      if (height || height === 0) {\n        height = Number.isFinite(height) ? \"\".concat(height, \"px\") : height;\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = height;\n      }\n    }\n  }, {\n    key: \"_updateCanvasSize\",\n    value: function _updateCanvasSize() {\n      if (this._checkForCanvasSizeChange()) {\n        var width = this.width,\n            height = this.height;\n        this.viewManager.setProps({\n          width: width,\n          height: height\n        });\n        this.props.onResize({\n          width: this.width,\n          height: this.height\n        });\n      }\n    }\n  }, {\n    key: \"_checkForCanvasSizeChange\",\n    value: function _checkForCanvasSizeChange() {\n      var canvas = this.canvas;\n\n      if (!canvas) {\n        return false;\n      }\n\n      var newWidth = canvas.clientWidth || canvas.width;\n      var newHeight = canvas.clientHeight || canvas.height;\n\n      if (newWidth !== this.width || newHeight !== this.height) {\n        this.width = newWidth;\n        this.height = newHeight;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_createAnimationLoop\",\n    value: function _createAnimationLoop(props) {\n      var _this = this;\n\n      var width = props.width,\n          height = props.height,\n          gl = props.gl,\n          glOptions = props.glOptions,\n          debug = props.debug,\n          useDevicePixels = props.useDevicePixels,\n          autoResizeDrawingBuffer = props.autoResizeDrawingBuffer;\n      return new AnimationLoop({\n        width: width,\n        height: height,\n        useDevicePixels: useDevicePixels,\n        autoResizeDrawingBuffer: autoResizeDrawingBuffer,\n        gl: gl,\n        onCreateContext: function onCreateContext(opts) {\n          return createGLContext(Object.assign({}, glOptions, opts, {\n            canvas: _this.canvas,\n            debug: debug\n          }));\n        },\n        onInitialize: this._onRendererInitialized,\n        onRender: this._onRenderFrame,\n        onBeforeRender: props.onBeforeRender,\n        onAfterRender: props.onAfterRender\n      });\n    }\n  }, {\n    key: \"_getViewState\",\n    value: function _getViewState(props) {\n      return props.viewState || this.viewState;\n    }\n  }, {\n    key: \"_getViews\",\n    value: function _getViews(props) {\n      var views = props.views || [new MapView({\n        id: 'default-view'\n      })];\n      views = Array.isArray(views) ? views : [views];\n\n      if (views.length && props.controller) {\n        views[0].props.controller = props.controller;\n      }\n\n      return views;\n    }\n  }, {\n    key: \"_requestPick\",\n    value: function _requestPick(_ref5) {\n      var event = _ref5.event,\n          callback = _ref5.callback,\n          mode = _ref5.mode,\n          immediate = _ref5.immediate;\n      var _pickRequest = this._pickRequest;\n\n      if (event.type === 'pointerleave') {\n        _pickRequest.x = -1;\n        _pickRequest.y = -1;\n        _pickRequest.radius = 0;\n      } else {\n        var pos = event.offsetCenter;\n\n        if (!pos) {\n          return;\n        }\n\n        _pickRequest.x = pos.x;\n        _pickRequest.y = pos.y;\n        _pickRequest.radius = this.props.pickingRadius;\n      }\n\n      _pickRequest.callback = callback;\n      _pickRequest.event = event;\n      _pickRequest.mode = mode;\n\n      if (immediate) {\n        this._pickAndCallback();\n      }\n    }\n  }, {\n    key: \"_pickAndCallback\",\n    value: function _pickAndCallback() {\n      var _pickRequest = this._pickRequest;\n\n      if (_pickRequest.mode) {\n        var _this$deckPicker$pick = this.deckPicker.pickObject(Object.assign({\n          layers: this.layerManager.getLayers(),\n          viewports: this.getViewports(_pickRequest),\n          activateViewport: this.layerManager.activateViewport,\n          depth: 1\n        }, _pickRequest)),\n            result = _this$deckPicker$pick.result,\n            emptyInfo = _this$deckPicker$pick.emptyInfo;\n\n        if (_pickRequest.callback) {\n          var pickedInfo = result.find(function (info) {\n            return info.index >= 0;\n          }) || emptyInfo;\n\n          _pickRequest.callback(pickedInfo, _pickRequest.event);\n        }\n\n        _pickRequest.mode = null;\n      }\n    }\n  }, {\n    key: \"_updateCursor\",\n    value: function _updateCursor() {\n      if (this.canvas) {\n        this.canvas.style.cursor = this.props.getCursor(this.interactiveState);\n      }\n    }\n  }, {\n    key: \"_updateAnimationProps\",\n    value: function _updateAnimationProps(animationProps) {\n      this.layerManager.context.animationProps = animationProps;\n    }\n  }, {\n    key: \"_setGLContext\",\n    value: function _setGLContext(gl) {\n      if (this.layerManager) {\n        return;\n      }\n\n      if (!this.canvas) {\n        this.canvas = gl.canvas;\n        trackContextState(gl, {\n          enable: true,\n          copyState: true\n        });\n      }\n\n      setParameters(gl, {\n        blend: true,\n        blendFunc: [770, 771, 1, 771],\n        polygonOffsetFill: true,\n        depthTest: true,\n        depthFunc: 515\n      });\n      this.props.onWebGLInitialized(gl);\n      this.eventManager = new EventManager(gl.canvas, {\n        events: {\n          pointerdown: this._onPointerDown,\n          pointermove: this._onPointerMove,\n          pointerleave: this._onPointerLeave\n        }\n      });\n\n      for (var eventType in EVENTS) {\n        this.eventManager.on(eventType, this._onEvent);\n      }\n\n      this.viewManager = new ViewManager({\n        eventManager: this.eventManager,\n        onViewStateChange: this._onViewStateChange,\n        onInteractiveStateChange: this._onInteractiveStateChange,\n        views: this._getViews(this.props),\n        viewState: this._getViewState(this.props),\n        width: this.width,\n        height: this.height\n      });\n      assert(this.viewManager);\n      var viewport = this.viewManager.getViewports()[0];\n      this.layerManager = new LayerManager(gl, {\n        deck: this,\n        stats: this.stats,\n        viewport: viewport\n      });\n      this.effectManager = new EffectManager();\n      this.deckRenderer = new DeckRenderer(gl);\n      this.deckPicker = new DeckPicker(gl);\n      this.setProps(this.props);\n\n      this._updateCanvasSize();\n\n      this.props.onLoad();\n    }\n  }, {\n    key: \"_drawLayers\",\n    value: function _drawLayers(redrawReason, renderOptions) {\n      var gl = this.layerManager.context.gl;\n      setParameters(gl, this.props.parameters);\n      this.props.onBeforeRender({\n        gl: gl\n      });\n      var layers = this.layerManager.getLayers();\n      var activateViewport = this.layerManager.activateViewport;\n      this.deckRenderer.renderLayers(Object.assign({\n        layers: layers,\n        viewports: this.viewManager.getViewports(),\n        activateViewport: activateViewport,\n        views: this.viewManager.getViews(),\n        pass: 'screen',\n        redrawReason: redrawReason,\n        effects: this.effectManager.getEffects()\n      }, renderOptions));\n      this.props.onAfterRender({\n        gl: gl\n      });\n    }\n  }, {\n    key: \"_onRendererInitialized\",\n    value: function _onRendererInitialized(_ref6) {\n      var gl = _ref6.gl;\n\n      this._setGLContext(gl);\n    }\n  }, {\n    key: \"_onRenderFrame\",\n    value: function _onRenderFrame(animationProps) {\n      this.stats.get('frameRate').timeEnd();\n      this.stats.get('frameRate').timeStart();\n\n      if (animationProps.tick % 60 === 0) {\n        var table = {};\n        this.stats.forEach(function (stat) {\n          table[stat.name] = {\n            time: stat.time || 0,\n            count: stat.count || 0,\n            average: stat.getAverageTime() || 0,\n            hz: stat.getHz() || 0\n          };\n        });\n        this.stats.reset();\n        log.table(3, table)();\n\n        if (this.props._onMetrics) {\n          this.props._onMetrics(table);\n        }\n      }\n\n      this._updateCanvasSize();\n\n      this._updateCursor();\n\n      this.layerManager.updateLayers(animationProps);\n\n      this._updateAnimationProps(animationProps);\n\n      this._pickAndCallback();\n\n      this.redraw(false);\n\n      if (this.viewManager) {\n        this.viewManager.updateViewStates(animationProps);\n      }\n    }\n  }, {\n    key: \"_onViewStateChange\",\n    value: function _onViewStateChange(params) {\n      var viewState = this.props.onViewStateChange(params) || params.viewState;\n\n      if (this.viewState) {\n        this.viewState[params.viewId] = viewState;\n        this.viewManager.setProps({\n          viewState: viewState\n        });\n      }\n    }\n  }, {\n    key: \"_onInteractiveStateChange\",\n    value: function _onInteractiveStateChange(_ref7) {\n      var _ref7$isDragging = _ref7.isDragging,\n          isDragging = _ref7$isDragging === void 0 ? false : _ref7$isDragging;\n\n      if (isDragging !== this.interactiveState.isDragging) {\n        this.interactiveState.isDragging = isDragging;\n      }\n    }\n  }, {\n    key: \"_onEvent\",\n    value: function _onEvent(event) {\n      var eventOptions = EVENTS[event.type];\n      var pos = event.offsetCenter;\n\n      if (!eventOptions || !pos) {\n        return;\n      }\n\n      var layers = this.layerManager.getLayers();\n      var info = this.deckPicker.getLastPickedObject({\n        x: pos.x,\n        y: pos.y,\n        layers: layers,\n        viewports: this.getViewports(pos)\n      });\n      var layer = info.layer;\n      var layerHandler = layer && (layer[eventOptions.handler] || layer.props[eventOptions.handler]);\n      var rootHandler = this.props[eventOptions.handler];\n      var handled = false;\n\n      if (layerHandler) {\n        handled = layerHandler.call(layer, info, event);\n      }\n\n      if (!handled && rootHandler) {\n        rootHandler(info, event);\n      }\n    }\n  }, {\n    key: \"_onPointerDown\",\n    value: function _onPointerDown(event) {\n      this._requestPick({\n        callback: null,\n        event: event,\n        mode: 'hover',\n        immediate: true\n      });\n    }\n  }, {\n    key: \"_onPointerMove\",\n    value: function _onPointerMove(event) {\n      if (event.leftButton || event.rightButton) {\n        return;\n      }\n\n      this._requestPick({\n        callback: this.props.onHover,\n        event: event,\n        mode: 'hover'\n      });\n    }\n  }, {\n    key: \"_onPointerLeave\",\n    value: function _onPointerLeave(event) {\n      this._requestPick({\n        callback: this.props.onHover,\n        event: event,\n        mode: 'hover'\n      });\n    }\n  }]);\n\n  return Deck;\n}();\n\nexport { Deck as default };\nDeck.getPropTypes = getPropTypes;\nDeck.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}