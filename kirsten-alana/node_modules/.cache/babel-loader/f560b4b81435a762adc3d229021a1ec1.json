{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport View from './view';\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from 'math.gl';\nimport OrbitController from '../controllers/orbit-controller';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix(_ref) {\n  var height = _ref.height,\n      fovy = _ref.fovy,\n      orbitAxis = _ref.orbitAxis,\n      rotationX = _ref.rotationX,\n      rotationOrbit = _ref.rotationOrbit,\n      zoom = _ref.zoom;\n  var distance = 0.5 / Math.tan(fovy * DEGREES_TO_RADIANS / 2);\n  var viewMatrix = new Matrix4().lookAt({\n    eye: [0, 0, distance]\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  var projectionScale = 1 / (height || 1);\n  viewMatrix.scale([projectionScale, projectionScale, projectionScale]);\n  return viewMatrix;\n}\n\nvar OrbitViewport = function (_Viewport) {\n  _inherits(OrbitViewport, _Viewport);\n\n  function OrbitViewport(props) {\n    _classCallCheck(this, OrbitViewport);\n\n    var id = props.id,\n        x = props.x,\n        y = props.y,\n        width = props.width,\n        height = props.height,\n        _props$fovy = props.fovy,\n        fovy = _props$fovy === void 0 ? 50 : _props$fovy,\n        near = props.near,\n        far = props.far,\n        _props$orbitAxis = props.orbitAxis,\n        orbitAxis = _props$orbitAxis === void 0 ? 'Z' : _props$orbitAxis,\n        _props$target = props.target,\n        target = _props$target === void 0 ? [0, 0, 0] : _props$target,\n        _props$rotationX = props.rotationX,\n        rotationX = _props$rotationX === void 0 ? 0 : _props$rotationX,\n        _props$rotationOrbit = props.rotationOrbit,\n        rotationOrbit = _props$rotationOrbit === void 0 ? 0 : _props$rotationOrbit,\n        _props$zoom = props.zoom,\n        zoom = _props$zoom === void 0 ? 0 : _props$zoom;\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitViewport).call(this, {\n      id: id,\n      viewMatrix: getViewMatrix({\n        height: height,\n        fovy: fovy,\n        orbitAxis: orbitAxis,\n        rotationX: rotationX,\n        rotationOrbit: rotationOrbit,\n        zoom: zoom\n      }),\n      fovy: fovy,\n      near: near,\n      far: far,\n      x: x,\n      y: y,\n      position: target,\n      width: width,\n      height: height,\n      zoom: zoom\n    }));\n  }\n\n  return OrbitViewport;\n}(Viewport);\n\nvar OrbitView = function (_View) {\n  _inherits(OrbitView, _View);\n\n  function OrbitView() {\n    _classCallCheck(this, OrbitView);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrbitView).apply(this, arguments));\n  }\n\n  _createClass(OrbitView, [{\n    key: \"_getViewport\",\n    value: function _getViewport(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          width = _ref2.width,\n          height = _ref2.height,\n          viewState = _ref2.viewState;\n      return new OrbitViewport(Object.assign({\n        id: this.id,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }, this.props, viewState));\n    }\n  }, {\n    key: \"controller\",\n    get: function get() {\n      return this._getControllerProps({\n        type: OrbitController,\n        ViewportType: OrbitViewport\n      });\n    }\n  }]);\n\n  return OrbitView;\n}(View);\n\nexport { OrbitView as default };\nOrbitView.displayName = 'OrbitView';","map":null,"metadata":{},"sourceType":"module"}