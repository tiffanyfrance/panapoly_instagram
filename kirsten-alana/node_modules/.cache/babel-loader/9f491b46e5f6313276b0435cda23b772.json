{"ast":null,"code":"import * as mat4 from 'gl-matrix/mat4';\nimport * as vec4 from 'gl-matrix/vec4';\nimport { COORDINATE_SYSTEM } from '../../lib/constants';\nimport memoize from '../../utils/memoize';\nimport log from '../../utils/log';\nimport assert from '../../utils/assert';\nimport { PROJECT_COORDINATE_SYSTEM } from './constants';\nvar ZERO_VECTOR = [0, 0, 0, 0];\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nvar IDENTITY_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nvar DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];\nvar DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];\nexport var LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD = 12;\nvar getMemoizedViewportUniforms = memoize(calculateViewportUniforms);\n\nfunction getShaderCoordinateSystem(coordinateSystem) {\n  switch (coordinateSystem) {\n    case COORDINATE_SYSTEM.LNGLAT:\n    case COORDINATE_SYSTEM.LNGLAT_EXPERIMENTAL:\n    default:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET;\n\n    case COORDINATE_SYSTEM.LNGLAT_DEPRECATED:\n      return PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n\n    case COORDINATE_SYSTEM.METER_OFFSETS:\n    case COORDINATE_SYSTEM.METERS:\n      return PROJECT_COORDINATE_SYSTEM.METER_OFFSETS;\n\n    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      return PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n\n    case COORDINATE_SYSTEM.IDENTITY:\n      return PROJECT_COORDINATE_SYSTEM.IDENTITY;\n  }\n}\n\nfunction calculateMatrixAndOffset(_ref) {\n  var viewport = _ref.viewport,\n      coordinateSystem = _ref.coordinateSystem,\n      coordinateOrigin = _ref.coordinateOrigin,\n      coordinateZoom = _ref.coordinateZoom;\n  var viewMatrixUncentered = viewport.viewMatrixUncentered;\n  var viewMatrix = viewport.viewMatrix;\n  var projectionMatrix = viewport.projectionMatrix;\n  var viewProjectionMatrix = viewport.viewProjectionMatrix;\n  var projectionCenter;\n  var cameraPos = viewport.cameraPosition;\n  var shaderCoordinateSystem = getShaderCoordinateSystem(coordinateSystem);\n  var shaderCoordinateOrigin = coordinateOrigin;\n\n  if (shaderCoordinateSystem === PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET) {\n    if (coordinateZoom < LNGLAT_AUTO_OFFSET_ZOOM_THRESHOLD) {\n      shaderCoordinateSystem = PROJECT_COORDINATE_SYSTEM.LNG_LAT;\n    } else {\n      var lng = Math.fround(viewport.longitude);\n      var lat = Math.fround(viewport.latitude);\n      shaderCoordinateOrigin = [lng, lat];\n    }\n  }\n\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.IDENTITY:\n    case PROJECT_COORDINATE_SYSTEM.LNG_LAT:\n      projectionCenter = ZERO_VECTOR;\n      break;\n\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n      var positionPixels = viewport.projectFlat(shaderCoordinateOrigin, Math.pow(2, coordinateZoom));\n      cameraPos = [cameraPos[0] - positionPixels[0], cameraPos[1] - positionPixels[1], cameraPos[2]];\n      projectionCenter = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n      viewMatrix = viewMatrixUncentered || viewMatrix;\n      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n      break;\n\n    default:\n      throw new Error('Unknown projection mode');\n  }\n\n  return {\n    viewMatrix: viewMatrix,\n    viewProjectionMatrix: viewProjectionMatrix,\n    projectionCenter: projectionCenter,\n    cameraPos: cameraPos,\n    shaderCoordinateSystem: shaderCoordinateSystem,\n    shaderCoordinateOrigin: shaderCoordinateOrigin\n  };\n}\n\nexport function getUniformsFromViewport() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewport = _ref2.viewport,\n      _ref2$devicePixelRati = _ref2.devicePixelRatio,\n      devicePixelRatio = _ref2$devicePixelRati === void 0 ? 1 : _ref2$devicePixelRati,\n      _ref2$modelMatrix = _ref2.modelMatrix,\n      modelMatrix = _ref2$modelMatrix === void 0 ? null : _ref2$modelMatrix,\n      _ref2$coordinateSyste = _ref2.coordinateSystem,\n      coordinateSystem = _ref2$coordinateSyste === void 0 ? COORDINATE_SYSTEM.LNGLAT : _ref2$coordinateSyste,\n      _ref2$coordinateOrigi = _ref2.coordinateOrigin,\n      coordinateOrigin = _ref2$coordinateOrigi === void 0 ? DEFAULT_COORDINATE_ORIGIN : _ref2$coordinateOrigi,\n      _ref2$wrapLongitude = _ref2.wrapLongitude,\n      wrapLongitude = _ref2$wrapLongitude === void 0 ? false : _ref2$wrapLongitude,\n      projectionMode = _ref2.projectionMode,\n      positionOrigin = _ref2.positionOrigin;\n\n  assert(viewport);\n\n  if (projectionMode !== undefined) {\n    log.removed('projectionMode', 'coordinateSystem')();\n  }\n\n  if (positionOrigin !== undefined) {\n    log.removed('positionOrigin', 'coordinateOrigin')();\n  }\n\n  return Object.assign({\n    project_uModelMatrix: modelMatrix || IDENTITY_MATRIX\n  }, getMemoizedViewportUniforms({\n    viewport: viewport,\n    devicePixelRatio: devicePixelRatio,\n    coordinateSystem: coordinateSystem,\n    coordinateOrigin: coordinateOrigin,\n    wrapLongitude: wrapLongitude\n  }));\n}\n\nfunction calculateViewportUniforms(_ref3) {\n  var viewport = _ref3.viewport,\n      devicePixelRatio = _ref3.devicePixelRatio,\n      coordinateSystem = _ref3.coordinateSystem,\n      coordinateOrigin = _ref3.coordinateOrigin,\n      wrapLongitude = _ref3.wrapLongitude;\n  var coordinateZoom = viewport.zoom;\n\n  var _calculateMatrixAndOf = calculateMatrixAndOffset({\n    coordinateSystem: coordinateSystem,\n    coordinateOrigin: coordinateOrigin,\n    coordinateZoom: coordinateZoom,\n    viewport: viewport\n  }),\n      projectionCenter = _calculateMatrixAndOf.projectionCenter,\n      viewProjectionMatrix = _calculateMatrixAndOf.viewProjectionMatrix,\n      cameraPos = _calculateMatrixAndOf.cameraPos,\n      shaderCoordinateSystem = _calculateMatrixAndOf.shaderCoordinateSystem,\n      shaderCoordinateOrigin = _calculateMatrixAndOf.shaderCoordinateOrigin;\n\n  assert(viewProjectionMatrix, 'Viewport missing modelViewProjectionMatrix');\n  var distanceScales = viewport.getDistanceScales();\n  var viewportSize = [viewport.width * devicePixelRatio, viewport.height * devicePixelRatio];\n  var uniforms = {\n    project_uCoordinateSystem: shaderCoordinateSystem,\n    project_uCenter: projectionCenter,\n    project_uWrapLongitude: wrapLongitude,\n    project_uAntimeridian: (viewport.longitude || 0) - 180,\n    project_uViewportSize: viewportSize,\n    project_uDevicePixelRatio: devicePixelRatio,\n    project_uFocalDistance: viewport.focalDistance || 1,\n    project_uCommonUnitsPerMeter: distanceScales.pixelsPerMeter,\n    project_uCommonUnitsPerWorldUnit: distanceScales.pixelsPerMeter,\n    project_uCommonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,\n    project_uScale: viewport.scale,\n    project_uViewProjectionMatrix: viewProjectionMatrix,\n    project_uCameraPosition: cameraPos\n  };\n  var distanceScalesAtOrigin = viewport.getDistanceScales(shaderCoordinateOrigin);\n\n  switch (shaderCoordinateSystem) {\n    case PROJECT_COORDINATE_SYSTEM.METER_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.pixelsPerMeter;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.pixelsPerMeter2;\n      break;\n\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_AUTO_OFFSET:\n      uniforms.project_uCoordinateOrigin = shaderCoordinateOrigin;\n\n    case PROJECT_COORDINATE_SYSTEM.LNG_LAT:\n    case PROJECT_COORDINATE_SYSTEM.LNGLAT_OFFSETS:\n      uniforms.project_uCommonUnitsPerWorldUnit = distanceScalesAtOrigin.pixelsPerDegree;\n      uniforms.project_uCommonUnitsPerWorldUnit2 = distanceScalesAtOrigin.pixelsPerDegree2;\n      break;\n\n    default:\n      break;\n  }\n\n  return uniforms;\n}","map":null,"metadata":{},"sourceType":"module"}