{"ast":null,"code":"import { applyPropOverrides } from '../lib/seer-integration';\nimport log from '../utils/log';\nimport { parsePropTypes } from './prop-types';\nexport function createProps() {\n  var component = this;\n  var propTypeDefs = getPropsPrototypeAndTypes(component.constructor);\n  var propsPrototype = propTypeDefs.defaultProps;\n  var propsInstance = Object.create(propsPrototype, {\n    _component: {\n      enumerable: false,\n      value: component\n    },\n    _asyncPropOriginalValues: {\n      enumerable: false,\n      value: {}\n    },\n    _asyncPropResolvedValues: {\n      enumerable: false,\n      value: {}\n    }\n  });\n\n  for (var i = 0; i < arguments.length; ++i) {\n    Object.assign(propsInstance, arguments[i]);\n  }\n\n  var layerName = component.constructor.layerName;\n  var deprecatedProps = propTypeDefs.deprecatedProps;\n  checkDeprecatedProps(layerName, propsInstance, deprecatedProps);\n  checkDeprecatedProps(layerName, propsInstance.updateTriggers, deprecatedProps);\n  checkDeprecatedProps(layerName, propsInstance.transitions, deprecatedProps);\n  applyPropOverrides(propsInstance);\n  Object.freeze(propsInstance);\n  return propsInstance;\n}\n\nfunction checkDeprecatedProps(layerName, propsInstance, deprecatedProps) {\n  if (!propsInstance) {\n    return;\n  }\n\n  for (var name in deprecatedProps) {\n    if (hasOwnProperty(propsInstance, name)) {\n      var nameStr = \"\".concat(layerName || 'Layer', \": \").concat(name);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = deprecatedProps[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var newPropName = _step.value;\n\n          if (!hasOwnProperty(propsInstance, newPropName)) {\n            propsInstance[newPropName] = propsInstance[name];\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      log.deprecated(nameStr, deprecatedProps[name].join('/'))();\n    }\n  }\n}\n\nfunction getPropsPrototypeAndTypes(componentClass) {\n  var props = getOwnProperty(componentClass, '_mergedDefaultProps');\n\n  if (props) {\n    return {\n      defaultProps: props,\n      propTypes: getOwnProperty(componentClass, '_propTypes'),\n      deprecatedProps: getOwnProperty(componentClass, '_deprecatedProps')\n    };\n  }\n\n  return createPropsPrototypeAndTypes(componentClass);\n}\n\nfunction createPropsPrototypeAndTypes(componentClass) {\n  var parent = componentClass.prototype;\n\n  if (!parent) {\n    return {\n      defaultProps: {}\n    };\n  }\n\n  var parentClass = Object.getPrototypeOf(componentClass);\n  var parentPropDefs = parent && getPropsPrototypeAndTypes(parentClass) || null;\n  var componentDefaultProps = getOwnProperty(componentClass, 'defaultProps') || {};\n  var componentPropDefs = parsePropTypes(componentDefaultProps);\n  var propTypes = Object.assign({}, parentPropDefs && parentPropDefs.propTypes, componentPropDefs.propTypes);\n  var defaultProps = createPropsPrototype(componentPropDefs.defaultProps, parentPropDefs && parentPropDefs.defaultProps, propTypes, componentClass);\n  var deprecatedProps = Object.assign({}, parentPropDefs && parentPropDefs.deprecatedProps, componentPropDefs.deprecatedProps);\n  componentClass._mergedDefaultProps = defaultProps;\n  componentClass._propTypes = propTypes;\n  componentClass._deprecatedProps = deprecatedProps;\n  return {\n    propTypes: propTypes,\n    defaultProps: defaultProps,\n    deprecatedProps: deprecatedProps\n  };\n}\n\nfunction createPropsPrototype(props, parentProps, propTypes, componentClass) {\n  var defaultProps = Object.create(null);\n  Object.assign(defaultProps, parentProps, props);\n  var id = getComponentName(componentClass);\n  delete props.id;\n  Object.defineProperties(defaultProps, {\n    id: {\n      configurable: false,\n      writable: true,\n      value: id\n    }\n  });\n  addAsyncPropsToPropPrototype(defaultProps, propTypes);\n  return defaultProps;\n}\n\nfunction addAsyncPropsToPropPrototype(defaultProps, propTypes) {\n  var defaultValues = {};\n  var descriptors = {\n    _asyncPropDefaultValues: {\n      enumerable: false,\n      value: defaultValues\n    },\n    _asyncPropOriginalValues: {\n      enumerable: false,\n      value: {}\n    }\n  };\n\n  for (var propName in propTypes) {\n    var propType = propTypes[propName];\n    var name = propType.name,\n        value = propType.value;\n\n    if (propType.async) {\n      defaultValues[name] = value;\n      descriptors[name] = getDescriptorForAsyncProp(name, value);\n    }\n  }\n\n  Object.defineProperties(defaultProps, descriptors);\n}\n\nfunction getDescriptorForAsyncProp(name) {\n  return {\n    configurable: false,\n    enumerable: true,\n    set: function set(newValue) {\n      if (typeof newValue === 'string' || newValue instanceof Promise) {\n        this._asyncPropOriginalValues[name] = newValue;\n      } else {\n        this._asyncPropResolvedValues[name] = newValue;\n      }\n    },\n    get: function get() {\n      if (this._asyncPropResolvedValues) {\n        if (name in this._asyncPropResolvedValues) {\n          var value = this._asyncPropResolvedValues[name];\n\n          if (name === 'data') {\n            return value || this._asyncPropDefaultValues[name];\n          }\n\n          return value;\n        }\n\n        if (name in this._asyncPropOriginalValues) {\n          var state = this._component && this._component.internalState;\n\n          if (state && state.hasAsyncProp(name)) {\n            return state.getAsyncProp(name);\n          }\n        }\n      }\n\n      return this._asyncPropDefaultValues[name];\n    }\n  };\n}\n\nfunction hasOwnProperty(object, prop) {\n  return Object.prototype.hasOwnProperty.call(object, prop);\n}\n\nfunction getOwnProperty(object, prop) {\n  return hasOwnProperty(object, prop) && object[prop];\n}\n\nfunction getComponentName(componentClass) {\n  var componentName = getOwnProperty(componentClass, 'layerName') || getOwnProperty(componentClass, 'componentName');\n\n  if (!componentName) {\n    log.once(0, \"\".concat(componentClass.name, \".componentName not specified\"))();\n  }\n\n  return componentName || componentClass.name;\n}","map":null,"metadata":{},"sourceType":"module"}