{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Buffer, Framebuffer, Texture2D } from '@luma.gl/core';\nexport function getFloatTexture(gl, opts) {\n  var _parameters;\n\n  var _opts$width = opts.width,\n      width = _opts$width === void 0 ? 1 : _opts$width,\n      _opts$height = opts.height,\n      height = _opts$height === void 0 ? 1 : _opts$height;\n  var texture = new Texture2D(gl, {\n    data: null,\n    format: 34836,\n    type: 5126,\n    border: 0,\n    mipmaps: false,\n    parameters: (_parameters = {}, _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10241, 9728), _parameters),\n    dataFormat: 6408,\n    width: width,\n    height: height\n  });\n  return texture;\n}\nexport function getFramebuffer(gl, opts) {\n  var id = opts.id,\n      _opts$width2 = opts.width,\n      width = _opts$width2 === void 0 ? 1 : _opts$width2,\n      _opts$height2 = opts.height,\n      height = _opts$height2 === void 0 ? 1 : _opts$height2;\n  var texture = opts.texture || getFloatTexture(gl, opts);\n  var fb = new Framebuffer(gl, {\n    id: id,\n    width: width,\n    height: height,\n    attachments: _defineProperty({}, 36064, texture)\n  });\n  return fb;\n}\nexport function getFloatArray(array, size) {\n  var fillValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!array || array.length < size) {\n    return new Float32Array(size).fill(fillValue);\n  }\n\n  return array;\n}\nexport function updateBuffer(_ref) {\n  var gl = _ref.gl,\n      bufferName = _ref.bufferName,\n      data = _ref.data,\n      result = _ref.result;\n\n  if (result[bufferName]) {\n    result[bufferName].subData({\n      data: data\n    });\n  } else {\n    result[bufferName] = new Buffer(gl, data);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}