{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { VertexShader, FragmentShader, Program } from '@luma.gl/webgl';\nimport { assert } from '../utils';\n\nvar ShaderCache = function () {\n  function ShaderCache() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        gl = _ref.gl,\n        _ref$_cachePrograms = _ref._cachePrograms,\n        _cachePrograms = _ref$_cachePrograms === void 0 ? false : _ref$_cachePrograms;\n\n    _classCallCheck(this, ShaderCache);\n\n    assert(gl);\n    this.gl = gl;\n    this.vertexShaders = {};\n    this.fragmentShaders = {};\n    this.programs = {};\n    this._cachePrograms = _cachePrograms;\n  }\n\n  _createClass(ShaderCache, [{\n    key: \"delete\",\n    value: function _delete() {\n      return this;\n    }\n  }, {\n    key: \"getVertexShader\",\n    value: function getVertexShader(gl, source) {\n      assert(typeof source === 'string');\n      assert(this._compareContexts(gl, this.gl));\n      var shader = this.vertexShaders[source];\n\n      if (!shader) {\n        shader = new VertexShader(gl, source);\n        this.vertexShaders[source] = shader;\n      }\n\n      return shader;\n    }\n  }, {\n    key: \"getFragmentShader\",\n    value: function getFragmentShader(gl, source) {\n      assert(typeof source === 'string');\n      assert(this._compareContexts(gl, this.gl));\n      var shader = this.fragmentShaders[source];\n\n      if (!shader) {\n        shader = new FragmentShader(gl, source);\n        this.fragmentShaders[source] = shader;\n      }\n\n      return shader;\n    }\n  }, {\n    key: \"getProgram\",\n    value: function getProgram(gl, opts) {\n      assert(this._compareContexts(gl, this.gl));\n      assert(typeof opts.vs === 'string');\n      assert(typeof opts.fs === 'string');\n      assert(typeof opts.id === 'string');\n\n      var cacheKey = this._getProgramKey(opts);\n\n      var program = this.programs[cacheKey];\n\n      if (program) {\n        this._resetProgram(program);\n\n        return program;\n      }\n\n      program = this._createNewProgram(gl, opts);\n\n      if (this._cachePrograms && this._checkProgramProp(program)) {\n        program._isCached = true;\n        this.programs[cacheKey] = program;\n      }\n\n      return program;\n    }\n  }, {\n    key: \"_getProgramKey\",\n    value: function _getProgramKey(opts) {\n      return \"\".concat(opts.id, \"-\").concat(opts.vs, \"-\").concat(opts.fs);\n    }\n  }, {\n    key: \"_checkProgramProp\",\n    value: function _checkProgramProp(program) {\n      return !program.varyings;\n    }\n  }, {\n    key: \"_createNewProgram\",\n    value: function _createNewProgram(gl, opts) {\n      var vs = opts.vs,\n          fs = opts.fs;\n      var vertexShader = this.getVertexShader(gl, vs);\n      var fragmentShader = this.getFragmentShader(gl, fs);\n      return new Program(this.gl, Object.assign({}, opts, {\n        vs: vertexShader,\n        fs: fragmentShader\n      }));\n    }\n  }, {\n    key: \"_resetProgram\",\n    value: function _resetProgram(program, opts) {\n      program.reset();\n    }\n  }, {\n    key: \"_compareContexts\",\n    value: function _compareContexts(gl1, gl2) {\n      return (gl1.gl || gl1) === (gl2.gl || gl2);\n    }\n  }]);\n\n  return ShaderCache;\n}();\n\nexport { ShaderCache as default };","map":null,"metadata":{},"sourceType":"module"}