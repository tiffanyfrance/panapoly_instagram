{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar TYPE_DEFINITIONS = {\n  boolean: {\n    validate: function validate(value, propType) {\n      return true;\n    },\n    equal: function equal(value1, value2, propType) {\n      return Boolean(value1) === Boolean(value2);\n    }\n  },\n  number: {\n    validate: function validate(value, propType) {\n      return Number.isFinite(value) && (!('max' in propType) || value <= propType.max) && (!('min' in propType) || value >= propType.min);\n    }\n  },\n  color: {\n    validate: function validate(value, propType) {\n      return isArray(value) && (value.length === 3 || value.length === 4);\n    },\n    equal: function equal(value1, value2, propType) {\n      return arrayEqual(value1, value2);\n    }\n  },\n  accessor: {\n    validate: function validate(value, propType) {\n      var valueType = getTypeOf(value);\n      return valueType === 'function' || valueType === getTypeOf(propType.value);\n    },\n    equal: function equal(value1, value2, propType) {\n      if (typeof value2 === 'function') {\n        return true;\n      }\n\n      return arrayEqual(value1, value2);\n    }\n  },\n  array: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || isArray(value);\n    },\n    equal: function equal(value1, value2, propType) {\n      return propType.compare ? arrayEqual(value1, value2) : value1 === value2;\n    }\n  },\n  function: {\n    validate: function validate(value, propType) {\n      return propType.optional && !value || typeof value === 'function';\n    },\n    equal: function equal(value1, value2, propType) {\n      return !propType.compare || value1 === value2;\n    }\n  }\n};\n\nfunction arrayEqual(array1, array2) {\n  if (array1 === array2) {\n    return true;\n  }\n\n  if (!isArray(array1) || !isArray(array2)) {\n    return false;\n  }\n\n  var len = array1.length;\n\n  if (len !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function parsePropTypes(propDefs) {\n  var propTypes = {};\n  var defaultProps = {};\n  var deprecatedProps = {};\n\n  var _arr = Object.entries(propDefs);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var _arr$_i = _slicedToArray(_arr[_i], 2),\n        propName = _arr$_i[0],\n        propDef = _arr$_i[1];\n\n    if (propDef && propDef.deprecatedFor) {\n      deprecatedProps[propName] = Array.isArray(propDef.deprecatedFor) ? propDef.deprecatedFor : [propDef.deprecatedFor];\n    } else {\n      var propType = parsePropType(propName, propDef);\n      propTypes[propName] = propType;\n      defaultProps[propName] = propType.value;\n    }\n  }\n\n  return {\n    propTypes: propTypes,\n    defaultProps: defaultProps,\n    deprecatedProps: deprecatedProps\n  };\n}\n\nfunction parsePropType(name, propDef) {\n  switch (getTypeOf(propDef)) {\n    case 'object':\n      return normalizePropDefinition(name, propDef);\n\n    case 'array':\n      return normalizePropDefinition(name, {\n        type: 'array',\n        value: propDef,\n        compare: false\n      });\n\n    case 'boolean':\n      return normalizePropDefinition(name, {\n        type: 'boolean',\n        value: propDef\n      });\n\n    case 'number':\n      return normalizePropDefinition(name, {\n        type: 'number',\n        value: propDef\n      });\n\n    case 'function':\n      return normalizePropDefinition(name, {\n        type: 'function',\n        value: propDef,\n        compare: true\n      });\n\n    default:\n      return {\n        name: name,\n        type: 'unknown',\n        value: propDef\n      };\n  }\n}\n\nfunction normalizePropDefinition(name, propDef) {\n  if (!('type' in propDef)) {\n    if (!('value' in propDef)) {\n      return {\n        name: name,\n        type: 'object',\n        value: propDef\n      };\n    }\n\n    return Object.assign({\n      name: name,\n      type: getTypeOf(propDef.value)\n    }, propDef);\n  }\n\n  return Object.assign({\n    name: name\n  }, TYPE_DEFINITIONS[propDef.type], propDef);\n}\n\nfunction isArray(value) {\n  return Array.isArray(value) || ArrayBuffer.isView(value);\n}\n\nfunction getTypeOf(value) {\n  if (isArray(value)) {\n    return 'array';\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  return _typeof(value);\n}","map":null,"metadata":{},"sourceType":"module"}