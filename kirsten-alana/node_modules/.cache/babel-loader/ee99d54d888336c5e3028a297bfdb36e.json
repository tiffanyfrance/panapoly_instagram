{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { experimental } from '@deck.gl/core';\nvar Tesselator = experimental.Tesselator;\nimport { fp64 as fp64Module } from '@luma.gl/core';\nvar fp64LowPart = fp64Module.fp64LowPart;\n\nvar PathTesselator = function (_Tesselator) {\n  _inherits(PathTesselator, _Tesselator);\n\n  function PathTesselator(_ref) {\n    var data = _ref.data,\n        getGeometry = _ref.getGeometry,\n        positionFormat = _ref.positionFormat,\n        fp64 = _ref.fp64;\n\n    _classCallCheck(this, PathTesselator);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PathTesselator).call(this, {\n      data: data,\n      getGeometry: getGeometry,\n      fp64: fp64,\n      positionFormat: positionFormat,\n      attributes: {\n        startPositions: {\n          size: 3\n        },\n        endPositions: {\n          size: 3\n        },\n        leftDeltas: {\n          size: 3\n        },\n        rightDeltas: {\n          size: 3\n        },\n        startEndPositions64XyLow: {\n          size: 4,\n          fp64Only: true\n        }\n      }\n    }));\n  }\n\n  _createClass(PathTesselator, [{\n    key: \"get\",\n    value: function get(attributeName, target, accessor) {\n      if (this.attributes[attributeName]) {\n        return this.attributes[attributeName];\n      }\n\n      switch (attributeName) {\n        case 'strokeWidths':\n          return this._updateAttribute({\n            target: target,\n            size: 1,\n            getValue: function getValue(object, objectInfo) {\n              objectInfo.target[0] = accessor(object, objectInfo);\n              return objectInfo.target;\n            }\n          });\n\n        case 'dashArrays':\n          return this._updateAttribute({\n            target: target,\n            size: 2,\n            getValue: accessor\n          });\n\n        case 'colors':\n          return this._updateAttribute({\n            target: target,\n            size: 4,\n            getValue: function getValue(object, objectInfo) {\n              var color = accessor(object, objectInfo);\n\n              if (color.length === 4) {\n                return color;\n              }\n\n              var value = objectInfo.target;\n              value[0] = color[0];\n              value[1] = color[1];\n              value[2] = color[2];\n              value[3] = 255;\n              return value;\n            }\n          });\n\n        case 'pickingColors':\n          return this._updateAttribute({\n            target: target,\n            size: 3,\n            getValue: function getValue(object, _ref2) {\n              var index = _ref2.index,\n                  value = _ref2.target;\n              return accessor(index, value);\n            }\n          });\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getGeometrySize\",\n    value: function getGeometrySize(path) {\n      return Math.max(0, this.getPathLength(path) - 1);\n    }\n  }, {\n    key: \"updateGeometryAttributes\",\n    value: function updateGeometryAttributes(path, context) {\n      var _this$attributes = this.attributes,\n          startPositions = _this$attributes.startPositions,\n          endPositions = _this$attributes.endPositions,\n          leftDeltas = _this$attributes.leftDeltas,\n          rightDeltas = _this$attributes.rightDeltas,\n          startEndPositions64XyLow = _this$attributes.startEndPositions64XyLow,\n          fp64 = this.fp64;\n      var numPoints = context.geometrySize + 1;\n\n      if (numPoints < 2) {\n        return;\n      }\n\n      var isPathClosed = this.isClosed(path);\n      var startPoint = this.getPointOnPath(path, 0);\n      var endPoint = this.getPointOnPath(path, 1);\n      var prevPoint = isPathClosed ? this.getPointOnPath(path, numPoints - 2) : startPoint;\n      var nextPoint;\n\n      for (var i = context.vertexStart, ptIndex = 1; ptIndex < numPoints; i++, ptIndex++) {\n        if (ptIndex + 1 < numPoints) {\n          nextPoint = this.getPointOnPath(path, ptIndex + 1);\n        } else {\n          nextPoint = isPathClosed ? this.getPointOnPath(path, 1) : endPoint;\n        }\n\n        startPositions[i * 3] = startPoint[0];\n        startPositions[i * 3 + 1] = startPoint[1];\n        startPositions[i * 3 + 2] = startPoint[2] || 0;\n        endPositions[i * 3] = endPoint[0];\n        endPositions[i * 3 + 1] = endPoint[1];\n        endPositions[i * 3 + 2] = endPoint[2] || 0;\n        leftDeltas[i * 3] = startPoint[0] - prevPoint[0];\n        leftDeltas[i * 3 + 1] = startPoint[1] - prevPoint[1];\n        leftDeltas[i * 3 + 2] = startPoint[2] - prevPoint[2] || 0;\n        rightDeltas[i * 3] = nextPoint[0] - endPoint[0];\n        rightDeltas[i * 3 + 1] = nextPoint[1] - endPoint[1];\n        rightDeltas[i * 3 + 2] = nextPoint[2] - endPoint[2] || 0;\n\n        if (fp64) {\n          startEndPositions64XyLow[i * 4] = fp64LowPart(startPoint[0]);\n          startEndPositions64XyLow[i * 4 + 1] = fp64LowPart(startPoint[1]);\n          startEndPositions64XyLow[i * 4 + 2] = fp64LowPart(endPoint[0]);\n          startEndPositions64XyLow[i * 4 + 3] = fp64LowPart(endPoint[1]);\n        }\n\n        prevPoint = startPoint;\n        startPoint = endPoint;\n        endPoint = nextPoint;\n      }\n    }\n  }, {\n    key: \"getPathLength\",\n    value: function getPathLength(path) {\n      if (Number.isFinite(path[0])) {\n        return path.length / this.positionSize;\n      }\n\n      return path.length;\n    }\n  }, {\n    key: \"getPointOnPath\",\n    value: function getPointOnPath(path, index) {\n      if (Number.isFinite(path[0])) {\n        var positionSize = this.positionSize;\n        return [path[index * positionSize], path[index * positionSize + 1], positionSize === 3 ? path[index * positionSize + 2] : 0];\n      }\n\n      return path[index];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed(path) {\n      var numPoints = this.getPathLength(path);\n      var firstPoint = this.getPointOnPath(path, 0);\n      var lastPoint = this.getPointOnPath(path, numPoints - 1);\n      return firstPoint[0] === lastPoint[0] && firstPoint[1] === lastPoint[1] && firstPoint[2] === lastPoint[2];\n    }\n  }]);\n\n  return PathTesselator;\n}(Tesselator);\n\nexport { PathTesselator as default };","map":null,"metadata":{},"sourceType":"module"}