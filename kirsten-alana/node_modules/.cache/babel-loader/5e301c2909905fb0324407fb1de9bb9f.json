{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nimport { Texture2D, readPixelsToBuffer } from '@luma.gl/core';\nimport { loadImage } from '@loaders.gl/images';\nimport { createIterable } from '@deck.gl/core';\nvar DEFAULT_CANVAS_WIDTH = 1024;\nvar DEFAULT_BUFFER = 4;\n\nvar noop = function noop() {};\n\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9987), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _DEFAULT_TEXTURE_PARA);\n\nfunction nextPowOfTwo(number) {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\nfunction resizeImage(ctx, imageData, width, height) {\n  var naturalWidth = imageData.naturalWidth,\n      naturalHeight = imageData.naturalHeight;\n\n  if (width === naturalWidth && height === naturalHeight) {\n    return imageData;\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.drawImage(imageData, 0, 0, naturalWidth, naturalHeight, 0, 0, width, height);\n  return ctx.canvas;\n}\n\nfunction getIconId(icon) {\n  return icon && (icon.id || icon.url);\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  for (var i = 0; i < columns.length; i++) {\n    var _columns$i = columns[i],\n        icon = _columns$i.icon,\n        xOffset = _columns$i.xOffset;\n    var id = getIconId(icon);\n    mapping[id] = Object.assign({}, icon, {\n      x: xOffset,\n      y: yOffset\n    });\n  }\n}\n\nfunction resizeTexture(texture, width, height) {\n  var oldWidth = texture.width;\n  var oldHeight = texture.height;\n  var oldPixels = readPixelsToBuffer(texture, {});\n  texture.resize({\n    width: width,\n    height: height\n  });\n  texture.setSubImageData({\n    data: oldPixels,\n    x: 0,\n    y: height - oldHeight,\n    width: oldWidth,\n    height: oldHeight,\n    parameters: DEFAULT_TEXTURE_PARAMETERS\n  });\n  texture.generateMipmap();\n  oldPixels.delete();\n  return texture;\n}\n\nexport function buildMapping(_ref) {\n  var icons = _ref.icons,\n      buffer = _ref.buffer,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset,\n      canvasWidth = _ref.canvasWidth;\n  var rowHeight = 0;\n  var columns = [];\n\n  for (var i = 0; i < icons.length; i++) {\n    var icon = icons[i];\n    var id = getIconId(icon);\n\n    if (!mapping[id]) {\n      var height = icon.height,\n          width = icon.width;\n\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon: icon,\n        xOffset: xOffset\n      });\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping: mapping,\n    xOffset: xOffset,\n    yOffset: yOffset,\n    canvasWidth: canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\nexport function getDiffIcons(data, getIcon, cachedIcons) {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  var icons = {};\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var object = _step.value;\n      objectInfo.index++;\n      var icon = getIcon(object, objectInfo);\n      var id = getIconId(icon);\n\n      if (!icon) {\n        throw new Error('Icon is missing.');\n      }\n\n      if (!icon.url) {\n        throw new Error('Icon url is missing.');\n      }\n\n      if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n        icons[id] = icon;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return icons;\n}\n\nvar IconManager = function () {\n  function IconManager(gl, _ref2) {\n    var _ref2$onUpdate = _ref2.onUpdate,\n        onUpdate = _ref2$onUpdate === void 0 ? noop : _ref2$onUpdate;\n\n    _classCallCheck(this, IconManager);\n\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this._getIcon = null;\n    this._texture = null;\n    this._mapping = {};\n    this._autoPacking = false;\n    this._xOffset = 0;\n    this._yOffset = 0;\n    this._buffer = DEFAULT_BUFFER;\n    this._canvasWidth = DEFAULT_CANVAS_WIDTH;\n    this._canvasHeight = 0;\n    this._canvas = null;\n  }\n\n  _createClass(IconManager, [{\n    key: \"getTexture\",\n    value: function getTexture() {\n      return this._texture;\n    }\n  }, {\n    key: \"getIconMapping\",\n    value: function getIconMapping(object, objectInfo) {\n      var icon = this._getIcon(object, objectInfo);\n\n      var id = this._autoPacking ? getIconId(icon) : icon;\n      return this._mapping[id] || {};\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(_ref3) {\n      var autoPacking = _ref3.autoPacking,\n          iconAtlas = _ref3.iconAtlas,\n          iconMapping = _ref3.iconMapping,\n          data = _ref3.data,\n          getIcon = _ref3.getIcon;\n\n      if (autoPacking !== undefined) {\n        this._autoPacking = autoPacking;\n      }\n\n      if (getIcon) {\n        this._getIcon = getIcon;\n      }\n\n      if (iconMapping) {\n        this._mapping = iconMapping;\n      }\n\n      if (iconAtlas) {\n        this._updateIconAtlas(iconAtlas);\n      }\n\n      if (this._autoPacking && (data || getIcon) && typeof document !== 'undefined') {\n        this._canvas = this._canvas || document.createElement('canvas');\n\n        this._updateAutoPacking(data);\n      }\n    }\n  }, {\n    key: \"_updateIconAtlas\",\n    value: function _updateIconAtlas(iconAtlas) {\n      var _this = this;\n\n      if (iconAtlas instanceof Texture2D) {\n        iconAtlas.setParameters(DEFAULT_TEXTURE_PARAMETERS);\n        this._texture = iconAtlas;\n        this.onUpdate();\n      } else if (typeof iconAtlas === 'string') {\n        loadImage(iconAtlas).then(function (data) {\n          _this._texture = new Texture2D(_this.gl, {\n            data: data,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n\n          _this.onUpdate();\n        });\n      }\n    }\n  }, {\n    key: \"_updateAutoPacking\",\n    value: function _updateAutoPacking(data) {\n      var icons = Object.values(getDiffIcons(data, this._getIcon, this._mapping) || {});\n\n      if (icons.length > 0) {\n        var _buildMapping = buildMapping({\n          icons: icons,\n          buffer: this._buffer,\n          canvasWidth: this._canvasWidth,\n          mapping: this._mapping,\n          xOffset: this._xOffset,\n          yOffset: this._yOffset\n        }),\n            mapping = _buildMapping.mapping,\n            xOffset = _buildMapping.xOffset,\n            yOffset = _buildMapping.yOffset,\n            canvasHeight = _buildMapping.canvasHeight;\n\n        this._mapping = mapping;\n        this._xOffset = xOffset;\n        this._yOffset = yOffset;\n        this._canvasHeight = canvasHeight;\n\n        if (!this._texture) {\n          this._texture = new Texture2D(this.gl, {\n            width: this._canvasWidth,\n            height: this._canvasHeight,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n        }\n\n        if (this._texture.height !== this._canvasHeight) {\n          resizeTexture(this._texture, this._canvasWidth, this._canvasHeight);\n        }\n\n        this.onUpdate();\n\n        this._loadIcons(icons);\n      }\n    }\n  }, {\n    key: \"_loadIcons\",\n    value: function _loadIcons(icons) {\n      var _this2 = this;\n\n      var ctx = this._canvas.getContext('2d');\n\n      var canvasHeight = this._texture.height;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var icon = _step2.value;\n          loadImage(icon.url).then(function (imageData) {\n            var id = getIconId(icon);\n            var _this2$_mapping$id = _this2._mapping[id],\n                x = _this2$_mapping$id.x,\n                y = _this2$_mapping$id.y,\n                width = _this2$_mapping$id.width,\n                height = _this2$_mapping$id.height;\n            var data = resizeImage(ctx, imageData, width, height);\n\n            _this2._texture.setSubImageData({\n              data: data,\n              x: x,\n              y: canvasHeight - y - height,\n              width: width,\n              height: height,\n              parameters: Object.assign({}, DEFAULT_TEXTURE_PARAMETERS, _defineProperty({}, 37440, true))\n            });\n\n            _this2._texture.generateMipmap();\n\n            _this2.onUpdate();\n          });\n        };\n\n        for (var _iterator2 = icons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  }]);\n\n  return IconManager;\n}();\n\nexport { IconManager as default };","map":null,"metadata":{},"sourceType":"module"}