{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/esm/get\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { Layer, createIterable } from '@deck.gl/core';\nimport { Model, Geometry, Texture2D, fp64, PhongMaterial, isWebGL2 } from '@luma.gl/core';\nimport { load } from '@loaders.gl/core';\nimport { loadImage } from '@loaders.gl/images';\nvar fp64LowPart = fp64.fp64LowPart;\nimport { MATRIX_ATTRIBUTES } from '../utils/matrix';\nimport vs1 from './simple-mesh-layer-vertex.glsl1';\nimport fs1 from './simple-mesh-layer-fragment.glsl1';\nimport vs3 from './simple-mesh-layer-vertex.glsl';\nimport fs3 from './simple-mesh-layer-fragment.glsl';\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(\"deck.gl: \".concat(message));\n  }\n}\n\nfunction getTexture(gl, src, opts) {\n  if (typeof src === 'string') {\n    return loadImage(src).then(function (data) {\n      return getTextureFromData(gl, data, opts);\n    }).catch(function (error) {\n      throw new Error(\"Could not load texture from \".concat(src, \": \").concat(error));\n    });\n  }\n\n  return new Promise(function (resolve) {\n    return resolve(getTextureFromData(gl, src, opts));\n  });\n}\n\nfunction getTextureFromData(gl, data, opts) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n\n  return new Texture2D(gl, Object.assign({\n    data: data\n  }, opts));\n}\n\nfunction validateGeometryAttributes(attributes) {\n  assert(attributes.positions || attributes.POSITION, 'SimpleMeshLayer requires \"postions\" or \"POSITION\" attribute in mesh property.');\n}\n\nfunction getGeometry(data) {\n  if (data.attributes) {\n    validateGeometryAttributes(data.attributes);\n\n    if (data instanceof Geometry) {\n      return data;\n    } else {\n      return new Geometry(data);\n    }\n  } else if (data.positions || data.POSITION) {\n    validateGeometryAttributes(data);\n    return new Geometry({\n      attributes: data\n    });\n  }\n\n  throw Error('Invalid mesh');\n}\n\nvar DEFAULT_COLOR = [0, 0, 0, 255];\nvar defaultMaterial = new PhongMaterial();\nvar defaultProps = {\n  fetch: function (_fetch) {\n    function fetch(_x, _x2) {\n      return _fetch.apply(this, arguments);\n    }\n\n    fetch.toString = function () {\n      return _fetch.toString();\n    };\n\n    return fetch;\n  }(function (url, _ref) {\n    var propName = _ref.propName;\n\n    if (propName === 'mesh') {\n      return load(url);\n    }\n\n    return fetch(url).then(function (response) {\n      return response.json();\n    });\n  }),\n  mesh: {\n    value: null,\n    type: 'object',\n    async: true\n  },\n  texture: null,\n  sizeScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  parameters: {\n    depthTest: true,\n    depthFunc: 515\n  },\n  fp64: false,\n  wireframe: false,\n  material: defaultMaterial,\n  getPosition: {\n    type: 'accessor',\n    value: function value(x) {\n      return x.position;\n    }\n  },\n  getColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getOrientation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getScale: {\n    type: 'accessor',\n    value: [1, 1, 1]\n  },\n  getTranslation: {\n    type: 'accessor',\n    value: [0, 0, 0]\n  },\n  getTransformMatrix: {\n    type: 'accessor',\n    value: []\n  }\n};\n\nvar SimpleMeshLayer = function (_Layer) {\n  _inherits(SimpleMeshLayer, _Layer);\n\n  function SimpleMeshLayer() {\n    _classCallCheck(this, SimpleMeshLayer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SimpleMeshLayer).apply(this, arguments));\n  }\n\n  _createClass(SimpleMeshLayer, [{\n    key: \"getShaders\",\n    value: function getShaders() {\n      var projectModule = this.use64bitProjection() ? 'project64' : 'project32';\n      var gl2 = isWebGL2(this.context.gl);\n      var vs = gl2 ? vs3 : vs1;\n      var fs = gl2 ? fs3 : fs1;\n      return {\n        vs: vs,\n        fs: fs,\n        modules: [projectModule, 'phong-lighting', 'picking']\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState() {\n      var attributeManager = this.getAttributeManager();\n      attributeManager.addInstanced({\n        instancePositions: {\n          transition: true,\n          size: 3,\n          accessor: 'getPosition'\n        },\n        instancePositions64xy: {\n          size: 2,\n          accessor: 'getPosition',\n          update: this.calculateInstancePositions64xyLow\n        },\n        instanceColors: {\n          transition: true,\n          size: 4,\n          accessor: 'getColor',\n          defaultValue: [0, 0, 0, 255]\n        },\n        instanceModelMatrix: MATRIX_ATTRIBUTES\n      });\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps,\n          changeFlags = _ref2.changeFlags;\n\n      _get(_getPrototypeOf(SimpleMeshLayer.prototype), \"updateState\", this).call(this, {\n        props: props,\n        oldProps: oldProps,\n        changeFlags: changeFlags\n      });\n\n      if (props.mesh !== oldProps.mesh || props.fp64 !== oldProps.fp64) {\n        if (this.state.model) {\n          this.state.model.delete();\n        }\n\n        if (props.mesh) {\n          this.setState({\n            model: this.getModel(props.mesh)\n          });\n          var attributes = props.mesh.attributes || props.mesh;\n          this.setState({\n            hasNormals: Boolean(attributes.NORMAL || attributes.normals)\n          });\n        }\n\n        this.getAttributeManager().invalidateAll();\n      }\n\n      if (props.texture !== oldProps.texture) {\n        this.setTexture(props.texture);\n      }\n\n      if (this.state.model) {\n        this.state.model.setDrawMode(this.props.wireframe ? 3 : 4);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(_ref3) {\n      var uniforms = _ref3.uniforms;\n\n      if (!this.state.model) {\n        return;\n      }\n\n      var sizeScale = this.props.sizeScale;\n      this.state.model.draw({\n        uniforms: Object.assign({}, uniforms, {\n          sizeScale: sizeScale,\n          flatShade: !this.state.hasNormals\n        })\n      });\n    }\n  }, {\n    key: \"getModel\",\n    value: function getModel(mesh) {\n      var model = new Model(this.context.gl, Object.assign({}, this.getShaders(), {\n        id: this.props.id,\n        geometry: getGeometry(mesh),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      }));\n\n      if (this.state.texture) {\n        model.setUniforms({\n          sampler: this.state.texture,\n          hasTexture: 1\n        });\n      } else {\n        model.setUniforms({\n          sampler: this.state.emptyTexture,\n          hasTexture: 0\n        });\n      }\n\n      return model;\n    }\n  }, {\n    key: \"setTexture\",\n    value: function setTexture(src) {\n      var _this = this;\n\n      var gl = this.context.gl;\n      var emptyTexture = this.state.emptyTexture;\n\n      if (src) {\n        getTexture(gl, src).then(function (texture) {\n          _this.setState({\n            texture: texture\n          });\n\n          if (_this.state.model) {\n            _this.state.model.setUniforms({\n              sampler: _this.state.texture,\n              hasTexture: 1\n            });\n          }\n        });\n      } else {\n        this.setState({\n          texture: null\n        });\n\n        if (this.state.model) {\n          this.state.model.setUniforms({\n            sampler: emptyTexture,\n            hasTexture: 0\n          });\n        }\n      }\n    }\n  }, {\n    key: \"calculateInstancePositions64xyLow\",\n    value: function calculateInstancePositions64xyLow(attribute) {\n      var isFP64 = this.use64bitPositions();\n      attribute.constant = !isFP64;\n\n      if (!isFP64) {\n        attribute.value = new Float32Array(2);\n        return;\n      }\n\n      var _this$props = this.props,\n          data = _this$props.data,\n          getPosition = _this$props.getPosition;\n      var value = attribute.value;\n      var i = 0;\n\n      var _createIterable = createIterable(data),\n          iterable = _createIterable.iterable,\n          objectInfo = _createIterable.objectInfo;\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var object = _step.value;\n          objectInfo.index++;\n          var position = getPosition(object, objectInfo);\n          value[i++] = fp64LowPart(position[0]);\n          value[i++] = fp64LowPart(position[1]);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }]);\n\n  return SimpleMeshLayer;\n}(Layer);\n\nexport { SimpleMeshLayer as default };\nSimpleMeshLayer.layerName = 'SimpleMeshLayer';\nSimpleMeshLayer.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"module"}