{"ast":null,"code":"import { hexbin } from 'd3-hexbin';\nimport { createIterable } from '@deck.gl/core';\nexport function pointToHexbin(_ref, viewport) {\n  var data = _ref.data,\n      radius = _ref.radius,\n      getPosition = _ref.getPosition;\n  var radiusInPixel = getRadiusInPixel(radius, viewport);\n  var screenPoints = [];\n\n  var _createIterable = createIterable(data),\n      iterable = _createIterable.iterable,\n      objectInfo = _createIterable.objectInfo;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var object = _step.value;\n      objectInfo.index++;\n      screenPoints.push(Object.assign({\n        screenCoord: viewport.projectFlat(getPosition(object, objectInfo))\n      }, object));\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var newHexbin = hexbin().radius(radiusInPixel).x(function (d) {\n    return d.screenCoord[0];\n  }).y(function (d) {\n    return d.screenCoord[1];\n  });\n  var hexagonBins = newHexbin(screenPoints);\n  return {\n    hexagons: hexagonBins.map(function (hex, index) {\n      return {\n        position: viewport.unprojectFlat([hex.x, hex.y]),\n        points: hex,\n        index: index\n      };\n    })\n  };\n}\nexport function getRadiusInPixel(radius, viewport) {\n  var _viewport$getDistance = viewport.getDistanceScales(),\n      pixelsPerMeter = _viewport$getDistance.pixelsPerMeter;\n\n  return radius * pixelsPerMeter[0];\n}","map":null,"metadata":{},"sourceType":"module"}