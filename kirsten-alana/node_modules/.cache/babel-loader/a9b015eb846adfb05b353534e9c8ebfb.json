{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Resource from './resource';\nimport Texture2D from './texture-2d';\nimport Renderbuffer from './renderbuffer';\nimport { clear as _clear, clearBuffer } from './clear';\nimport { copyToDataUrl } from './copy-and-blit.js';\nimport { getFeatures } from '../features';\nimport { isWebGL2, assertWebGL2Context, getKey } from '../webgl-utils';\nimport { log as _log, assert } from '../utils';\nvar ERR_MULTIPLE_RENDERTARGETS = 'Multiple render targets not supported';\n\nvar Framebuffer = function (_Resource) {\n  _inherits(Framebuffer, _Resource);\n\n  _createClass(Framebuffer, [{\n    key: \"MAX_COLOR_ATTACHMENTS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_COLOR_ATTACHMENTS);\n    }\n  }, {\n    key: \"MAX_DRAW_BUFFERS\",\n    get: function get() {\n      return this.gl.getParameter(this.gl.MAX_DRAW_BUFFERS);\n    }\n  }], [{\n    key: \"isSupported\",\n    value: function isSupported(gl) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          colorBufferFloat = _ref.colorBufferFloat,\n          colorBufferHalfFloat = _ref.colorBufferHalfFloat;\n\n      var supported = true;\n      supported = colorBufferFloat && gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'WEBGL.color_buffer_float');\n      supported = colorBufferHalfFloat && gl.getExtension(isWebGL2(gl) ? 'EXT_color_buffer_float' : 'EXT_color_buffer_half_float');\n      return supported;\n    }\n  }, {\n    key: \"getDefaultFramebuffer\",\n    value: function getDefaultFramebuffer(gl) {\n      gl.luma = gl.luma || {};\n      gl.luma.defaultFramebuffer = gl.luma.defaultFramebuffer || new Framebuffer(gl, {\n        id: 'default-framebuffer',\n        handle: null,\n        attachments: {}\n      });\n      return gl.luma.defaultFramebuffer;\n    }\n  }]);\n\n  function Framebuffer(gl) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Framebuffer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Framebuffer).call(this, gl, opts));\n    _this.width = null;\n    _this.height = null;\n    _this.attachments = {};\n    _this.readBuffer = 36064;\n    _this.drawBuffers = [36064];\n\n    _this.initialize(opts);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Framebuffer, [{\n    key: \"initialize\",\n    value: function initialize(_ref2) {\n      var _ref2$width = _ref2.width,\n          width = _ref2$width === void 0 ? 1 : _ref2$width,\n          _ref2$height = _ref2.height,\n          height = _ref2$height === void 0 ? 1 : _ref2$height,\n          _ref2$attachments = _ref2.attachments,\n          attachments = _ref2$attachments === void 0 ? null : _ref2$attachments,\n          _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? true : _ref2$color,\n          _ref2$depth = _ref2.depth,\n          depth = _ref2$depth === void 0 ? true : _ref2$depth,\n          _ref2$stencil = _ref2.stencil,\n          stencil = _ref2$stencil === void 0 ? false : _ref2$stencil,\n          _ref2$check = _ref2.check,\n          check = _ref2$check === void 0 ? true : _ref2$check,\n          readBuffer = _ref2.readBuffer,\n          drawBuffers = _ref2.drawBuffers;\n      assert(width >= 0 && height >= 0, 'Width and height need to be integers');\n      this.width = width;\n      this.height = height;\n\n      if (attachments) {\n        for (var attachment in attachments) {\n          var target = attachments[attachment];\n          var object = Array.isArray(target) ? target[0] : target;\n          object.resize({\n            width: width,\n            height: height\n          });\n        }\n      } else {\n        attachments = this._createDefaultAttachments(color, depth, stencil, width, height);\n      }\n\n      this.update({\n        clearAttachments: true,\n        attachments: attachments,\n        readBuffer: readBuffer,\n        drawBuffers: drawBuffers\n      });\n\n      if (attachments && check) {\n        this.checkStatus();\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(_ref3) {\n      var _ref3$attachments = _ref3.attachments,\n          attachments = _ref3$attachments === void 0 ? {} : _ref3$attachments,\n          readBuffer = _ref3.readBuffer,\n          drawBuffers = _ref3.drawBuffers,\n          _ref3$clearAttachment = _ref3.clearAttachments,\n          clearAttachments = _ref3$clearAttachment === void 0 ? false : _ref3$clearAttachment,\n          _ref3$resizeAttachmen = _ref3.resizeAttachments,\n          resizeAttachments = _ref3$resizeAttachmen === void 0 ? true : _ref3$resizeAttachmen;\n      this.attach(attachments, {\n        clearAttachments: clearAttachments,\n        resizeAttachments: resizeAttachments\n      });\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n\n      if (readBuffer) {\n        this._setReadBuffer(readBuffer);\n      }\n\n      if (drawBuffers) {\n        this._setDrawBuffers(drawBuffers);\n      }\n\n      gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          width = _ref4.width,\n          height = _ref4.height;\n\n      if (this.handle === null) {\n        assert(width === undefined && height === undefined);\n        this.width = this.gl.drawingBufferWidth;\n        this.height = this.gl.drawingBufferHeight;\n        return this;\n      }\n\n      if (width === undefined) {\n        width = this.gl.drawingBufferWidth;\n      }\n\n      if (height === undefined) {\n        height = this.gl.drawingBufferHeight;\n      }\n\n      if (width !== this.width && height !== this.height) {\n        _log.log(2, \"Resizing framebuffer \".concat(this.id, \" to \").concat(width, \"x\").concat(height))();\n      }\n\n      for (var attachmentPoint in this.attachments) {\n        this.attachments[attachmentPoint].resize({\n          width: width,\n          height: height\n        });\n      }\n\n      this.width = width;\n      this.height = height;\n      return this;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(attachments) {\n      var _this2 = this;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$clearAttachment = _ref5.clearAttachments,\n          clearAttachments = _ref5$clearAttachment === void 0 ? false : _ref5$clearAttachment,\n          _ref5$resizeAttachmen = _ref5.resizeAttachments,\n          resizeAttachments = _ref5$resizeAttachmen === void 0 ? true : _ref5$resizeAttachmen;\n\n      var newAttachments = {};\n\n      if (clearAttachments) {\n        Object.keys(this.attachments).forEach(function (key) {\n          newAttachments[key] = null;\n        });\n      }\n\n      Object.assign(newAttachments, attachments);\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      for (var key in newAttachments) {\n        assert(key !== undefined, 'Misspelled framebuffer binding point?');\n        var attachment = Number(key);\n        var descriptor = newAttachments[attachment];\n        var object = descriptor;\n\n        if (!object) {\n          this._unattach(attachment);\n        } else if (object instanceof Renderbuffer) {\n          this._attachRenderbuffer({\n            attachment: attachment,\n            renderbuffer: object\n          });\n        } else if (Array.isArray(descriptor)) {\n          var _descriptor = _slicedToArray(descriptor, 3),\n              texture = _descriptor[0],\n              _descriptor$ = _descriptor[1],\n              layer = _descriptor$ === void 0 ? 0 : _descriptor$,\n              _descriptor$2 = _descriptor[2],\n              level = _descriptor$2 === void 0 ? 0 : _descriptor$2;\n\n          object = texture;\n\n          this._attachTexture({\n            attachment: attachment,\n            texture: texture,\n            layer: layer,\n            level: level\n          });\n        } else {\n          this._attachTexture({\n            attachment: attachment,\n            texture: object,\n            layer: 0,\n            level: 0\n          });\n        }\n\n        if (resizeAttachments && object) {\n          object.resize({\n            width: this.width,\n            height: this.height\n          });\n        }\n      }\n\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      Object.assign(this.attachments, attachments);\n      Object.keys(this.attachments).filter(function (key) {\n        return !_this2.attachments[key];\n      }).forEach(function (key) {\n        delete _this2.attachments[key];\n      });\n    }\n  }, {\n    key: \"checkStatus\",\n    value: function checkStatus() {\n      var gl = this.gl;\n      var prevHandle = gl.bindFramebuffer(36160, this.handle);\n      var status = gl.checkFramebufferStatus(36160);\n      gl.bindFramebuffer(36160, prevHandle || null);\n\n      if (status !== 36053) {\n        throw new Error(_getFrameBufferStatus(status));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          color = _ref6.color,\n          depth = _ref6.depth,\n          stencil = _ref6.stencil,\n          _ref6$drawBuffers = _ref6.drawBuffers,\n          drawBuffers = _ref6$drawBuffers === void 0 ? [] : _ref6$drawBuffers;\n\n      var prevHandle = this.gl.bindFramebuffer(36160, this.handle);\n\n      if (color || depth || stencil) {\n        _clear(this.gl, {\n          color: color,\n          depth: depth,\n          stencil: stencil\n        });\n      }\n\n      drawBuffers.forEach(function (value, drawBuffer) {\n        clearBuffer({\n          drawBuffer: drawBuffer,\n          value: value\n        });\n      });\n      this.gl.bindFramebuffer(36160, prevHandle || null);\n      return this;\n    }\n  }, {\n    key: \"readPixels\",\n    value: function readPixels() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixels() is no logner supported, use readPixelsToArray(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"readPixelsToBuffer\",\n    value: function readPixelsToBuffer() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.readPixelsToBuffer()is no logner supported, use readPixelsToBuffer(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToDataUrl\",\n    value: function copyToDataUrl() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToDataUrl() is no logner supported, use copyToDataUrl(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToImage\",\n    value: function copyToImage() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToImage() is no logner supported, use copyToImage(framebuffer)')();\n\n      return null;\n    }\n  }, {\n    key: \"copyToTexture\",\n    value: function copyToTexture() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.copyToTexture({...}) is no logner supported, use copyToTexture(source, target, opts})')();\n\n      return null;\n    }\n  }, {\n    key: \"blit\",\n    value: function blit() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _log.error('Framebuffer.blit({...}) is no logner supported, use blit(source, target, opts)')();\n\n      return null;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate(_ref7) {\n      var _ref7$attachments = _ref7.attachments,\n          attachments = _ref7$attachments === void 0 ? [] : _ref7$attachments,\n          _ref7$x = _ref7.x,\n          x = _ref7$x === void 0 ? 0 : _ref7$x,\n          _ref7$y = _ref7.y,\n          y = _ref7$y === void 0 ? 0 : _ref7$y,\n          width = _ref7.width,\n          height = _ref7.height;\n      var gl = this.gl;\n      assertWebGL2Context(gl);\n      var prevHandle = gl.bindFramebuffer(36008, this.handle);\n      var invalidateAll = x === 0 && y === 0 && width === undefined && height === undefined;\n\n      if (invalidateAll) {\n        gl.invalidateFramebuffer(36008, attachments);\n      } else {\n        gl.invalidateFramebuffer(36008, attachments, x, y, width, height);\n      }\n\n      gl.bindFramebuffer(36008, prevHandle);\n      return this;\n    }\n  }, {\n    key: \"getAttachmentParameter\",\n    value: function getAttachmentParameter(attachment, pname, keys) {\n      var value = this._getAttachmentParameterFallback(pname);\n\n      if (value === null) {\n        this.gl.bindFramebuffer(36160, this.handle);\n        value = this.gl.getFramebufferAttachmentParameter(36160, attachment, pname);\n        this.gl.bindFramebuffer(36160, null);\n      }\n\n      if (keys && value > 1000) {\n        value = getKey(this.gl, value);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"getAttachmentParameters\",\n    value: function getAttachmentParameters() {\n      var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 36064;\n      var keys = arguments.length > 1 ? arguments[1] : undefined;\n      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.constructor.ATTACHMENT_PARAMETERS || [];\n      var values = {};\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = parameters[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var pname = _step.value;\n          var key = keys ? getKey(this.gl, pname) : pname;\n          values[key] = this.getAttachmentParameter(attachment, pname, keys);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return values;\n    }\n  }, {\n    key: \"getParameters\",\n    value: function getParameters() {\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var attachments = Object.keys(this.attachments);\n      var parameters = {};\n\n      for (var _i = 0, _attachments = attachments; _i < _attachments.length; _i++) {\n        var attachmentName = _attachments[_i];\n        var attachment = Number(attachmentName);\n        var key = keys ? getKey(this.gl, attachment) : attachment;\n        parameters[key] = this.getAttachmentParameters(attachment, keys);\n      }\n\n      return parameters;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (typeof window !== 'undefined') {\n        window.open(copyToDataUrl(this), 'luma-debug-texture');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      var priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (priority > _log.priority || typeof window === 'undefined') {\n        return this;\n      }\n\n      message = message || \"Framebuffer \".concat(this.id);\n      var image = copyToDataUrl(this, {\n        maxHeight: 100\n      });\n\n      _log.image({\n        priority: priority,\n        message: message,\n        image: image\n      }, message)();\n\n      return this;\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref8$target = _ref8.target,\n          target = _ref8$target === void 0 ? 36160 : _ref8$target;\n\n      this.gl.bindFramebuffer(target, this.handle);\n      return this;\n    }\n  }, {\n    key: \"unbind\",\n    value: function unbind() {\n      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref9$target = _ref9.target,\n          target = _ref9$target === void 0 ? 36160 : _ref9$target;\n\n      this.gl.bindFramebuffer(target, null);\n      return this;\n    }\n  }, {\n    key: \"_createDefaultAttachments\",\n    value: function _createDefaultAttachments(color, depth, stencil, width, height) {\n      var defaultAttachments = null;\n\n      if (color) {\n        var _parameters;\n\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36064] = new Texture2D(this.gl, {\n          id: \"\".concat(this.id, \"-color0\"),\n          pixels: null,\n          format: 6408,\n          type: 5121,\n          width: width,\n          height: height,\n          mipmaps: false,\n          parameters: (_parameters = {}, _defineProperty(_parameters, 10241, 9728), _defineProperty(_parameters, 10240, 9728), _defineProperty(_parameters, 10242, 33071), _defineProperty(_parameters, 10243, 33071), _parameters)\n        });\n      }\n\n      if (depth && stencil) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[33306] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth-stencil\"),\n          format: 35056,\n          width: width,\n          height: 111\n        });\n      } else if (depth) {\n        defaultAttachments = defaultAttachments || {};\n        defaultAttachments[36096] = new Renderbuffer(this.gl, {\n          id: \"\".concat(this.id, \"-depth\"),\n          format: 33189,\n          width: width,\n          height: height\n        });\n      } else if (stencil) {\n        assert(false);\n      }\n\n      return defaultAttachments;\n    }\n  }, {\n    key: \"_unattach\",\n    value: function _unattach(attachment) {\n      var oldAttachment = this.attachments[attachment];\n\n      if (!oldAttachment) {\n        return;\n      }\n\n      if (oldAttachment instanceof Renderbuffer) {\n        this.gl.framebufferRenderbuffer(36160, attachment, 36161, null);\n      } else {\n        this.gl.framebufferTexture2D(36160, attachment, 3553, null, 0);\n      }\n\n      delete this.attachments[attachment];\n    }\n  }, {\n    key: \"_attachRenderbuffer\",\n    value: function _attachRenderbuffer(_ref10) {\n      var _ref10$attachment = _ref10.attachment,\n          attachment = _ref10$attachment === void 0 ? 36064 : _ref10$attachment,\n          renderbuffer = _ref10.renderbuffer;\n      var gl = this.gl;\n      gl.framebufferRenderbuffer(36160, attachment, 36161, renderbuffer.handle);\n      this.attachments[attachment] = renderbuffer;\n    }\n  }, {\n    key: \"_attachTexture\",\n    value: function _attachTexture(_ref11) {\n      var _ref11$attachment = _ref11.attachment,\n          attachment = _ref11$attachment === void 0 ? 36064 : _ref11$attachment,\n          texture = _ref11.texture,\n          layer = _ref11.layer,\n          level = _ref11.level;\n      var gl = this.gl;\n      gl.bindTexture(texture.target, texture.handle);\n\n      switch (texture.target) {\n        case 35866:\n        case 32879:\n          gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);\n          break;\n\n        case 34067:\n          var face = mapIndexToCubeMapFace(layer);\n          gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);\n          break;\n\n        case 3553:\n          gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);\n          break;\n\n        default:\n          assert(false, 'Illegal texture type');\n      }\n\n      gl.bindTexture(texture.target, null);\n      this.attachments[attachment] = texture;\n    }\n  }, {\n    key: \"_setReadBuffer\",\n    value: function _setReadBuffer(gl, readBuffer) {\n      if (isWebGL2(gl)) {\n        gl.readBuffer(readBuffer);\n      } else {\n        assert(readBuffer === 36064 || readBuffer === 1029, ERR_MULTIPLE_RENDERTARGETS);\n      }\n\n      this.readBuffer = readBuffer;\n    }\n  }, {\n    key: \"_setDrawBuffers\",\n    value: function _setDrawBuffers(gl, drawBuffers) {\n      if (isWebGL2(gl)) {\n        gl.drawBuffers(drawBuffers);\n      } else {\n        var ext = gl.getExtension('WEBGL.draw_buffers');\n\n        if (ext) {\n          ext.drawBuffersWEBGL(drawBuffers);\n        } else {\n          assert(drawBuffers.length === 1 && (drawBuffers[0] === 36064 || drawBuffers[0] === 1029), ERR_MULTIPLE_RENDERTARGETS);\n        }\n      }\n\n      this.drawBuffers = drawBuffers;\n    }\n  }, {\n    key: \"_getAttachmentParameterFallback\",\n    value: function _getAttachmentParameterFallback(pname) {\n      var caps = getFeatures(this.gl);\n\n      switch (pname) {\n        case 36052:\n          return !caps.webgl2 ? 0 : null;\n\n        case 33298:\n        case 33299:\n        case 33300:\n        case 33301:\n        case 33302:\n        case 33303:\n          return !caps.webgl2 ? 8 : null;\n\n        case 33297:\n          return !caps.webgl2 ? 5125 : null;\n\n        case 33296:\n          return !caps.webgl2 && !caps.EXT_sRGB ? 9729 : null;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"_createHandle\",\n    value: function _createHandle() {\n      return this.gl.createFramebuffer();\n    }\n  }, {\n    key: \"_deleteHandle\",\n    value: function _deleteHandle() {\n      this.gl.deleteFramebuffer(this.handle);\n    }\n  }, {\n    key: \"_bindHandle\",\n    value: function _bindHandle(handle) {\n      return this.gl.bindFramebuffer(36160, handle);\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"texture\",\n    get: function get() {\n      return this.attachments[36064] || null;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.attachments[36096] || this.attachments[33306] || null;\n    }\n  }, {\n    key: \"stencil\",\n    get: function get() {\n      return this.attachments[36128] || this.attachments[33306] || null;\n    }\n  }]);\n\n  return Framebuffer;\n}(Resource);\n\nexport { Framebuffer as default };\n\nfunction mapIndexToCubeMapFace(layer) {\n  return layer < 34069 ? layer + 34069 : layer;\n}\n\nfunction _getFrameBufferStatus(status) {\n  var STATUS = Framebuffer.STATUS || {};\n  return STATUS[status] || \"Framebuffer error \".concat(status);\n}\n\nexport var FRAMEBUFFER_ATTACHMENT_PARAMETERS = [36049, 36048, 33296, 33298, 33299, 33300, 33301, 33302, 33303];\nFramebuffer.ATTACHMENT_PARAMETERS = FRAMEBUFFER_ATTACHMENT_PARAMETERS;","map":null,"metadata":{},"sourceType":"module"}