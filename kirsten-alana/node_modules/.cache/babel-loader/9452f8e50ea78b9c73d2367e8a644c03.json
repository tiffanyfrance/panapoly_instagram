{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { lngLatToWorld } from 'viewport-mercator-project';\nvar TILE_SIZE = 512;\n\nfunction getBoundingBox(viewport) {\n  var corners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([0, viewport.height]), viewport.unproject([viewport.width, viewport.height])];\n  return [corners.reduce(function (minLng, p) {\n    return minLng < p[0] ? minLng : p[0];\n  }, 180), corners.reduce(function (minLat, p) {\n    return minLat < p[1] ? minLat : p[1];\n  }, 90), corners.reduce(function (maxLng, p) {\n    return maxLng > p[0] ? maxLng : p[0];\n  }, -180), corners.reduce(function (maxLat, p) {\n    return maxLat > p[1] ? maxLat : p[1];\n  }, -90)];\n}\n\nfunction pixelsToTileIndex(a) {\n  return Math.floor(a / TILE_SIZE);\n}\n\nexport function getTileIndices(viewport, maxZoom, minZoom) {\n  var z = Math.floor(viewport.zoom);\n\n  if (minZoom && z < minZoom) {\n    return [];\n  }\n\n  viewport = new viewport.constructor(Object.assign({}, viewport, {\n    zoom: z\n  }));\n  var bbox = getBoundingBox(viewport);\n\n  var _lngLatToWorld$map = lngLatToWorld([bbox[0], bbox[3]], viewport.scale).map(pixelsToTileIndex),\n      _lngLatToWorld$map2 = _slicedToArray(_lngLatToWorld$map, 2),\n      minX = _lngLatToWorld$map2[0],\n      minY = _lngLatToWorld$map2[1];\n\n  var _lngLatToWorld$map3 = lngLatToWorld([bbox[2], bbox[1]], viewport.scale).map(pixelsToTileIndex),\n      _lngLatToWorld$map4 = _slicedToArray(_lngLatToWorld$map3, 2),\n      maxX = _lngLatToWorld$map4[0],\n      maxY = _lngLatToWorld$map4[1];\n\n  var indices = [];\n\n  for (var x = minX; x <= maxX; x++) {\n    for (var y = minY; y <= maxY; y++) {\n      if (maxZoom && z > maxZoom) {\n        indices.push(getAdjustedTileIndex({\n          x: x,\n          y: y,\n          z: z\n        }, maxZoom));\n      } else {\n        indices.push({\n          x: x,\n          y: y,\n          z: z\n        });\n      }\n    }\n  }\n\n  return indices;\n}\n\nfunction getAdjustedTileIndex(_ref, adjustedZ) {\n  var x = _ref.x,\n      y = _ref.y,\n      z = _ref.z;\n  var m = Math.pow(2, z - adjustedZ);\n  return {\n    x: Math.floor(x / m),\n    y: Math.floor(y / m),\n    z: adjustedZ\n  };\n}","map":null,"metadata":{},"sourceType":"module"}