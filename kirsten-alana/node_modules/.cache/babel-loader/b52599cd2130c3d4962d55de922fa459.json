{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport Texture from './texture';\nimport { assertWebGLContext } from '../webgl-utils';\nimport { log } from '../utils';\nvar FACES = [34069, 34070, 34071, 34072, 34073, 34074];\n\nvar TextureCube = function (_Texture) {\n  _inherits(TextureCube, _Texture);\n\n  function TextureCube(gl) {\n    var _this;\n\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextureCube);\n\n    assertWebGLContext(gl);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextureCube).call(this, gl, Object.assign({}, props, {\n      target: 34067\n    })));\n\n    _this.initialize(props);\n\n    Object.seal(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TextureCube, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this2 = this;\n\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _props$mipmaps = props.mipmaps,\n          mipmaps = _props$mipmaps === void 0 ? true : _props$mipmaps,\n          _props$parameters = props.parameters,\n          parameters = _props$parameters === void 0 ? {} : _props$parameters;\n      this.opts = props;\n      this.setCubeMapImageData(props).then(function () {\n        _this2.loaded = true;\n\n        if (mipmaps) {\n          _this2.generateMipmap(props);\n        }\n\n        _this2.setParameters(parameters);\n      });\n    }\n  }, {\n    key: \"subImage\",\n    value: function subImage(_ref) {\n      var face = _ref.face,\n          data = _ref.data,\n          _ref$x = _ref.x,\n          x = _ref$x === void 0 ? 0 : _ref$x,\n          _ref$y = _ref.y,\n          y = _ref$y === void 0 ? 0 : _ref$y,\n          _ref$mipmapLevel = _ref.mipmapLevel,\n          mipmapLevel = _ref$mipmapLevel === void 0 ? 0 : _ref$mipmapLevel;\n      return this._subImage({\n        target: face,\n        data: data,\n        x: x,\n        y: y,\n        mipmapLevel: mipmapLevel\n      });\n    }\n  }, {\n    key: \"setCubeMapImageData\",\n    value: function () {\n      var _setCubeMapImageData = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n        var _this3 = this;\n\n        var width, height, pixels, data, _ref2$border, border, _ref2$format, format, _ref2$type, type, gl, imageDataMap, resolvedFaces;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                width = _ref2.width, height = _ref2.height, pixels = _ref2.pixels, data = _ref2.data, _ref2$border = _ref2.border, border = _ref2$border === void 0 ? 0 : _ref2$border, _ref2$format = _ref2.format, format = _ref2$format === void 0 ? 6408 : _ref2$format, _ref2$type = _ref2.type, type = _ref2$type === void 0 ? 5121 : _ref2$type;\n                gl = this.gl;\n                imageDataMap = pixels || data;\n                _context.next = 5;\n                return Promise.all(FACES.map(function (face) {\n                  var facePixels = imageDataMap[face];\n                  return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);\n                }));\n\n              case 5:\n                resolvedFaces = _context.sent;\n                this.bind();\n                FACES.forEach(function (face, index) {\n                  if (resolvedFaces[index].length > 1 && _this3.opts.mipmaps !== false) {\n                    log.warn(\"\".concat(_this3.id, \" has mipmap and multiple LODs.\"))();\n                  }\n\n                  resolvedFaces[index].forEach(function (image, lodLevel) {\n                    if (width && height) {\n                      gl.texImage2D(face, lodLevel, format, width, height, border, format, type, image);\n                    } else {\n                      gl.texImage2D(face, lodLevel, format, format, type, image);\n                    }\n                  });\n                });\n                this.unbind();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setCubeMapImageData(_x) {\n        return _setCubeMapImageData.apply(this, arguments);\n      }\n\n      return setCubeMapImageData;\n    }()\n  }, {\n    key: \"setImageDataForFace\",\n    value: function setImageDataForFace(options) {\n      var _this4 = this;\n\n      var face = options.face,\n          width = options.width,\n          height = options.height,\n          pixels = options.pixels,\n          data = options.data,\n          _options$border = options.border,\n          border = _options$border === void 0 ? 0 : _options$border,\n          _options$format = options.format,\n          format = _options$format === void 0 ? 6408 : _options$format,\n          _options$type = options.type,\n          type = _options$type === void 0 ? 5121 : _options$type;\n      var gl = this.gl;\n      var imageData = pixels || data;\n      this.bind();\n\n      if (imageData instanceof Promise) {\n        imageData.then(function (resolvedImageData) {\n          return _this4.setImageDataForFace(Object.assign({}, options, {\n            face: face,\n            data: resolvedImageData,\n            pixels: resolvedImageData\n          }));\n        });\n      } else if (this.width || this.height) {\n        gl.texImage2D(face, 0, format, width, height, border, format, type, imageData);\n      } else {\n        gl.texImage2D(face, 0, format, format, type, imageData);\n      }\n\n      return this;\n    }\n  }]);\n\n  return TextureCube;\n}(Texture);\n\nexport { TextureCube as default };\nTextureCube.FACES = FACES;","map":null,"metadata":{},"sourceType":"module"}