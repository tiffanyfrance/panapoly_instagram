{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _WEBGL2_CONTEXT_POLYF;\n\nimport assert from './assert';\nimport { getParameterPolyfill } from './polyfills/get-parameter-polyfill';\nvar OES_vertex_array_object = 'OES_vertex_array_object';\nvar ANGLE_instanced_arrays = 'ANGLE_instanced_arrays';\nvar WEBGL_draw_buffers = 'WEBGL_draw_buffers';\nvar EXT_disjoint_timer_query = 'EXT_disjoint_timer_query';\nvar EXT_texture_filter_anisotropic = 'EXT_texture_filter_anisotropic';\nvar ERR_VAO_NOT_SUPPORTED = 'VertexArray requires WebGL2 or OES_vertex_array_object extension';\n\nfunction isWebGL2(gl) {\n  return Boolean(gl && gl._version === 2);\n}\n\nfunction getExtensionData(gl, extension) {\n  return {\n    webgl2: isWebGL2(gl),\n    ext: gl.getExtension(extension)\n  };\n}\n\nexport var WEBGL2_CONTEXT_POLYFILLS = (_WEBGL2_CONTEXT_POLYF = {}, _defineProperty(_WEBGL2_CONTEXT_POLYF, OES_vertex_array_object, {\n  meta: {\n    suffix: 'OES'\n  },\n  createVertexArray: function createVertexArray() {\n    assert(false, ERR_VAO_NOT_SUPPORTED);\n  },\n  deleteVertexArray: function deleteVertexArray() {},\n  bindVertexArray: function bindVertexArray() {},\n  isVertexArray: function isVertexArray() {\n    return false;\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, ANGLE_instanced_arrays, {\n  meta: {\n    suffix: 'ANGLE'\n  },\n  vertexAttribDivisor: function vertexAttribDivisor(location, divisor) {\n    assert(divisor === 0, 'WebGL instanced rendering not supported');\n  },\n  drawElementsInstanced: function drawElementsInstanced() {},\n  drawArraysInstanced: function drawArraysInstanced() {}\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, WEBGL_draw_buffers, {\n  meta: {\n    suffix: 'WEBGL'\n  },\n  drawBuffers: function drawBuffers() {\n    assert(false);\n  }\n}), _defineProperty(_WEBGL2_CONTEXT_POLYF, EXT_disjoint_timer_query, {\n  meta: {\n    suffix: 'EXT'\n  },\n  createQuery: function createQuery() {\n    assert(false);\n  },\n  deleteQuery: function deleteQuery() {\n    assert(false);\n  },\n  beginQuery: function beginQuery() {\n    assert(false);\n  },\n  endQuery: function endQuery() {},\n  getQuery: function getQuery(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryParameter: function getQueryParameter(handle, pname) {\n    return this.getQueryObject(handle, pname);\n  },\n  getQueryObject: function getQueryObject() {}\n}), _WEBGL2_CONTEXT_POLYF);\nexport var WEBGL2_CONTEXT_OVERRIDES = {\n  readBuffer: function readBuffer(gl, originalFunc, attachment) {\n    if (isWebGL2(gl)) {\n      originalFunc(attachment);\n    } else {}\n  },\n  getVertexAttrib: function getVertexAttrib(gl, originalFunc, location, pname) {\n    var _getExtensionData = getExtensionData(gl, ANGLE_instanced_arrays),\n        webgl2 = _getExtensionData.webgl2,\n        ext = _getExtensionData.ext;\n\n    var result;\n\n    switch (pname) {\n      case 35069:\n        result = !webgl2 ? false : undefined;\n        break;\n\n      case 35070:\n        result = !webgl2 && !ext ? 0 : undefined;\n        break;\n\n      default:\n    }\n\n    return result !== undefined ? result : originalFunc(location, pname);\n  },\n  getProgramParameter: function getProgramParameter(gl, originalFunc, program, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 35967:\n          return 35981;\n\n        case 35971:\n          return 0;\n\n        case 35382:\n          return 0;\n\n        default:\n      }\n    }\n\n    return originalFunc(program, pname);\n  },\n  getInternalformatParameter: function getInternalformatParameter(gl, originalFunc, target, format, pname) {\n    if (!isWebGL2(gl)) {\n      switch (pname) {\n        case 32937:\n          return new Int32Array([0]);\n\n        default:\n      }\n    }\n\n    return gl.getInternalformatParameter(target, format, pname);\n  },\n  getTexParameter: function getTexParameter(gl, originalFunc, target, pname) {\n    switch (pname) {\n      case 34046:\n        var extensions = gl.luma.extensions;\n        var ext = extensions[EXT_texture_filter_anisotropic];\n        pname = ext && ext.TEXTURE_MAX_ANISOTROPY_EXT || 34046;\n        break;\n\n      default:\n    }\n\n    return originalFunc(target, pname);\n  },\n  getParameter: getParameterPolyfill,\n  hint: function hint(gl, originalFunc, pname, value) {\n    return originalFunc(pname, value);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}