{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _awaitAsyncGenerator from \"@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _wrapAsyncGenerator from \"@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport { isBrowser } from '../utils/globals';\nimport { concatenateArrayBuffers } from './memory-copy-utils';\nexport function getStreamIterator(stream) {\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return stream;\n  }\n\n  if (typeof stream.getIterator === 'function') {\n    return stream.getIterator();\n  }\n\n  return isBrowser ? makeBrowserStreamIterator(stream) : makeNodeStreamIterator(stream);\n}\n\nfunction makeBrowserStreamIterator(_x) {\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction _makeBrowserStreamIterator() {\n  _makeBrowserStreamIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee(stream) {\n    var reader, _ref, done, value;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            reader = stream.getReader();\n            _context.prev = 1;\n\n          case 2:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 5;\n            return _awaitAsyncGenerator(reader.read());\n\n          case 5:\n            _ref = _context.sent;\n            done = _ref.done;\n            value = _ref.value;\n\n            if (!done) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 10:\n            _context.next = 12;\n            return value;\n\n          case 12:\n            _context.next = 2;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            reader.releaseLock();\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1,, 14, 17]]);\n  }));\n  return _makeBrowserStreamIterator.apply(this, arguments);\n}\n\nfunction makeNodeStreamIterator(_x2) {\n  return _makeNodeStreamIterator.apply(this, arguments);\n}\n\nfunction _makeNodeStreamIterator() {\n  _makeNodeStreamIterator = _wrapAsyncGenerator(_regeneratorRuntime.mark(function _callee2(stream) {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _awaitAsyncGenerator(stream);\n\n          case 2:\n            stream = _context2.sent;\n\n          case 3:\n            if (!true) {\n              _context2.next = 15;\n              break;\n            }\n\n            data = stream.read();\n\n            if (!(data !== null)) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 8;\n            return data;\n\n          case 8:\n            return _context2.abrupt(\"continue\", 3);\n\n          case 9:\n            if (!stream._readableState.ended) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            _context2.next = 13;\n            return _awaitAsyncGenerator(onceReadable(stream));\n\n          case 13:\n            _context2.next = 3;\n            break;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _makeNodeStreamIterator.apply(this, arguments);\n}\n\nfunction onceReadable(_x3) {\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _onceReadable() {\n  _onceReadable = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(stream) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve) {\n              stream.once('readable', resolve);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _onceReadable.apply(this, arguments);\n}\n\nexport function concatenateReadStream(readStream) {\n  var arrayBuffer = new ArrayBuffer();\n  var string = '';\n  return new Promise(function (resolve, reject) {\n    readStream.data(function (chunk) {\n      if (typeof chunk === 'string') {\n        string += chunk;\n      } else {\n        arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunk);\n      }\n    });\n    readStream.on('error', function (error) {\n      return reject(error);\n    });\n    readStream.on('end', function () {\n      if (readStream.complete) {\n        resolve(arrayBuffer || string);\n      } else {\n        reject('The connection was terminated while the message was still being sent');\n      }\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}