{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread\";\nimport assert from '../../utils/assert';\nexport function isLoaderObject(loader) {\n  if (!loader) {\n    return false;\n  }\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n  }\n\n  var hasParser = loader.parseTextSync || loader.parseSync || loader.parse || loader.loadAndParse || loader.parseStream || loader.parseInBatches || loader.worker;\n  return hasParser;\n}\nexport function normalizeLoader(loader) {\n  assert(isLoaderObject(loader));\n  var options;\n\n  if (Array.isArray(loader)) {\n    loader = loader[0];\n    options = loader[1];\n    loader = _objectSpread({}, loader, {\n      options: _objectSpread({}, loader.options, {\n        options: options\n      })\n    });\n  }\n\n  if (loader.extension) {\n    loader.extensions = loader.extensions || [loader.extension];\n    delete loader.extension;\n  }\n\n  if (!Array.isArray(loader.extensions)) {\n    loader.extensions = [loader.extensions];\n  }\n\n  assert(loader.extensions && loader.extensions.length > 0 && loader.extensions[0]);\n\n  if (loader.parseTextSync) {\n    loader.text = true;\n  }\n\n  if (!loader.text) {\n    loader.binary = true;\n  }\n\n  return loader;\n}","map":null,"metadata":{},"sourceType":"module"}