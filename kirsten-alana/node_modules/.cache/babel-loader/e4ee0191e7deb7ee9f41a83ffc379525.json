{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport assert from '../utils/assert';\nimport parseWithWorker from './parse-with-worker';\nimport { getArrayBufferOrStringFromDataSync, getArrayBufferOrStringFromData, getAsyncIteratorFromData, getIteratorFromData, getUrlFromData } from './loader-utils/get-data';\nexport function parseWithLoader(_x, _x2) {\n  return _parseWithLoader.apply(this, arguments);\n}\n\nfunction _parseWithLoader() {\n  _parseWithLoader = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(data, loader) {\n    var options,\n        url,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            url = _args.length > 3 ? _args[3] : undefined;\n            url = url || getUrlFromData(data);\n            _context.next = 5;\n            return getArrayBufferOrStringFromData(data, loader);\n\n          case 5:\n            data = _context.sent;\n\n            if (!(loader.parseTextSync && typeof data === 'string')) {\n              _context.next = 9;\n              break;\n            }\n\n            options.dataType = 'text';\n            return _context.abrupt(\"return\", loader.parseTextSync(data, options, url, loader));\n\n          case 9:\n            if (!loader.parseSync) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\", loader.parseSync(data, options, url, loader));\n\n          case 11:\n            if (!loader.parse) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 14;\n            return loader.parse(data, options, url, loader);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            if (!loader.worker) {\n              _context.next = 19;\n              break;\n            }\n\n            _context.next = 18;\n            return parseWithWorker(loader.worker, data, options);\n\n          case 18:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 19:\n            return _context.abrupt(\"return\", assert(false));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _parseWithLoader.apply(this, arguments);\n}\n\nexport function parseWithLoaderSync(data, loader) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var url = arguments.length > 3 ? arguments[3] : undefined;\n  data = getArrayBufferOrStringFromDataSync(data, loader);\n\n  if (loader.parseTextSync && typeof data === 'string') {\n    return loader.parseTextSync(data, options, url, loader);\n  }\n\n  if (loader.parseSync) {\n    return loader.parseSync(data, options, url, loader);\n  }\n\n  return assert(false);\n}\nexport function parseWithLoaderInBatches(_x3, _x4) {\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatches() {\n  _parseWithLoaderInBatches = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(data, loader) {\n    var options,\n        url,\n        inputIterator,\n        outputIterator,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            url = _args2.length > 3 ? _args2[3] : undefined;\n\n            if (!loader.parseInBatches) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return getAsyncIteratorFromData(data);\n\n          case 5:\n            inputIterator = _context2.sent;\n            outputIterator = loader.parseInBatches(inputIterator, options, url, loader);\n            return _context2.abrupt(\"return\", outputIterator);\n\n          case 8:\n            return _context2.abrupt(\"return\", null);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _parseWithLoaderInBatches.apply(this, arguments);\n}\n\nexport function parseWithLoaderInBatchesSync(_x5, _x6) {\n  return _parseWithLoaderInBatchesSync.apply(this, arguments);\n}\n\nfunction _parseWithLoaderInBatchesSync() {\n  _parseWithLoaderInBatchesSync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(data, loader) {\n    var options,\n        url,\n        inputIterator,\n        outputIterator,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            url = _args3.length > 3 ? _args3[3] : undefined;\n\n            if (!loader.parseInBatchesSync) {\n              _context3.next = 6;\n              break;\n            }\n\n            inputIterator = getIteratorFromData(data);\n            outputIterator = loader.parseInBatchesSync(inputIterator, options, url, loader, url);\n            return _context3.abrupt(\"return\", outputIterator);\n\n          case 6:\n            return _context3.abrupt(\"return\", assert(false));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _parseWithLoaderInBatchesSync.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}