{"version":3,"sources":["../../../src/lib/stat.js"],"names":["getHiResTimestamp","Stat","name","reset","addCount","subtractCount","value","count","time","lastTiming","_startTime","_timerPending","addTime"],"mappings":";;AAAA,OAAOA,iBAAP,MAA8B,2BAA9B;;IAEqBC,I;AACnB,gBAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL;AACD;;;;qCAGgB;AACf,WAAKC,QAAL,CAAc,CAAd;AACD;;;qCAGgB;AACf,WAAKC,aAAL,CAAmB,CAAnB;AACD;;;6BAGQC,K,EAAO;AACd,WAAKC,KAAL,IAAcD,KAAd;AACD;;;kCAGaA,K,EAAO;AACnB,WAAKC,KAAL,IAAcD,KAAd;AACD;;;4BAGOE,I,EAAM;AACZ,WAAKA,IAAL,IAAaA,IAAb;AACA,WAAKC,UAAL,GAAkBD,IAAlB;AACA,WAAKD,KAAL;AACD;;;gCAGW;AACV,WAAKG,UAAL,GAAkBV,iBAAiB,EAAnC;AACA,WAAKW,aAAL,GAAqB,IAArB;AACD;;;8BAGS;AACR,UAAI,CAAC,KAAKA,aAAV,EAAyB;AACvB;AACD;;AAED,WAAKC,OAAL,CAAaZ,iBAAiB,KAAK,KAAKU,UAAxC;AACA,WAAKC,aAAL,GAAqB,KAArB;AACD;;;qCAGgB;AACf,aAAO,KAAKJ,KAAL,GAAa,CAAb,GAAiB,KAAKC,IAAL,GAAY,KAAKD,KAAlC,GAA0C,CAAjD;AACD;;;4BAGO;AACN,aAAO,KAAKC,IAAL,GAAY,CAAZ,GAAgB,KAAKD,KAAL,IAAc,KAAKC,IAAL,GAAY,IAA1B,CAAhB,GAAkD,CAAzD;AACD;;;4BAEO;AACN,WAAKA,IAAL,GAAY,CAAZ;AACA,WAAKD,KAAL,GAAa,CAAb;AACA,WAAKE,UAAL,GAAkB,CAAlB;AACA,WAAKC,UAAL,GAAkB,CAAlB;AACA,WAAKC,aAAL,GAAqB,KAArB;AACD;;;;;;SAjEkBV,I","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name) {\n    this.name = name;\n    this.reset();\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n  }\n\n  // Increase count\n  addCount(value) {\n    this.count += value;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this.count -= value;\n  }\n\n  // Add an abritrary timing and bump the count\n  addTime(time) {\n    this.time += time;\n    this.lastTiming = time;\n    this.count++;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.count > 0 ? this.time / this.count : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.count / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.lastTiming = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n  }\n}\n"],"file":"stat.js"}