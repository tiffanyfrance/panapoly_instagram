{"version":3,"sources":["../../../src/lib/stat.js"],"names":["getHiResTimestamp","Stat","constructor","name","reset","incrementCount","addCount","decrementCount","subtractCount","value","count","addTime","time","lastTiming","timeStart","_startTime","_timerPending","timeEnd","getAverageTime","getHz"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,2BAA9B;AAEA,eAAe,MAAMC,IAAN,CAAW;AACxBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL;AACD;;AAGDC,EAAAA,cAAc,GAAG;AACf,SAAKC,QAAL,CAAc,CAAd;AACD;;AAGDC,EAAAA,cAAc,GAAG;AACf,SAAKC,aAAL,CAAmB,CAAnB;AACD;;AAGDF,EAAAA,QAAQ,CAACG,KAAD,EAAQ;AACd,SAAKC,KAAL,IAAcD,KAAd;AACD;;AAGDD,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,SAAKC,KAAL,IAAcD,KAAd;AACD;;AAGDE,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,SAAKA,IAAL,IAAaA,IAAb;AACA,SAAKC,UAAL,GAAkBD,IAAlB;AACA,SAAKF,KAAL;AACD;;AAGDI,EAAAA,SAAS,GAAG;AACV,SAAKC,UAAL,GAAkBf,iBAAiB,EAAnC;AACA,SAAKgB,aAAL,GAAqB,IAArB;AACD;;AAGDC,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAKD,aAAV,EAAyB;AACvB;AACD;;AAED,SAAKL,OAAL,CAAaX,iBAAiB,KAAK,KAAKe,UAAxC;AACA,SAAKC,aAAL,GAAqB,KAArB;AACD;;AAGDE,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKR,KAAL,GAAa,CAAb,GAAiB,KAAKE,IAAL,GAAY,KAAKF,KAAlC,GAA0C,CAAjD;AACD;;AAGDS,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKP,IAAL,GAAY,CAAZ,GAAgB,KAAKF,KAAL,IAAc,KAAKE,IAAL,GAAY,IAA1B,CAAhB,GAAkD,CAAzD;AACD;;AAEDR,EAAAA,KAAK,GAAG;AACN,SAAKQ,IAAL,GAAY,CAAZ;AACA,SAAKF,KAAL,GAAa,CAAb;AACA,SAAKG,UAAL,GAAkB,CAAlB;AACA,SAAKE,UAAL,GAAkB,CAAlB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACD;;AAjEuB","sourcesContent":["import getHiResTimestamp from '../utils/hi-res-timestamp';\n\nexport default class Stat {\n  constructor(name) {\n    this.name = name;\n    this.reset();\n  }\n\n  // Call to increment count (+1)\n  incrementCount() {\n    this.addCount(1);\n  }\n\n  // Call to decrement count (-1)\n  decrementCount() {\n    this.subtractCount(1);\n  }\n\n  // Increase count\n  addCount(value) {\n    this.count += value;\n  }\n\n  // Decrease count\n  subtractCount(value) {\n    this.count -= value;\n  }\n\n  // Add an abritrary timing and bump the count\n  addTime(time) {\n    this.time += time;\n    this.lastTiming = time;\n    this.count++;\n  }\n\n  // Start a timer\n  timeStart() {\n    this._startTime = getHiResTimestamp();\n    this._timerPending = true;\n  }\n\n  // End a timer. Adds to time and bumps the timing count.\n  timeEnd() {\n    if (!this._timerPending) {\n      return;\n    }\n\n    this.addTime(getHiResTimestamp() - this._startTime);\n    this._timerPending = false;\n  }\n\n  // Calculate average time / count\n  getAverageTime() {\n    return this.count > 0 ? this.time / this.count : 0;\n  }\n\n  // Calculate counts per second\n  getHz() {\n    return this.time > 0 ? this.count / (this.time / 1000) : 0;\n  }\n\n  reset() {\n    this.time = 0;\n    this.count = 0;\n    this.lastTiming = 0;\n    this._startTime = 0;\n    this._timerPending = false;\n  }\n}\n"],"file":"stat.js"}